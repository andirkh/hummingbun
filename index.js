var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __toCommonJS = (from) => {
  const moduleCache = __toCommonJS.moduleCache ??= new WeakMap;
  var cached = moduleCache.get(from);
  if (cached)
    return cached;
  var to = __defProp({}, "__esModule", { value: true });
  var desc = { enumerable: false };
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key))
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
  }
  moduleCache.set(from, to);
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, {
      get: all2[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all2[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// node_modules/clean-css/lib/optimizer/level-0/optimize.js
var require_optimize = __commonJS((exports, module) => {
  var level0Optimize = function(tokens) {
    return tokens;
  };
  module.exports = level0Optimize;
});

// node_modules/clean-css/lib/optimizer/level-1/shorten-hex.js
var require_shorten_hex = __commonJS((exports, module) => {
  var hexConverter = function(match, prefix, colorValue, suffix) {
    return prefix + toHex[colorValue.toLowerCase()] + suffix;
  };
  var nameConverter = function(match, colorValue, suffix) {
    return toName[colorValue.toLowerCase()] + suffix;
  };
  var shortenHex = function(value) {
    var hasHex = value.indexOf("#") > -1;
    var shortened = value.replace(toHexPattern, hexConverter);
    if (shortened != value) {
      shortened = shortened.replace(toHexPattern, hexConverter);
    }
    return hasHex ? shortened.replace(toNamePattern, nameConverter) : shortened;
  };
  var COLORS = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#0ff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000",
    blanchedalmond: "#ffebcd",
    blue: "#00f",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#0ff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#f0f",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#0f0",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#f00",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#fff",
    whitesmoke: "#f5f5f5",
    yellow: "#ff0",
    yellowgreen: "#9acd32"
  };
  var toHex = {};
  var toName = {};
  for (name in COLORS) {
    hex = COLORS[name];
    if (name.length < hex.length) {
      toName[hex] = name;
    } else {
      toHex[name] = hex;
    }
  }
  var hex;
  var name;
  var toHexPattern = new RegExp("(^| |,|\\))(" + Object.keys(toHex).join("|") + ")( |,|\\)|$)", "ig");
  var toNamePattern = new RegExp("(" + Object.keys(toName).join("|") + ")([^a-f0-9]|$)", "ig");
  module.exports = shortenHex;
});

// node_modules/clean-css/lib/optimizer/level-1/shorten-hsl.js
var require_shorten_hsl = __commonJS((exports, module) => {
  var hslToRgb = function(h, s, l) {
    var r, g, b;
    h = h % 360;
    if (h < 0)
      h += 360;
    h = ~~h / 360;
    if (s < 0)
      s = 0;
    else if (s > 100)
      s = 100;
    s = ~~s / 100;
    if (l < 0)
      l = 0;
    else if (l > 100)
      l = 100;
    l = ~~l / 100;
    if (s === 0) {
      r = g = b = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hueToRgb(p, q, h + 1 / 3);
      g = hueToRgb(p, q, h);
      b = hueToRgb(p, q, h - 1 / 3);
    }
    return [~~(r * 255), ~~(g * 255), ~~(b * 255)];
  };
  var hueToRgb = function(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  };
  var shortenHsl = function(hue, saturation, lightness) {
    var asRgb = hslToRgb(hue, saturation, lightness);
    var redAsHex = asRgb[0].toString(16);
    var greenAsHex = asRgb[1].toString(16);
    var blueAsHex = asRgb[2].toString(16);
    return "#" + ((redAsHex.length == 1 ? "0" : "") + redAsHex) + ((greenAsHex.length == 1 ? "0" : "") + greenAsHex) + ((blueAsHex.length == 1 ? "0" : "") + blueAsHex);
  };
  module.exports = shortenHsl;
});

// node_modules/clean-css/lib/optimizer/level-1/shorten-rgb.js
var require_shorten_rgb = __commonJS((exports, module) => {
  var shortenRgb = function(red, green, blue) {
    var normalizedRed = Math.max(0, Math.min(parseInt(red), 255));
    var normalizedGreen = Math.max(0, Math.min(parseInt(green), 255));
    var normalizedBlue = Math.max(0, Math.min(parseInt(blue), 255));
    return "#" + ("00000" + (normalizedRed << 16 | normalizedGreen << 8 | normalizedBlue).toString(16)).slice(-6);
  };
  module.exports = shortenRgb;
});

// node_modules/clean-css/lib/utils/natural-compare.js
var require_natural_compare = __commonJS((exports, module) => {
  var naturalCompare = function(value1, value2) {
    var keys1 = ("" + value1).split(NUMBER_PATTERN).map(tryParseInt);
    var keys2 = ("" + value2).split(NUMBER_PATTERN).map(tryParseInt);
    var key1;
    var key2;
    var compareFirst = Math.min(keys1.length, keys2.length);
    var i, l;
    for (i = 0, l = compareFirst;i < l; i++) {
      key1 = keys1[i];
      key2 = keys2[i];
      if (key1 != key2) {
        return key1 > key2 ? 1 : -1;
      }
    }
    return keys1.length > keys2.length ? 1 : keys1.length == keys2.length ? 0 : -1;
  };
  var tryParseInt = function(value) {
    return "" + parseInt(value) == value ? parseInt(value) : value;
  };
  var NUMBER_PATTERN = /([0-9]+)/;
  module.exports = naturalCompare;
});

// node_modules/clean-css/lib/optimizer/level-1/sort-selectors.js
var require_sort_selectors = __commonJS((exports, module) => {
  var naturalSorter = function(scope1, scope2) {
    return naturalCompare(scope1[1], scope2[1]);
  };
  var standardSorter = function(scope1, scope2) {
    return scope1[1] > scope2[1] ? 1 : -1;
  };
  var sortSelectors = function(selectors, method) {
    switch (method) {
      case "natural":
        return selectors.sort(naturalSorter);
      case "standard":
        return selectors.sort(standardSorter);
      case "none":
      case false:
        return selectors;
    }
  };
  var naturalCompare = require_natural_compare();
  module.exports = sortSelectors;
});

// node:os
var exports_os = {};
__export(exports_os, {
  uptime: () => {
    {
      return A;
    }
  },
  type: () => {
    {
      return V;
    }
  },
  totalmem: () => {
    {
      return N;
    }
  },
  tmpdir: () => {
    {
      return U;
    }
  },
  release: () => {
    {
      return x;
    }
  },
  platform: () => {
    {
      return O;
    }
  },
  networkInterfaces: () => {
    {
      return j;
    }
  },
  loadavg: () => {
    {
      return y;
    }
  },
  hostname: () => {
    {
      return k;
    }
  },
  homedir: () => {
    {
      return _;
    }
  },
  getNetworkInterfaces: () => {
    {
      return B;
    }
  },
  freemem: () => {
    {
      return I;
    }
  },
  endianness: () => {
    {
      return L;
    }
  },
  default: () => {
    {
      return E;
    }
  },
  cpus: () => {
    {
      return b;
    }
  },
  arch: () => {
    {
      return M;
    }
  },
  EOL: () => {
    {
      return X;
    }
  }
});
var c, a, m, s, p, d, l, h, g, f, u, E, L, k, y, A, I, N, b, V, x, M, O, U, X, _, j, B;
var init_os = __esm(() => {
  c = Object.create;
  a = Object.defineProperty;
  m = Object.getOwnPropertyDescriptor;
  s = Object.getOwnPropertyNames;
  p = Object.getPrototypeOf;
  d = Object.prototype.hasOwnProperty;
  l = (r, n) => () => (n || r((n = { exports: {} }).exports, n), n.exports);
  h = (r, n, t, i) => {
    if (n && typeof n == "object" || typeof n == "function")
      for (let o of s(n))
        !d.call(r, o) && o !== t && a(r, o, { get: () => n[o], enumerable: !(i = m(n, o)) || i.enumerable });
    return r;
  };
  g = (r, n, t) => (t = r != null ? c(p(r)) : {}, h(n || !r || !r.__esModule ? a(t, "default", { value: r, enumerable: true }) : t, r));
  f = l((e) => {
    e.endianness = function() {
      return "LE";
    };
    e.hostname = function() {
      return typeof location < "u" ? location.hostname : "";
    };
    e.loadavg = function() {
      return [];
    };
    e.uptime = function() {
      return 0;
    };
    e.freemem = function() {
      return Number.MAX_VALUE;
    };
    e.totalmem = function() {
      return Number.MAX_VALUE;
    };
    e.cpus = function() {
      return [];
    };
    e.type = function() {
      return "Browser";
    };
    e.release = function() {
      return typeof navigator < "u" ? navigator.appVersion : "";
    };
    e.networkInterfaces = e.getNetworkInterfaces = function() {
      return {};
    };
    e.arch = function() {
      return "javascript";
    };
    e.platform = function() {
      return "browser";
    };
    e.tmpdir = e.tmpDir = function() {
      return "/tmp";
    };
    e.EOL = `
`;
    e.homedir = function() {
      return "/";
    };
  });
  u = g(f());
  E = u.default;
  ({ endianness: L, hostname: k, loadavg: y, uptime: A, freemem: I, totalmem: N, cpus: b, type: V, release: x, arch: M, platform: O, tmpdir: U, EOL: X, homedir: _, networkInterfaces: j, getNetworkInterfaces: B } = u.default);
});

// node_modules/clean-css/lib/utils/override.js
var require_override = __commonJS((exports, module) => {
  var override = function(source1, source2) {
    var target = {};
    var key1;
    var key2;
    var item;
    for (key1 in source1) {
      item = source1[key1];
      if (Array.isArray(item)) {
        target[key1] = item.slice(0);
      } else if (typeof item == "object" && item !== null) {
        target[key1] = override(item, {});
      } else {
        target[key1] = item;
      }
    }
    for (key2 in source2) {
      item = source2[key2];
      if (key2 in target && Array.isArray(item)) {
        target[key2] = item.slice(0);
      } else if (key2 in target && typeof item == "object" && item !== null) {
        target[key2] = override(target[key2], item);
      } else {
        target[key2] = item;
      }
    }
    return target;
  };
  module.exports = override;
});

// node_modules/clean-css/lib/options/format.js
var require_format = __commonJS((exports, module) => {
  var breaks = function(value) {
    var breakOptions = {};
    breakOptions[Breaks.AfterAtRule] = value;
    breakOptions[Breaks.AfterBlockBegins] = value;
    breakOptions[Breaks.AfterBlockEnds] = value;
    breakOptions[Breaks.AfterComment] = value;
    breakOptions[Breaks.AfterProperty] = value;
    breakOptions[Breaks.AfterRuleBegins] = value;
    breakOptions[Breaks.AfterRuleEnds] = value;
    breakOptions[Breaks.BeforeBlockEnds] = value;
    breakOptions[Breaks.BetweenSelectors] = value;
    return breakOptions;
  };
  var spaces = function(value) {
    var spaceOptions = {};
    spaceOptions[Spaces.AroundSelectorRelation] = value;
    spaceOptions[Spaces.BeforeBlockBegins] = value;
    spaceOptions[Spaces.BeforeValue] = value;
    return spaceOptions;
  };
  var formatFrom = function(source) {
    if (source === undefined || source === false) {
      return false;
    }
    if (typeof source == "object" && "breakWith" in source) {
      source = override(source, { breakWith: mapBreakWith(source.breakWith) });
    }
    if (typeof source == "object" && "indentBy" in source) {
      source = override(source, { indentBy: parseInt(source.indentBy) });
    }
    if (typeof source == "object" && "indentWith" in source) {
      source = override(source, { indentWith: mapIndentWith(source.indentWith) });
    }
    if (typeof source == "object") {
      return override(DEFAULTS, source);
    }
    if (typeof source == "object") {
      return override(DEFAULTS, source);
    }
    if (typeof source == "string" && source == BEAUTIFY_ALIAS) {
      return override(DEFAULTS, {
        breaks: breaks(true),
        indentBy: 2,
        spaces: spaces(true)
      });
    }
    if (typeof source == "string" && source == KEEP_BREAKS_ALIAS) {
      return override(DEFAULTS, {
        breaks: {
          afterAtRule: true,
          afterBlockBegins: true,
          afterBlockEnds: true,
          afterComment: true,
          afterRuleEnds: true,
          beforeBlockEnds: true
        }
      });
    }
    if (typeof source == "string") {
      return override(DEFAULTS, toHash(source));
    }
    return DEFAULTS;
  };
  var toHash = function(string) {
    return string.split(OPTION_SEPARATOR).reduce(function(accumulator, directive) {
      var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];
      if (name == "breaks" || name == "spaces") {
        accumulator[name] = hashValuesToHash(value);
      } else if (name == "indentBy" || name == "wrapAt") {
        accumulator[name] = parseInt(value);
      } else if (name == "indentWith") {
        accumulator[name] = mapIndentWith(value);
      } else if (name == "breakWith") {
        accumulator[name] = mapBreakWith(value);
      }
      return accumulator;
    }, {});
  };
  var hashValuesToHash = function(string) {
    return string.split(HASH_VALUES_OPTION_SEPARATOR).reduce(function(accumulator, directive) {
      var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];
      accumulator[name] = normalizeValue(value);
      return accumulator;
    }, {});
  };
  var normalizeValue = function(value) {
    switch (value) {
      case FALSE_KEYWORD_1:
      case FALSE_KEYWORD_2:
        return false;
      case TRUE_KEYWORD_1:
      case TRUE_KEYWORD_2:
        return true;
      default:
        return value;
    }
  };
  var mapBreakWith = function(value) {
    switch (value) {
      case "windows":
      case "crlf":
      case BreakWith.CarriageReturnLineFeed:
        return BreakWith.CarriageReturnLineFeed;
      case "unix":
      case "lf":
      case BreakWith.LineFeed:
        return BreakWith.LineFeed;
      default:
        return systemLineBreak;
    }
  };
  var mapIndentWith = function(value) {
    switch (value) {
      case "space":
        return IndentWith.Space;
      case "tab":
        return IndentWith.Tab;
      default:
        return value;
    }
  };
  var systemLineBreak = (init_os(), __toCommonJS(exports_os)).EOL;
  var override = require_override();
  var Breaks = {
    AfterAtRule: "afterAtRule",
    AfterBlockBegins: "afterBlockBegins",
    AfterBlockEnds: "afterBlockEnds",
    AfterComment: "afterComment",
    AfterProperty: "afterProperty",
    AfterRuleBegins: "afterRuleBegins",
    AfterRuleEnds: "afterRuleEnds",
    BeforeBlockEnds: "beforeBlockEnds",
    BetweenSelectors: "betweenSelectors"
  };
  var BreakWith = {
    CarriageReturnLineFeed: "\r\n",
    LineFeed: "\n",
    System: systemLineBreak
  };
  var IndentWith = {
    Space: " ",
    Tab: "\t"
  };
  var Spaces = {
    AroundSelectorRelation: "aroundSelectorRelation",
    BeforeBlockBegins: "beforeBlockBegins",
    BeforeValue: "beforeValue"
  };
  var DEFAULTS = {
    breaks: breaks(false),
    breakWith: BreakWith.System,
    indentBy: 0,
    indentWith: IndentWith.Space,
    spaces: spaces(false),
    wrapAt: false,
    semicolonAfterLastProperty: false
  };
  var BEAUTIFY_ALIAS = "beautify";
  var KEEP_BREAKS_ALIAS = "keep-breaks";
  var OPTION_SEPARATOR = ";";
  var OPTION_NAME_VALUE_SEPARATOR = ":";
  var HASH_VALUES_OPTION_SEPARATOR = ",";
  var HASH_VALUES_NAME_VALUE_SEPARATOR = "=";
  var FALSE_KEYWORD_1 = "false";
  var FALSE_KEYWORD_2 = "off";
  var TRUE_KEYWORD_1 = "true";
  var TRUE_KEYWORD_2 = "on";
  module.exports = {
    Breaks,
    Spaces,
    formatFrom
  };
});

// node_modules/clean-css/lib/tokenizer/marker.js
var require_marker = __commonJS((exports, module) => {
  var Marker = {
    ASTERISK: "*",
    AT: "@",
    BACK_SLASH: "\\",
    CARRIAGE_RETURN: "\r",
    CLOSE_CURLY_BRACKET: "}",
    CLOSE_ROUND_BRACKET: ")",
    CLOSE_SQUARE_BRACKET: "]",
    COLON: ":",
    COMMA: ",",
    DOUBLE_QUOTE: '"',
    EXCLAMATION: "!",
    FORWARD_SLASH: "/",
    INTERNAL: "-clean-css-",
    NEW_LINE_NIX: "\n",
    OPEN_CURLY_BRACKET: "{",
    OPEN_ROUND_BRACKET: "(",
    OPEN_SQUARE_BRACKET: "[",
    SEMICOLON: ";",
    SINGLE_QUOTE: "\'",
    SPACE: " ",
    TAB: "\t",
    UNDERSCORE: "_"
  };
  module.exports = Marker;
});

// node_modules/clean-css/lib/utils/format-position.js
var require_format_position = __commonJS((exports, module) => {
  var formatPosition = function(metadata) {
    var line = metadata[0];
    var column = metadata[1];
    var source = metadata[2];
    return source ? source + ":" + line + ":" + column : line + ":" + column;
  };
  module.exports = formatPosition;
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js
var require_tidy_rules = __commonJS((exports, module) => {
  var hasInvalidCharacters = function(value) {
    var isEscaped;
    var isInvalid = false;
    var character;
    var isQuote = false;
    var i, l2;
    for (i = 0, l2 = value.length;i < l2; i++) {
      character = value[i];
      if (isEscaped) {
      } else if (character == Marker.SINGLE_QUOTE || character == Marker.DOUBLE_QUOTE) {
        isQuote = !isQuote;
      } else if (!isQuote && (character == Marker.CLOSE_CURLY_BRACKET || character == Marker.EXCLAMATION || character == LESS_THAN || character == Marker.SEMICOLON)) {
        isInvalid = true;
        break;
      } else if (!isQuote && i === 0 && RELATION_PATTERN.test(character)) {
        isInvalid = true;
        break;
      }
      isEscaped = character == Marker.BACK_SLASH;
    }
    return isInvalid;
  };
  var removeWhitespace = function(value, format) {
    var stripped = [];
    var character;
    var isNewLineNix;
    var isNewLineWin;
    var isEscaped;
    var wasEscaped;
    var isQuoted;
    var isSingleQuoted;
    var isDoubleQuoted;
    var isAttribute;
    var isRelation;
    var isWhitespace;
    var roundBracketLevel = 0;
    var wasRelation = false;
    var wasWhitespace = false;
    var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);
    var spaceAroundRelation = format && format.spaces[Spaces.AroundSelectorRelation];
    var i, l2;
    for (i = 0, l2 = value.length;i < l2; i++) {
      character = value[i];
      isNewLineNix = character == Marker.NEW_LINE_NIX;
      isNewLineWin = character == Marker.NEW_LINE_NIX && value[i - 1] == Marker.CARRIAGE_RETURN;
      isQuoted = isSingleQuoted || isDoubleQuoted;
      isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN.test(character);
      isWhitespace = WHITESPACE_PATTERN.test(character);
      if (wasEscaped && isQuoted && isNewLineWin) {
        stripped.pop();
        stripped.pop();
      } else if (isEscaped && isQuoted && isNewLineNix) {
        stripped.pop();
      } else if (isEscaped) {
        stripped.push(character);
      } else if (character == Marker.OPEN_SQUARE_BRACKET && !isQuoted) {
        stripped.push(character);
        isAttribute = true;
      } else if (character == Marker.CLOSE_SQUARE_BRACKET && !isQuoted) {
        stripped.push(character);
        isAttribute = false;
      } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted) {
        stripped.push(character);
        roundBracketLevel++;
      } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted) {
        stripped.push(character);
        roundBracketLevel--;
      } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {
        stripped.push(character);
        isSingleQuoted = true;
      } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {
        stripped.push(character);
        isDoubleQuoted = true;
      } else if (character == Marker.SINGLE_QUOTE && isQuoted) {
        stripped.push(character);
        isSingleQuoted = false;
      } else if (character == Marker.DOUBLE_QUOTE && isQuoted) {
        stripped.push(character);
        isDoubleQuoted = false;
      } else if (isWhitespace && wasRelation && !spaceAroundRelation) {
        continue;
      } else if (!isWhitespace && wasRelation && spaceAroundRelation) {
        stripped.push(Marker.SPACE);
        stripped.push(character);
      } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) {
      } else if (isWhitespace && wasWhitespace && !isQuoted) {
      } else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) {
      } else if (isRelation && wasWhitespace && !spaceAroundRelation) {
        stripped.pop();
        stripped.push(character);
      } else if (isRelation && !wasWhitespace && spaceAroundRelation) {
        stripped.push(Marker.SPACE);
        stripped.push(character);
      } else if (isWhitespace) {
        stripped.push(Marker.SPACE);
      } else {
        stripped.push(character);
      }
      wasEscaped = isEscaped;
      isEscaped = character == Marker.BACK_SLASH;
      wasRelation = isRelation;
      wasWhitespace = isWhitespace;
    }
    return withCaseAttribute ? stripped.join("").replace(CASE_RESTORE_PATTERN, "$1 $2]") : stripped.join("");
  };
  var removeQuotes = function(value) {
    if (value.indexOf("\'") == -1 && value.indexOf('"') == -1) {
      return value;
    }
    return value.replace(SINGLE_QUOTE_CASE_PATTERN, "=$1 $2").replace(SINGLE_QUOTE_PATTERN, "=$1$2").replace(DOUBLE_QUOTE_CASE_PATTERN, "=$1 $2").replace(DOUBLE_QUOTE_PATTERN, "=$1$2");
  };
  var tidyRules = function(rules, removeUnsupported, adjacentSpace, format, warnings) {
    var list = [];
    var repeated = [];
    function removeHTMLComment(rule2, match) {
      warnings.push("HTML comment \'" + match + "\' at " + formatPosition(rule2[2][0]) + ". Removing.");
      return "";
    }
    for (var i = 0, l2 = rules.length;i < l2; i++) {
      var rule = rules[i];
      var reduced = rule[1];
      reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));
      if (hasInvalidCharacters(reduced)) {
        warnings.push("Invalid selector \'" + rule[1] + "\' at " + formatPosition(rule[2][0]) + ". Ignoring.");
        continue;
      }
      reduced = removeWhitespace(reduced, format);
      reduced = removeQuotes(reduced);
      if (adjacentSpace && reduced.indexOf("nav") > 0) {
        reduced = reduced.replace(/\+nav(\S|$)/, "+ nav$1");
      }
      if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {
        continue;
      }
      if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {
        continue;
      }
      if (reduced.indexOf("*") > -1) {
        reduced = reduced.replace(/\*([:#\.\[])/g, "$1").replace(/^(\:first\-child)?\+html/, "*$1+html");
      }
      if (repeated.indexOf(reduced) > -1) {
        continue;
      }
      rule[1] = reduced;
      repeated.push(reduced);
      list.push(rule);
    }
    if (list.length == 1 && list[0][1].length === 0) {
      warnings.push("Empty selector \'" + list[0][1] + "\' at " + formatPosition(list[0][2][0]) + ". Ignoring.");
      list = [];
    }
    return list;
  };
  var Spaces = require_format().Spaces;
  var Marker = require_marker();
  var formatPosition = require_format_position();
  var CASE_ATTRIBUTE_PATTERN = /[\s"'][iI]\s*\]/;
  var CASE_RESTORE_PATTERN = /([\d\w])([iI])\]/g;
  var DOUBLE_QUOTE_CASE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"([iI])/g;
  var DOUBLE_QUOTE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"(\s|\])/g;
  var HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\s*)+/;
  var SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'([iI])/g;
  var SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'(\s|\])/g;
  var RELATION_PATTERN = /[>\+~]/;
  var WHITESPACE_PATTERN = /\s/;
  var ASTERISK_PLUS_HTML_HACK = "*+html ";
  var ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = "*:first-child+html ";
  var LESS_THAN = "<";
  module.exports = tidyRules;
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-block.js
var require_tidy_block = __commonJS((exports, module) => {
  var tidyBlock = function(values, spaceAfterClosingBrace) {
    var withoutSpaceAfterClosingBrace;
    var i;
    for (i = values.length - 1;i >= 0; i--) {
      withoutSpaceAfterClosingBrace = !spaceAfterClosingBrace && SUPPORTED_COMPACT_BLOCK_MATCHER.test(values[i][1]);
      values[i][1] = values[i][1].replace(/\n|\r\n/g, " ").replace(/\s+/g, " ").replace(/(,|:|\() /g, "$1").replace(/ \)/g, ")").replace(/'([a-zA-Z][a-zA-Z\d\-_]+)'/, "$1").replace(/"([a-zA-Z][a-zA-Z\d\-_]+)"/, "$1").replace(withoutSpaceAfterClosingBrace ? /\) /g : null, ")");
    }
    return values;
  };
  var SUPPORTED_COMPACT_BLOCK_MATCHER = /^@media\W/;
  module.exports = tidyBlock;
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-at-rule.js
var require_tidy_at_rule = __commonJS((exports, module) => {
  var tidyAtRule = function(value) {
    return value.replace(/\s+/g, " ").replace(/url\(\s+/g, "url(").replace(/\s+\)/g, ")").trim();
  };
  module.exports = tidyAtRule;
});

// node_modules/clean-css/lib/optimizer/hack.js
var require_hack = __commonJS((exports, module) => {
  var Hack = {
    ASTERISK: "asterisk",
    BANG: "bang",
    BACKSLASH: "backslash",
    UNDERSCORE: "underscore"
  };
  module.exports = Hack;
});

// node_modules/clean-css/lib/optimizer/remove-unused.js
var require_remove_unused = __commonJS((exports, module) => {
  var removeUnused = function(properties) {
    for (var i = properties.length - 1;i >= 0; i--) {
      var property = properties[i];
      if (property.unused) {
        property.all.splice(property.position, 1);
      }
    }
  };
  module.exports = removeUnused;
});

// node_modules/clean-css/lib/optimizer/restore-from-optimizing.js
var require_restore_from_optimizing = __commonJS((exports, module) => {
  var restoreFromOptimizing = function(properties, restoreCallback) {
    var property;
    var restored;
    var current;
    var i;
    for (i = properties.length - 1;i >= 0; i--) {
      property = properties[i];
      if (property.unused) {
        continue;
      }
      if (!property.dirty && !property.important && !property.hack) {
        continue;
      }
      if (restoreCallback) {
        restored = restoreCallback(property);
        property.value = restored;
      } else {
        restored = property.value;
      }
      if (property.important) {
        restoreImportant(property);
      }
      if (property.hack) {
        restoreHack(property);
      }
      if ("all" in property) {
        current = property.all[property.position];
        current[1][1] = property.name;
        current.splice(2, current.length - 1);
        Array.prototype.push.apply(current, restored);
      }
    }
  };
  var restoreImportant = function(property) {
    property.value[property.value.length - 1][1] += IMPORTANT_TOKEN;
  };
  var restoreHack = function(property) {
    if (property.hack[0] == Hack.UNDERSCORE) {
      property.name = UNDERSCORE_HACK + property.name;
    } else if (property.hack[0] == Hack.ASTERISK) {
      property.name = ASTERISK_HACK + property.name;
    } else if (property.hack[0] == Hack.BACKSLASH) {
      property.value[property.value.length - 1][1] += BACKSLASH_HACK + property.hack[1];
    } else if (property.hack[0] == Hack.BANG) {
      property.value[property.value.length - 1][1] += Marker.SPACE + BANG_HACK;
    }
  };
  var Hack = require_hack();
  var Marker = require_marker();
  var ASTERISK_HACK = "*";
  var BACKSLASH_HACK = "\\";
  var IMPORTANT_TOKEN = "!important";
  var UNDERSCORE_HACK = "_";
  var BANG_HACK = "!ie";
  module.exports = restoreFromOptimizing;
});

// node_modules/clean-css/lib/tokenizer/token.js
var require_token = __commonJS((exports, module) => {
  var Token = {
    AT_RULE: "at-rule",
    AT_RULE_BLOCK: "at-rule-block",
    AT_RULE_BLOCK_SCOPE: "at-rule-block-scope",
    COMMENT: "comment",
    NESTED_BLOCK: "nested-block",
    NESTED_BLOCK_SCOPE: "nested-block-scope",
    PROPERTY: "property",
    PROPERTY_BLOCK: "property-block",
    PROPERTY_NAME: "property-name",
    PROPERTY_VALUE: "property-value",
    RAW: "raw",
    RULE: "rule",
    RULE_SCOPE: "rule-scope"
  };
  module.exports = Token;
});

// node_modules/clean-css/lib/optimizer/wrap-for-optimizing.js
var require_wrap_for_optimizing = __commonJS((exports, module) => {
  var wrapAll = function(properties, includeVariable, skipProperties) {
    var wrapped = [];
    var single;
    var property;
    var i;
    for (i = properties.length - 1;i >= 0; i--) {
      property = properties[i];
      if (property[0] != Token.PROPERTY) {
        continue;
      }
      if (!includeVariable && someVariableReferences(property)) {
        continue;
      }
      if (skipProperties && skipProperties.indexOf(property[1][1]) > -1) {
        continue;
      }
      single = wrapSingle(property);
      single.all = properties;
      single.position = i;
      wrapped.unshift(single);
    }
    return wrapped;
  };
  var someVariableReferences = function(property) {
    var i, l2;
    var value;
    for (i = 2, l2 = property.length;i < l2; i++) {
      value = property[i];
      if (value[0] != Token.PROPERTY_VALUE) {
        continue;
      }
      if (isVariableReference(value[1])) {
        return true;
      }
    }
    return false;
  };
  var isVariableReference = function(value) {
    return Match.VARIABLE_REFERENCE_PATTERN.test(value);
  };
  var isMultiplex = function(property) {
    var value;
    var i, l2;
    for (i = 3, l2 = property.length;i < l2; i++) {
      value = property[i];
      if (value[0] == Token.PROPERTY_VALUE && (value[1] == Marker.COMMA || value[1] == Marker.FORWARD_SLASH)) {
        return true;
      }
    }
    return false;
  };
  var hackFrom = function(property) {
    var match = false;
    var name = property[1][1];
    var lastValue = property[property.length - 1];
    if (name[0] == Match.UNDERSCORE) {
      match = [Hack.UNDERSCORE];
    } else if (name[0] == Match.ASTERISK) {
      match = [Hack.ASTERISK];
    } else if (lastValue[1][0] == Match.BANG && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)) {
      match = [Hack.BANG];
    } else if (lastValue[1].indexOf(Match.BANG) > 0 && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN) && Match.BANG_SUFFIX_PATTERN.test(lastValue[1])) {
      match = [Hack.BANG];
    } else if (lastValue[1].indexOf(Match.BACKSLASH) > 0 && lastValue[1].indexOf(Match.BACKSLASH) == lastValue[1].length - Match.BACKSLASH.length - 1) {
      match = [Hack.BACKSLASH, lastValue[1].substring(lastValue[1].indexOf(Match.BACKSLASH) + 1)];
    } else if (lastValue[1].indexOf(Match.BACKSLASH) === 0 && lastValue[1].length == 2) {
      match = [Hack.BACKSLASH, lastValue[1].substring(1)];
    }
    return match;
  };
  var isImportant = function(property) {
    if (property.length < 3)
      return false;
    var lastValue = property[property.length - 1];
    if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
      return true;
    } else if (Match.IMPORTANT_WORD_PATTERN.test(lastValue[1]) && Match.SUFFIX_BANG_PATTERN.test(property[property.length - 2][1])) {
      return true;
    }
    return false;
  };
  var stripImportant = function(property) {
    var lastValue = property[property.length - 1];
    var oneButLastValue = property[property.length - 2];
    if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
      lastValue[1] = lastValue[1].replace(Match.IMPORTANT_TOKEN_PATTERN, "");
    } else {
      lastValue[1] = lastValue[1].replace(Match.IMPORTANT_WORD_PATTERN, "");
      oneButLastValue[1] = oneButLastValue[1].replace(Match.SUFFIX_BANG_PATTERN, "");
    }
    if (lastValue[1].length === 0) {
      property.pop();
    }
    if (oneButLastValue[1].length === 0) {
      property.pop();
    }
  };
  var stripPrefixHack = function(property) {
    property[1][1] = property[1][1].substring(1);
  };
  var stripSuffixHack = function(property, hackFrom2) {
    var lastValue = property[property.length - 1];
    lastValue[1] = lastValue[1].substring(0, lastValue[1].indexOf(hackFrom2[0] == Hack.BACKSLASH ? Match.BACKSLASH : Match.BANG)).trim();
    if (lastValue[1].length === 0) {
      property.pop();
    }
  };
  var wrapSingle = function(property) {
    var importantProperty = isImportant(property);
    if (importantProperty) {
      stripImportant(property);
    }
    var whichHack = hackFrom(property);
    if (whichHack[0] == Hack.ASTERISK || whichHack[0] == Hack.UNDERSCORE) {
      stripPrefixHack(property);
    } else if (whichHack[0] == Hack.BACKSLASH || whichHack[0] == Hack.BANG) {
      stripSuffixHack(property, whichHack);
    }
    return {
      block: property[2] && property[2][0] == Token.PROPERTY_BLOCK,
      components: [],
      dirty: false,
      hack: whichHack,
      important: importantProperty,
      name: property[1][1],
      multiplex: property.length > 3 ? isMultiplex(property) : false,
      position: 0,
      shorthand: false,
      unused: false,
      value: property.slice(2)
    };
  };
  var Hack = require_hack();
  var Marker = require_marker();
  var Token = require_token();
  var Match = {
    ASTERISK: "*",
    BACKSLASH: "\\",
    BANG: "!",
    BANG_SUFFIX_PATTERN: /!\w+$/,
    IMPORTANT_TOKEN: "!important",
    IMPORTANT_TOKEN_PATTERN: new RegExp("!important$", "i"),
    IMPORTANT_WORD: "important",
    IMPORTANT_WORD_PATTERN: new RegExp("important$", "i"),
    SUFFIX_BANG_PATTERN: /!$/,
    UNDERSCORE: "_",
    VARIABLE_REFERENCE_PATTERN: /var\(--.+\)$/
  };
  module.exports = {
    all: wrapAll,
    single: wrapSingle
  };
});

// node_modules/clean-css/lib/options/rounding-precision.js
var require_rounding_precision = __commonJS((exports, module) => {
  var roundingPrecisionFrom = function(source) {
    return override(defaults2(DEFAULT_PRECISION), buildPrecisionFrom(source));
  };
  var defaults2 = function(value) {
    return {
      ch: value,
      cm: value,
      em: value,
      ex: value,
      in: value,
      mm: value,
      pc: value,
      pt: value,
      px: value,
      q: value,
      rem: value,
      vh: value,
      vmax: value,
      vmin: value,
      vw: value,
      "%": value
    };
  };
  var buildPrecisionFrom = function(source) {
    if (source === null || source === undefined) {
      return {};
    }
    if (typeof source == "boolean") {
      return {};
    }
    if (typeof source == "number" && source == -1) {
      return defaults2(DEFAULT_PRECISION);
    }
    if (typeof source == "number") {
      return defaults2(source);
    }
    if (typeof source == "string" && INTEGER_PATTERN.test(source)) {
      return defaults2(parseInt(source));
    }
    if (typeof source == "string" && source == DEFAULT_PRECISION) {
      return defaults2(DEFAULT_PRECISION);
    }
    if (typeof source == "object") {
      return source;
    }
    return source.split(DIRECTIVES_SEPARATOR).reduce(function(accumulator, directive) {
      var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);
      var name = directiveParts[0];
      var value = parseInt(directiveParts[1]);
      if (isNaN(value) || value == -1) {
        value = DEFAULT_PRECISION;
      }
      if (ALL_UNITS.indexOf(name) > -1) {
        accumulator = override(accumulator, defaults2(value));
      } else {
        accumulator[name] = value;
      }
      return accumulator;
    }, {});
  };
  var override = require_override();
  var INTEGER_PATTERN = /^\d+$/;
  var ALL_UNITS = ["*", "all"];
  var DEFAULT_PRECISION = "off";
  var DIRECTIVES_SEPARATOR = ",";
  var DIRECTIVE_VALUE_SEPARATOR = "=";
  module.exports = {
    DEFAULT: DEFAULT_PRECISION,
    roundingPrecisionFrom
  };
});

// node_modules/clean-css/lib/options/optimization-level.js
var require_optimization_level = __commonJS((exports, module) => {
  var noop2 = function() {
  };
  var optimizationLevelFrom = function(source) {
    var level = override(DEFAULTS, {});
    var Zero = OptimizationLevel.Zero;
    var One = OptimizationLevel.One;
    var Two = OptimizationLevel.Two;
    if (source === undefined) {
      delete level[Two];
      return level;
    }
    if (typeof source == "string") {
      source = parseInt(source);
    }
    if (typeof source == "number" && source === parseInt(Two)) {
      return level;
    }
    if (typeof source == "number" && source === parseInt(One)) {
      delete level[Two];
      return level;
    }
    if (typeof source == "number" && source === parseInt(Zero)) {
      delete level[Two];
      delete level[One];
      return level;
    }
    if (typeof source == "object") {
      source = covertValuesToHashes(source);
    }
    if (One in source && "roundingPrecision" in source[One]) {
      source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);
    }
    if (Two in source && "skipProperties" in source[Two] && typeof source[Two].skipProperties == "string") {
      source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);
    }
    if (Zero in source || One in source || Two in source) {
      level[Zero] = override(level[Zero], source[Zero]);
    }
    if (One in source && ALL_KEYWORD_1 in source[One]) {
      level[One] = override(level[One], defaults2(One, normalizeValue(source[One][ALL_KEYWORD_1])));
      delete source[One][ALL_KEYWORD_1];
    }
    if (One in source && ALL_KEYWORD_2 in source[One]) {
      level[One] = override(level[One], defaults2(One, normalizeValue(source[One][ALL_KEYWORD_2])));
      delete source[One][ALL_KEYWORD_2];
    }
    if (One in source || Two in source) {
      level[One] = override(level[One], source[One]);
    } else {
      delete level[One];
    }
    if (Two in source && ALL_KEYWORD_1 in source[Two]) {
      level[Two] = override(level[Two], defaults2(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));
      delete source[Two][ALL_KEYWORD_1];
    }
    if (Two in source && ALL_KEYWORD_2 in source[Two]) {
      level[Two] = override(level[Two], defaults2(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));
      delete source[Two][ALL_KEYWORD_2];
    }
    if (Two in source) {
      level[Two] = override(level[Two], source[Two]);
    } else {
      delete level[Two];
    }
    return level;
  };
  var defaults2 = function(level, value) {
    var options = override(DEFAULTS[level], {});
    var key;
    for (key in options) {
      if (typeof options[key] == "boolean") {
        options[key] = value;
      }
    }
    return options;
  };
  var normalizeValue = function(value) {
    switch (value) {
      case FALSE_KEYWORD_1:
      case FALSE_KEYWORD_2:
        return false;
      case TRUE_KEYWORD_1:
      case TRUE_KEYWORD_2:
        return true;
      default:
        return value;
    }
  };
  var covertValuesToHashes = function(source) {
    var clonedSource = override(source, {});
    var level;
    var i;
    for (i = 0;i <= 2; i++) {
      level = "" + i;
      if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {
        delete clonedSource[level];
      }
      if (level in clonedSource && clonedSource[level] === true) {
        clonedSource[level] = {};
      }
      if (level in clonedSource && typeof clonedSource[level] == "string") {
        clonedSource[level] = covertToHash(clonedSource[level], level);
      }
    }
    return clonedSource;
  };
  var covertToHash = function(asString, level) {
    return asString.split(OPTION_SEPARATOR).reduce(function(accumulator, directive) {
      var parts = directive.split(OPTION_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];
      var normalizedValue = normalizeValue(value);
      if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {
        accumulator = override(accumulator, defaults2(level, normalizedValue));
      } else {
        accumulator[name] = normalizedValue;
      }
      return accumulator;
    }, {});
  };
  var roundingPrecisionFrom = require_rounding_precision().roundingPrecisionFrom;
  var override = require_override();
  var OptimizationLevel = {
    Zero: "0",
    One: "1",
    Two: "2"
  };
  var DEFAULTS = {};
  DEFAULTS[OptimizationLevel.Zero] = {};
  DEFAULTS[OptimizationLevel.One] = {
    cleanupCharsets: true,
    normalizeUrls: true,
    optimizeBackground: true,
    optimizeBorderRadius: true,
    optimizeFilter: true,
    optimizeFontWeight: true,
    optimizeOutline: true,
    removeEmpty: true,
    removeNegativePaddings: true,
    removeQuotes: true,
    removeWhitespace: true,
    replaceMultipleZeros: true,
    replaceTimeUnits: true,
    replaceZeroUnits: true,
    roundingPrecision: roundingPrecisionFrom(undefined),
    selectorsSortingMethod: "standard",
    specialComments: "all",
    tidyAtRules: true,
    tidyBlockScopes: true,
    tidySelectors: true,
    transform: noop2
  };
  DEFAULTS[OptimizationLevel.Two] = {
    mergeAdjacentRules: true,
    mergeIntoShorthands: true,
    mergeMedia: true,
    mergeNonAdjacentRules: true,
    mergeSemantically: false,
    overrideProperties: true,
    removeEmpty: true,
    reduceNonAdjacentRules: true,
    removeDuplicateFontRules: true,
    removeDuplicateMediaBlocks: true,
    removeDuplicateRules: true,
    removeUnusedAtRules: false,
    restructureRules: false,
    skipProperties: []
  };
  var ALL_KEYWORD_1 = "*";
  var ALL_KEYWORD_2 = "all";
  var FALSE_KEYWORD_1 = "false";
  var FALSE_KEYWORD_2 = "off";
  var TRUE_KEYWORD_1 = "true";
  var TRUE_KEYWORD_2 = "on";
  var LIST_VALUE_SEPARATOR = ",";
  var OPTION_SEPARATOR = ";";
  var OPTION_VALUE_SEPARATOR = ":";
  module.exports = {
    OptimizationLevel,
    optimizationLevelFrom
  };
});

// node_modules/clean-css/lib/utils/split.js
var require_split = __commonJS((exports, module) => {
  var split = function(value, separator) {
    var openLevel = Marker.OPEN_ROUND_BRACKET;
    var closeLevel = Marker.CLOSE_ROUND_BRACKET;
    var level = 0;
    var cursor = 0;
    var lastStart = 0;
    var lastValue;
    var lastCharacter;
    var len = value.length;
    var parts = [];
    if (value.indexOf(separator) == -1) {
      return [value];
    }
    if (value.indexOf(openLevel) == -1) {
      return value.split(separator);
    }
    while (cursor < len) {
      if (value[cursor] == openLevel) {
        level++;
      } else if (value[cursor] == closeLevel) {
        level--;
      }
      if (level === 0 && cursor > 0 && cursor + 1 < len && value[cursor] == separator) {
        parts.push(value.substring(lastStart, cursor));
        lastStart = cursor + 1;
      }
      cursor++;
    }
    if (lastStart < cursor + 1) {
      lastValue = value.substring(lastStart);
      lastCharacter = lastValue[lastValue.length - 1];
      if (lastCharacter == separator) {
        lastValue = lastValue.substring(0, lastValue.length - 1);
      }
      parts.push(lastValue);
    }
    return parts;
  };
  var Marker = require_marker();
  module.exports = split;
});

// node_modules/clean-css/lib/writer/helpers.js
var require_helpers = __commonJS((exports, module) => {
  var supportsAfterClosingBrace = function(token) {
    return token[1][1] == "background" || token[1][1] == "transform" || token[1][1] == "src";
  };
  var afterClosingBrace = function(token, valueIndex) {
    return token[valueIndex][1][token[valueIndex][1].length - 1] == Marker.CLOSE_ROUND_BRACKET;
  };
  var afterComma = function(token, valueIndex) {
    return token[valueIndex][1] == Marker.COMMA;
  };
  var afterSlash = function(token, valueIndex) {
    return token[valueIndex][1] == Marker.FORWARD_SLASH;
  };
  var beforeComma = function(token, valueIndex) {
    return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.COMMA;
  };
  var beforeSlash = function(token, valueIndex) {
    return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.FORWARD_SLASH;
  };
  var inFilter = function(token) {
    return token[1][1] == "filter" || token[1][1] == "-ms-filter";
  };
  var disallowsSpace = function(context, token, valueIndex) {
    return !context.spaceAfterClosingBrace && supportsAfterClosingBrace(token) && afterClosingBrace(token, valueIndex) || beforeSlash(token, valueIndex) || afterSlash(token, valueIndex) || beforeComma(token, valueIndex) || afterComma(token, valueIndex);
  };
  var rules = function(context, tokens) {
    var store = context.store;
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      store(context, tokens[i]);
      if (i < l2 - 1) {
        store(context, comma(context));
      }
    }
  };
  var body = function(context, tokens) {
    var lastPropertyAt = lastPropertyIndex(tokens);
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      property(context, tokens, i, lastPropertyAt);
    }
  };
  var lastPropertyIndex = function(tokens) {
    var index = tokens.length - 1;
    for (;index >= 0; index--) {
      if (tokens[index][0] != Token.COMMENT) {
        break;
      }
    }
    return index;
  };
  var property = function(context, tokens, position, lastPropertyAt) {
    var store = context.store;
    var token = tokens[position];
    var propertyValue = token[2];
    var isPropertyBlock = propertyValue && propertyValue[0] === Token.PROPERTY_BLOCK;
    var needsSemicolon;
    if (context.format) {
      if (context.format.semicolonAfterLastProperty || isPropertyBlock) {
        needsSemicolon = true;
      } else if (position < lastPropertyAt) {
        needsSemicolon = true;
      } else {
        needsSemicolon = false;
      }
    } else {
      needsSemicolon = position < lastPropertyAt || isPropertyBlock;
    }
    var isLast = position === lastPropertyAt;
    switch (token[0]) {
      case Token.AT_RULE:
        store(context, token);
        store(context, semicolon(context, Breaks.AfterProperty, false));
        break;
      case Token.AT_RULE_BLOCK:
        rules(context, token[1]);
        store(context, openBrace(context, Breaks.AfterRuleBegins, true));
        body(context, token[2]);
        store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
        break;
      case Token.COMMENT:
        store(context, token);
        break;
      case Token.PROPERTY:
        store(context, token[1]);
        store(context, colon(context));
        if (propertyValue) {
          value(context, token);
        }
        store(context, needsSemicolon ? semicolon(context, Breaks.AfterProperty, isLast) : emptyCharacter);
        break;
      case Token.RAW:
        store(context, token);
    }
  };
  var value = function(context, token) {
    var store = context.store;
    var j2, m2;
    if (token[2][0] == Token.PROPERTY_BLOCK) {
      store(context, openBrace(context, Breaks.AfterBlockBegins, false));
      body(context, token[2][1]);
      store(context, closeBrace(context, Breaks.AfterBlockEnds, false, true));
    } else {
      for (j2 = 2, m2 = token.length;j2 < m2; j2++) {
        store(context, token[j2]);
        if (j2 < m2 - 1 && (inFilter(token) || !disallowsSpace(context, token, j2))) {
          store(context, Marker.SPACE);
        }
      }
    }
  };
  var allowsBreak = function(context, where) {
    return context.format && context.format.breaks[where];
  };
  var allowsSpace = function(context, where) {
    return context.format && context.format.spaces[where];
  };
  var openBrace = function(context, where, needsPrefixSpace) {
    if (context.format) {
      context.indentBy += context.format.indentBy;
      context.indentWith = context.format.indentWith.repeat(context.indentBy);
      return (needsPrefixSpace && allowsSpace(context, Spaces.BeforeBlockBegins) ? Marker.SPACE : emptyCharacter) + Marker.OPEN_CURLY_BRACKET + (allowsBreak(context, where) ? context.format.breakWith : emptyCharacter) + context.indentWith;
    } else {
      return Marker.OPEN_CURLY_BRACKET;
    }
  };
  var closeBrace = function(context, where, beforeBlockEnd, isLast) {
    if (context.format) {
      context.indentBy -= context.format.indentBy;
      context.indentWith = context.format.indentWith.repeat(context.indentBy);
      return (allowsBreak(context, Breaks.AfterProperty) || beforeBlockEnd && allowsBreak(context, Breaks.BeforeBlockEnds) ? context.format.breakWith : emptyCharacter) + context.indentWith + Marker.CLOSE_CURLY_BRACKET + (isLast ? emptyCharacter : (allowsBreak(context, where) ? context.format.breakWith : emptyCharacter) + context.indentWith);
    } else {
      return Marker.CLOSE_CURLY_BRACKET;
    }
  };
  var colon = function(context) {
    return context.format ? Marker.COLON + (allowsSpace(context, Spaces.BeforeValue) ? Marker.SPACE : emptyCharacter) : Marker.COLON;
  };
  var semicolon = function(context, where, isLast) {
    return context.format ? Marker.SEMICOLON + (isLast || !allowsBreak(context, where) ? emptyCharacter : context.format.breakWith + context.indentWith) : Marker.SEMICOLON;
  };
  var comma = function(context) {
    return context.format ? Marker.COMMA + (allowsBreak(context, Breaks.BetweenSelectors) ? context.format.breakWith : emptyCharacter) + context.indentWith : Marker.COMMA;
  };
  var all2 = function(context, tokens) {
    var store = context.store;
    var token;
    var isLast;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      isLast = i == l2 - 1;
      switch (token[0]) {
        case Token.AT_RULE:
          store(context, token);
          store(context, semicolon(context, Breaks.AfterAtRule, isLast));
          break;
        case Token.AT_RULE_BLOCK:
          rules(context, token[1]);
          store(context, openBrace(context, Breaks.AfterRuleBegins, true));
          body(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
          break;
        case Token.NESTED_BLOCK:
          rules(context, token[1]);
          store(context, openBrace(context, Breaks.AfterBlockBegins, true));
          all2(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterBlockEnds, true, isLast));
          break;
        case Token.COMMENT:
          store(context, token);
          store(context, allowsBreak(context, Breaks.AfterComment) ? context.format.breakWith : emptyCharacter);
          break;
        case Token.RAW:
          store(context, token);
          break;
        case Token.RULE:
          rules(context, token[1]);
          store(context, openBrace(context, Breaks.AfterRuleBegins, true));
          body(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
          break;
      }
    }
  };
  var emptyCharacter = "";
  var Breaks = require_format().Breaks;
  var Spaces = require_format().Spaces;
  var Marker = require_marker();
  var Token = require_token();
  module.exports = {
    all: all2,
    body,
    property,
    rules,
    value
  };
});

// node_modules/clean-css/lib/writer/one-time.js
var require_one_time = __commonJS((exports, module) => {
  var store = function(serializeContext, token) {
    serializeContext.output.push(typeof token == "string" ? token : token[1]);
  };
  var context = function() {
    var newContext = {
      output: [],
      store
    };
    return newContext;
  };
  var all2 = function(tokens) {
    var oneTimeContext = context();
    helpers.all(oneTimeContext, tokens);
    return oneTimeContext.output.join("");
  };
  var body = function(tokens) {
    var oneTimeContext = context();
    helpers.body(oneTimeContext, tokens);
    return oneTimeContext.output.join("");
  };
  var property = function(tokens, position) {
    var oneTimeContext = context();
    helpers.property(oneTimeContext, tokens, position, true);
    return oneTimeContext.output.join("");
  };
  var rules = function(tokens) {
    var oneTimeContext = context();
    helpers.rules(oneTimeContext, tokens);
    return oneTimeContext.output.join("");
  };
  var value = function(tokens) {
    var oneTimeContext = context();
    helpers.value(oneTimeContext, tokens);
    return oneTimeContext.output.join("");
  };
  var helpers = require_helpers();
  module.exports = {
    all: all2,
    body,
    property,
    rules,
    value
  };
});

// node_modules/clean-css/lib/optimizer/level-1/optimize.js
var require_optimize2 = __commonJS((exports, module) => {
  var isLocal = function(value) {
    return LOCAL_PREFIX_PATTERN.test(value);
  };
  var isNegative = function(value) {
    return value && value[1][0] == "-" && parseFloat(value[1]) < 0;
  };
  var isQuoted = function(value) {
    return QUOTED_PATTERN.test(value);
  };
  var isUrl = function(value) {
    return URL_PREFIX_PATTERN.test(value);
  };
  var normalizeUrl = function(value) {
    return value.replace(URL_PREFIX_PATTERN, "url(").replace(/\\?\n|\\?\r\n/g, "");
  };
  var optimizeBackground = function(property) {
    var values = property.value;
    if (values.length == 1 && values[0][1] == "none") {
      values[0][1] = "0 0";
    }
    if (values.length == 1 && values[0][1] == "transparent") {
      values[0][1] = "0 0";
    }
  };
  var optimizeBorderRadius = function(property) {
    var values = property.value;
    var spliceAt;
    if (values.length == 3 && values[1][1] == "/" && values[0][1] == values[2][1]) {
      spliceAt = 1;
    } else if (values.length == 5 && values[2][1] == "/" && values[0][1] == values[3][1] && values[1][1] == values[4][1]) {
      spliceAt = 2;
    } else if (values.length == 7 && values[3][1] == "/" && values[0][1] == values[4][1] && values[1][1] == values[5][1] && values[2][1] == values[6][1]) {
      spliceAt = 3;
    } else if (values.length == 9 && values[4][1] == "/" && values[0][1] == values[5][1] && values[1][1] == values[6][1] && values[2][1] == values[7][1] && values[3][1] == values[8][1]) {
      spliceAt = 4;
    }
    if (spliceAt) {
      property.value.splice(spliceAt);
      property.dirty = true;
    }
  };
  var optimizeColors = function(name, value, compatibility) {
    if (!value.match(/#|rgb|hsl/gi)) {
      return shortenHex(value);
    }
    value = value.replace(/(rgb|hsl)a?\((\-?\d+),(\-?\d+\%?),(\-?\d+\%?),(0*[1-9]+[0-9]*(\.?\d*)?)\)/gi, function(match, colorFn, p1, p2, p3, alpha) {
      return parseInt(alpha, 10) >= 1 ? colorFn + "(" + [p1, p2, p3].join(",") + ")" : match;
    }).replace(/rgb\((\-?\d+),(\-?\d+),(\-?\d+)\)/gi, function(match, red, green, blue) {
      return shortenRgb(red, green, blue);
    }).replace(/hsl\((-?\d+),(-?\d+)%?,(-?\d+)%?\)/gi, function(match, hue, saturation, lightness) {
      return shortenHsl(hue, saturation, lightness);
    }).replace(/(^|[^='"])#([0-9a-f]{6})/gi, function(match, prefix, color, at, inputValue) {
      var suffix = inputValue[at + match.length];
      if (suffix && HEX_VALUE_PATTERN.test(suffix)) {
        return match;
      } else if (color[0] == color[1] && color[2] == color[3] && color[4] == color[5]) {
        return (prefix + "#" + color[0] + color[2] + color[4]).toLowerCase();
      } else {
        return (prefix + "#" + color).toLowerCase();
      }
    }).replace(/(^|[^='"])#([0-9a-f]{3})/gi, function(match, prefix, color) {
      return prefix + "#" + color.toLowerCase();
    }).replace(/(rgb|rgba|hsl|hsla)\(([^\)]+)\)/gi, function(match, colorFunction, colorDef) {
      var tokens = colorDef.split(",");
      var colorFnLowercase = colorFunction && colorFunction.toLowerCase();
      var applies = colorFnLowercase == "hsl" && tokens.length == 3 || colorFnLowercase == "hsla" && tokens.length == 4 || colorFnLowercase == "rgb" && tokens.length === 3 && colorDef.indexOf("%") > 0 || colorFnLowercase == "rgba" && tokens.length == 4 && colorDef.indexOf("%") > 0;
      if (!applies) {
        return match;
      }
      if (tokens[1].indexOf("%") == -1) {
        tokens[1] += "%";
      }
      if (tokens[2].indexOf("%") == -1) {
        tokens[2] += "%";
      }
      return colorFunction + "(" + tokens.join(",") + ")";
    });
    if (compatibility.colors.opacity && name.indexOf("background") == -1) {
      value = value.replace(/(?:rgba|hsla)\(0,0%?,0%?,0\)/g, function(match) {
        if (split(value, ",").pop().indexOf("gradient(") > -1) {
          return match;
        }
        return "transparent";
      });
    }
    return shortenHex(value);
  };
  var optimizeFilter = function(property) {
    if (property.value.length == 1) {
      property.value[0][1] = property.value[0][1].replace(/progid:DXImageTransform\.Microsoft\.(Alpha|Chroma)(\W)/, function(match, filter, suffix) {
        return filter.toLowerCase() + suffix;
      });
    }
    property.value[0][1] = property.value[0][1].replace(/,(\S)/g, ", $1").replace(/ ?= ?/g, "=");
  };
  var optimizeFontWeight = function(property, atIndex) {
    var value = property.value[atIndex][1];
    if (value == "normal") {
      value = "400";
    } else if (value == "bold") {
      value = "700";
    }
    property.value[atIndex][1] = value;
  };
  var optimizeMultipleZeros = function(property) {
    var values = property.value;
    var spliceAt;
    if (values.length == 4 && values[0][1] === "0" && values[1][1] === "0" && values[2][1] === "0" && values[3][1] === "0") {
      if (property.name.indexOf("box-shadow") > -1) {
        spliceAt = 2;
      } else {
        spliceAt = 1;
      }
    }
    if (spliceAt) {
      property.value.splice(spliceAt);
      property.dirty = true;
    }
  };
  var optimizeOutline = function(property) {
    var values = property.value;
    if (values.length == 1 && values[0][1] == "none") {
      values[0][1] = "0";
    }
  };
  var optimizePixelLengths = function(_2, value, compatibility) {
    if (!WHOLE_PIXEL_VALUE.test(value)) {
      return value;
    }
    return value.replace(WHOLE_PIXEL_VALUE, function(match, val) {
      var newValue;
      var intVal = parseInt(val);
      if (intVal === 0) {
        return match;
      }
      if (compatibility.properties.shorterLengthUnits && compatibility.units.pt && intVal * 3 % 4 === 0) {
        newValue = intVal * 3 / 4 + "pt";
      }
      if (compatibility.properties.shorterLengthUnits && compatibility.units.pc && intVal % 16 === 0) {
        newValue = intVal / 16 + "pc";
      }
      if (compatibility.properties.shorterLengthUnits && compatibility.units.in && intVal % 96 === 0) {
        newValue = intVal / 96 + "in";
      }
      if (newValue) {
        newValue = match.substring(0, match.indexOf(val)) + newValue;
      }
      return newValue && newValue.length < match.length ? newValue : match;
    });
  };
  var optimizePrecision = function(_2, value, precisionOptions) {
    if (!precisionOptions.enabled || value.indexOf(".") === -1) {
      return value;
    }
    return value.replace(precisionOptions.decimalPointMatcher, "$1$2$3").replace(precisionOptions.zeroMatcher, function(match, integerPart, fractionPart, unit) {
      var multiplier = precisionOptions.units[unit].multiplier;
      var parsedInteger = parseInt(integerPart);
      var integer = isNaN(parsedInteger) ? 0 : parsedInteger;
      var fraction = parseFloat(fractionPart);
      return Math.round((integer + fraction) * multiplier) / multiplier + unit;
    });
  };
  var optimizeTimeUnits = function(_2, value) {
    if (!TIME_VALUE.test(value))
      return value;
    return value.replace(TIME_VALUE, function(match, val, unit) {
      var newValue;
      if (unit == "ms") {
        newValue = parseInt(val) / 1000 + "s";
      } else if (unit == "s") {
        newValue = parseFloat(val) * 1000 + "ms";
      }
      return newValue.length < match.length ? newValue : match;
    });
  };
  var optimizeUnits = function(name, value, unitsRegexp) {
    if (/^(?:\-moz\-calc|\-webkit\-calc|calc|rgb|hsl|rgba|hsla)\(/.test(value)) {
      return value;
    }
    if (name == "flex" || name == "-ms-flex" || name == "-webkit-flex" || name == "flex-basis" || name == "-webkit-flex-basis") {
      return value;
    }
    if (value.indexOf("%") > 0 && (name == "height" || name == "max-height" || name == "width" || name == "max-width")) {
      return value;
    }
    return value.replace(unitsRegexp, "$10$2").replace(unitsRegexp, "$10$2");
  };
  var optimizeWhitespace = function(name, value) {
    if (name.indexOf("filter") > -1 || value.indexOf(" ") == -1 || value.indexOf("expression") === 0) {
      return value;
    }
    if (value.indexOf(Marker.SINGLE_QUOTE) > -1 || value.indexOf(Marker.DOUBLE_QUOTE) > -1) {
      return value;
    }
    value = value.replace(/\s+/g, " ");
    if (value.indexOf("calc") > -1) {
      value = value.replace(/\) ?\/ ?/g, ")/ ");
    }
    return value.replace(/(\(;?)\s+/g, "$1").replace(/\s+(;?\))/g, "$1").replace(/, /g, ",");
  };
  var optimizeZeroDegUnit = function(_2, value) {
    if (value.indexOf("0deg") == -1) {
      return value;
    }
    return value.replace(/\(0deg\)/g, "(0)");
  };
  var optimizeZeroUnits = function(name, value) {
    if (value.indexOf("0") == -1) {
      return value;
    }
    if (value.indexOf("-") > -1) {
      value = value.replace(/([^\w\d\-]|^)\-0([^\.]|$)/g, "$10$2").replace(/([^\w\d\-]|^)\-0([^\.]|$)/g, "$10$2");
    }
    return value.replace(/(^|\s)0+([1-9])/g, "$1$2").replace(/(^|\D)\.0+(\D|$)/g, "$10$2").replace(/(^|\D)\.0+(\D|$)/g, "$10$2").replace(/\.([1-9]*)0+(\D|$)/g, function(match, nonZeroPart, suffix) {
      return (nonZeroPart.length > 0 ? "." : "") + nonZeroPart + suffix;
    }).replace(/(^|\D)0\.(\d)/g, "$1.$2");
  };
  var removeQuotes = function(name, value) {
    if (name == "content" || name.indexOf("font-variation-settings") > -1 || name.indexOf("font-feature-settings") > -1 || name == "grid" || name.indexOf("grid-") > -1) {
      return value;
    }
    return QUOTED_BUT_SAFE_PATTERN.test(value) ? value.substring(1, value.length - 1) : value;
  };
  var removeUrlQuotes = function(value) {
    return /^url\(['"].+['"]\)$/.test(value) && !/^url\(['"].*[\*\s\(\)'"].*['"]\)$/.test(value) && !/^url\(['"]data:[^;]+;charset/.test(value) ? value.replace(/["']/g, "") : value;
  };
  var transformValue = function(propertyName, propertyValue, rule, transformCallback) {
    var selector = serializeRules(rule);
    var transformedValue = transformCallback(propertyName, propertyValue, selector);
    if (transformedValue === undefined) {
      return propertyValue;
    } else if (transformedValue === false) {
      return IgnoreProperty;
    } else {
      return transformedValue;
    }
  };
  var optimizeBody = function(rule, properties, context) {
    var options = context.options;
    var levelOptions = options.level[OptimizationLevel.One];
    var property, name, type, value;
    var valueIsUrl;
    var propertyToken;
    var _properties = wrapForOptimizing(properties, true);
    propertyLoop:
      for (var i = 0, l2 = _properties.length;i < l2; i++) {
        property = _properties[i];
        name = property.name;
        if (!PROPERTY_NAME_PATTERN.test(name)) {
          propertyToken = property.all[property.position];
          context.warnings.push("Invalid property name \'" + name + "\' at " + formatPosition(propertyToken[1][2][0]) + ". Ignoring.");
          property.unused = true;
        }
        if (property.value.length === 0) {
          propertyToken = property.all[property.position];
          context.warnings.push("Empty property \'" + name + "\' at " + formatPosition(propertyToken[1][2][0]) + ". Ignoring.");
          property.unused = true;
        }
        if (property.hack && ((property.hack[0] == Hack.ASTERISK || property.hack[0] == Hack.UNDERSCORE) && !options.compatibility.properties.iePrefixHack || property.hack[0] == Hack.BACKSLASH && !options.compatibility.properties.ieSuffixHack || property.hack[0] == Hack.BANG && !options.compatibility.properties.ieBangHack)) {
          property.unused = true;
        }
        if (levelOptions.removeNegativePaddings && name.indexOf("padding") === 0 && (isNegative(property.value[0]) || isNegative(property.value[1]) || isNegative(property.value[2]) || isNegative(property.value[3]))) {
          property.unused = true;
        }
        if (!options.compatibility.properties.ieFilters && isLegacyFilter(property)) {
          property.unused = true;
        }
        if (property.unused) {
          continue;
        }
        if (property.block) {
          optimizeBody(rule, property.value[0][1], context);
          continue;
        }
        if (VARIABLE_NAME_PATTERN.test(name)) {
          continue;
        }
        for (var j2 = 0, m2 = property.value.length;j2 < m2; j2++) {
          type = property.value[j2][0];
          value = property.value[j2][1];
          valueIsUrl = isUrl(value);
          if (type == Token.PROPERTY_BLOCK) {
            property.unused = true;
            context.warnings.push("Invalid value token at " + formatPosition(value[0][1][2][0]) + ". Ignoring.");
            break;
          }
          if (valueIsUrl && !context.validator.isUrl(value)) {
            property.unused = true;
            context.warnings.push("Broken URL \'" + value + "\' at " + formatPosition(property.value[j2][2][0]) + ". Ignoring.");
            break;
          }
          if (valueIsUrl) {
            value = levelOptions.normalizeUrls ? normalizeUrl(value) : value;
            value = !options.compatibility.properties.urlQuotes ? removeUrlQuotes(value) : value;
          } else if (isQuoted(value) || isLocal(value)) {
            value = levelOptions.removeQuotes ? removeQuotes(name, value) : value;
          } else {
            value = levelOptions.removeWhitespace ? optimizeWhitespace(name, value) : value;
            value = optimizePrecision(name, value, options.precision);
            value = optimizePixelLengths(name, value, options.compatibility);
            value = levelOptions.replaceTimeUnits ? optimizeTimeUnits(name, value) : value;
            value = levelOptions.replaceZeroUnits ? optimizeZeroUnits(name, value) : value;
            if (options.compatibility.properties.zeroUnits) {
              value = optimizeZeroDegUnit(name, value);
              value = optimizeUnits(name, value, options.unitsRegexp);
            }
            if (options.compatibility.properties.colors) {
              value = optimizeColors(name, value, options.compatibility);
            }
          }
          value = transformValue(name, value, rule, levelOptions.transform);
          if (value === IgnoreProperty) {
            property.unused = true;
            continue propertyLoop;
          }
          property.value[j2][1] = value;
        }
        if (levelOptions.replaceMultipleZeros) {
          optimizeMultipleZeros(property);
        }
        if (name == "background" && levelOptions.optimizeBackground) {
          optimizeBackground(property);
        } else if (name.indexOf("border") === 0 && name.indexOf("radius") > 0 && levelOptions.optimizeBorderRadius) {
          optimizeBorderRadius(property);
        } else if (name == "filter" && levelOptions.optimizeFilter && options.compatibility.properties.ieFilters) {
          optimizeFilter(property);
        } else if (name == "font-weight" && levelOptions.optimizeFontWeight) {
          optimizeFontWeight(property, 0);
        } else if (name == "outline" && levelOptions.optimizeOutline) {
          optimizeOutline(property);
        }
      }
    restoreFromOptimizing(_properties);
    removeUnused(_properties);
    removeComments(properties, options);
  };
  var removeComments = function(tokens, options) {
    var token;
    var i;
    for (i = 0;i < tokens.length; i++) {
      token = tokens[i];
      if (token[0] != Token.COMMENT) {
        continue;
      }
      optimizeComment(token, options);
      if (token[1].length === 0) {
        tokens.splice(i, 1);
        i--;
      }
    }
  };
  var optimizeComment = function(token, options) {
    if (token[1][2] == Marker.EXCLAMATION && (options.level[OptimizationLevel.One].specialComments == "all" || options.commentsKept < options.level[OptimizationLevel.One].specialComments)) {
      options.commentsKept++;
      return;
    }
    token[1] = [];
  };
  var cleanupCharsets = function(tokens) {
    var hasCharset = false;
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      if (token[0] != Token.AT_RULE)
        continue;
      if (!CHARSET_REGEXP.test(token[1]))
        continue;
      if (hasCharset || token[1].indexOf(CHARSET_TOKEN) == -1) {
        tokens.splice(i, 1);
        i--;
        l2--;
      } else {
        hasCharset = true;
        tokens.splice(i, 1);
        tokens.unshift([Token.AT_RULE, token[1].replace(CHARSET_REGEXP, CHARSET_TOKEN)]);
      }
    }
  };
  var buildUnitRegexp = function(options) {
    var units = ["px", "em", "ex", "cm", "mm", "in", "pt", "pc", "%"];
    var otherUnits = ["ch", "rem", "vh", "vm", "vmax", "vmin", "vw"];
    otherUnits.forEach(function(unit) {
      if (options.compatibility.units[unit]) {
        units.push(unit);
      }
    });
    return new RegExp("(^|\\s|\\(|,)0(?:" + units.join("|") + ")(\\W|$)", "g");
  };
  var buildPrecisionOptions = function(roundingPrecision) {
    var precisionOptions = {
      matcher: null,
      units: {}
    };
    var optimizable = [];
    var unit;
    var value;
    for (unit in roundingPrecision) {
      value = roundingPrecision[unit];
      if (value != DEFAULT_ROUNDING_PRECISION) {
        precisionOptions.units[unit] = {};
        precisionOptions.units[unit].value = value;
        precisionOptions.units[unit].multiplier = Math.pow(10, value);
        optimizable.push(unit);
      }
    }
    if (optimizable.length > 0) {
      precisionOptions.enabled = true;
      precisionOptions.decimalPointMatcher = new RegExp("(\\d)\\.($|" + optimizable.join("|") + ")($|\\W)", "g");
      precisionOptions.zeroMatcher = new RegExp("(\\d*)(\\.\\d+)(" + optimizable.join("|") + ")", "g");
    }
    return precisionOptions;
  };
  var isImport = function(token) {
    return IMPORT_PREFIX_PATTERN.test(token[1]);
  };
  var isLegacyFilter = function(property) {
    var value;
    if (property.name == "filter" || property.name == "-ms-filter") {
      value = property.value[0][1];
      return value.indexOf("progid") > -1 || value.indexOf("alpha") === 0 || value.indexOf("chroma") === 0;
    } else {
      return false;
    }
  };
  var level1Optimize = function(tokens, context) {
    var options = context.options;
    var levelOptions = options.level[OptimizationLevel.One];
    var ie7Hack = options.compatibility.selectors.ie7Hack;
    var adjacentSpace = options.compatibility.selectors.adjacentSpace;
    var spaceAfterClosingBrace = options.compatibility.properties.spaceAfterClosingBrace;
    var format = options.format;
    var mayHaveCharset = false;
    var afterRules = false;
    options.unitsRegexp = options.unitsRegexp || buildUnitRegexp(options);
    options.precision = options.precision || buildPrecisionOptions(levelOptions.roundingPrecision);
    options.commentsKept = options.commentsKept || 0;
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      switch (token[0]) {
        case Token.AT_RULE:
          token[1] = isImport(token) && afterRules ? "" : token[1];
          token[1] = levelOptions.tidyAtRules ? tidyAtRule(token[1]) : token[1];
          mayHaveCharset = true;
          break;
        case Token.AT_RULE_BLOCK:
          optimizeBody(token[1], token[2], context);
          afterRules = true;
          break;
        case Token.NESTED_BLOCK:
          token[1] = levelOptions.tidyBlockScopes ? tidyBlock(token[1], spaceAfterClosingBrace) : token[1];
          level1Optimize(token[2], context);
          afterRules = true;
          break;
        case Token.COMMENT:
          optimizeComment(token, options);
          break;
        case Token.RULE:
          token[1] = levelOptions.tidySelectors ? tidyRules(token[1], !ie7Hack, adjacentSpace, format, context.warnings) : token[1];
          token[1] = token[1].length > 1 ? sortSelectors(token[1], levelOptions.selectorsSortingMethod) : token[1];
          optimizeBody(token[1], token[2], context);
          afterRules = true;
          break;
      }
      if (token[0] == Token.COMMENT && token[1].length === 0 || levelOptions.removeEmpty && (token[1].length === 0 || token[2] && token[2].length === 0)) {
        tokens.splice(i, 1);
        i--;
        l2--;
      }
    }
    if (levelOptions.cleanupCharsets && mayHaveCharset) {
      cleanupCharsets(tokens);
    }
    return tokens;
  };
  var shortenHex = require_shorten_hex();
  var shortenHsl = require_shorten_hsl();
  var shortenRgb = require_shorten_rgb();
  var sortSelectors = require_sort_selectors();
  var tidyRules = require_tidy_rules();
  var tidyBlock = require_tidy_block();
  var tidyAtRule = require_tidy_at_rule();
  var Hack = require_hack();
  var removeUnused = require_remove_unused();
  var restoreFromOptimizing = require_restore_from_optimizing();
  var wrapForOptimizing = require_wrap_for_optimizing().all;
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var Token = require_token();
  var Marker = require_marker();
  var formatPosition = require_format_position();
  var split = require_split();
  var serializeRules = require_one_time().rules;
  var IgnoreProperty = "ignore-property";
  var CHARSET_TOKEN = "@charset";
  var CHARSET_REGEXP = new RegExp("^" + CHARSET_TOKEN, "i");
  var DEFAULT_ROUNDING_PRECISION = require_rounding_precision().DEFAULT;
  var WHOLE_PIXEL_VALUE = /(?:^|\s|\()(-?\d+)px/;
  var TIME_VALUE = /^(\-?[\d\.]+)(m?s)$/;
  var HEX_VALUE_PATTERN = /[0-9a-f]/i;
  var PROPERTY_NAME_PATTERN = /^(?:\-chrome\-|\-[\w\-]+\w|\w[\w\-]+\w|\-\-\S+)$/;
  var IMPORT_PREFIX_PATTERN = /^@import/i;
  var QUOTED_PATTERN = /^('.*'|".*")$/;
  var QUOTED_BUT_SAFE_PATTERN = /^['"][a-zA-Z][a-zA-Z\d\-_]+['"]$/;
  var URL_PREFIX_PATTERN = /^url\(/i;
  var LOCAL_PREFIX_PATTERN = /^local\(/i;
  var VARIABLE_NAME_PATTERN = /^--\S+$/;
  module.exports = level1Optimize;
});

// node_modules/clean-css/lib/optimizer/level-2/is-mergeable.js
var require_is_mergeable = __commonJS((exports, module) => {
  var isMergeable = function(selector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
    var singleSelectors = split(selector, Marker.COMMA);
    var singleSelector;
    var i, l2;
    for (i = 0, l2 = singleSelectors.length;i < l2; i++) {
      singleSelector = singleSelectors[i];
      if (singleSelector.length === 0 || isDeepSelector(singleSelector) || singleSelector.indexOf(Marker.COLON) > -1 && !areMergeable(singleSelector, extractPseudoFrom(singleSelector), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)) {
        return false;
      }
    }
    return true;
  };
  var isDeepSelector = function(selector) {
    return DEEP_SELECTOR_PATTERN.test(selector);
  };
  var extractPseudoFrom = function(selector) {
    var list = [];
    var character;
    var buffer = [];
    var level = Level.ROOT;
    var roundBracketLevel = 0;
    var isQuoted;
    var isEscaped;
    var isPseudo = false;
    var isRelation;
    var wasColon = false;
    var index;
    var len;
    for (index = 0, len = selector.length;index < len; index++) {
      character = selector[index];
      isRelation = !isEscaped && RELATION_PATTERN.test(character);
      isQuoted = level == Level.DOUBLE_QUOTE || level == Level.SINGLE_QUOTE;
      if (isEscaped) {
        buffer.push(character);
      } else if (character == Marker.DOUBLE_QUOTE && level == Level.ROOT) {
        buffer.push(character);
        level = Level.DOUBLE_QUOTE;
      } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
        buffer.push(character);
        level = Level.ROOT;
      } else if (character == Marker.SINGLE_QUOTE && level == Level.ROOT) {
        buffer.push(character);
        level = Level.SINGLE_QUOTE;
      } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
        buffer.push(character);
        level = Level.ROOT;
      } else if (isQuoted) {
        buffer.push(character);
      } else if (character == Marker.OPEN_ROUND_BRACKET) {
        buffer.push(character);
        roundBracketLevel++;
      } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1 && isPseudo) {
        buffer.push(character);
        list.push(buffer.join(""));
        roundBracketLevel--;
        buffer = [];
        isPseudo = false;
      } else if (character == Marker.CLOSE_ROUND_BRACKET) {
        buffer.push(character);
        roundBracketLevel--;
      } else if (character == Marker.COLON && roundBracketLevel === 0 && isPseudo && !wasColon) {
        list.push(buffer.join(""));
        buffer = [];
        buffer.push(character);
      } else if (character == Marker.COLON && roundBracketLevel === 0 && !wasColon) {
        buffer = [];
        buffer.push(character);
        isPseudo = true;
      } else if (character == Marker.SPACE && roundBracketLevel === 0 && isPseudo) {
        list.push(buffer.join(""));
        buffer = [];
        isPseudo = false;
      } else if (isRelation && roundBracketLevel === 0 && isPseudo) {
        list.push(buffer.join(""));
        buffer = [];
        isPseudo = false;
      } else {
        buffer.push(character);
      }
      isEscaped = character == Marker.BACK_SLASH;
      wasColon = character == Marker.COLON;
    }
    if (buffer.length > 0 && isPseudo) {
      list.push(buffer.join(""));
    }
    return list;
  };
  var areMergeable = function(selector, matches, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
    return areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements) && needArguments(matches) && (matches.length < 2 || !someIncorrectlyChained(selector, matches)) && (matches.length < 2 || multiplePseudoMerging && allMixable(matches));
  };
  var areAllowed = function(matches, mergeablePseudoClasses, mergeablePseudoElements) {
    var match;
    var name;
    var i, l2;
    for (i = 0, l2 = matches.length;i < l2; i++) {
      match = matches[i];
      name = match.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? match.substring(0, match.indexOf(Marker.OPEN_ROUND_BRACKET)) : match;
      if (mergeablePseudoClasses.indexOf(name) === -1 && mergeablePseudoElements.indexOf(name) === -1) {
        return false;
      }
    }
    return true;
  };
  var needArguments = function(matches) {
    var match;
    var name;
    var bracketOpensAt;
    var hasArguments;
    var i, l2;
    for (i = 0, l2 = matches.length;i < l2; i++) {
      match = matches[i];
      bracketOpensAt = match.indexOf(Marker.OPEN_ROUND_BRACKET);
      hasArguments = bracketOpensAt > -1;
      name = hasArguments ? match.substring(0, bracketOpensAt) : match;
      if (hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) == -1) {
        return false;
      }
      if (!hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) > -1) {
        return false;
      }
    }
    return true;
  };
  var someIncorrectlyChained = function(selector, matches) {
    var positionInSelector = 0;
    var match;
    var matchAt;
    var nextMatch;
    var nextMatchAt;
    var name;
    var nextName;
    var areChained;
    var i, l2;
    for (i = 0, l2 = matches.length;i < l2; i++) {
      match = matches[i];
      nextMatch = matches[i + 1];
      if (!nextMatch) {
        break;
      }
      matchAt = selector.indexOf(match, positionInSelector);
      nextMatchAt = selector.indexOf(match, matchAt + 1);
      positionInSelector = nextMatchAt;
      areChained = matchAt + match.length == nextMatchAt;
      if (areChained) {
        name = match.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? match.substring(0, match.indexOf(Marker.OPEN_ROUND_BRACKET)) : match;
        nextName = nextMatch.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? nextMatch.substring(0, nextMatch.indexOf(Marker.OPEN_ROUND_BRACKET)) : nextMatch;
        if (name != NOT_PSEUDO || nextName != NOT_PSEUDO) {
          return true;
        }
      }
    }
    return false;
  };
  var allMixable = function(matches) {
    var unmixableMatches = 0;
    var match;
    var i, l2;
    for (i = 0, l2 = matches.length;i < l2; i++) {
      match = matches[i];
      if (isPseudoElement(match)) {
        unmixableMatches += UNMIXABLE_PSEUDO_ELEMENTS.indexOf(match) > -1 ? 1 : 0;
      } else {
        unmixableMatches += UNMIXABLE_PSEUDO_CLASSES.indexOf(match) > -1 ? 1 : 0;
      }
      if (unmixableMatches > 1) {
        return false;
      }
    }
    return true;
  };
  var isPseudoElement = function(pseudo) {
    return DOUBLE_COLON_PATTERN.test(pseudo);
  };
  var Marker = require_marker();
  var split = require_split();
  var DEEP_SELECTOR_PATTERN = /\/deep\//;
  var DOUBLE_COLON_PATTERN = /^::/;
  var NOT_PSEUDO = ":not";
  var PSEUDO_CLASSES_WITH_ARGUMENTS = [
    ":dir",
    ":lang",
    ":not",
    ":nth-child",
    ":nth-last-child",
    ":nth-last-of-type",
    ":nth-of-type"
  ];
  var RELATION_PATTERN = /[>\+~]/;
  var UNMIXABLE_PSEUDO_CLASSES = [
    ":after",
    ":before",
    ":first-letter",
    ":first-line",
    ":lang"
  ];
  var UNMIXABLE_PSEUDO_ELEMENTS = [
    "::after",
    "::before",
    "::first-letter",
    "::first-line"
  ];
  var Level = {
    DOUBLE_QUOTE: "double-quote",
    SINGLE_QUOTE: "single-quote",
    ROOT: "root"
  };
  module.exports = isMergeable;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/every-values-pair.js
var require_every_values_pair = __commonJS((exports, module) => {
  var everyValuesPair = function(fn, left, right) {
    var leftSize = left.value.length;
    var rightSize = right.value.length;
    var total = Math.max(leftSize, rightSize);
    var lowerBound = Math.min(leftSize, rightSize) - 1;
    var leftValue;
    var rightValue;
    var position;
    for (position = 0;position < total; position++) {
      leftValue = left.value[position] && left.value[position][1] || leftValue;
      rightValue = right.value[position] && right.value[position][1] || rightValue;
      if (leftValue == Marker.COMMA || rightValue == Marker.COMMA) {
        continue;
      }
      if (!fn(leftValue, rightValue, position, position <= lowerBound)) {
        return false;
      }
    }
    return true;
  };
  var Marker = require_marker();
  module.exports = everyValuesPair;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/has-inherit.js
var require_has_inherit = __commonJS((exports, module) => {
  var hasInherit = function(property) {
    for (var i = property.value.length - 1;i >= 0; i--) {
      if (property.value[i][1] == "inherit")
        return true;
    }
    return false;
  };
  module.exports = hasInherit;
});

// node_modules/clean-css/lib/optimizer/level-2/invalid-property-error.js
var require_invalid_property_error = __commonJS((exports, module) => {
  var InvalidPropertyError = function(message) {
    this.name = "InvalidPropertyError";
    this.message = message;
    this.stack = new Error().stack;
  };
  InvalidPropertyError.prototype = Object.create(Error.prototype);
  InvalidPropertyError.prototype.constructor = InvalidPropertyError;
  module.exports = InvalidPropertyError;
});

// node_modules/clean-css/lib/optimizer/level-2/break-up.js
var require_break_up = __commonJS((exports, module) => {
  var _anyIsInherit = function(values) {
    var i, l2;
    for (i = 0, l2 = values.length;i < l2; i++) {
      if (values[i][1] == "inherit") {
        return true;
      }
    }
    return false;
  };
  var _colorFilter = function(validator) {
    return function(value) {
      return value[1] == "invert" || validator.isColor(value[1]) || validator.isPrefixed(value[1]);
    };
  };
  var _styleFilter = function(validator) {
    return function(value) {
      return value[1] != "inherit" && validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
    };
  };
  var _wrapDefault = function(name, property, compactable) {
    var descriptor = compactable[name];
    if (descriptor.doubleValues && descriptor.defaultValue.length == 2) {
      return wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, name],
        [Token.PROPERTY_VALUE, descriptor.defaultValue[0]],
        [Token.PROPERTY_VALUE, descriptor.defaultValue[1]]
      ]);
    } else if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
      return wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, name],
        [Token.PROPERTY_VALUE, descriptor.defaultValue[0]]
      ]);
    } else {
      return wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, name],
        [Token.PROPERTY_VALUE, descriptor.defaultValue]
      ]);
    }
  };
  var _widthFilter = function(validator) {
    return function(value) {
      return value[1] != "inherit" && (validator.isWidth(value[1]) || validator.isUnit(value[1]) && !validator.isDynamicUnit(value[1])) && !validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
    };
  };
  var animation = function(property, compactable, validator) {
    var duration = _wrapDefault(property.name + "-duration", property, compactable);
    var timing = _wrapDefault(property.name + "-timing-function", property, compactable);
    var delay = _wrapDefault(property.name + "-delay", property, compactable);
    var iteration = _wrapDefault(property.name + "-iteration-count", property, compactable);
    var direction = _wrapDefault(property.name + "-direction", property, compactable);
    var fill = _wrapDefault(property.name + "-fill-mode", property, compactable);
    var play = _wrapDefault(property.name + "-play-state", property, compactable);
    var name = _wrapDefault(property.name + "-name", property, compactable);
    var components = [duration, timing, delay, iteration, direction, fill, play, name];
    var values = property.value;
    var value;
    var durationSet = false;
    var timingSet = false;
    var delaySet = false;
    var iterationSet = false;
    var directionSet = false;
    var fillSet = false;
    var playSet = false;
    var nameSet = false;
    var i;
    var l2;
    if (property.value.length == 1 && property.value[0][1] == "inherit") {
      duration.value = timing.value = delay.value = iteration.value = direction.value = fill.value = play.value = name.value = property.value;
      return components;
    }
    if (values.length > 1 && _anyIsInherit(values)) {
      throw new InvalidPropertyError("Invalid animation values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    for (i = 0, l2 = values.length;i < l2; i++) {
      value = values[i];
      if (validator.isTime(value[1]) && !durationSet) {
        duration.value = [value];
        durationSet = true;
      } else if (validator.isTime(value[1]) && !delaySet) {
        delay.value = [value];
        delaySet = true;
      } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
        timing.value = [value];
        timingSet = true;
      } else if ((validator.isAnimationIterationCountKeyword(value[1]) || validator.isPositiveNumber(value[1])) && !iterationSet) {
        iteration.value = [value];
        iterationSet = true;
      } else if (validator.isAnimationDirectionKeyword(value[1]) && !directionSet) {
        direction.value = [value];
        directionSet = true;
      } else if (validator.isAnimationFillModeKeyword(value[1]) && !fillSet) {
        fill.value = [value];
        fillSet = true;
      } else if (validator.isAnimationPlayStateKeyword(value[1]) && !playSet) {
        play.value = [value];
        playSet = true;
      } else if ((validator.isAnimationNameKeyword(value[1]) || validator.isIdentifier(value[1])) && !nameSet) {
        name.value = [value];
        nameSet = true;
      } else {
        throw new InvalidPropertyError("Invalid animation value at " + formatPosition(value[2][0]) + ". Ignoring.");
      }
    }
    return components;
  };
  var background = function(property, compactable, validator) {
    var image = _wrapDefault("background-image", property, compactable);
    var position = _wrapDefault("background-position", property, compactable);
    var size = _wrapDefault("background-size", property, compactable);
    var repeat = _wrapDefault("background-repeat", property, compactable);
    var attachment = _wrapDefault("background-attachment", property, compactable);
    var origin = _wrapDefault("background-origin", property, compactable);
    var clip = _wrapDefault("background-clip", property, compactable);
    var color = _wrapDefault("background-color", property, compactable);
    var components = [image, position, size, repeat, attachment, origin, clip, color];
    var values = property.value;
    var positionSet = false;
    var clipSet = false;
    var originSet = false;
    var repeatSet = false;
    var anyValueSet = false;
    if (property.value.length == 1 && property.value[0][1] == "inherit") {
      color.value = image.value = repeat.value = position.value = size.value = origin.value = clip.value = property.value;
      return components;
    }
    if (property.value.length == 1 && property.value[0][1] == "0 0") {
      return components;
    }
    for (var i = values.length - 1;i >= 0; i--) {
      var value = values[i];
      if (validator.isBackgroundAttachmentKeyword(value[1])) {
        attachment.value = [value];
        anyValueSet = true;
      } else if (validator.isBackgroundClipKeyword(value[1]) || validator.isBackgroundOriginKeyword(value[1])) {
        if (clipSet) {
          origin.value = [value];
          originSet = true;
        } else {
          clip.value = [value];
          clipSet = true;
        }
        anyValueSet = true;
      } else if (validator.isBackgroundRepeatKeyword(value[1])) {
        if (repeatSet) {
          repeat.value.unshift(value);
        } else {
          repeat.value = [value];
          repeatSet = true;
        }
        anyValueSet = true;
      } else if (validator.isBackgroundPositionKeyword(value[1]) || validator.isBackgroundSizeKeyword(value[1]) || validator.isUnit(value[1]) || validator.isDynamicUnit(value[1])) {
        if (i > 0) {
          var previousValue = values[i - 1];
          if (previousValue[1] == Marker.FORWARD_SLASH) {
            size.value = [value];
          } else if (i > 1 && values[i - 2][1] == Marker.FORWARD_SLASH) {
            size.value = [previousValue, value];
            i -= 2;
          } else {
            if (!positionSet)
              position.value = [];
            position.value.unshift(value);
            positionSet = true;
          }
        } else {
          if (!positionSet)
            position.value = [];
          position.value.unshift(value);
          positionSet = true;
        }
        anyValueSet = true;
      } else if ((color.value[0][1] == compactable[color.name].defaultValue || color.value[0][1] == "none") && (validator.isColor(value[1]) || validator.isPrefixed(value[1]))) {
        color.value = [value];
        anyValueSet = true;
      } else if (validator.isUrl(value[1]) || validator.isFunction(value[1])) {
        image.value = [value];
        anyValueSet = true;
      }
    }
    if (clipSet && !originSet)
      origin.value = clip.value.slice(0);
    if (!anyValueSet) {
      throw new InvalidPropertyError("Invalid background value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    return components;
  };
  var borderRadius = function(property, compactable) {
    var values = property.value;
    var splitAt = -1;
    for (var i = 0, l2 = values.length;i < l2; i++) {
      if (values[i][1] == Marker.FORWARD_SLASH) {
        splitAt = i;
        break;
      }
    }
    if (splitAt === 0 || splitAt === values.length - 1) {
      throw new InvalidPropertyError("Invalid border-radius value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    var target = _wrapDefault(property.name, property, compactable);
    target.value = splitAt > -1 ? values.slice(0, splitAt) : values.slice(0);
    target.components = fourValues(target, compactable);
    var remainder = _wrapDefault(property.name, property, compactable);
    remainder.value = splitAt > -1 ? values.slice(splitAt + 1) : values.slice(0);
    remainder.components = fourValues(remainder, compactable);
    for (var j2 = 0;j2 < 4; j2++) {
      target.components[j2].multiplex = true;
      target.components[j2].value = target.components[j2].value.concat(remainder.components[j2].value);
    }
    return target.components;
  };
  var font = function(property, compactable, validator) {
    var style = _wrapDefault("font-style", property, compactable);
    var variant = _wrapDefault("font-variant", property, compactable);
    var weight = _wrapDefault("font-weight", property, compactable);
    var stretch = _wrapDefault("font-stretch", property, compactable);
    var size = _wrapDefault("font-size", property, compactable);
    var height = _wrapDefault("line-height", property, compactable);
    var family = _wrapDefault("font-family", property, compactable);
    var components = [style, variant, weight, stretch, size, height, family];
    var values = property.value;
    var fuzzyMatched = 4;
    var index = 0;
    var isStretchSet = false;
    var isStretchValid;
    var isStyleSet = false;
    var isStyleValid;
    var isVariantSet = false;
    var isVariantValid;
    var isWeightSet = false;
    var isWeightValid;
    var isSizeSet = false;
    var appendableFamilyName = false;
    if (!values[index]) {
      throw new InvalidPropertyError("Missing font values at " + formatPosition(property.all[property.position][1][2][0]) + ". Ignoring.");
    }
    if (values.length == 1 && values[0][1] == "inherit") {
      style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
      return components;
    }
    if (values.length == 1 && (validator.isFontKeyword(values[0][1]) || validator.isGlobal(values[0][1]) || validator.isPrefixed(values[0][1]))) {
      values[0][1] = Marker.INTERNAL + values[0][1];
      style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
      return components;
    }
    if (values.length < 2 || !_anyIsFontSize(values, validator) || !_anyIsFontFamily(values, validator)) {
      throw new InvalidPropertyError("Invalid font values at " + formatPosition(property.all[property.position][1][2][0]) + ". Ignoring.");
    }
    if (values.length > 1 && _anyIsInherit(values)) {
      throw new InvalidPropertyError("Invalid font values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    while (index < fuzzyMatched) {
      isStretchValid = validator.isFontStretchKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
      isStyleValid = validator.isFontStyleKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
      isVariantValid = validator.isFontVariantKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
      isWeightValid = validator.isFontWeightKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
      if (isStyleValid && !isStyleSet) {
        style.value = [values[index]];
        isStyleSet = true;
      } else if (isVariantValid && !isVariantSet) {
        variant.value = [values[index]];
        isVariantSet = true;
      } else if (isWeightValid && !isWeightSet) {
        weight.value = [values[index]];
        isWeightSet = true;
      } else if (isStretchValid && !isStretchSet) {
        stretch.value = [values[index]];
        isStretchSet = true;
      } else if (isStyleValid && isStyleSet || isVariantValid && isVariantSet || isWeightValid && isWeightSet || isStretchValid && isStretchSet) {
        throw new InvalidPropertyError("Invalid font style / variant / weight / stretch value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      } else {
        break;
      }
      index++;
    }
    if (validator.isFontSizeKeyword(values[index][1]) || validator.isUnit(values[index][1]) && !validator.isDynamicUnit(values[index][1])) {
      size.value = [values[index]];
      isSizeSet = true;
      index++;
    } else {
      throw new InvalidPropertyError("Missing font size at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    if (!values[index]) {
      throw new InvalidPropertyError("Missing font family at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    if (isSizeSet && values[index] && values[index][1] == Marker.FORWARD_SLASH && values[index + 1] && (validator.isLineHeightKeyword(values[index + 1][1]) || validator.isUnit(values[index + 1][1]) || validator.isNumber(values[index + 1][1]))) {
      height.value = [values[index + 1]];
      index++;
      index++;
    }
    family.value = [];
    while (values[index]) {
      if (values[index][1] == Marker.COMMA) {
        appendableFamilyName = false;
      } else {
        if (appendableFamilyName) {
          family.value[family.value.length - 1][1] += Marker.SPACE + values[index][1];
        } else {
          family.value.push(values[index]);
        }
        appendableFamilyName = true;
      }
      index++;
    }
    if (family.value.length === 0) {
      throw new InvalidPropertyError("Missing font family at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    return components;
  };
  var _anyIsFontSize = function(values, validator) {
    var value;
    var i, l2;
    for (i = 0, l2 = values.length;i < l2; i++) {
      value = values[i];
      if (validator.isFontSizeKeyword(value[1]) || validator.isUnit(value[1]) && !validator.isDynamicUnit(value[1]) || validator.isFunction(value[1])) {
        return true;
      }
    }
    return false;
  };
  var _anyIsFontFamily = function(values, validator) {
    var value;
    var i, l2;
    for (i = 0, l2 = values.length;i < l2; i++) {
      value = values[i];
      if (validator.isIdentifier(value[1])) {
        return true;
      }
    }
    return false;
  };
  var fourValues = function(property, compactable) {
    var componentNames = compactable[property.name].components;
    var components = [];
    var value = property.value;
    if (value.length < 1)
      return [];
    if (value.length < 2)
      value[1] = value[0].slice(0);
    if (value.length < 3)
      value[2] = value[0].slice(0);
    if (value.length < 4)
      value[3] = value[1].slice(0);
    for (var i = componentNames.length - 1;i >= 0; i--) {
      var component = wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, componentNames[i]]
      ]);
      component.value = [value[i]];
      components.unshift(component);
    }
    return components;
  };
  var multiplex = function(splitWith) {
    return function(property, compactable, validator) {
      var splitsAt = [];
      var values = property.value;
      var i, j2, l2, m2;
      for (i = 0, l2 = values.length;i < l2; i++) {
        if (values[i][1] == ",")
          splitsAt.push(i);
      }
      if (splitsAt.length === 0)
        return splitWith(property, compactable, validator);
      var splitComponents = [];
      for (i = 0, l2 = splitsAt.length;i <= l2; i++) {
        var from = i === 0 ? 0 : splitsAt[i - 1] + 1;
        var to = i < l2 ? splitsAt[i] : values.length;
        var _property = _wrapDefault(property.name, property, compactable);
        _property.value = values.slice(from, to);
        splitComponents.push(splitWith(_property, compactable, validator));
      }
      var components = splitComponents[0];
      for (i = 0, l2 = components.length;i < l2; i++) {
        components[i].multiplex = true;
        for (j2 = 1, m2 = splitComponents.length;j2 < m2; j2++) {
          components[i].value.push([Token.PROPERTY_VALUE, Marker.COMMA]);
          Array.prototype.push.apply(components[i].value, splitComponents[j2][i].value);
        }
      }
      return components;
    };
  };
  var listStyle = function(property, compactable, validator) {
    var type = _wrapDefault("list-style-type", property, compactable);
    var position = _wrapDefault("list-style-position", property, compactable);
    var image = _wrapDefault("list-style-image", property, compactable);
    var components = [type, position, image];
    if (property.value.length == 1 && property.value[0][1] == "inherit") {
      type.value = position.value = image.value = [property.value[0]];
      return components;
    }
    var values = property.value.slice(0);
    var total = values.length;
    var index = 0;
    for (index = 0, total = values.length;index < total; index++) {
      if (validator.isUrl(values[index][1]) || values[index][1] == "0") {
        image.value = [values[index]];
        values.splice(index, 1);
        break;
      }
    }
    for (index = 0, total = values.length;index < total; index++) {
      if (validator.isListStylePositionKeyword(values[index][1])) {
        position.value = [values[index]];
        values.splice(index, 1);
        break;
      }
    }
    if (values.length > 0 && (validator.isListStyleTypeKeyword(values[0][1]) || validator.isIdentifier(values[0][1]))) {
      type.value = [values[0]];
    }
    return components;
  };
  var transition = function(property, compactable, validator) {
    var prop = _wrapDefault(property.name + "-property", property, compactable);
    var duration = _wrapDefault(property.name + "-duration", property, compactable);
    var timing = _wrapDefault(property.name + "-timing-function", property, compactable);
    var delay = _wrapDefault(property.name + "-delay", property, compactable);
    var components = [prop, duration, timing, delay];
    var values = property.value;
    var value;
    var durationSet = false;
    var delaySet = false;
    var propSet = false;
    var timingSet = false;
    var i;
    var l2;
    if (property.value.length == 1 && property.value[0][1] == "inherit") {
      prop.value = duration.value = timing.value = delay.value = property.value;
      return components;
    }
    if (values.length > 1 && _anyIsInherit(values)) {
      throw new InvalidPropertyError("Invalid animation values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
    }
    for (i = 0, l2 = values.length;i < l2; i++) {
      value = values[i];
      if (validator.isTime(value[1]) && !durationSet) {
        duration.value = [value];
        durationSet = true;
      } else if (validator.isTime(value[1]) && !delaySet) {
        delay.value = [value];
        delaySet = true;
      } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
        timing.value = [value];
        timingSet = true;
      } else if (validator.isIdentifier(value[1]) && !propSet) {
        prop.value = [value];
        propSet = true;
      } else {
        throw new InvalidPropertyError("Invalid animation value at " + formatPosition(value[2][0]) + ". Ignoring.");
      }
    }
    return components;
  };
  var widthStyleColor = function(property, compactable, validator) {
    var descriptor = compactable[property.name];
    var components = [
      _wrapDefault(descriptor.components[0], property, compactable),
      _wrapDefault(descriptor.components[1], property, compactable),
      _wrapDefault(descriptor.components[2], property, compactable)
    ];
    var color, style, width;
    for (var i = 0;i < 3; i++) {
      var component = components[i];
      if (component.name.indexOf("color") > 0)
        color = component;
      else if (component.name.indexOf("style") > 0)
        style = component;
      else
        width = component;
    }
    if (property.value.length == 1 && property.value[0][1] == "inherit" || property.value.length == 3 && property.value[0][1] == "inherit" && property.value[1][1] == "inherit" && property.value[2][1] == "inherit") {
      color.value = style.value = width.value = [property.value[0]];
      return components;
    }
    var values = property.value.slice(0);
    var match, matches;
    if (values.length > 0) {
      matches = values.filter(_widthFilter(validator));
      match = matches.length > 1 && (matches[0][1] == "none" || matches[0][1] == "auto") ? matches[1] : matches[0];
      if (match) {
        width.value = [match];
        values.splice(values.indexOf(match), 1);
      }
    }
    if (values.length > 0) {
      match = values.filter(_styleFilter(validator))[0];
      if (match) {
        style.value = [match];
        values.splice(values.indexOf(match), 1);
      }
    }
    if (values.length > 0) {
      match = values.filter(_colorFilter(validator))[0];
      if (match) {
        color.value = [match];
        values.splice(values.indexOf(match), 1);
      }
    }
    return components;
  };
  var InvalidPropertyError = require_invalid_property_error();
  var wrapSingle = require_wrap_for_optimizing().single;
  var Token = require_token();
  var Marker = require_marker();
  var formatPosition = require_format_position();
  module.exports = {
    animation,
    background,
    border: widthStyleColor,
    borderRadius,
    font,
    fourValues,
    listStyle,
    multiplex,
    outline: widthStyleColor,
    transition
  };
});

// node_modules/clean-css/lib/optimizer/level-2/properties/vendor-prefixes.js
var require_vendor_prefixes = __commonJS((exports, module) => {
  var unique = function(value) {
    var prefixes = [];
    var match;
    while ((match = VENDOR_PREFIX_PATTERN.exec(value)) !== null) {
      if (prefixes.indexOf(match[0]) == -1) {
        prefixes.push(match[0]);
      }
    }
    return prefixes;
  };
  var same = function(value1, value2) {
    return unique(value1).sort().join(",") == unique(value2).sort().join(",");
  };
  var VENDOR_PREFIX_PATTERN = /(?:^|\W)(\-\w+\-)/g;
  module.exports = {
    unique,
    same
  };
});

// node_modules/clean-css/lib/optimizer/level-2/properties/understandable.js
var require_understandable = __commonJS((exports, module) => {
  var understandable = function(validator, value1, value2, _position, isPaired) {
    if (!sameVendorPrefixes(value1, value2)) {
      return false;
    }
    if (isPaired && validator.isVariable(value1) !== validator.isVariable(value2)) {
      return false;
    }
    return true;
  };
  var sameVendorPrefixes = require_vendor_prefixes().same;
  module.exports = understandable;
});

// node_modules/clean-css/lib/optimizer/level-2/can-override.js
var require_can_override = __commonJS((exports, module) => {
  var animationIterationCount = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2);
  };
  var animationName = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2);
  };
  var areSameFunction = function(validator, value1, value2) {
    if (!validator.isFunction(value1) || !validator.isFunction(value2)) {
      return false;
    }
    var function1Name = value1.substring(0, value1.indexOf("("));
    var function2Name = value2.substring(0, value2.indexOf("("));
    return function1Name === function2Name;
  };
  var backgroundPosition = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2)) {
      return true;
    }
    return unit(validator, value1, value2);
  };
  var backgroundSize = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2)) {
      return true;
    }
    return unit(validator, value1, value2);
  };
  var color = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isColor(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (!validator.colorOpacity && (validator.isRgbColor(value1) || validator.isHslColor(value1))) {
      return false;
    } else if (!validator.colorOpacity && (validator.isRgbColor(value2) || validator.isHslColor(value2))) {
      return false;
    } else if (validator.isColor(value1) && validator.isColor(value2)) {
      return true;
    }
    return sameFunctionOrValue(validator, value1, value2);
  };
  var components = function(overrideCheckers) {
    return function(validator, value1, value2, position) {
      return overrideCheckers[position](validator, value1, value2);
    };
  };
  var fontFamily = function(validator, value1, value2) {
    return understandable(validator, value1, value2, 0, true);
  };
  var image = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isImage(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (validator.isImage(value2)) {
      return true;
    } else if (validator.isImage(value1)) {
      return false;
    }
    return sameFunctionOrValue(validator, value1, value2);
  };
  var keyword = function(propertyName2) {
    return function(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isKeyword(propertyName2)(value2)) {
        return false;
      } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isKeyword(propertyName2)(value2);
    };
  };
  var keywordWithGlobal = function(propertyName2) {
    return function(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isKeyword(propertyName2)(value2) || validator.isGlobal(value2))) {
        return false;
      } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isKeyword(propertyName2)(value2) || validator.isGlobal(value2);
    };
  };
  var propertyName = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isIdentifier(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isIdentifier(value2);
  };
  var sameFunctionOrValue = function(validator, value1, value2) {
    return areSameFunction(validator, value1, value2) ? true : value1 === value2;
  };
  var textShadow = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2);
  };
  var time = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isTime(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (validator.isTime(value1) && !validator.isTime(value2)) {
      return false;
    } else if (validator.isTime(value2)) {
      return true;
    } else if (validator.isTime(value1)) {
      return false;
    } else if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
      return true;
    }
    return sameFunctionOrValue(validator, value1, value2);
  };
  var timingFunction = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isTimingFunction(value2) || validator.isGlobal(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isTimingFunction(value2) || validator.isGlobal(value2);
  };
  var unit = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isUnit(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if (validator.isUnit(value1) && !validator.isUnit(value2)) {
      return false;
    } else if (validator.isUnit(value2)) {
      return true;
    } else if (validator.isUnit(value1)) {
      return false;
    } else if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
      return true;
    }
    return sameFunctionOrValue(validator, value1, value2);
  };
  var unitOrKeywordWithGlobal = function(propertyName2) {
    var byKeyword = keywordWithGlobal(propertyName2);
    return function(validator, value1, value2) {
      return unit(validator, value1, value2) || byKeyword(validator, value1, value2);
    };
  };
  var unitOrNumber = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !(validator.isUnit(value2) || validator.isNumber(value2))) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    } else if ((validator.isUnit(value1) || validator.isNumber(value1)) && !(validator.isUnit(value2) || validator.isNumber(value2))) {
      return false;
    } else if (validator.isUnit(value2) || validator.isNumber(value2)) {
      return true;
    } else if (validator.isUnit(value1) || validator.isNumber(value1)) {
      return false;
    } else if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
      return true;
    }
    return sameFunctionOrValue(validator, value1, value2);
  };
  var zIndex = function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isZIndex(value2)) {
      return false;
    } else if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }
    return validator.isZIndex(value2);
  };
  var understandable = require_understandable();
  module.exports = {
    generic: {
      color,
      components,
      image,
      propertyName,
      time,
      timingFunction,
      unit,
      unitOrNumber
    },
    property: {
      animationDirection: keywordWithGlobal("animation-direction"),
      animationFillMode: keyword("animation-fill-mode"),
      animationIterationCount,
      animationName,
      animationPlayState: keywordWithGlobal("animation-play-state"),
      backgroundAttachment: keyword("background-attachment"),
      backgroundClip: keywordWithGlobal("background-clip"),
      backgroundOrigin: keyword("background-origin"),
      backgroundPosition,
      backgroundRepeat: keyword("background-repeat"),
      backgroundSize,
      bottom: unitOrKeywordWithGlobal("bottom"),
      borderCollapse: keyword("border-collapse"),
      borderStyle: keywordWithGlobal("*-style"),
      clear: keywordWithGlobal("clear"),
      cursor: keywordWithGlobal("cursor"),
      display: keywordWithGlobal("display"),
      float: keywordWithGlobal("float"),
      left: unitOrKeywordWithGlobal("left"),
      fontFamily,
      fontStretch: keywordWithGlobal("font-stretch"),
      fontStyle: keywordWithGlobal("font-style"),
      fontVariant: keywordWithGlobal("font-variant"),
      fontWeight: keywordWithGlobal("font-weight"),
      listStyleType: keywordWithGlobal("list-style-type"),
      listStylePosition: keywordWithGlobal("list-style-position"),
      outlineStyle: keywordWithGlobal("*-style"),
      overflow: keywordWithGlobal("overflow"),
      position: keywordWithGlobal("position"),
      right: unitOrKeywordWithGlobal("right"),
      textAlign: keywordWithGlobal("text-align"),
      textDecoration: keywordWithGlobal("text-decoration"),
      textOverflow: keywordWithGlobal("text-overflow"),
      textShadow,
      top: unitOrKeywordWithGlobal("top"),
      transform: sameFunctionOrValue,
      verticalAlign: unitOrKeywordWithGlobal("vertical-align"),
      visibility: keywordWithGlobal("visibility"),
      whiteSpace: keywordWithGlobal("white-space"),
      zIndex
    }
  };
});

// node_modules/clean-css/lib/optimizer/level-2/clone.js
var require_clone = __commonJS((exports, module) => {
  var deep = function(property) {
    var cloned = shallow(property);
    for (var i = property.components.length - 1;i >= 0; i--) {
      var component = shallow(property.components[i]);
      component.value = property.components[i].value.slice(0);
      cloned.components.unshift(component);
    }
    cloned.dirty = true;
    cloned.value = property.value.slice(0);
    return cloned;
  };
  var shallow = function(property) {
    var cloned = wrapSingle([
      Token.PROPERTY,
      [Token.PROPERTY_NAME, property.name]
    ]);
    cloned.important = property.important;
    cloned.hack = property.hack;
    cloned.unused = false;
    return cloned;
  };
  var wrapSingle = require_wrap_for_optimizing().single;
  var Token = require_token();
  module.exports = {
    deep,
    shallow
  };
});

// node_modules/clean-css/lib/optimizer/level-2/restore.js
var require_restore = __commonJS((exports, module) => {
  var isInheritOnly = function(values) {
    for (var i = 0, l2 = values.length;i < l2; i++) {
      var value = values[i][1];
      if (value != "inherit" && value != Marker.COMMA && value != Marker.FORWARD_SLASH)
        return false;
    }
    return true;
  };
  var background = function(property, compactable, lastInMultiplex) {
    var components = property.components;
    var restored = [];
    var needsOne, needsBoth;
    function restoreValue(component2) {
      Array.prototype.unshift.apply(restored, component2.value);
    }
    function isDefaultValue(component2) {
      var descriptor = compactable[component2.name];
      if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
        return component2.value[0][1] == descriptor.defaultValue[0] && (component2.value[1] ? component2.value[1][1] == descriptor.defaultValue[0] : true);
      } else if (descriptor.doubleValues && descriptor.defaultValue.length != 1) {
        return component2.value[0][1] == descriptor.defaultValue[0] && (component2.value[1] ? component2.value[1][1] : component2.value[0][1]) == descriptor.defaultValue[1];
      } else {
        return component2.value[0][1] == descriptor.defaultValue;
      }
    }
    for (var i = components.length - 1;i >= 0; i--) {
      var component = components[i];
      var isDefault2 = isDefaultValue(component);
      if (component.name == "background-clip") {
        var originComponent = components[i - 1];
        var isOriginDefault = isDefaultValue(originComponent);
        needsOne = component.value[0][1] == originComponent.value[0][1];
        needsBoth = !needsOne && (isOriginDefault && !isDefault2 || !isOriginDefault && !isDefault2 || !isOriginDefault && isDefault2 && component.value[0][1] != originComponent.value[0][1]);
        if (needsOne) {
          restoreValue(originComponent);
        } else if (needsBoth) {
          restoreValue(component);
          restoreValue(originComponent);
        }
        i--;
      } else if (component.name == "background-size") {
        var positionComponent = components[i - 1];
        var isPositionDefault = isDefaultValue(positionComponent);
        needsOne = !isPositionDefault && isDefault2;
        needsBoth = !needsOne && (isPositionDefault && !isDefault2 || !isPositionDefault && !isDefault2);
        if (needsOne) {
          restoreValue(positionComponent);
        } else if (needsBoth) {
          restoreValue(component);
          restored.unshift([Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]);
          restoreValue(positionComponent);
        } else if (positionComponent.value.length == 1) {
          restoreValue(positionComponent);
        }
        i--;
      } else {
        if (isDefault2 || compactable[component.name].multiplexLastOnly && !lastInMultiplex)
          continue;
        restoreValue(component);
      }
    }
    if (restored.length === 0 && property.value.length == 1 && property.value[0][1] == "0")
      restored.push(property.value[0]);
    if (restored.length === 0)
      restored.push([Token.PROPERTY_VALUE, compactable[property.name].defaultValue]);
    if (isInheritOnly(restored))
      return [restored[0]];
    return restored;
  };
  var borderRadius = function(property, compactable) {
    if (property.multiplex) {
      var horizontal = shallowClone(property);
      var vertical = shallowClone(property);
      for (var i = 0;i < 4; i++) {
        var component = property.components[i];
        var horizontalComponent = shallowClone(property);
        horizontalComponent.value = [component.value[0]];
        horizontal.components.push(horizontalComponent);
        var verticalComponent = shallowClone(property);
        verticalComponent.value = [component.value[1] || component.value[0]];
        vertical.components.push(verticalComponent);
      }
      var horizontalValues = fourValues(horizontal, compactable);
      var verticalValues = fourValues(vertical, compactable);
      if (horizontalValues.length == verticalValues.length && horizontalValues[0][1] == verticalValues[0][1] && (horizontalValues.length > 1 ? horizontalValues[1][1] == verticalValues[1][1] : true) && (horizontalValues.length > 2 ? horizontalValues[2][1] == verticalValues[2][1] : true) && (horizontalValues.length > 3 ? horizontalValues[3][1] == verticalValues[3][1] : true)) {
        return horizontalValues;
      } else {
        return horizontalValues.concat([[Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]]).concat(verticalValues);
      }
    } else {
      return fourValues(property, compactable);
    }
  };
  var font = function(property, compactable) {
    var components = property.components;
    var restored = [];
    var component;
    var componentIndex = 0;
    var fontFamilyIndex = 0;
    if (property.value[0][1].indexOf(Marker.INTERNAL) === 0) {
      property.value[0][1] = property.value[0][1].substring(Marker.INTERNAL.length);
      return property.value;
    }
    while (componentIndex < 4) {
      component = components[componentIndex];
      if (component.value[0][1] != compactable[component.name].defaultValue) {
        Array.prototype.push.apply(restored, component.value);
      }
      componentIndex++;
    }
    Array.prototype.push.apply(restored, components[componentIndex].value);
    componentIndex++;
    if (components[componentIndex].value[0][1] != compactable[components[componentIndex].name].defaultValue) {
      Array.prototype.push.apply(restored, [[Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]]);
      Array.prototype.push.apply(restored, components[componentIndex].value);
    }
    componentIndex++;
    while (components[componentIndex].value[fontFamilyIndex]) {
      restored.push(components[componentIndex].value[fontFamilyIndex]);
      if (components[componentIndex].value[fontFamilyIndex + 1]) {
        restored.push([Token.PROPERTY_VALUE, Marker.COMMA]);
      }
      fontFamilyIndex++;
    }
    if (isInheritOnly(restored)) {
      return [restored[0]];
    }
    return restored;
  };
  var fourValues = function(property) {
    var components = property.components;
    var value1 = components[0].value[0];
    var value2 = components[1].value[0];
    var value3 = components[2].value[0];
    var value4 = components[3].value[0];
    if (value1[1] == value2[1] && value1[1] == value3[1] && value1[1] == value4[1]) {
      return [value1];
    } else if (value1[1] == value3[1] && value2[1] == value4[1]) {
      return [value1, value2];
    } else if (value2[1] == value4[1]) {
      return [value1, value2, value3];
    } else {
      return [value1, value2, value3, value4];
    }
  };
  var multiplex = function(restoreWith) {
    return function(property, compactable) {
      if (!property.multiplex)
        return restoreWith(property, compactable, true);
      var multiplexSize = 0;
      var restored = [];
      var componentMultiplexSoFar = {};
      var i, l2;
      for (i = 0, l2 = property.components[0].value.length;i < l2; i++) {
        if (property.components[0].value[i][1] == Marker.COMMA)
          multiplexSize++;
      }
      for (i = 0;i <= multiplexSize; i++) {
        var _property = shallowClone(property);
        for (var j2 = 0, m2 = property.components.length;j2 < m2; j2++) {
          var componentToClone = property.components[j2];
          var _component = shallowClone(componentToClone);
          _property.components.push(_component);
          for (var k2 = componentMultiplexSoFar[_component.name] || 0, n = componentToClone.value.length;k2 < n; k2++) {
            if (componentToClone.value[k2][1] == Marker.COMMA) {
              componentMultiplexSoFar[_component.name] = k2 + 1;
              break;
            }
            _component.value.push(componentToClone.value[k2]);
          }
        }
        var lastInMultiplex = i == multiplexSize;
        var _restored = restoreWith(_property, compactable, lastInMultiplex);
        Array.prototype.push.apply(restored, _restored);
        if (i < multiplexSize)
          restored.push([Token.PROPERTY_VALUE, Marker.COMMA]);
      }
      return restored;
    };
  };
  var withoutDefaults = function(property, compactable) {
    var components = property.components;
    var restored = [];
    for (var i = components.length - 1;i >= 0; i--) {
      var component = components[i];
      var descriptor = compactable[component.name];
      if (component.value[0][1] != descriptor.defaultValue || "keepUnlessDefault" in descriptor && !isDefault(components, compactable, descriptor.keepUnlessDefault)) {
        restored.unshift(component.value[0]);
      }
    }
    if (restored.length === 0)
      restored.push([Token.PROPERTY_VALUE, compactable[property.name].defaultValue]);
    if (isInheritOnly(restored))
      return [restored[0]];
    return restored;
  };
  var isDefault = function(components, compactable, propertyName) {
    var component;
    var i, l2;
    for (i = 0, l2 = components.length;i < l2; i++) {
      component = components[i];
      if (component.name == propertyName && component.value[0][1] == compactable[propertyName].defaultValue) {
        return true;
      }
    }
    return false;
  };
  var shallowClone = require_clone().shallow;
  var Token = require_token();
  var Marker = require_marker();
  module.exports = {
    background,
    borderRadius,
    font,
    fourValues,
    multiplex,
    withoutDefaults
  };
});

// node_modules/clean-css/lib/optimizer/level-2/compactable.js
var require_compactable = __commonJS((exports, module) => {
  var cloneDescriptor = function(propertyName2, prefix2) {
    var clonedDescriptor2 = override(compactable[propertyName2], {});
    if ("componentOf" in clonedDescriptor2) {
      clonedDescriptor2.componentOf = clonedDescriptor2.componentOf.map(function(shorthandName) {
        return prefix2 + shorthandName;
      });
    }
    if ("components" in clonedDescriptor2) {
      clonedDescriptor2.components = clonedDescriptor2.components.map(function(longhandName) {
        return prefix2 + longhandName;
      });
    }
    if ("keepUnlessDefault" in clonedDescriptor2) {
      clonedDescriptor2.keepUnlessDefault = prefix2 + clonedDescriptor2.keepUnlessDefault;
    }
    return clonedDescriptor2;
  };
  var breakUp = require_break_up();
  var canOverride = require_can_override();
  var restore = require_restore();
  var override = require_override();
  var compactable = {
    animation: {
      canOverride: canOverride.generic.components([
        canOverride.generic.time,
        canOverride.generic.timingFunction,
        canOverride.generic.time,
        canOverride.property.animationIterationCount,
        canOverride.property.animationDirection,
        canOverride.property.animationFillMode,
        canOverride.property.animationPlayState,
        canOverride.property.animationName
      ]),
      components: [
        "animation-duration",
        "animation-timing-function",
        "animation-delay",
        "animation-iteration-count",
        "animation-direction",
        "animation-fill-mode",
        "animation-play-state",
        "animation-name"
      ],
      breakUp: breakUp.multiplex(breakUp.animation),
      defaultValue: "none",
      restore: restore.multiplex(restore.withoutDefaults),
      shorthand: true,
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-delay": {
      canOverride: canOverride.generic.time,
      componentOf: [
        "animation"
      ],
      defaultValue: "0s",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-direction": {
      canOverride: canOverride.property.animationDirection,
      componentOf: [
        "animation"
      ],
      defaultValue: "normal",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-duration": {
      canOverride: canOverride.generic.time,
      componentOf: [
        "animation"
      ],
      defaultValue: "0s",
      intoMultiplexMode: "real",
      keepUnlessDefault: "animation-delay",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-fill-mode": {
      canOverride: canOverride.property.animationFillMode,
      componentOf: [
        "animation"
      ],
      defaultValue: "none",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-iteration-count": {
      canOverride: canOverride.property.animationIterationCount,
      componentOf: [
        "animation"
      ],
      defaultValue: "1",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-name": {
      canOverride: canOverride.property.animationName,
      componentOf: [
        "animation"
      ],
      defaultValue: "none",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-play-state": {
      canOverride: canOverride.property.animationPlayState,
      componentOf: [
        "animation"
      ],
      defaultValue: "running",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "animation-timing-function": {
      canOverride: canOverride.generic.timingFunction,
      componentOf: [
        "animation"
      ],
      defaultValue: "ease",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    background: {
      canOverride: canOverride.generic.components([
        canOverride.generic.image,
        canOverride.property.backgroundPosition,
        canOverride.property.backgroundSize,
        canOverride.property.backgroundRepeat,
        canOverride.property.backgroundAttachment,
        canOverride.property.backgroundOrigin,
        canOverride.property.backgroundClip,
        canOverride.generic.color
      ]),
      components: [
        "background-image",
        "background-position",
        "background-size",
        "background-repeat",
        "background-attachment",
        "background-origin",
        "background-clip",
        "background-color"
      ],
      breakUp: breakUp.multiplex(breakUp.background),
      defaultValue: "0 0",
      restore: restore.multiplex(restore.background),
      shortestValue: "0",
      shorthand: true
    },
    "background-attachment": {
      canOverride: canOverride.property.backgroundAttachment,
      componentOf: [
        "background"
      ],
      defaultValue: "scroll",
      intoMultiplexMode: "real"
    },
    "background-clip": {
      canOverride: canOverride.property.backgroundClip,
      componentOf: [
        "background"
      ],
      defaultValue: "border-box",
      intoMultiplexMode: "real",
      shortestValue: "border-box"
    },
    "background-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "background"
      ],
      defaultValue: "transparent",
      intoMultiplexMode: "real",
      multiplexLastOnly: true,
      nonMergeableValue: "none",
      shortestValue: "red"
    },
    "background-image": {
      canOverride: canOverride.generic.image,
      componentOf: [
        "background"
      ],
      defaultValue: "none",
      intoMultiplexMode: "default"
    },
    "background-origin": {
      canOverride: canOverride.property.backgroundOrigin,
      componentOf: [
        "background"
      ],
      defaultValue: "padding-box",
      intoMultiplexMode: "real",
      shortestValue: "border-box"
    },
    "background-position": {
      canOverride: canOverride.property.backgroundPosition,
      componentOf: [
        "background"
      ],
      defaultValue: ["0", "0"],
      doubleValues: true,
      intoMultiplexMode: "real",
      shortestValue: "0"
    },
    "background-repeat": {
      canOverride: canOverride.property.backgroundRepeat,
      componentOf: [
        "background"
      ],
      defaultValue: ["repeat"],
      doubleValues: true,
      intoMultiplexMode: "real"
    },
    "background-size": {
      canOverride: canOverride.property.backgroundSize,
      componentOf: [
        "background"
      ],
      defaultValue: ["auto"],
      doubleValues: true,
      intoMultiplexMode: "real",
      shortestValue: "0 0"
    },
    bottom: {
      canOverride: canOverride.property.bottom,
      defaultValue: "auto"
    },
    border: {
      breakUp: breakUp.border,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.property.borderStyle,
        canOverride.generic.color
      ]),
      components: [
        "border-width",
        "border-style",
        "border-color"
      ],
      defaultValue: "none",
      overridesShorthands: [
        "border-bottom",
        "border-left",
        "border-right",
        "border-top"
      ],
      restore: restore.withoutDefaults,
      shorthand: true,
      shorthandComponents: true
    },
    "border-bottom": {
      breakUp: breakUp.border,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.property.borderStyle,
        canOverride.generic.color
      ]),
      components: [
        "border-bottom-width",
        "border-bottom-style",
        "border-bottom-color"
      ],
      defaultValue: "none",
      restore: restore.withoutDefaults,
      shorthand: true
    },
    "border-bottom-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "border-bottom",
        "border-color"
      ],
      defaultValue: "none"
    },
    "border-bottom-left-radius": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-radius"
      ],
      defaultValue: "0",
      vendorPrefixes: [
        "-moz-",
        "-o-"
      ]
    },
    "border-bottom-right-radius": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-radius"
      ],
      defaultValue: "0",
      vendorPrefixes: [
        "-moz-",
        "-o-"
      ]
    },
    "border-bottom-style": {
      canOverride: canOverride.property.borderStyle,
      componentOf: [
        "border-bottom",
        "border-style"
      ],
      defaultValue: "none"
    },
    "border-bottom-width": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-bottom",
        "border-width"
      ],
      defaultValue: "medium",
      oppositeTo: "border-top-width",
      shortestValue: "0"
    },
    "border-collapse": {
      canOverride: canOverride.property.borderCollapse,
      defaultValue: "separate"
    },
    "border-color": {
      breakUp: breakUp.fourValues,
      canOverride: canOverride.generic.components([
        canOverride.generic.color,
        canOverride.generic.color,
        canOverride.generic.color,
        canOverride.generic.color
      ]),
      componentOf: [
        "border"
      ],
      components: [
        "border-top-color",
        "border-right-color",
        "border-bottom-color",
        "border-left-color"
      ],
      defaultValue: "none",
      restore: restore.fourValues,
      shortestValue: "red",
      shorthand: true
    },
    "border-left": {
      breakUp: breakUp.border,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.property.borderStyle,
        canOverride.generic.color
      ]),
      components: [
        "border-left-width",
        "border-left-style",
        "border-left-color"
      ],
      defaultValue: "none",
      restore: restore.withoutDefaults,
      shorthand: true
    },
    "border-left-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "border-color",
        "border-left"
      ],
      defaultValue: "none"
    },
    "border-left-style": {
      canOverride: canOverride.property.borderStyle,
      componentOf: [
        "border-left",
        "border-style"
      ],
      defaultValue: "none"
    },
    "border-left-width": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-left",
        "border-width"
      ],
      defaultValue: "medium",
      oppositeTo: "border-right-width",
      shortestValue: "0"
    },
    "border-radius": {
      breakUp: breakUp.borderRadius,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit
      ]),
      components: [
        "border-top-left-radius",
        "border-top-right-radius",
        "border-bottom-right-radius",
        "border-bottom-left-radius"
      ],
      defaultValue: "0",
      restore: restore.borderRadius,
      shorthand: true,
      vendorPrefixes: [
        "-moz-",
        "-o-"
      ]
    },
    "border-right": {
      breakUp: breakUp.border,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.property.borderStyle,
        canOverride.generic.color
      ]),
      components: [
        "border-right-width",
        "border-right-style",
        "border-right-color"
      ],
      defaultValue: "none",
      restore: restore.withoutDefaults,
      shorthand: true
    },
    "border-right-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "border-color",
        "border-right"
      ],
      defaultValue: "none"
    },
    "border-right-style": {
      canOverride: canOverride.property.borderStyle,
      componentOf: [
        "border-right",
        "border-style"
      ],
      defaultValue: "none"
    },
    "border-right-width": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-right",
        "border-width"
      ],
      defaultValue: "medium",
      oppositeTo: "border-left-width",
      shortestValue: "0"
    },
    "border-style": {
      breakUp: breakUp.fourValues,
      canOverride: canOverride.generic.components([
        canOverride.property.borderStyle,
        canOverride.property.borderStyle,
        canOverride.property.borderStyle,
        canOverride.property.borderStyle
      ]),
      componentOf: [
        "border"
      ],
      components: [
        "border-top-style",
        "border-right-style",
        "border-bottom-style",
        "border-left-style"
      ],
      defaultValue: "none",
      restore: restore.fourValues,
      shorthand: true
    },
    "border-top": {
      breakUp: breakUp.border,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.property.borderStyle,
        canOverride.generic.color
      ]),
      components: [
        "border-top-width",
        "border-top-style",
        "border-top-color"
      ],
      defaultValue: "none",
      restore: restore.withoutDefaults,
      shorthand: true
    },
    "border-top-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "border-color",
        "border-top"
      ],
      defaultValue: "none"
    },
    "border-top-left-radius": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-radius"
      ],
      defaultValue: "0",
      vendorPrefixes: [
        "-moz-",
        "-o-"
      ]
    },
    "border-top-right-radius": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-radius"
      ],
      defaultValue: "0",
      vendorPrefixes: [
        "-moz-",
        "-o-"
      ]
    },
    "border-top-style": {
      canOverride: canOverride.property.borderStyle,
      componentOf: [
        "border-style",
        "border-top"
      ],
      defaultValue: "none"
    },
    "border-top-width": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "border-top",
        "border-width"
      ],
      defaultValue: "medium",
      oppositeTo: "border-bottom-width",
      shortestValue: "0"
    },
    "border-width": {
      breakUp: breakUp.fourValues,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit
      ]),
      componentOf: [
        "border"
      ],
      components: [
        "border-top-width",
        "border-right-width",
        "border-bottom-width",
        "border-left-width"
      ],
      defaultValue: "medium",
      restore: restore.fourValues,
      shortestValue: "0",
      shorthand: true
    },
    clear: {
      canOverride: canOverride.property.clear,
      defaultValue: "none"
    },
    color: {
      canOverride: canOverride.generic.color,
      defaultValue: "transparent",
      shortestValue: "red"
    },
    cursor: {
      canOverride: canOverride.property.cursor,
      defaultValue: "auto"
    },
    display: {
      canOverride: canOverride.property.display
    },
    float: {
      canOverride: canOverride.property.float,
      defaultValue: "none"
    },
    font: {
      breakUp: breakUp.font,
      canOverride: canOverride.generic.components([
        canOverride.property.fontStyle,
        canOverride.property.fontVariant,
        canOverride.property.fontWeight,
        canOverride.property.fontStretch,
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.property.fontFamily
      ]),
      components: [
        "font-style",
        "font-variant",
        "font-weight",
        "font-stretch",
        "font-size",
        "line-height",
        "font-family"
      ],
      restore: restore.font,
      shorthand: true
    },
    "font-family": {
      canOverride: canOverride.property.fontFamily,
      defaultValue: "user|agent|specific"
    },
    "font-size": {
      canOverride: canOverride.generic.unit,
      defaultValue: "medium",
      shortestValue: "0"
    },
    "font-stretch": {
      canOverride: canOverride.property.fontStretch,
      defaultValue: "normal"
    },
    "font-style": {
      canOverride: canOverride.property.fontStyle,
      defaultValue: "normal"
    },
    "font-variant": {
      canOverride: canOverride.property.fontVariant,
      defaultValue: "normal"
    },
    "font-weight": {
      canOverride: canOverride.property.fontWeight,
      defaultValue: "normal",
      shortestValue: "400"
    },
    height: {
      canOverride: canOverride.generic.unit,
      defaultValue: "auto",
      shortestValue: "0"
    },
    left: {
      canOverride: canOverride.property.left,
      defaultValue: "auto"
    },
    "line-height": {
      canOverride: canOverride.generic.unitOrNumber,
      defaultValue: "normal",
      shortestValue: "0"
    },
    "list-style": {
      canOverride: canOverride.generic.components([
        canOverride.property.listStyleType,
        canOverride.property.listStylePosition,
        canOverride.property.listStyleImage
      ]),
      components: [
        "list-style-type",
        "list-style-position",
        "list-style-image"
      ],
      breakUp: breakUp.listStyle,
      restore: restore.withoutDefaults,
      defaultValue: "outside",
      shortestValue: "none",
      shorthand: true
    },
    "list-style-image": {
      canOverride: canOverride.generic.image,
      componentOf: [
        "list-style"
      ],
      defaultValue: "none"
    },
    "list-style-position": {
      canOverride: canOverride.property.listStylePosition,
      componentOf: [
        "list-style"
      ],
      defaultValue: "outside",
      shortestValue: "inside"
    },
    "list-style-type": {
      canOverride: canOverride.property.listStyleType,
      componentOf: [
        "list-style"
      ],
      defaultValue: "decimal|disc",
      shortestValue: "none"
    },
    margin: {
      breakUp: breakUp.fourValues,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit
      ]),
      components: [
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      defaultValue: "0",
      restore: restore.fourValues,
      shorthand: true
    },
    "margin-bottom": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "margin"
      ],
      defaultValue: "0",
      oppositeTo: "margin-top"
    },
    "margin-left": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "margin"
      ],
      defaultValue: "0",
      oppositeTo: "margin-right"
    },
    "margin-right": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "margin"
      ],
      defaultValue: "0",
      oppositeTo: "margin-left"
    },
    "margin-top": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "margin"
      ],
      defaultValue: "0",
      oppositeTo: "margin-bottom"
    },
    outline: {
      canOverride: canOverride.generic.components([
        canOverride.generic.color,
        canOverride.property.outlineStyle,
        canOverride.generic.unit
      ]),
      components: [
        "outline-color",
        "outline-style",
        "outline-width"
      ],
      breakUp: breakUp.outline,
      restore: restore.withoutDefaults,
      defaultValue: "0",
      shorthand: true
    },
    "outline-color": {
      canOverride: canOverride.generic.color,
      componentOf: [
        "outline"
      ],
      defaultValue: "invert",
      shortestValue: "red"
    },
    "outline-style": {
      canOverride: canOverride.property.outlineStyle,
      componentOf: [
        "outline"
      ],
      defaultValue: "none"
    },
    "outline-width": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "outline"
      ],
      defaultValue: "medium",
      shortestValue: "0"
    },
    overflow: {
      canOverride: canOverride.property.overflow,
      defaultValue: "visible"
    },
    "overflow-x": {
      canOverride: canOverride.property.overflow,
      defaultValue: "visible"
    },
    "overflow-y": {
      canOverride: canOverride.property.overflow,
      defaultValue: "visible"
    },
    padding: {
      breakUp: breakUp.fourValues,
      canOverride: canOverride.generic.components([
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit,
        canOverride.generic.unit
      ]),
      components: [
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      defaultValue: "0",
      restore: restore.fourValues,
      shorthand: true
    },
    "padding-bottom": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "padding"
      ],
      defaultValue: "0",
      oppositeTo: "padding-top"
    },
    "padding-left": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "padding"
      ],
      defaultValue: "0",
      oppositeTo: "padding-right"
    },
    "padding-right": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "padding"
      ],
      defaultValue: "0",
      oppositeTo: "padding-left"
    },
    "padding-top": {
      canOverride: canOverride.generic.unit,
      componentOf: [
        "padding"
      ],
      defaultValue: "0",
      oppositeTo: "padding-bottom"
    },
    position: {
      canOverride: canOverride.property.position,
      defaultValue: "static"
    },
    right: {
      canOverride: canOverride.property.right,
      defaultValue: "auto"
    },
    "text-align": {
      canOverride: canOverride.property.textAlign,
      defaultValue: "left|right"
    },
    "text-decoration": {
      canOverride: canOverride.property.textDecoration,
      defaultValue: "none"
    },
    "text-overflow": {
      canOverride: canOverride.property.textOverflow,
      defaultValue: "none"
    },
    "text-shadow": {
      canOverride: canOverride.property.textShadow,
      defaultValue: "none"
    },
    top: {
      canOverride: canOverride.property.top,
      defaultValue: "auto"
    },
    transform: {
      canOverride: canOverride.property.transform,
      vendorPrefixes: [
        "-moz-",
        "-ms-",
        "-webkit-"
      ]
    },
    transition: {
      breakUp: breakUp.multiplex(breakUp.transition),
      canOverride: canOverride.generic.components([
        canOverride.property.transitionProperty,
        canOverride.generic.time,
        canOverride.generic.timingFunction,
        canOverride.generic.time
      ]),
      components: [
        "transition-property",
        "transition-duration",
        "transition-timing-function",
        "transition-delay"
      ],
      defaultValue: "none",
      restore: restore.multiplex(restore.withoutDefaults),
      shorthand: true,
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "transition-delay": {
      canOverride: canOverride.generic.time,
      componentOf: [
        "transition"
      ],
      defaultValue: "0s",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "transition-duration": {
      canOverride: canOverride.generic.time,
      componentOf: [
        "transition"
      ],
      defaultValue: "0s",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "transition-property": {
      canOverride: canOverride.generic.propertyName,
      componentOf: [
        "transition"
      ],
      defaultValue: "all",
      intoMultiplexMode: "placeholder",
      placeholderValue: "_",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "transition-timing-function": {
      canOverride: canOverride.generic.timingFunction,
      componentOf: [
        "transition"
      ],
      defaultValue: "ease",
      intoMultiplexMode: "real",
      vendorPrefixes: [
        "-moz-",
        "-o-",
        "-webkit-"
      ]
    },
    "vertical-align": {
      canOverride: canOverride.property.verticalAlign,
      defaultValue: "baseline"
    },
    visibility: {
      canOverride: canOverride.property.visibility,
      defaultValue: "visible"
    },
    "white-space": {
      canOverride: canOverride.property.whiteSpace,
      defaultValue: "normal"
    },
    width: {
      canOverride: canOverride.generic.unit,
      defaultValue: "auto",
      shortestValue: "0"
    },
    "z-index": {
      canOverride: canOverride.property.zIndex,
      defaultValue: "auto"
    }
  };
  var vendorPrefixedCompactable = {};
  for (propertyName in compactable) {
    descriptor = compactable[propertyName];
    if (!("vendorPrefixes" in descriptor)) {
      continue;
    }
    for (i = 0;i < descriptor.vendorPrefixes.length; i++) {
      prefix = descriptor.vendorPrefixes[i];
      clonedDescriptor = cloneDescriptor(propertyName, prefix);
      delete clonedDescriptor.vendorPrefixes;
      vendorPrefixedCompactable[prefix + propertyName] = clonedDescriptor;
    }
    delete descriptor.vendorPrefixes;
  }
  var descriptor;
  var prefix;
  var clonedDescriptor;
  var i;
  var propertyName;
  module.exports = override(compactable, vendorPrefixedCompactable);
});

// node_modules/clean-css/lib/optimizer/level-2/properties/populate-components.js
var require_populate_components = __commonJS((exports, module) => {
  var populateComponents = function(properties, validator, warnings) {
    var component;
    var j2, m2;
    for (var i = properties.length - 1;i >= 0; i--) {
      var property = properties[i];
      var descriptor = compactable[property.name];
      if (descriptor && descriptor.shorthand) {
        property.shorthand = true;
        property.dirty = true;
        try {
          property.components = descriptor.breakUp(property, compactable, validator);
          if (descriptor.shorthandComponents) {
            for (j2 = 0, m2 = property.components.length;j2 < m2; j2++) {
              component = property.components[j2];
              component.components = compactable[component.name].breakUp(component, compactable, validator);
            }
          }
        } catch (e) {
          if (e instanceof InvalidPropertyError) {
            property.components = [];
            warnings.push(e.message);
          } else {
            throw e;
          }
        }
        if (property.components.length > 0)
          property.multiplex = property.components[0].multiplex;
        else
          property.unused = true;
      }
    }
  };
  var compactable = require_compactable();
  var InvalidPropertyError = require_invalid_property_error();
  module.exports = populateComponents;
});

// node_modules/clean-css/lib/optimizer/level-2/restore-with-components.js
var require_restore_with_components = __commonJS((exports, module) => {
  var restoreWithComponents = function(property) {
    var descriptor = compactable[property.name];
    if (descriptor && descriptor.shorthand) {
      return descriptor.restore(property, compactable);
    } else {
      return property.value;
    }
  };
  var compactable = require_compactable();
  module.exports = restoreWithComponents;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js
var require_merge_into_shorthands = __commonJS((exports, module) => {
  var mergeIntoShorthands = function(properties, validator) {
    var candidates = {};
    var descriptor;
    var componentOf;
    var property;
    var i, l2;
    var j2, m2;
    if (properties.length < 3) {
      return;
    }
    for (i = 0, l2 = properties.length;i < l2; i++) {
      property = properties[i];
      descriptor = compactable[property.name];
      if (property.unused) {
        continue;
      }
      if (property.hack) {
        continue;
      }
      if (property.block) {
        continue;
      }
      invalidateOrCompact(properties, i, candidates, validator);
      if (descriptor && descriptor.componentOf) {
        for (j2 = 0, m2 = descriptor.componentOf.length;j2 < m2; j2++) {
          componentOf = descriptor.componentOf[j2];
          candidates[componentOf] = candidates[componentOf] || {};
          candidates[componentOf][property.name] = property;
        }
      }
    }
    invalidateOrCompact(properties, i, candidates, validator);
  };
  var invalidateOrCompact = function(properties, position, candidates, validator) {
    var invalidatedBy = properties[position];
    var shorthandName;
    var shorthandDescriptor;
    var candidateComponents;
    for (shorthandName in candidates) {
      if (invalidatedBy !== undefined && shorthandName == invalidatedBy.name) {
        continue;
      }
      shorthandDescriptor = compactable[shorthandName];
      candidateComponents = candidates[shorthandName];
      if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {
        delete candidates[shorthandName];
        continue;
      }
      if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {
        continue;
      }
      if (mixedImportance(candidateComponents)) {
        continue;
      }
      if (!overridable(candidateComponents, shorthandName, validator)) {
        continue;
      }
      if (!mergeable(candidateComponents)) {
        continue;
      }
      if (mixedInherit(candidateComponents)) {
        replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);
      } else {
        replaceWithShorthand(properties, candidateComponents, shorthandName, validator);
      }
    }
  };
  var invalidates = function(candidates, shorthandName, invalidatedBy) {
    var shorthandDescriptor = compactable[shorthandName];
    var invalidatedByDescriptor = compactable[invalidatedBy.name];
    var componentName;
    if ("overridesShorthands" in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {
      return true;
    }
    if (invalidatedByDescriptor && "componentOf" in invalidatedByDescriptor) {
      for (componentName in candidates[shorthandName]) {
        if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {
          return true;
        }
      }
    }
    return false;
  };
  var mixedImportance = function(components) {
    var important;
    var componentName;
    for (componentName in components) {
      if (important !== undefined && components[componentName].important != important) {
        return true;
      }
      important = components[componentName].important;
    }
    return false;
  };
  var overridable = function(components, shorthandName, validator) {
    var descriptor = compactable[shorthandName];
    var newValuePlaceholder = [
      Token.PROPERTY,
      [Token.PROPERTY_NAME, shorthandName],
      [Token.PROPERTY_VALUE, descriptor.defaultValue]
    ];
    var newProperty = wrapSingle(newValuePlaceholder);
    var component;
    var mayOverride;
    var i, l2;
    populateComponents([newProperty], validator, []);
    for (i = 0, l2 = descriptor.components.length;i < l2; i++) {
      component = components[descriptor.components[i]];
      mayOverride = compactable[component.name].canOverride;
      if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {
        return false;
      }
    }
    return true;
  };
  var mergeable = function(components) {
    var lastCount = null;
    var currentCount;
    var componentName;
    var component;
    var descriptor;
    var values;
    for (componentName in components) {
      component = components[componentName];
      descriptor = compactable[componentName];
      if (!("restore" in descriptor)) {
        continue;
      }
      restoreFromOptimizing([component.all[component.position]], restoreWithComponents);
      values = descriptor.restore(component, compactable);
      currentCount = values.length;
      if (lastCount !== null && currentCount !== lastCount) {
        return false;
      }
      lastCount = currentCount;
    }
    return true;
  };
  var mixedInherit = function(components) {
    var componentName;
    var lastValue = null;
    var currentValue;
    for (componentName in components) {
      currentValue = hasInherit(components[componentName]);
      if (lastValue !== null && lastValue !== currentValue) {
        return true;
      }
      lastValue = currentValue;
    }
    return false;
  };
  var replaceWithInheritBestFit = function(properties, candidateComponents, shorthandName, validator) {
    var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);
    var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);
    var longhandTokensSequence = viaLonghands[0];
    var shorthandTokensSequence = viaShorthand[0];
    var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;
    var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;
    var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];
    var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];
    var all2 = candidateComponents[Object.keys(candidateComponents)[0]].all;
    var componentName;
    var oldComponent;
    var newComponent;
    var newToken;
    newProperty.position = all2.length;
    newProperty.shorthand = true;
    newProperty.dirty = true;
    newProperty.all = all2;
    newProperty.all.push(newTokensSequence[0]);
    properties.push(newProperty);
    for (componentName in candidateComponents) {
      oldComponent = candidateComponents[componentName];
      oldComponent.unused = true;
      if (oldComponent.name in newComponents) {
        newComponent = newComponents[oldComponent.name];
        newToken = findTokenIn(newTokensSequence, componentName);
        newComponent.position = all2.length;
        newComponent.all = all2;
        newComponent.all.push(newToken);
        properties.push(newComponent);
      }
    }
  };
  var buildSequenceWithInheritLonghands = function(components, shorthandName, validator) {
    var tokensSequence = [];
    var inheritComponents = {};
    var nonInheritComponents = {};
    var descriptor = compactable[shorthandName];
    var shorthandToken = [
      Token.PROPERTY,
      [Token.PROPERTY_NAME, shorthandName],
      [Token.PROPERTY_VALUE, descriptor.defaultValue]
    ];
    var newProperty = wrapSingle(shorthandToken);
    var component;
    var longhandToken;
    var newComponent;
    var nameMetadata;
    var i, l2;
    populateComponents([newProperty], validator, []);
    for (i = 0, l2 = descriptor.components.length;i < l2; i++) {
      component = components[descriptor.components[i]];
      if (hasInherit(component)) {
        longhandToken = component.all[component.position].slice(0, 2);
        Array.prototype.push.apply(longhandToken, component.value);
        tokensSequence.push(longhandToken);
        newComponent = deepClone(component);
        newComponent.value = inferComponentValue(components, newComponent.name);
        newProperty.components[i] = newComponent;
        inheritComponents[component.name] = deepClone(component);
      } else {
        newComponent = deepClone(component);
        newComponent.all = component.all;
        newProperty.components[i] = newComponent;
        nonInheritComponents[component.name] = component;
      }
    }
    nameMetadata = joinMetadata(nonInheritComponents, 1);
    shorthandToken[1].push(nameMetadata);
    restoreFromOptimizing([newProperty], restoreWithComponents);
    shorthandToken = shorthandToken.slice(0, 2);
    Array.prototype.push.apply(shorthandToken, newProperty.value);
    tokensSequence.unshift(shorthandToken);
    return [tokensSequence, newProperty, inheritComponents];
  };
  var inferComponentValue = function(components, propertyName) {
    var descriptor = compactable[propertyName];
    if ("oppositeTo" in descriptor) {
      return components[descriptor.oppositeTo].value;
    } else {
      return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];
    }
  };
  var joinMetadata = function(components, at) {
    var metadata = [];
    var component;
    var originalValue;
    var componentMetadata;
    var componentName;
    for (componentName in components) {
      component = components[componentName];
      originalValue = component.all[component.position];
      componentMetadata = originalValue[at][originalValue[at].length - 1];
      Array.prototype.push.apply(metadata, componentMetadata);
    }
    return metadata.sort(metadataSorter);
  };
  var metadataSorter = function(metadata1, metadata2) {
    var line1 = metadata1[0];
    var line2 = metadata2[0];
    var column1 = metadata1[1];
    var column2 = metadata2[1];
    if (line1 < line2) {
      return -1;
    } else if (line1 === line2) {
      return column1 < column2 ? -1 : 1;
    } else {
      return 1;
    }
  };
  var buildSequenceWithInheritShorthand = function(components, shorthandName, validator) {
    var tokensSequence = [];
    var inheritComponents = {};
    var nonInheritComponents = {};
    var descriptor = compactable[shorthandName];
    var shorthandToken = [
      Token.PROPERTY,
      [Token.PROPERTY_NAME, shorthandName],
      [Token.PROPERTY_VALUE, "inherit"]
    ];
    var newProperty = wrapSingle(shorthandToken);
    var component;
    var longhandToken;
    var nameMetadata;
    var valueMetadata;
    var i, l2;
    populateComponents([newProperty], validator, []);
    for (i = 0, l2 = descriptor.components.length;i < l2; i++) {
      component = components[descriptor.components[i]];
      if (hasInherit(component)) {
        inheritComponents[component.name] = component;
      } else {
        longhandToken = component.all[component.position].slice(0, 2);
        Array.prototype.push.apply(longhandToken, component.value);
        tokensSequence.push(longhandToken);
        nonInheritComponents[component.name] = deepClone(component);
      }
    }
    nameMetadata = joinMetadata(inheritComponents, 1);
    shorthandToken[1].push(nameMetadata);
    valueMetadata = joinMetadata(inheritComponents, 2);
    shorthandToken[2].push(valueMetadata);
    tokensSequence.unshift(shorthandToken);
    return [tokensSequence, newProperty, nonInheritComponents];
  };
  var findTokenIn = function(tokens, componentName) {
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      if (tokens[i][1][1] == componentName) {
        return tokens[i];
      }
    }
  };
  var replaceWithShorthand = function(properties, candidateComponents, shorthandName, validator) {
    var descriptor = compactable[shorthandName];
    var nameMetadata;
    var valueMetadata;
    var newValuePlaceholder = [
      Token.PROPERTY,
      [Token.PROPERTY_NAME, shorthandName],
      [Token.PROPERTY_VALUE, descriptor.defaultValue]
    ];
    var all2;
    var newProperty = wrapSingle(newValuePlaceholder);
    newProperty.shorthand = true;
    newProperty.dirty = true;
    populateComponents([newProperty], validator, []);
    for (var i = 0, l2 = descriptor.components.length;i < l2; i++) {
      var component = candidateComponents[descriptor.components[i]];
      newProperty.components[i] = deepClone(component);
      newProperty.important = component.important;
      all2 = component.all;
    }
    for (var componentName in candidateComponents) {
      candidateComponents[componentName].unused = true;
    }
    nameMetadata = joinMetadata(candidateComponents, 1);
    newValuePlaceholder[1].push(nameMetadata);
    valueMetadata = joinMetadata(candidateComponents, 2);
    newValuePlaceholder[2].push(valueMetadata);
    newProperty.position = all2.length;
    newProperty.all = all2;
    newProperty.all.push(newValuePlaceholder);
    properties.push(newProperty);
  };
  var everyValuesPair = require_every_values_pair();
  var hasInherit = require_has_inherit();
  var populateComponents = require_populate_components();
  var compactable = require_compactable();
  var deepClone = require_clone().deep;
  var restoreWithComponents = require_restore_with_components();
  var restoreFromOptimizing = require_restore_from_optimizing();
  var wrapSingle = require_wrap_for_optimizing().single;
  var serializeBody = require_one_time().body;
  var Token = require_token();
  module.exports = mergeIntoShorthands;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/find-component-in.js
var require_find_component_in = __commonJS((exports, module) => {
  var findComponentIn = function(shorthand, longhand) {
    var comparator = nameComparator(longhand);
    return findInDirectComponents(shorthand, comparator) || findInSubComponents(shorthand, comparator);
  };
  var nameComparator = function(to) {
    return function(property) {
      return to.name === property.name;
    };
  };
  var findInDirectComponents = function(shorthand, comparator) {
    return shorthand.components.filter(comparator)[0];
  };
  var findInSubComponents = function(shorthand, comparator) {
    var shorthandComponent;
    var longhandMatch;
    var i, l2;
    if (!compactable[shorthand.name].shorthandComponents) {
      return;
    }
    for (i = 0, l2 = shorthand.components.length;i < l2; i++) {
      shorthandComponent = shorthand.components[i];
      longhandMatch = findInDirectComponents(shorthandComponent, comparator);
      if (longhandMatch) {
        return longhandMatch;
      }
    }
    return;
  };
  var compactable = require_compactable();
  module.exports = findComponentIn;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/is-component-of.js
var require_is_component_of = __commonJS((exports, module) => {
  var isComponentOf = function(property1, property2, shallow) {
    return isDirectComponentOf(property1, property2) || !shallow && !!compactable[property1.name].shorthandComponents && isSubComponentOf(property1, property2);
  };
  var isDirectComponentOf = function(property1, property2) {
    var descriptor = compactable[property1.name];
    return "components" in descriptor && descriptor.components.indexOf(property2.name) > -1;
  };
  var isSubComponentOf = function(property1, property2) {
    return property1.components.some(function(component) {
      return isDirectComponentOf(component, property2);
    });
  };
  var compactable = require_compactable();
  module.exports = isComponentOf;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/is-mergeable-shorthand.js
var require_is_mergeable_shorthand = __commonJS((exports, module) => {
  var isMergeableShorthand = function(shorthand) {
    if (shorthand.name != "font") {
      return true;
    }
    return shorthand.value[0][1].indexOf(Marker.INTERNAL) == -1;
  };
  var Marker = require_marker();
  module.exports = isMergeableShorthand;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/overrides-non-component-shorthand.js
var require_overrides_non_component_shorthand = __commonJS((exports, module) => {
  var overridesNonComponentShorthand = function(property1, property2) {
    return property1.name in compactable && "overridesShorthands" in compactable[property1.name] && compactable[property1.name].overridesShorthands.indexOf(property2.name) > -1;
  };
  var compactable = require_compactable();
  module.exports = overridesNonComponentShorthand;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/override-properties.js
var require_override_properties = __commonJS((exports, module) => {
  var wouldBreakCompatibility = function(property, validator) {
    for (var i = 0;i < property.components.length; i++) {
      var component = property.components[i];
      var descriptor = compactable[component.name];
      var canOverride = descriptor && descriptor.canOverride || canOverride.sameValue;
      var _component = shallowClone(component);
      _component.value = [[Token.PROPERTY_VALUE, descriptor.defaultValue]];
      if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {
        return true;
      }
    }
    return false;
  };
  var overrideIntoMultiplex = function(property, by) {
    by.unused = true;
    turnIntoMultiplex(by, multiplexSize(property));
    property.value = by.value;
  };
  var overrideByMultiplex = function(property, by) {
    by.unused = true;
    property.multiplex = true;
    property.value = by.value;
  };
  var overrideSimple = function(property, by) {
    by.unused = true;
    property.value = by.value;
  };
  var override = function(property, by) {
    if (by.multiplex)
      overrideByMultiplex(property, by);
    else if (property.multiplex)
      overrideIntoMultiplex(property, by);
    else
      overrideSimple(property, by);
  };
  var overrideShorthand = function(property, by) {
    by.unused = true;
    for (var i = 0, l2 = property.components.length;i < l2; i++) {
      override(property.components[i], by.components[i], property.multiplex);
    }
  };
  var turnIntoMultiplex = function(property, size) {
    property.multiplex = true;
    if (compactable[property.name].shorthand) {
      turnShorthandValueIntoMultiplex(property, size);
    } else {
      turnLonghandValueIntoMultiplex(property, size);
    }
  };
  var turnShorthandValueIntoMultiplex = function(property, size) {
    var component;
    var i, l2;
    for (i = 0, l2 = property.components.length;i < l2; i++) {
      component = property.components[i];
      if (!component.multiplex) {
        turnLonghandValueIntoMultiplex(component, size);
      }
    }
  };
  var turnLonghandValueIntoMultiplex = function(property, size) {
    var descriptor = compactable[property.name];
    var withRealValue = descriptor.intoMultiplexMode == "real";
    var withValue = descriptor.intoMultiplexMode == "real" ? property.value.slice(0) : descriptor.intoMultiplexMode == "placeholder" ? descriptor.placeholderValue : descriptor.defaultValue;
    var i = multiplexSize(property);
    var j2;
    var m2 = withValue.length;
    for (;i < size; i++) {
      property.value.push([Token.PROPERTY_VALUE, Marker.COMMA]);
      if (Array.isArray(withValue)) {
        for (j2 = 0;j2 < m2; j2++) {
          property.value.push(withRealValue ? withValue[j2] : [Token.PROPERTY_VALUE, withValue[j2]]);
        }
      } else {
        property.value.push(withRealValue ? withValue : [Token.PROPERTY_VALUE, withValue]);
      }
    }
  };
  var multiplexSize = function(component) {
    var size = 0;
    for (var i = 0, l2 = component.value.length;i < l2; i++) {
      if (component.value[i][1] == Marker.COMMA)
        size++;
    }
    return size + 1;
  };
  var lengthOf = function(property) {
    var fakeAsArray = [
      Token.PROPERTY,
      [Token.PROPERTY_NAME, property.name]
    ].concat(property.value);
    return serializeProperty([fakeAsArray], 0).length;
  };
  var moreSameShorthands = function(properties, startAt, name) {
    var count = 0;
    for (var i = startAt;i >= 0; i--) {
      if (properties[i].name == name && !properties[i].unused)
        count++;
      if (count > 1)
        break;
    }
    return count > 1;
  };
  var overridingFunction = function(shorthand, validator) {
    for (var i = 0, l2 = shorthand.components.length;i < l2; i++) {
      if (!anyValue(validator.isUrl, shorthand.components[i]) && anyValue(validator.isFunction, shorthand.components[i])) {
        return true;
      }
    }
    return false;
  };
  var anyValue = function(fn, property) {
    for (var i = 0, l2 = property.value.length;i < l2; i++) {
      if (property.value[i][1] == Marker.COMMA)
        continue;
      if (fn(property.value[i][1]))
        return true;
    }
    return false;
  };
  var wouldResultInLongerValue = function(left, right) {
    if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex)
      return false;
    var multiplex = left.multiplex ? left : right;
    var simple = left.multiplex ? right : left;
    var component;
    var multiplexClone = deepClone(multiplex);
    restoreFromOptimizing([multiplexClone], restoreWithComponents);
    var simpleClone = deepClone(simple);
    restoreFromOptimizing([simpleClone], restoreWithComponents);
    var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);
    if (left.multiplex) {
      component = findComponentIn(multiplexClone, simpleClone);
      overrideIntoMultiplex(component, simpleClone);
    } else {
      component = findComponentIn(simpleClone, multiplexClone);
      turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));
      overrideByMultiplex(component, multiplexClone);
    }
    restoreFromOptimizing([simpleClone], restoreWithComponents);
    var lengthAfter = lengthOf(simpleClone);
    return lengthBefore <= lengthAfter;
  };
  var isCompactable = function(property) {
    return property.name in compactable;
  };
  var noneOverrideHack = function(left, right) {
    return !left.multiplex && (left.name == "background" || left.name == "background-image") && right.multiplex && (right.name == "background" || right.name == "background-image") && anyLayerIsNone(right.value);
  };
  var anyLayerIsNone = function(values) {
    var layers = intoLayers(values);
    for (var i = 0, l2 = layers.length;i < l2; i++) {
      if (layers[i].length == 1 && layers[i][0][1] == "none")
        return true;
    }
    return false;
  };
  var intoLayers = function(values) {
    var layers = [];
    for (var i = 0, layer = [], l2 = values.length;i < l2; i++) {
      var value = values[i];
      if (value[1] == Marker.COMMA) {
        layers.push(layer);
        layer = [];
      } else {
        layer.push(value);
      }
    }
    layers.push(layer);
    return layers;
  };
  var overrideProperties = function(properties, withMerging, compatibility, validator) {
    var mayOverride, right, left, component;
    var overriddenComponents;
    var overriddenComponent;
    var overridingComponent;
    var overridable;
    var i, j2, k2;
    propertyLoop:
      for (i = properties.length - 1;i >= 0; i--) {
        right = properties[i];
        if (!isCompactable(right))
          continue;
        if (right.block)
          continue;
        mayOverride = compactable[right.name].canOverride;
        traverseLoop:
          for (j2 = i - 1;j2 >= 0; j2--) {
            left = properties[j2];
            if (!isCompactable(left))
              continue;
            if (left.block)
              continue;
            if (left.unused || right.unused)
              continue;
            if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack)
              continue;
            if (left.important == right.important && left.hack[0] != right.hack[0])
              continue;
            if (left.important == right.important && (left.hack[0] != right.hack[0] || left.hack[1] && left.hack[1] != right.hack[1]))
              continue;
            if (hasInherit(right))
              continue;
            if (noneOverrideHack(left, right))
              continue;
            if (right.shorthand && isComponentOf(right, left)) {
              if (!right.important && left.important)
                continue;
              if (!sameVendorPrefixesIn([left], right.components))
                continue;
              if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator))
                continue;
              if (!isMergeableShorthand(right)) {
                left.unused = true;
                continue;
              }
              component = findComponentIn(right, left);
              mayOverride = compactable[left.name].canOverride;
              if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {
                left.unused = true;
              }
            } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {
              if (!right.important && left.important) {
                continue;
              }
              if (!sameVendorPrefixesIn([left], right.components)) {
                continue;
              }
              if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {
                continue;
              }
              overriddenComponents = left.shorthand ? left.components : [left];
              for (k2 = overriddenComponents.length - 1;k2 >= 0; k2--) {
                overriddenComponent = overriddenComponents[k2];
                overridingComponent = findComponentIn(right, overriddenComponent);
                mayOverride = compactable[overriddenComponent.name].canOverride;
                if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {
                  continue traverseLoop;
                }
              }
              left.unused = true;
            } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {
              if (right.important && !left.important)
                continue;
              if (!right.important && left.important) {
                right.unused = true;
                continue;
              }
              if (moreSameShorthands(properties, i - 1, left.name))
                continue;
              if (overridingFunction(left, validator))
                continue;
              if (!isMergeableShorthand(left))
                continue;
              component = findComponentIn(left, right);
              if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {
                var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf("background-clip") > -1 || !compatibility.properties.backgroundOriginMerging && component.name.indexOf("background-origin") > -1 || !compatibility.properties.backgroundSizeMerging && component.name.indexOf("background-size") > -1;
                var nonMergeableValue = compactable[right.name].nonMergeableValue === right.value[0][1];
                if (disabledBackgroundMerging || nonMergeableValue)
                  continue;
                if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator))
                  continue;
                if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right)))
                  continue;
                if (wouldResultInLongerValue(left, right))
                  continue;
                if (!left.multiplex && right.multiplex)
                  turnIntoMultiplex(left, multiplexSize(right));
                override(component, right);
                left.dirty = true;
              }
            } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {
              if (!left.multiplex && right.multiplex)
                continue;
              if (!right.important && left.important) {
                right.unused = true;
                continue propertyLoop;
              }
              if (right.important && !left.important) {
                left.unused = true;
                continue;
              }
              if (!isMergeableShorthand(right)) {
                left.unused = true;
                continue;
              }
              for (k2 = left.components.length - 1;k2 >= 0; k2--) {
                var leftComponent = left.components[k2];
                var rightComponent = right.components[k2];
                mayOverride = compactable[leftComponent.name].canOverride;
                if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent))
                  continue propertyLoop;
              }
              overrideShorthand(left, right);
              left.dirty = true;
            } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {
              if (!left.important && right.important)
                continue;
              component = findComponentIn(left, right);
              mayOverride = compactable[right.name].canOverride;
              if (!everyValuesPair(mayOverride.bind(null, validator), component, right))
                continue;
              if (left.important && !right.important) {
                right.unused = true;
                continue;
              }
              var rightRestored = compactable[right.name].restore(right, compactable);
              if (rightRestored.length > 1)
                continue;
              component = findComponentIn(left, right);
              override(component, right);
              right.dirty = true;
            } else if (left.name == right.name) {
              overridable = true;
              if (right.shorthand) {
                for (k2 = right.components.length - 1;k2 >= 0 && overridable; k2--) {
                  overriddenComponent = left.components[k2];
                  overridingComponent = right.components[k2];
                  mayOverride = compactable[overridingComponent.name].canOverride;
                  overridable = overridable && everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);
                }
              } else {
                mayOverride = compactable[right.name].canOverride;
                overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);
              }
              if (left.important && !right.important && overridable) {
                right.unused = true;
                continue;
              }
              if (!left.important && right.important && overridable) {
                left.unused = true;
                continue;
              }
              if (!overridable) {
                continue;
              }
              left.unused = true;
            }
          }
      }
  };
  var hasInherit = require_has_inherit();
  var everyValuesPair = require_every_values_pair();
  var findComponentIn = require_find_component_in();
  var isComponentOf = require_is_component_of();
  var isMergeableShorthand = require_is_mergeable_shorthand();
  var overridesNonComponentShorthand = require_overrides_non_component_shorthand();
  var sameVendorPrefixesIn = require_vendor_prefixes().same;
  var compactable = require_compactable();
  var deepClone = require_clone().deep;
  var restoreWithComponents = require_restore_with_components();
  var shallowClone = require_clone().shallow;
  var restoreFromOptimizing = require_restore_from_optimizing();
  var Token = require_token();
  var Marker = require_marker();
  var serializeProperty = require_one_time().property;
  module.exports = overrideProperties;
});

// node_modules/clean-css/lib/optimizer/level-2/properties/optimize.js
var require_optimize3 = __commonJS((exports, module) => {
  var optimizeProperties = function(properties, withOverriding, withMerging, context) {
    var levelOptions = context.options.level[OptimizationLevel.Two];
    var _properties = wrapForOptimizing(properties, false, levelOptions.skipProperties);
    var _property;
    var i, l2;
    populateComponents(_properties, context.validator, context.warnings);
    for (i = 0, l2 = _properties.length;i < l2; i++) {
      _property = _properties[i];
      if (_property.block) {
        optimizeProperties(_property.value[0][1], withOverriding, withMerging, context);
      }
    }
    if (withMerging && levelOptions.mergeIntoShorthands) {
      mergeIntoShorthands(_properties, context.validator);
    }
    if (withOverriding && levelOptions.overrideProperties) {
      overrideProperties(_properties, withMerging, context.options.compatibility, context.validator);
    }
    restoreFromOptimizing(_properties, restoreWithComponents);
    removeUnused(_properties);
  };
  var mergeIntoShorthands = require_merge_into_shorthands();
  var overrideProperties = require_override_properties();
  var populateComponents = require_populate_components();
  var restoreWithComponents = require_restore_with_components();
  var wrapForOptimizing = require_wrap_for_optimizing().all;
  var removeUnused = require_remove_unused();
  var restoreFromOptimizing = require_restore_from_optimizing();
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  module.exports = optimizeProperties;
});

// node_modules/clean-css/lib/optimizer/level-2/merge-adjacent.js
var require_merge_adjacent = __commonJS((exports, module) => {
  var mergeAdjacent = function(tokens, context) {
    var lastToken = [null, [], []];
    var options = context.options;
    var adjacentSpace = options.compatibility.selectors.adjacentSpace;
    var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;
    var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
    var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
    var mergeLimit = options.compatibility.selectors.mergeLimit;
    var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      if (token[0] != Token.RULE) {
        lastToken = [null, [], []];
        continue;
      }
      if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {
        Array.prototype.push.apply(lastToken[2], token[2]);
        optimizeProperties(lastToken[2], true, true, context);
        token[2] = [];
      } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(lastToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && lastToken[1].length < mergeLimit) {
        lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
        lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];
        token[2] = [];
      } else {
        lastToken = token;
      }
    }
  };
  var isMergeable = require_is_mergeable();
  var optimizeProperties = require_optimize3();
  var sortSelectors = require_sort_selectors();
  var tidyRules = require_tidy_rules();
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var serializeBody = require_one_time().body;
  var serializeRules = require_one_time().rules;
  var Token = require_token();
  module.exports = mergeAdjacent;
});

// node_modules/clean-css/lib/optimizer/level-2/rules-overlap.js
var require_rules_overlap = __commonJS((exports, module) => {
  var rulesOverlap = function(rule1, rule2, bemMode) {
    var scope1;
    var scope2;
    var i, l2;
    var j2, m2;
    for (i = 0, l2 = rule1.length;i < l2; i++) {
      scope1 = rule1[i][1];
      for (j2 = 0, m2 = rule2.length;j2 < m2; j2++) {
        scope2 = rule2[j2][1];
        if (scope1 == scope2) {
          return true;
        }
        if (bemMode && withoutModifiers(scope1) == withoutModifiers(scope2)) {
          return true;
        }
      }
    }
    return false;
  };
  var withoutModifiers = function(scope) {
    return scope.replace(MODIFIER_PATTERN, "");
  };
  var MODIFIER_PATTERN = /\-\-.+$/;
  module.exports = rulesOverlap;
});

// node_modules/clean-css/lib/optimizer/level-2/specificity.js
var require_specificity = __commonJS((exports, module) => {
  var specificity = function(selector) {
    var result = [0, 0, 0];
    var character;
    var isEscaped;
    var isSingleQuoted;
    var isDoubleQuoted;
    var roundBracketLevel = 0;
    var couldIntroduceNewTypeSelector;
    var withinNotPseudoClass = false;
    var wasPseudoClass = false;
    var i, l2;
    for (i = 0, l2 = selector.length;i < l2; i++) {
      character = selector[i];
      if (isEscaped) {
      } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
        isSingleQuoted = true;
      } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {
        isSingleQuoted = false;
      } else if (character == Marker.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
        isDoubleQuoted = true;
      } else if (character == Marker.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {
        isDoubleQuoted = false;
      } else if (isSingleQuoted || isDoubleQuoted) {
        continue;
      } else if (roundBracketLevel > 0 && !withinNotPseudoClass) {
      } else if (character == Marker.OPEN_ROUND_BRACKET) {
        roundBracketLevel++;
      } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {
        roundBracketLevel--;
        withinNotPseudoClass = false;
      } else if (character == Marker.CLOSE_ROUND_BRACKET) {
        roundBracketLevel--;
      } else if (character == Selector.HASH) {
        result[0]++;
      } else if (character == Selector.DOT || character == Marker.OPEN_SQUARE_BRACKET) {
        result[1]++;
      } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {
        result[1]++;
        withinNotPseudoClass = false;
      } else if (character == Selector.PSEUDO) {
        withinNotPseudoClass = true;
      } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {
        result[2]++;
      }
      isEscaped = character == Marker.BACK_SLASH;
      wasPseudoClass = character == Selector.PSEUDO;
      couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);
    }
    return result;
  };
  var isNotPseudoClass = function(selector, index) {
    return selector.indexOf(NOT_PREFIX, index) === index;
  };
  var Marker = require_marker();
  var Selector = {
    ADJACENT_SIBLING: "+",
    DESCENDANT: ">",
    DOT: ".",
    HASH: "#",
    NON_ADJACENT_SIBLING: "~",
    PSEUDO: ":"
  };
  var LETTER_PATTERN = /[a-zA-Z]/;
  var NOT_PREFIX = ":not(";
  var SEPARATOR_PATTERN = /[\s,\(>~\+]/;
  module.exports = specificity;
});

// node_modules/clean-css/lib/optimizer/level-2/specificities-overlap.js
var require_specificities_overlap = __commonJS((exports, module) => {
  var specificitiesOverlap = function(selector1, selector2, cache) {
    var specificity1;
    var specificity2;
    var i, l2;
    var j2, m2;
    for (i = 0, l2 = selector1.length;i < l2; i++) {
      specificity1 = findSpecificity(selector1[i][1], cache);
      for (j2 = 0, m2 = selector2.length;j2 < m2; j2++) {
        specificity2 = findSpecificity(selector2[j2][1], cache);
        if (specificity1[0] === specificity2[0] && specificity1[1] === specificity2[1] && specificity1[2] === specificity2[2]) {
          return true;
        }
      }
    }
    return false;
  };
  var findSpecificity = function(selector, cache) {
    var value;
    if (!(selector in cache)) {
      cache[selector] = value = specificity(selector);
    }
    return value || cache[selector];
  };
  var specificity = require_specificity();
  module.exports = specificitiesOverlap;
});

// node_modules/clean-css/lib/optimizer/level-2/reorderable.js
var require_reorderable = __commonJS((exports, module) => {
  var canReorder = function(left, right, cache) {
    for (var i = right.length - 1;i >= 0; i--) {
      for (var j2 = left.length - 1;j2 >= 0; j2--) {
        if (!canReorderSingle(left[j2], right[i], cache))
          return false;
      }
    }
    return true;
  };
  var canReorderSingle = function(left, right, cache) {
    var leftName = left[0];
    var leftValue = left[1];
    var leftNameRoot = left[2];
    var leftSelector = left[5];
    var leftInSpecificSelector = left[6];
    var rightName = right[0];
    var rightValue = right[1];
    var rightNameRoot = right[2];
    var rightSelector = right[5];
    var rightInSpecificSelector = right[6];
    if (leftName == "font" && rightName == "line-height" || rightName == "font" && leftName == "line-height")
      return false;
    if (FLEX_PROPERTIES.test(leftName) && FLEX_PROPERTIES.test(rightName))
      return false;
    if (leftNameRoot == rightNameRoot && unprefixed(leftName) == unprefixed(rightName) && vendorPrefixed(leftName) ^ vendorPrefixed(rightName))
      return false;
    if (leftNameRoot == "border" && BORDER_PROPERTIES.test(rightNameRoot) && (leftName == "border" || leftName == rightNameRoot || leftValue != rightValue && sameBorderComponent(leftName, rightName)))
      return false;
    if (rightNameRoot == "border" && BORDER_PROPERTIES.test(leftNameRoot) && (rightName == "border" || rightName == leftNameRoot || leftValue != rightValue && sameBorderComponent(leftName, rightName)))
      return false;
    if (leftNameRoot == "border" && rightNameRoot == "border" && leftName != rightName && (isSideBorder(leftName) && isStyleBorder(rightName) || isStyleBorder(leftName) && isSideBorder(rightName)))
      return false;
    if (leftNameRoot != rightNameRoot)
      return true;
    if (leftName == rightName && leftNameRoot == rightNameRoot && (leftValue == rightValue || withDifferentVendorPrefix(leftValue, rightValue)))
      return true;
    if (leftName != rightName && leftNameRoot == rightNameRoot && leftName != leftNameRoot && rightName != rightNameRoot)
      return true;
    if (leftName != rightName && leftNameRoot == rightNameRoot && leftValue == rightValue)
      return true;
    if (rightInSpecificSelector && leftInSpecificSelector && !inheritable(leftNameRoot) && !inheritable(rightNameRoot) && !rulesOverlap(rightSelector, leftSelector, false))
      return true;
    if (!specificitiesOverlap(leftSelector, rightSelector, cache))
      return true;
    return false;
  };
  var vendorPrefixed = function(name) {
    return /^\-(?:moz|webkit|ms|o)\-/.test(name);
  };
  var unprefixed = function(name) {
    return name.replace(/^\-(?:moz|webkit|ms|o)\-/, "");
  };
  var sameBorderComponent = function(name1, name2) {
    return name1.split("-").pop() == name2.split("-").pop();
  };
  var isSideBorder = function(name) {
    return name == "border-top" || name == "border-right" || name == "border-bottom" || name == "border-left";
  };
  var isStyleBorder = function(name) {
    return name == "border-color" || name == "border-style" || name == "border-width";
  };
  var withDifferentVendorPrefix = function(value1, value2) {
    return vendorPrefixed(value1) && vendorPrefixed(value2) && value1.split("-")[1] != value2.split("-")[2];
  };
  var inheritable = function(name) {
    return name == "font" || name == "line-height" || name == "list-style";
  };
  var rulesOverlap = require_rules_overlap();
  var specificitiesOverlap = require_specificities_overlap();
  var FLEX_PROPERTIES = /align\-items|box\-align|box\-pack|flex|justify/;
  var BORDER_PROPERTIES = /^border\-(top|right|bottom|left|color|style|width|radius)/;
  module.exports = {
    canReorder,
    canReorderSingle
  };
});

// node_modules/clean-css/lib/optimizer/level-2/extract-properties.js
var require_extract_properties = __commonJS((exports, module) => {
  var extractProperties = function(token) {
    var properties = [];
    var inSpecificSelector;
    var property;
    var name;
    var value;
    var i, l2;
    if (token[0] == Token.RULE) {
      inSpecificSelector = !/[\.\+>~]/.test(serializeRules(token[1]));
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        property = token[2][i];
        if (property[0] != Token.PROPERTY)
          continue;
        name = property[1][1];
        if (name.length === 0)
          continue;
        if (name.indexOf("--") === 0)
          continue;
        value = serializeValue(property, i);
        properties.push([
          name,
          value,
          findNameRoot(name),
          token[2][i],
          name + ":" + value,
          token[1],
          inSpecificSelector
        ]);
      }
    } else if (token[0] == Token.NESTED_BLOCK) {
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        properties = properties.concat(extractProperties(token[2][i]));
      }
    }
    return properties;
  };
  var findNameRoot = function(name) {
    if (name == "list-style")
      return name;
    if (name.indexOf("-radius") > 0)
      return "border-radius";
    if (name == "border-collapse" || name == "border-spacing" || name == "border-image")
      return name;
    if (name.indexOf("border-") === 0 && /^border\-\w+\-\w+$/.test(name))
      return name.match(/border\-\w+/)[0];
    if (name.indexOf("border-") === 0 && /^border\-\w+$/.test(name))
      return "border";
    if (name.indexOf("text-") === 0)
      return name;
    if (name == "-chrome-")
      return name;
    return name.replace(/^\-\w+\-/, "").match(/([a-zA-Z]+)/)[0].toLowerCase();
  };
  var Token = require_token();
  var serializeRules = require_one_time().rules;
  var serializeValue = require_one_time().value;
  module.exports = extractProperties;
});

// node_modules/clean-css/lib/optimizer/level-2/merge-media-queries.js
var require_merge_media_queries = __commonJS((exports, module) => {
  var mergeMediaQueries = function(tokens, context) {
    var mergeSemantically = context.options.level[OptimizationLevel.Two].mergeSemantically;
    var specificityCache = context.cache.specificity;
    var candidates = {};
    var reduced = [];
    for (var i = tokens.length - 1;i >= 0; i--) {
      var token = tokens[i];
      if (token[0] != Token.NESTED_BLOCK) {
        continue;
      }
      var key = serializeRules(token[1]);
      var candidate = candidates[key];
      if (!candidate) {
        candidate = [];
        candidates[key] = candidate;
      }
      candidate.push(i);
    }
    for (var name in candidates) {
      var positions = candidates[name];
      positionLoop:
        for (var j2 = positions.length - 1;j2 > 0; j2--) {
          var positionOne = positions[j2];
          var tokenOne = tokens[positionOne];
          var positionTwo = positions[j2 - 1];
          var tokenTwo = tokens[positionTwo];
          directionLoop:
            for (var direction = 1;direction >= -1; direction -= 2) {
              var topToBottom = direction == 1;
              var from = topToBottom ? positionOne + 1 : positionTwo - 1;
              var to = topToBottom ? positionTwo : positionOne;
              var delta = topToBottom ? 1 : -1;
              var source = topToBottom ? tokenOne : tokenTwo;
              var target = topToBottom ? tokenTwo : tokenOne;
              var movedProperties = extractProperties(source);
              while (from != to) {
                var traversedProperties = extractProperties(tokens[from]);
                from += delta;
                if (mergeSemantically && allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache)) {
                  continue;
                }
                if (!canReorder(movedProperties, traversedProperties, specificityCache))
                  continue directionLoop;
              }
              target[2] = topToBottom ? source[2].concat(target[2]) : target[2].concat(source[2]);
              source[2] = [];
              reduced.push(target);
              continue positionLoop;
            }
        }
    }
    return reduced;
  };
  var allSameRulePropertiesCanBeReordered = function(movedProperties, traversedProperties, specificityCache) {
    var movedProperty;
    var movedRule;
    var traversedProperty;
    var traversedRule;
    var i, l2;
    var j2, m2;
    for (i = 0, l2 = movedProperties.length;i < l2; i++) {
      movedProperty = movedProperties[i];
      movedRule = movedProperty[5];
      for (j2 = 0, m2 = traversedProperties.length;j2 < m2; j2++) {
        traversedProperty = traversedProperties[j2];
        traversedRule = traversedProperty[5];
        if (rulesOverlap(movedRule, traversedRule, true) && !canReorderSingle(movedProperty, traversedProperty, specificityCache)) {
          return false;
        }
      }
    }
    return true;
  };
  var canReorder = require_reorderable().canReorder;
  var canReorderSingle = require_reorderable().canReorderSingle;
  var extractProperties = require_extract_properties();
  var rulesOverlap = require_rules_overlap();
  var serializeRules = require_one_time().rules;
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var Token = require_token();
  module.exports = mergeMediaQueries;
});

// node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-body.js
var require_merge_non_adjacent_by_body = __commonJS((exports, module) => {
  var unsafeSelector = function(value) {
    return /\.|\*| :/.test(value);
  };
  var isBemElement = function(token) {
    var asString = serializeRules(token[1]);
    return asString.indexOf("__") > -1 || asString.indexOf("--") > -1;
  };
  var withoutModifier = function(selector) {
    return selector.replace(/--[^ ,>\+~:]+/g, "");
  };
  var removeAnyUnsafeElements = function(left, candidates) {
    var leftSelector = withoutModifier(serializeRules(left[1]));
    for (var body in candidates) {
      var right = candidates[body];
      var rightSelector = withoutModifier(serializeRules(right[1]));
      if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1)
        delete candidates[body];
    }
  };
  var mergeNonAdjacentByBody = function(tokens, context) {
    var options = context.options;
    var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;
    var adjacentSpace = options.compatibility.selectors.adjacentSpace;
    var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;
    var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
    var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
    var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
    var candidates = {};
    for (var i = tokens.length - 1;i >= 0; i--) {
      var token = tokens[i];
      if (token[0] != Token.RULE)
        continue;
      if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules(token[1]))))
        candidates = {};
      if (token[2].length > 0 && mergeSemantically && isBemElement(token))
        removeAnyUnsafeElements(token, candidates);
      var candidateBody = serializeBody(token[2]);
      var oldToken = candidates[candidateBody];
      if (oldToken && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(oldToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)) {
        if (token[2].length > 0) {
          token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
          token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];
        } else {
          token[1] = oldToken[1].concat(token[1]);
        }
        oldToken[2] = [];
        candidates[candidateBody] = null;
      }
      candidates[serializeBody(token[2])] = token;
    }
  };
  var isMergeable = require_is_mergeable();
  var sortSelectors = require_sort_selectors();
  var tidyRules = require_tidy_rules();
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var serializeBody = require_one_time().body;
  var serializeRules = require_one_time().rules;
  var Token = require_token();
  module.exports = mergeNonAdjacentByBody;
});

// node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-selector.js
var require_merge_non_adjacent_by_selector = __commonJS((exports, module) => {
  var mergeNonAdjacentBySelector = function(tokens, context) {
    var specificityCache = context.cache.specificity;
    var allSelectors = {};
    var repeatedSelectors = [];
    var i;
    for (i = tokens.length - 1;i >= 0; i--) {
      if (tokens[i][0] != Token.RULE)
        continue;
      if (tokens[i][2].length === 0)
        continue;
      var selector = serializeRules(tokens[i][1]);
      allSelectors[selector] = [i].concat(allSelectors[selector] || []);
      if (allSelectors[selector].length == 2)
        repeatedSelectors.push(selector);
    }
    for (i = repeatedSelectors.length - 1;i >= 0; i--) {
      var positions = allSelectors[repeatedSelectors[i]];
      selectorIterator:
        for (var j2 = positions.length - 1;j2 > 0; j2--) {
          var positionOne = positions[j2 - 1];
          var tokenOne = tokens[positionOne];
          var positionTwo = positions[j2];
          var tokenTwo = tokens[positionTwo];
          directionIterator:
            for (var direction = 1;direction >= -1; direction -= 2) {
              var topToBottom = direction == 1;
              var from = topToBottom ? positionOne + 1 : positionTwo - 1;
              var to = topToBottom ? positionTwo : positionOne;
              var delta = topToBottom ? 1 : -1;
              var moved = topToBottom ? tokenOne : tokenTwo;
              var target = topToBottom ? tokenTwo : tokenOne;
              var movedProperties = extractProperties(moved);
              while (from != to) {
                var traversedProperties = extractProperties(tokens[from]);
                from += delta;
                var reorderable = topToBottom ? canReorder(movedProperties, traversedProperties, specificityCache) : canReorder(traversedProperties, movedProperties, specificityCache);
                if (!reorderable && !topToBottom)
                  continue selectorIterator;
                if (!reorderable && topToBottom)
                  continue directionIterator;
              }
              if (topToBottom) {
                Array.prototype.push.apply(moved[2], target[2]);
                target[2] = moved[2];
              } else {
                Array.prototype.push.apply(target[2], moved[2]);
              }
              optimizeProperties(target[2], true, true, context);
              moved[2] = [];
            }
        }
    }
  };
  var canReorder = require_reorderable().canReorder;
  var extractProperties = require_extract_properties();
  var optimizeProperties = require_optimize3();
  var serializeRules = require_one_time().rules;
  var Token = require_token();
  module.exports = mergeNonAdjacentBySelector;
});

// node_modules/clean-css/lib/utils/clone-array.js
var require_clone_array = __commonJS((exports, module) => {
  var cloneArray = function(array) {
    var cloned = array.slice(0);
    for (var i = 0, l2 = cloned.length;i < l2; i++) {
      if (Array.isArray(cloned[i]))
        cloned[i] = cloneArray(cloned[i]);
    }
    return cloned;
  };
  module.exports = cloneArray;
});

// node_modules/clean-css/lib/optimizer/level-2/reduce-non-adjacent.js
var require_reduce_non_adjacent = __commonJS((exports, module) => {
  var reduceNonAdjacent = function(tokens, context) {
    var options = context.options;
    var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
    var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
    var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
    var candidates = {};
    var repeated = [];
    for (var i = tokens.length - 1;i >= 0; i--) {
      var token = tokens[i];
      if (token[0] != Token.RULE) {
        continue;
      } else if (token[2].length === 0) {
        continue;
      }
      var selectorAsString = serializeRules(token[1]);
      var isComplexAndNotSpecial = token[1].length > 1 && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);
      var wrappedSelectors = wrappedSelectorsFrom(token[1]);
      var selectors = isComplexAndNotSpecial ? [selectorAsString].concat(wrappedSelectors) : [selectorAsString];
      for (var j2 = 0, m2 = selectors.length;j2 < m2; j2++) {
        var selector = selectors[j2];
        if (!candidates[selector])
          candidates[selector] = [];
        else
          repeated.push(selector);
        candidates[selector].push({
          where: i,
          list: wrappedSelectors,
          isPartial: isComplexAndNotSpecial && j2 > 0,
          isComplex: isComplexAndNotSpecial && j2 === 0
        });
      }
    }
    reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);
    reduceComplexNonAdjacentCases(tokens, candidates, options, context);
  };
  var wrappedSelectorsFrom = function(list) {
    var wrapped = [];
    for (var i = 0;i < list.length; i++) {
      wrapped.push([list[i][1]]);
    }
    return wrapped;
  };
  var reduceSimpleNonAdjacentCases = function(tokens, repeated, candidates, options, context) {
    function filterOut(idx, bodies) {
      return data[idx].isPartial && bodies.length === 0;
    }
    function reduceBody(token, newBody, processedCount, tokenIdx) {
      if (!data[processedCount - tokenIdx - 1].isPartial)
        token[2] = newBody;
    }
    for (var i = 0, l2 = repeated.length;i < l2; i++) {
      var selector = repeated[i];
      var data = candidates[selector];
      reduceSelector(tokens, data, {
        filterOut,
        callback: reduceBody
      }, options, context);
    }
  };
  var reduceComplexNonAdjacentCases = function(tokens, candidates, options, context) {
    var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
    var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
    var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
    var localContext = {};
    function filterOut(idx) {
      return localContext.data[idx].where < localContext.intoPosition;
    }
    function collectReducedBodies(token, newBody, processedCount, tokenIdx) {
      if (tokenIdx === 0)
        localContext.reducedBodies.push(newBody);
    }
    allSelectors:
      for (var complexSelector in candidates) {
        var into = candidates[complexSelector];
        if (!into[0].isComplex)
          continue;
        var intoPosition = into[into.length - 1].where;
        var intoToken = tokens[intoPosition];
        var reducedBodies = [];
        var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) ? into[0].list : [complexSelector];
        localContext.intoPosition = intoPosition;
        localContext.reducedBodies = reducedBodies;
        for (var j2 = 0, m2 = selectors.length;j2 < m2; j2++) {
          var selector = selectors[j2];
          var data = candidates[selector];
          if (data.length < 2)
            continue allSelectors;
          localContext.data = data;
          reduceSelector(tokens, data, {
            filterOut,
            callback: collectReducedBodies
          }, options, context);
          if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0]))
            continue allSelectors;
        }
        intoToken[2] = reducedBodies[0];
      }
  };
  var reduceSelector = function(tokens, data, context, options, outerContext) {
    var bodies = [];
    var bodiesAsList = [];
    var processedTokens = [];
    for (var j2 = data.length - 1;j2 >= 0; j2--) {
      if (context.filterOut(j2, bodies))
        continue;
      var where = data[j2].where;
      var token = tokens[where];
      var clonedBody = cloneArray(token[2]);
      bodies = bodies.concat(clonedBody);
      bodiesAsList.push(clonedBody);
      processedTokens.push(where);
    }
    optimizeProperties(bodies, true, false, outerContext);
    var processedCount = processedTokens.length;
    var propertyIdx = bodies.length - 1;
    var tokenIdx = processedCount - 1;
    while (tokenIdx >= 0) {
      if ((tokenIdx === 0 || bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1) && propertyIdx > -1) {
        propertyIdx--;
        continue;
      }
      var newBody = bodies.splice(propertyIdx + 1);
      context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);
      tokenIdx--;
    }
  };
  var isMergeable = require_is_mergeable();
  var optimizeProperties = require_optimize3();
  var cloneArray = require_clone_array();
  var Token = require_token();
  var serializeBody = require_one_time().body;
  var serializeRules = require_one_time().rules;
  module.exports = reduceNonAdjacent;
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-font-at-rules.js
var require_remove_duplicate_font_at_rules = __commonJS((exports, module) => {
  var removeDuplicateFontAtRules = function(tokens) {
    var fontAtRules = [];
    var token;
    var key;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      if (token[0] != Token.AT_RULE_BLOCK && token[1][0][1] != FONT_FACE_SCOPE) {
        continue;
      }
      key = serializeAll([token]);
      if (fontAtRules.indexOf(key) > -1) {
        token[2] = [];
      } else {
        fontAtRules.push(key);
      }
    }
  };
  var Token = require_token();
  var serializeAll = require_one_time().all;
  var FONT_FACE_SCOPE = "@font-face";
  module.exports = removeDuplicateFontAtRules;
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-media-queries.js
var require_remove_duplicate_media_queries = __commonJS((exports, module) => {
  var removeDuplicateMediaQueries = function(tokens) {
    var candidates = {};
    var candidate;
    var token;
    var key;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      if (token[0] != Token.NESTED_BLOCK) {
        continue;
      }
      key = serializeRules(token[1]) + "%" + serializeAll(token[2]);
      candidate = candidates[key];
      if (candidate) {
        candidate[2] = [];
      }
      candidates[key] = token;
    }
  };
  var Token = require_token();
  var serializeAll = require_one_time().all;
  var serializeRules = require_one_time().rules;
  module.exports = removeDuplicateMediaQueries;
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicates.js
var require_remove_duplicates = __commonJS((exports, module) => {
  var removeDuplicates = function(tokens) {
    var matched = {};
    var moreThanOnce = [];
    var id, token;
    var body, bodies;
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      if (token[0] != Token.RULE)
        continue;
      id = serializeRules(token[1]);
      if (matched[id] && matched[id].length == 1)
        moreThanOnce.push(id);
      else
        matched[id] = matched[id] || [];
      matched[id].push(i);
    }
    for (i = 0, l2 = moreThanOnce.length;i < l2; i++) {
      id = moreThanOnce[i];
      bodies = [];
      for (var j2 = matched[id].length - 1;j2 >= 0; j2--) {
        token = tokens[matched[id][j2]];
        body = serializeBody(token[2]);
        if (bodies.indexOf(body) > -1)
          token[2] = [];
        else
          bodies.push(body);
      }
    }
  };
  var Token = require_token();
  var serializeBody = require_one_time().body;
  var serializeRules = require_one_time().rules;
  module.exports = removeDuplicates;
});

// node_modules/clean-css/lib/optimizer/level-2/remove-unused-at-rules.js
var require_remove_unused_at_rules = __commonJS((exports, module) => {
  var normalize = function(value) {
    return value.replace(optionalMatchingQuotesRegex, "$2").replace(importantRegex, "");
  };
  var removeUnusedAtRules = function(tokens, context) {
    removeUnusedAtRule(tokens, matchCounterStyle, markCounterStylesAsUsed, context);
    removeUnusedAtRule(tokens, matchFontFace, markFontFacesAsUsed, context);
    removeUnusedAtRule(tokens, matchKeyframe, markKeyframesAsUsed, context);
    removeUnusedAtRule(tokens, matchNamespace, markNamespacesAsUsed, context);
  };
  var removeUnusedAtRule = function(tokens, matchCallback, markCallback, context) {
    var atRules = {};
    var atRule;
    var atRuleTokens;
    var atRuleToken;
    var zeroAt;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      matchCallback(tokens[i], atRules);
    }
    if (Object.keys(atRules).length === 0) {
      return;
    }
    markUsedAtRules(tokens, markCallback, atRules, context);
    for (atRule in atRules) {
      atRuleTokens = atRules[atRule];
      for (i = 0, l2 = atRuleTokens.length;i < l2; i++) {
        atRuleToken = atRuleTokens[i];
        zeroAt = atRuleToken[0] == Token.AT_RULE ? 1 : 2;
        atRuleToken[zeroAt] = [];
      }
    }
  };
  var markUsedAtRules = function(tokens, markCallback, atRules, context) {
    var boundMarkCallback = markCallback(atRules);
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      switch (tokens[i][0]) {
        case Token.RULE:
          boundMarkCallback(tokens[i], context);
          break;
        case Token.NESTED_BLOCK:
          markUsedAtRules(tokens[i][2], markCallback, atRules, context);
      }
    }
  };
  var matchCounterStyle = function(token, atRules) {
    var match;
    if (token[0] == Token.AT_RULE_BLOCK && token[1][0][1].indexOf("@counter-style") === 0) {
      match = token[1][0][1].split(" ")[1];
      atRules[match] = atRules[match] || [];
      atRules[match].push(token);
    }
  };
  var markCounterStylesAsUsed = function(atRules) {
    return function(token, context) {
      var property;
      var wrappedProperty;
      var i, l2;
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        property = token[2][i];
        if (property[1][1] == "list-style") {
          wrappedProperty = wrapForOptimizing(property);
          populateComponents([wrappedProperty], context.validator, context.warnings);
          if (wrappedProperty.components[0].value[0][1] in atRules) {
            delete atRules[property[2][1]];
          }
          restoreFromOptimizing([wrappedProperty]);
        }
        if (property[1][1] == "list-style-type" && property[2][1] in atRules) {
          delete atRules[property[2][1]];
        }
      }
    };
  };
  var matchFontFace = function(token, atRules) {
    var property;
    var match;
    var i, l2;
    if (token[0] == Token.AT_RULE_BLOCK && token[1][0][1] == "@font-face") {
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        property = token[2][i];
        if (property[1][1] == "font-family") {
          match = normalize(property[2][1].toLowerCase());
          atRules[match] = atRules[match] || [];
          atRules[match].push(token);
          break;
        }
      }
    }
  };
  var markFontFacesAsUsed = function(atRules) {
    return function(token, context) {
      var property;
      var wrappedProperty;
      var component;
      var normalizedMatch;
      var i, l2;
      var j2, m2;
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        property = token[2][i];
        if (property[1][1] == "font") {
          wrappedProperty = wrapForOptimizing(property);
          populateComponents([wrappedProperty], context.validator, context.warnings);
          component = wrappedProperty.components[6];
          for (j2 = 0, m2 = component.value.length;j2 < m2; j2++) {
            normalizedMatch = normalize(component.value[j2][1].toLowerCase());
            if (normalizedMatch in atRules) {
              delete atRules[normalizedMatch];
            }
          }
          restoreFromOptimizing([wrappedProperty]);
        }
        if (property[1][1] == "font-family") {
          for (j2 = 2, m2 = property.length;j2 < m2; j2++) {
            normalizedMatch = normalize(property[j2][1].toLowerCase());
            if (normalizedMatch in atRules) {
              delete atRules[normalizedMatch];
            }
          }
        }
      }
    };
  };
  var matchKeyframe = function(token, atRules) {
    var match;
    if (token[0] == Token.NESTED_BLOCK && keyframeRegex.test(token[1][0][1])) {
      match = token[1][0][1].split(" ")[1];
      atRules[match] = atRules[match] || [];
      atRules[match].push(token);
    }
  };
  var markKeyframesAsUsed = function(atRules) {
    return function(token, context) {
      var property;
      var wrappedProperty;
      var component;
      var i, l2;
      var j2, m2;
      for (i = 0, l2 = token[2].length;i < l2; i++) {
        property = token[2][i];
        if (animationRegex.test(property[1][1])) {
          wrappedProperty = wrapForOptimizing(property);
          populateComponents([wrappedProperty], context.validator, context.warnings);
          component = wrappedProperty.components[7];
          for (j2 = 0, m2 = component.value.length;j2 < m2; j2++) {
            if (component.value[j2][1] in atRules) {
              delete atRules[component.value[j2][1]];
            }
          }
          restoreFromOptimizing([wrappedProperty]);
        }
        if (animationNameRegex.test(property[1][1])) {
          for (j2 = 2, m2 = property.length;j2 < m2; j2++) {
            if (property[j2][1] in atRules) {
              delete atRules[property[j2][1]];
            }
          }
        }
      }
    };
  };
  var matchNamespace = function(token, atRules) {
    var match;
    if (token[0] == Token.AT_RULE && token[1].indexOf("@namespace") === 0) {
      match = token[1].split(" ")[1];
      atRules[match] = atRules[match] || [];
      atRules[match].push(token);
    }
  };
  var markNamespacesAsUsed = function(atRules) {
    var namespaceRegex = new RegExp(Object.keys(atRules).join("\\||") + "\\|", "g");
    return function(token) {
      var match;
      var scope;
      var normalizedMatch;
      var i, l2;
      var j2, m2;
      for (i = 0, l2 = token[1].length;i < l2; i++) {
        scope = token[1][i];
        match = scope[1].match(namespaceRegex);
        for (j2 = 0, m2 = match.length;j2 < m2; j2++) {
          normalizedMatch = match[j2].substring(0, match[j2].length - 1);
          if (normalizedMatch in atRules) {
            delete atRules[normalizedMatch];
          }
        }
      }
    };
  };
  var populateComponents = require_populate_components();
  var wrapForOptimizing = require_wrap_for_optimizing().single;
  var restoreFromOptimizing = require_restore_from_optimizing();
  var Token = require_token();
  var animationNameRegex = /^(\-moz\-|\-o\-|\-webkit\-)?animation-name$/;
  var animationRegex = /^(\-moz\-|\-o\-|\-webkit\-)?animation$/;
  var keyframeRegex = /^@(\-moz\-|\-o\-|\-webkit\-)?keyframes /;
  var importantRegex = /\s{0,31}!important$/;
  var optionalMatchingQuotesRegex = /^(['"]?)(.*)\1$/;
  module.exports = removeUnusedAtRules;
});

// node_modules/clean-css/lib/optimizer/level-2/tidy-rule-duplicates.js
var require_tidy_rule_duplicates = __commonJS((exports, module) => {
  var ruleSorter = function(s1, s2) {
    return s1[1] > s2[1] ? 1 : -1;
  };
  var tidyRuleDuplicates = function(rules) {
    var list = [];
    var repeated = [];
    for (var i = 0, l2 = rules.length;i < l2; i++) {
      var rule = rules[i];
      if (repeated.indexOf(rule[1]) == -1) {
        repeated.push(rule[1]);
        list.push(rule);
      }
    }
    return list.sort(ruleSorter);
  };
  module.exports = tidyRuleDuplicates;
});

// node_modules/clean-css/lib/optimizer/level-2/restructure.js
var require_restructure = __commonJS((exports, module) => {
  var naturalSorter = function(a2, b2) {
    return a2 > b2 ? 1 : -1;
  };
  var cloneAndMergeSelectors = function(propertyA, propertyB) {
    var cloned = cloneArray(propertyA);
    cloned[5] = cloned[5].concat(propertyB[5]);
    return cloned;
  };
  var restructure = function(tokens, context) {
    var options = context.options;
    var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
    var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
    var mergeLimit = options.compatibility.selectors.mergeLimit;
    var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
    var specificityCache = context.cache.specificity;
    var movableTokens = {};
    var movedProperties = [];
    var multiPropertyMoveCache = {};
    var movedToBeDropped = [];
    var maxCombinationsLevel = 2;
    var ID_JOIN_CHARACTER = "%";
    function sendToMultiPropertyMoveCache(position2, movedProperty2, allFits) {
      for (var i2 = allFits.length - 1;i2 >= 0; i2--) {
        var fit = allFits[i2][0];
        var id = addToCache(movedProperty2, fit);
        if (multiPropertyMoveCache[id].length > 1 && processMultiPropertyMove(position2, multiPropertyMoveCache[id])) {
          removeAllMatchingFromCache(id);
          break;
        }
      }
    }
    function addToCache(movedProperty2, fit) {
      var id = cacheId(fit);
      multiPropertyMoveCache[id] = multiPropertyMoveCache[id] || [];
      multiPropertyMoveCache[id].push([movedProperty2, fit]);
      return id;
    }
    function removeAllMatchingFromCache(matchId) {
      var matchSelectors = matchId.split(ID_JOIN_CHARACTER);
      var forRemoval = [];
      var i2;
      for (var id in multiPropertyMoveCache) {
        var selectors = id.split(ID_JOIN_CHARACTER);
        for (i2 = selectors.length - 1;i2 >= 0; i2--) {
          if (matchSelectors.indexOf(selectors[i2]) > -1) {
            forRemoval.push(id);
            break;
          }
        }
      }
      for (i2 = forRemoval.length - 1;i2 >= 0; i2--) {
        delete multiPropertyMoveCache[forRemoval[i2]];
      }
    }
    function cacheId(cachedTokens) {
      var id = [];
      for (var i2 = 0, l2 = cachedTokens.length;i2 < l2; i2++) {
        id.push(serializeRules(cachedTokens[i2][1]));
      }
      return id.join(ID_JOIN_CHARACTER);
    }
    function tokensToMerge(sourceTokens) {
      var uniqueTokensWithBody = [];
      var mergeableTokens = [];
      for (var i2 = sourceTokens.length - 1;i2 >= 0; i2--) {
        if (!isMergeable(serializeRules(sourceTokens[i2][1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)) {
          continue;
        }
        mergeableTokens.unshift(sourceTokens[i2]);
        if (sourceTokens[i2][2].length > 0 && uniqueTokensWithBody.indexOf(sourceTokens[i2]) == -1)
          uniqueTokensWithBody.push(sourceTokens[i2]);
      }
      return uniqueTokensWithBody.length > 1 ? mergeableTokens : [];
    }
    function shortenIfPossible(position2, movedProperty2) {
      var name = movedProperty2[0];
      var value = movedProperty2[1];
      var key2 = movedProperty2[4];
      var valueSize = name.length + value.length + 1;
      var allSelectors = [];
      var qualifiedTokens = [];
      var mergeableTokens = tokensToMerge(movableTokens[key2]);
      if (mergeableTokens.length < 2)
        return;
      var allFits = findAllFits(mergeableTokens, valueSize, 1);
      var bestFit = allFits[0];
      if (bestFit[1] > 0)
        return sendToMultiPropertyMoveCache(position2, movedProperty2, allFits);
      for (var i2 = bestFit[0].length - 1;i2 >= 0; i2--) {
        allSelectors = bestFit[0][i2][1].concat(allSelectors);
        qualifiedTokens.unshift(bestFit[0][i2]);
      }
      allSelectors = tidyRuleDuplicates(allSelectors);
      dropAsNewTokenAt(position2, [movedProperty2], allSelectors, qualifiedTokens);
    }
    function fitSorter(fit1, fit2) {
      return fit1[1] > fit2[1] ? 1 : fit1[1] == fit2[1] ? 0 : -1;
    }
    function findAllFits(mergeableTokens, propertySize, propertiesCount) {
      var combinations = allCombinations(mergeableTokens, propertySize, propertiesCount, maxCombinationsLevel - 1);
      return combinations.sort(fitSorter);
    }
    function allCombinations(tokensVariant, propertySize, propertiesCount, level) {
      var differenceVariants = [[tokensVariant, sizeDifference(tokensVariant, propertySize, propertiesCount)]];
      if (tokensVariant.length > 2 && level > 0) {
        for (var i2 = tokensVariant.length - 1;i2 >= 0; i2--) {
          var subVariant = Array.prototype.slice.call(tokensVariant, 0);
          subVariant.splice(i2, 1);
          differenceVariants = differenceVariants.concat(allCombinations(subVariant, propertySize, propertiesCount, level - 1));
        }
      }
      return differenceVariants;
    }
    function sizeDifference(tokensVariant, propertySize, propertiesCount) {
      var allSelectorsSize = 0;
      for (var i2 = tokensVariant.length - 1;i2 >= 0; i2--) {
        allSelectorsSize += tokensVariant[i2][2].length > propertiesCount ? serializeRules(tokensVariant[i2][1]).length : -1;
      }
      return allSelectorsSize - (tokensVariant.length - 1) * propertySize + 1;
    }
    function dropAsNewTokenAt(position2, properties2, allSelectors, mergeableTokens) {
      var i2, j3, k3, m3;
      var allProperties = [];
      for (i2 = mergeableTokens.length - 1;i2 >= 0; i2--) {
        var mergeableToken = mergeableTokens[i2];
        for (j3 = mergeableToken[2].length - 1;j3 >= 0; j3--) {
          var mergeableProperty = mergeableToken[2][j3];
          for (k3 = 0, m3 = properties2.length;k3 < m3; k3++) {
            var property2 = properties2[k3];
            var mergeablePropertyName = mergeableProperty[1][1];
            var propertyName = property2[0];
            var propertyBody = property2[4];
            if (mergeablePropertyName == propertyName && serializeBody([mergeableProperty]) == propertyBody) {
              mergeableToken[2].splice(j3, 1);
              break;
            }
          }
        }
      }
      for (i2 = properties2.length - 1;i2 >= 0; i2--) {
        allProperties.unshift(properties2[i2][3]);
      }
      var newToken = [Token.RULE, allSelectors, allProperties];
      tokens.splice(position2, 0, newToken);
    }
    function dropPropertiesAt(position2, movedProperty2) {
      var key2 = movedProperty2[4];
      var toMove = movableTokens[key2];
      if (toMove && toMove.length > 1) {
        if (!shortenMultiMovesIfPossible(position2, movedProperty2))
          shortenIfPossible(position2, movedProperty2);
      }
    }
    function shortenMultiMovesIfPossible(position2, movedProperty2) {
      var candidates = [];
      var propertiesAndMergableTokens = [];
      var key2 = movedProperty2[4];
      var j3, k3;
      var mergeableTokens = tokensToMerge(movableTokens[key2]);
      if (mergeableTokens.length < 2)
        return;
      movableLoop:
        for (var value in movableTokens) {
          var tokensList = movableTokens[value];
          for (j3 = mergeableTokens.length - 1;j3 >= 0; j3--) {
            if (tokensList.indexOf(mergeableTokens[j3]) == -1)
              continue movableLoop;
          }
          candidates.push(value);
        }
      if (candidates.length < 2)
        return false;
      for (j3 = candidates.length - 1;j3 >= 0; j3--) {
        for (k3 = movedProperties.length - 1;k3 >= 0; k3--) {
          if (movedProperties[k3][4] == candidates[j3]) {
            propertiesAndMergableTokens.unshift([movedProperties[k3], mergeableTokens]);
            break;
          }
        }
      }
      return processMultiPropertyMove(position2, propertiesAndMergableTokens);
    }
    function processMultiPropertyMove(position2, propertiesAndMergableTokens) {
      var valueSize = 0;
      var properties2 = [];
      var property2;
      for (var i2 = propertiesAndMergableTokens.length - 1;i2 >= 0; i2--) {
        property2 = propertiesAndMergableTokens[i2][0];
        var fullValue = property2[4];
        valueSize += fullValue.length + (i2 > 0 ? 1 : 0);
        properties2.push(property2);
      }
      var mergeableTokens = propertiesAndMergableTokens[0][1];
      var bestFit = findAllFits(mergeableTokens, valueSize, properties2.length)[0];
      if (bestFit[1] > 0)
        return false;
      var allSelectors = [];
      var qualifiedTokens = [];
      for (i2 = bestFit[0].length - 1;i2 >= 0; i2--) {
        allSelectors = bestFit[0][i2][1].concat(allSelectors);
        qualifiedTokens.unshift(bestFit[0][i2]);
      }
      allSelectors = tidyRuleDuplicates(allSelectors);
      dropAsNewTokenAt(position2, properties2, allSelectors, qualifiedTokens);
      for (i2 = properties2.length - 1;i2 >= 0; i2--) {
        property2 = properties2[i2];
        var index = movedProperties.indexOf(property2);
        delete movableTokens[property2[4]];
        if (index > -1 && movedToBeDropped.indexOf(index) == -1)
          movedToBeDropped.push(index);
      }
      return true;
    }
    function boundToAnotherPropertyInCurrrentToken(property2, movedProperty2, token2) {
      var propertyName = property2[0];
      var movedPropertyName = movedProperty2[0];
      if (propertyName != movedPropertyName)
        return false;
      var key2 = movedProperty2[4];
      var toMove = movableTokens[key2];
      return toMove && toMove.indexOf(token2) > -1;
    }
    for (var i = tokens.length - 1;i >= 0; i--) {
      var token = tokens[i];
      var isRule;
      var j2, k2, m2;
      var samePropertyAt;
      if (token[0] == Token.RULE) {
        isRule = true;
      } else if (token[0] == Token.NESTED_BLOCK) {
        isRule = false;
      } else {
        continue;
      }
      var movedCount = movedProperties.length;
      var properties = extractProperties(token);
      movedToBeDropped = [];
      var unmovableInCurrentToken = [];
      for (j2 = properties.length - 1;j2 >= 0; j2--) {
        for (k2 = j2 - 1;k2 >= 0; k2--) {
          if (!canReorderSingle(properties[j2], properties[k2], specificityCache)) {
            unmovableInCurrentToken.push(j2);
            break;
          }
        }
      }
      for (j2 = properties.length - 1;j2 >= 0; j2--) {
        var property = properties[j2];
        var movedSameProperty = false;
        for (k2 = 0;k2 < movedCount; k2++) {
          var movedProperty = movedProperties[k2];
          if (movedToBeDropped.indexOf(k2) == -1 && (!canReorderSingle(property, movedProperty, specificityCache) && !boundToAnotherPropertyInCurrrentToken(property, movedProperty, token) || movableTokens[movedProperty[4]] && movableTokens[movedProperty[4]].length === mergeLimit)) {
            dropPropertiesAt(i + 1, movedProperty, token);
            if (movedToBeDropped.indexOf(k2) == -1) {
              movedToBeDropped.push(k2);
              delete movableTokens[movedProperty[4]];
            }
          }
          if (!movedSameProperty) {
            movedSameProperty = property[0] == movedProperty[0] && property[1] == movedProperty[1];
            if (movedSameProperty) {
              samePropertyAt = k2;
            }
          }
        }
        if (!isRule || unmovableInCurrentToken.indexOf(j2) > -1)
          continue;
        var key = property[4];
        if (movedSameProperty && movedProperties[samePropertyAt][5].length + property[5].length > mergeLimit) {
          dropPropertiesAt(i + 1, movedProperties[samePropertyAt]);
          movedProperties.splice(samePropertyAt, 1);
          movableTokens[key] = [token];
          movedSameProperty = false;
        } else {
          movableTokens[key] = movableTokens[key] || [];
          movableTokens[key].push(token);
        }
        if (movedSameProperty) {
          movedProperties[samePropertyAt] = cloneAndMergeSelectors(movedProperties[samePropertyAt], property);
        } else {
          movedProperties.push(property);
        }
      }
      movedToBeDropped = movedToBeDropped.sort(naturalSorter);
      for (j2 = 0, m2 = movedToBeDropped.length;j2 < m2; j2++) {
        var dropAt = movedToBeDropped[j2] - j2;
        movedProperties.splice(dropAt, 1);
      }
    }
    var position = tokens[0] && tokens[0][0] == Token.AT_RULE && tokens[0][1].indexOf("@charset") === 0 ? 1 : 0;
    for (;position < tokens.length - 1; position++) {
      var isImportRule = tokens[position][0] === Token.AT_RULE && tokens[position][1].indexOf("@import") === 0;
      var isComment = tokens[position][0] === Token.COMMENT;
      if (!(isImportRule || isComment))
        break;
    }
    for (i = 0;i < movedProperties.length; i++) {
      dropPropertiesAt(position, movedProperties[i]);
    }
  };
  var canReorderSingle = require_reorderable().canReorderSingle;
  var extractProperties = require_extract_properties();
  var isMergeable = require_is_mergeable();
  var tidyRuleDuplicates = require_tidy_rule_duplicates();
  var Token = require_token();
  var cloneArray = require_clone_array();
  var serializeBody = require_one_time().body;
  var serializeRules = require_one_time().rules;
  module.exports = restructure;
});

// node_modules/clean-css/lib/optimizer/level-2/optimize.js
var require_optimize4 = __commonJS((exports, module) => {
  var removeEmpty = function(tokens) {
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      var isEmpty = false;
      switch (token[0]) {
        case Token.RULE:
          isEmpty = token[1].length === 0 || token[2].length === 0;
          break;
        case Token.NESTED_BLOCK:
          removeEmpty(token[2]);
          isEmpty = token[2].length === 0;
          break;
        case Token.AT_RULE:
          isEmpty = token[1].length === 0;
          break;
        case Token.AT_RULE_BLOCK:
          isEmpty = token[2].length === 0;
      }
      if (isEmpty) {
        tokens.splice(i, 1);
        i--;
        l2--;
      }
    }
  };
  var recursivelyOptimizeBlocks = function(tokens, context) {
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      if (token[0] == Token.NESTED_BLOCK) {
        var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0][1]);
        level2Optimize(token[2], context, !isKeyframes);
      }
    }
  };
  var recursivelyOptimizeProperties = function(tokens, context) {
    for (var i = 0, l2 = tokens.length;i < l2; i++) {
      var token = tokens[i];
      switch (token[0]) {
        case Token.RULE:
          optimizeProperties(token[2], true, true, context);
          break;
        case Token.NESTED_BLOCK:
          recursivelyOptimizeProperties(token[2], context);
      }
    }
  };
  var level2Optimize = function(tokens, context, withRestructuring) {
    var levelOptions = context.options.level[OptimizationLevel.Two];
    var reduced;
    var i;
    recursivelyOptimizeBlocks(tokens, context);
    recursivelyOptimizeProperties(tokens, context);
    if (levelOptions.removeDuplicateRules) {
      removeDuplicates(tokens, context);
    }
    if (levelOptions.mergeAdjacentRules) {
      mergeAdjacent(tokens, context);
    }
    if (levelOptions.reduceNonAdjacentRules) {
      reduceNonAdjacent(tokens, context);
    }
    if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != "body") {
      mergeNonAdjacentBySelector(tokens, context);
    }
    if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != "selector") {
      mergeNonAdjacentByBody(tokens, context);
    }
    if (levelOptions.restructureRules && levelOptions.mergeAdjacentRules && withRestructuring) {
      restructure(tokens, context);
      mergeAdjacent(tokens, context);
    }
    if (levelOptions.restructureRules && !levelOptions.mergeAdjacentRules && withRestructuring) {
      restructure(tokens, context);
    }
    if (levelOptions.removeDuplicateFontRules) {
      removeDuplicateFontAtRules(tokens, context);
    }
    if (levelOptions.removeDuplicateMediaBlocks) {
      removeDuplicateMediaQueries(tokens, context);
    }
    if (levelOptions.removeUnusedAtRules) {
      removeUnusedAtRules(tokens, context);
    }
    if (levelOptions.mergeMedia) {
      reduced = mergeMediaQueries(tokens, context);
      for (i = reduced.length - 1;i >= 0; i--) {
        level2Optimize(reduced[i][2], context, false);
      }
    }
    if (levelOptions.removeEmpty) {
      removeEmpty(tokens);
    }
    return tokens;
  };
  var mergeAdjacent = require_merge_adjacent();
  var mergeMediaQueries = require_merge_media_queries();
  var mergeNonAdjacentByBody = require_merge_non_adjacent_by_body();
  var mergeNonAdjacentBySelector = require_merge_non_adjacent_by_selector();
  var reduceNonAdjacent = require_reduce_non_adjacent();
  var removeDuplicateFontAtRules = require_remove_duplicate_font_at_rules();
  var removeDuplicateMediaQueries = require_remove_duplicate_media_queries();
  var removeDuplicates = require_remove_duplicates();
  var removeUnusedAtRules = require_remove_unused_at_rules();
  var restructure = require_restructure();
  var optimizeProperties = require_optimize3();
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var Token = require_token();
  module.exports = level2Optimize;
});

// node_modules/clean-css/lib/optimizer/validator.js
var require_validator = __commonJS((exports, module) => {
  var isColor = function(value) {
    return value != "auto" && (isKeyword("color")(value) || isHexColor(value) || isColorFunction(value) || isNamedEntity(value));
  };
  var isColorFunction = function(value) {
    return isRgbColor(value) || isHslColor(value);
  };
  var isDynamicUnit = function(value) {
    return calcRegex.test(value);
  };
  var isFunction = function(value) {
    return functionAnyRegex.test(value);
  };
  var isHexColor = function(value) {
    return threeValueColorRegex.test(value) || fourValueColorRegex.test(value) || sixValueColorRegex.test(value) || eightValueColorRegex.test(value);
  };
  var isHslColor = function(value) {
    return hslColorRegex.test(value);
  };
  var isIdentifier = function(value) {
    return identifierRegex.test(value);
  };
  var isImage = function(value) {
    return value == "none" || value == "inherit" || isUrl(value);
  };
  var isKeyword = function(propertyName) {
    return function(value) {
      return Keywords[propertyName].indexOf(value) > -1;
    };
  };
  var isNamedEntity = function(value) {
    return namedEntityRegex.test(value);
  };
  var isNumber = function(value) {
    return scanForNumber(value) == value.length;
  };
  var isRgbColor = function(value) {
    return rgbColorRegex.test(value);
  };
  var isPrefixed = function(value) {
    return prefixRegex.test(value);
  };
  var isPositiveNumber = function(value) {
    return isNumber(value) && parseFloat(value) >= 0;
  };
  var isVariable = function(value) {
    return variableRegex.test(value);
  };
  var isTime = function(value) {
    var numberUpTo = scanForNumber(value);
    return numberUpTo == value.length && parseInt(value) === 0 || numberUpTo > -1 && validTimeUnits.indexOf(value.slice(numberUpTo + 1)) > -1;
  };
  var isTimingFunction = function() {
    var isTimingFunctionKeyword = isKeyword("*-timing-function");
    return function(value) {
      return isTimingFunctionKeyword(value) || timingFunctionRegex.test(value);
    };
  };
  var isUnit = function(validUnits, value) {
    var numberUpTo = scanForNumber(value);
    return numberUpTo == value.length && parseInt(value) === 0 || numberUpTo > -1 && validUnits.indexOf(value.slice(numberUpTo + 1)) > -1 || value == "auto" || value == "inherit";
  };
  var isUrl = function(value) {
    return urlRegex.test(value);
  };
  var isZIndex = function(value) {
    return value == "auto" || isNumber(value) || isKeyword("^")(value);
  };
  var scanForNumber = function(value) {
    var hasDot = false;
    var hasSign = false;
    var character;
    var i, l2;
    for (i = 0, l2 = value.length;i < l2; i++) {
      character = value[i];
      if (i === 0 && (character == PLUS_SIGN || character == MINUS_SIGN)) {
        hasSign = true;
      } else if (i > 0 && hasSign && (character == PLUS_SIGN || character == MINUS_SIGN)) {
        return i - 1;
      } else if (character == DECIMAL_DOT && !hasDot) {
        hasDot = true;
      } else if (character == DECIMAL_DOT && hasDot) {
        return i - 1;
      } else if (decimalRegex.test(character)) {
        continue;
      } else {
        return i - 1;
      }
    }
    return i;
  };
  var validator = function(compatibility) {
    var validUnits = Units.slice(0).filter(function(value) {
      return !(value in compatibility.units) || compatibility.units[value] === true;
    });
    return {
      colorOpacity: compatibility.colors.opacity,
      isAnimationDirectionKeyword: isKeyword("animation-direction"),
      isAnimationFillModeKeyword: isKeyword("animation-fill-mode"),
      isAnimationIterationCountKeyword: isKeyword("animation-iteration-count"),
      isAnimationNameKeyword: isKeyword("animation-name"),
      isAnimationPlayStateKeyword: isKeyword("animation-play-state"),
      isTimingFunction: isTimingFunction(),
      isBackgroundAttachmentKeyword: isKeyword("background-attachment"),
      isBackgroundClipKeyword: isKeyword("background-clip"),
      isBackgroundOriginKeyword: isKeyword("background-origin"),
      isBackgroundPositionKeyword: isKeyword("background-position"),
      isBackgroundRepeatKeyword: isKeyword("background-repeat"),
      isBackgroundSizeKeyword: isKeyword("background-size"),
      isColor,
      isColorFunction,
      isDynamicUnit,
      isFontKeyword: isKeyword("font"),
      isFontSizeKeyword: isKeyword("font-size"),
      isFontStretchKeyword: isKeyword("font-stretch"),
      isFontStyleKeyword: isKeyword("font-style"),
      isFontVariantKeyword: isKeyword("font-variant"),
      isFontWeightKeyword: isKeyword("font-weight"),
      isFunction,
      isGlobal: isKeyword("^"),
      isHslColor,
      isIdentifier,
      isImage,
      isKeyword,
      isLineHeightKeyword: isKeyword("line-height"),
      isListStylePositionKeyword: isKeyword("list-style-position"),
      isListStyleTypeKeyword: isKeyword("list-style-type"),
      isNumber,
      isPrefixed,
      isPositiveNumber,
      isRgbColor,
      isStyleKeyword: isKeyword("*-style"),
      isTime,
      isUnit: isUnit.bind(null, validUnits),
      isUrl,
      isVariable,
      isWidth: isKeyword("width"),
      isZIndex
    };
  };
  var functionNoVendorRegexStr = "[A-Z]+(\\-|[A-Z]|[0-9])+\\(.*?\\)";
  var functionVendorRegexStr = "\\-(\\-|[A-Z]|[0-9])+\\(.*?\\)";
  var variableRegexStr = "var\\(\\-\\-[^\\)]+\\)";
  var functionAnyRegexStr = "(" + variableRegexStr + "|" + functionNoVendorRegexStr + "|" + functionVendorRegexStr + ")";
  var calcRegex = new RegExp("^(\\-moz\\-|\\-webkit\\-)?calc\\([^\\)]+\\)$", "i");
  var decimalRegex = /[0-9]/;
  var functionAnyRegex = new RegExp("^" + functionAnyRegexStr + "$", "i");
  var hslColorRegex = /^hsl\(\s{0,31}[\-\.]?\d+\s{0,31},\s{0,31}\.?\d+%\s{0,31},\s{0,31}\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[\-\.]?\d+\s{0,31},\s{0,31}\.?\d+%\s{0,31},\s{0,31}\.?\d+%\s{0,31},\s{0,31}\.?\d+\s{0,31}\)$/i;
  var identifierRegex = /^(\-[a-z0-9_][a-z0-9\-_]*|[a-z][a-z0-9\-_]*)$/i;
  var namedEntityRegex = /^[a-z]+$/i;
  var prefixRegex = /^-([a-z0-9]|-)*$/i;
  var rgbColorRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\.\d]+\s{0,31}\)$/i;
  var timingFunctionRegex = /^(cubic\-bezier|steps)\([^\)]+\)$/;
  var validTimeUnits = ["ms", "s"];
  var urlRegex = /^url\([\s\S]+\)$/i;
  var variableRegex = new RegExp("^" + variableRegexStr + "$", "i");
  var eightValueColorRegex = /^#[0-9a-f]{8}$/i;
  var fourValueColorRegex = /^#[0-9a-f]{4}$/i;
  var sixValueColorRegex = /^#[0-9a-f]{6}$/i;
  var threeValueColorRegex = /^#[0-9a-f]{3}$/i;
  var DECIMAL_DOT = ".";
  var MINUS_SIGN = "-";
  var PLUS_SIGN = "+";
  var Keywords = {
    "^": [
      "inherit",
      "initial",
      "unset"
    ],
    "*-style": [
      "auto",
      "dashed",
      "dotted",
      "double",
      "groove",
      "hidden",
      "inset",
      "none",
      "outset",
      "ridge",
      "solid"
    ],
    "*-timing-function": [
      "ease",
      "ease-in",
      "ease-in-out",
      "ease-out",
      "linear",
      "step-end",
      "step-start"
    ],
    "animation-direction": [
      "alternate",
      "alternate-reverse",
      "normal",
      "reverse"
    ],
    "animation-fill-mode": [
      "backwards",
      "both",
      "forwards",
      "none"
    ],
    "animation-iteration-count": [
      "infinite"
    ],
    "animation-name": [
      "none"
    ],
    "animation-play-state": [
      "paused",
      "running"
    ],
    "background-attachment": [
      "fixed",
      "inherit",
      "local",
      "scroll"
    ],
    "background-clip": [
      "border-box",
      "content-box",
      "inherit",
      "padding-box",
      "text"
    ],
    "background-origin": [
      "border-box",
      "content-box",
      "inherit",
      "padding-box"
    ],
    "background-position": [
      "bottom",
      "center",
      "left",
      "right",
      "top"
    ],
    "background-repeat": [
      "no-repeat",
      "inherit",
      "repeat",
      "repeat-x",
      "repeat-y",
      "round",
      "space"
    ],
    "background-size": [
      "auto",
      "cover",
      "contain"
    ],
    "border-collapse": [
      "collapse",
      "inherit",
      "separate"
    ],
    bottom: [
      "auto"
    ],
    clear: [
      "both",
      "left",
      "none",
      "right"
    ],
    color: [
      "transparent"
    ],
    cursor: [
      "all-scroll",
      "auto",
      "col-resize",
      "crosshair",
      "default",
      "e-resize",
      "help",
      "move",
      "n-resize",
      "ne-resize",
      "no-drop",
      "not-allowed",
      "nw-resize",
      "pointer",
      "progress",
      "row-resize",
      "s-resize",
      "se-resize",
      "sw-resize",
      "text",
      "vertical-text",
      "w-resize",
      "wait"
    ],
    display: [
      "block",
      "inline",
      "inline-block",
      "inline-table",
      "list-item",
      "none",
      "table",
      "table-caption",
      "table-cell",
      "table-column",
      "table-column-group",
      "table-footer-group",
      "table-header-group",
      "table-row",
      "table-row-group"
    ],
    float: [
      "left",
      "none",
      "right"
    ],
    left: [
      "auto"
    ],
    font: [
      "caption",
      "icon",
      "menu",
      "message-box",
      "small-caption",
      "status-bar",
      "unset"
    ],
    "font-size": [
      "large",
      "larger",
      "medium",
      "small",
      "smaller",
      "x-large",
      "x-small",
      "xx-large",
      "xx-small"
    ],
    "font-stretch": [
      "condensed",
      "expanded",
      "extra-condensed",
      "extra-expanded",
      "normal",
      "semi-condensed",
      "semi-expanded",
      "ultra-condensed",
      "ultra-expanded"
    ],
    "font-style": [
      "italic",
      "normal",
      "oblique"
    ],
    "font-variant": [
      "normal",
      "small-caps"
    ],
    "font-weight": [
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "700",
      "800",
      "900",
      "bold",
      "bolder",
      "lighter",
      "normal"
    ],
    "line-height": [
      "normal"
    ],
    "list-style-position": [
      "inside",
      "outside"
    ],
    "list-style-type": [
      "armenian",
      "circle",
      "decimal",
      "decimal-leading-zero",
      "disc",
      "decimal|disc",
      "georgian",
      "lower-alpha",
      "lower-greek",
      "lower-latin",
      "lower-roman",
      "none",
      "square",
      "upper-alpha",
      "upper-latin",
      "upper-roman"
    ],
    overflow: [
      "auto",
      "hidden",
      "scroll",
      "visible"
    ],
    position: [
      "absolute",
      "fixed",
      "relative",
      "static"
    ],
    right: [
      "auto"
    ],
    "text-align": [
      "center",
      "justify",
      "left",
      "left|right",
      "right"
    ],
    "text-decoration": [
      "line-through",
      "none",
      "overline",
      "underline"
    ],
    "text-overflow": [
      "clip",
      "ellipsis"
    ],
    top: [
      "auto"
    ],
    "vertical-align": [
      "baseline",
      "bottom",
      "middle",
      "sub",
      "super",
      "text-bottom",
      "text-top",
      "top"
    ],
    visibility: [
      "collapse",
      "hidden",
      "visible"
    ],
    "white-space": [
      "normal",
      "nowrap",
      "pre"
    ],
    width: [
      "inherit",
      "initial",
      "medium",
      "thick",
      "thin"
    ]
  };
  var Units = [
    "%",
    "ch",
    "cm",
    "em",
    "ex",
    "in",
    "mm",
    "pc",
    "pt",
    "px",
    "rem",
    "vh",
    "vm",
    "vmax",
    "vmin",
    "vw"
  ];
  module.exports = validator;
});

// node_modules/clean-css/lib/options/compatibility.js
var require_compatibility = __commonJS((exports, module) => {
  var compatibilityFrom = function(source) {
    return merge(DEFAULTS["*"], calculateSource(source));
  };
  var merge = function(source, target) {
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        var value = source[key];
        if (Object.prototype.hasOwnProperty.call(target, key) && typeof value === "object" && !Array.isArray(value)) {
          target[key] = merge(value, target[key] || {});
        } else {
          target[key] = key in target ? target[key] : value;
        }
      }
    }
    return target;
  };
  var calculateSource = function(source) {
    if (typeof source == "object")
      return source;
    if (!/[,\+\-]/.test(source))
      return DEFAULTS[source] || DEFAULTS["*"];
    var parts = source.split(",");
    var template = parts[0] in DEFAULTS ? DEFAULTS[parts.shift()] : DEFAULTS["*"];
    source = {};
    parts.forEach(function(part) {
      var isAdd = part[0] == "+";
      var key = part.substring(1).split(".");
      var group = key[0];
      var option = key[1];
      source[group] = source[group] || {};
      source[group][option] = isAdd;
    });
    return merge(template, source);
  };
  var DEFAULTS = {
    "*": {
      colors: {
        opacity: true
      },
      properties: {
        backgroundClipMerging: true,
        backgroundOriginMerging: true,
        backgroundSizeMerging: true,
        colors: true,
        ieBangHack: false,
        ieFilters: false,
        iePrefixHack: false,
        ieSuffixHack: false,
        merging: true,
        shorterLengthUnits: false,
        spaceAfterClosingBrace: true,
        urlQuotes: false,
        zeroUnits: true
      },
      selectors: {
        adjacentSpace: false,
        ie7Hack: false,
        mergeablePseudoClasses: [
          ":active",
          ":after",
          ":before",
          ":empty",
          ":checked",
          ":disabled",
          ":empty",
          ":enabled",
          ":first-child",
          ":first-letter",
          ":first-line",
          ":first-of-type",
          ":focus",
          ":hover",
          ":lang",
          ":last-child",
          ":last-of-type",
          ":link",
          ":not",
          ":nth-child",
          ":nth-last-child",
          ":nth-last-of-type",
          ":nth-of-type",
          ":only-child",
          ":only-of-type",
          ":root",
          ":target",
          ":visited"
        ],
        mergeablePseudoElements: [
          "::after",
          "::before",
          "::first-letter",
          "::first-line"
        ],
        mergeLimit: 8191,
        multiplePseudoMerging: true
      },
      units: {
        ch: true,
        in: true,
        pc: true,
        pt: true,
        rem: true,
        vh: true,
        vm: true,
        vmax: true,
        vmin: true,
        vw: true
      }
    }
  };
  DEFAULTS.ie11 = DEFAULTS["*"];
  DEFAULTS.ie10 = DEFAULTS["*"];
  DEFAULTS.ie9 = merge(DEFAULTS["*"], {
    properties: {
      ieFilters: true,
      ieSuffixHack: true
    }
  });
  DEFAULTS.ie8 = merge(DEFAULTS.ie9, {
    colors: {
      opacity: false
    },
    properties: {
      backgroundClipMerging: false,
      backgroundOriginMerging: false,
      backgroundSizeMerging: false,
      iePrefixHack: true,
      merging: false
    },
    selectors: {
      mergeablePseudoClasses: [
        ":after",
        ":before",
        ":first-child",
        ":first-letter",
        ":focus",
        ":hover",
        ":visited"
      ],
      mergeablePseudoElements: []
    },
    units: {
      ch: false,
      rem: false,
      vh: false,
      vm: false,
      vmax: false,
      vmin: false,
      vw: false
    }
  });
  DEFAULTS.ie7 = merge(DEFAULTS.ie8, {
    properties: {
      ieBangHack: true
    },
    selectors: {
      ie7Hack: true,
      mergeablePseudoClasses: [
        ":first-child",
        ":first-letter",
        ":hover",
        ":visited"
      ]
    }
  });
  module.exports = compatibilityFrom;
});

// node:http
var exports_http = {};
__export(exports_http, {
  request: () => {
    {
      return ou;
    }
  },
  globalAgent: () => {
    {
      return lu;
    }
  },
  get: () => {
    {
      return au;
    }
  },
  default: () => {
    {
      return iu;
    }
  },
  STATUS_CODES: () => {
    {
      return hu;
    }
  },
  METHODS: () => {
    {
      return cu;
    }
  },
  IncomingMessage: () => {
    {
      return fu;
    }
  },
  ClientRequest: () => {
    {
      return su;
    }
  },
  Agent: () => {
    {
      return uu;
    }
  }
});
var oe, Gs, yi, dr, Gi, ke, Ki, Vi, Yi, Xi, vr, b2, Er, xr, Rr, dt, gt, Q, bt, _t, qr, Dr, _e, Lt, an, Ft, fe, Nt, pn, Dt, ue, Sn, Bn, Kt, Qe, Vt, et, On, Nn, Ht, ir, zn, ti, ar, ur, fi, li, ci, _i, pi, js, Hs, Ws, $s, hr, K, cr, gi, Ks, di, wi, pr, yr, mi, bi, Vs, Ys, vi, xi, Si, Ni, Di, Hi, _r, iu, ou, au, su, fu, uu, lu, hu, cu;
var init_http = __esm(() => {
  oe = function(e) {
    throw new RangeError($s[e]);
  };
  Gs = function(e, t) {
    let r = [], n = e.length;
    for (;n--; )
      r[n] = t(e[n]);
    return r;
  };
  yi = function(e, t) {
    let r = e.split("@"), n = "";
    r.length > 1 && (n = r[0] + "@", e = r[1]), e = e.replace(Ws, ".");
    let i = e.split("."), o = Gs(i, t).join(".");
    return n + o;
  };
  dr = function(e) {
    let t = [], r = 0, n = e.length;
    for (;r < n; ) {
      let i = e.charCodeAt(r++);
      if (i >= 55296 && i <= 56319 && r < n) {
        let o = e.charCodeAt(r++);
        (o & 64512) == 56320 ? t.push(((i & 1023) << 10) + (o & 1023) + 65536) : (t.push(i), r--);
      } else
        t.push(i);
    }
    return t;
  };
  Gi = Object.create;
  ke = Object.defineProperty;
  Ki = Object.getOwnPropertyDescriptor;
  Vi = Object.getOwnPropertyNames;
  Yi = Object.getPrototypeOf;
  Xi = Object.prototype.hasOwnProperty;
  vr = (e, t) => () => (e && (t = e(e = 0)), t);
  b2 = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
  Er = (e, t) => {
    for (var r in t)
      ke(e, r, { get: t[r], enumerable: true });
  };
  xr = (e, t, r, n) => {
    if (t && typeof t == "object" || typeof t == "function")
      for (let i of Vi(t))
        !Xi.call(e, i) && i !== r && ke(e, i, { get: () => t[i], enumerable: !(n = Ki(t, i)) || n.enumerable });
    return e;
  };
  Rr = (e, t, r) => (r = e != null ? Gi(Yi(e)) : {}, xr(t || !e || !e.__esModule ? ke(r, "default", { value: e, enumerable: true }) : r, e));
  dt = (e) => xr(ke({}, "__esModule", { value: true }), e);
  gt = b2((N2) => {
    N2.fetch = Ce(global.fetch) && Ce(global.ReadableStream);
    N2.writableStream = Ce(global.WritableStream);
    N2.abortController = Ce(global.AbortController);
    var J;
    function pt() {
      if (J !== undefined)
        return J;
      if (global.XMLHttpRequest) {
        J = new global.XMLHttpRequest;
        try {
          J.open("GET", global.XDomainRequest ? "/" : "https://example.com");
        } catch {
          J = null;
        }
      } else
        J = null;
      return J;
    }
    function yt(e) {
      var t = pt();
      if (!t)
        return false;
      try {
        return t.responseType = e, t.responseType === e;
      } catch {
      }
      return false;
    }
    N2.arraybuffer = N2.fetch || yt("arraybuffer");
    N2.msstream = !N2.fetch && yt("ms-stream");
    N2.mozchunkedarraybuffer = !N2.fetch && yt("moz-chunked-arraybuffer");
    N2.overrideMimeType = N2.fetch || (pt() ? Ce(pt().overrideMimeType) : false);
    function Ce(e) {
      return typeof e == "function";
    }
    J = null;
  });
  Q = b2((Rf, wt) => {
    typeof Object.create == "function" ? wt.exports = function(t, r) {
      r && (t.super_ = r, t.prototype = Object.create(r.prototype, { constructor: { value: t, enumerable: false, writable: true, configurable: true } }));
    } : wt.exports = function(t, r) {
      if (r) {
        t.super_ = r;
        var n = function() {
        };
        n.prototype = r.prototype, t.prototype = new n, t.prototype.constructor = t;
      }
    };
  });
  bt = b2((Sf, mt) => {
    var ye = typeof Reflect == "object" ? Reflect : null, Sr = ye && typeof ye.apply == "function" ? ye.apply : function(t, r, n) {
      return Function.prototype.apply.call(t, r, n);
    }, je;
    ye && typeof ye.ownKeys == "function" ? je = ye.ownKeys : Object.getOwnPropertySymbols ? je = function(t) {
      return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));
    } : je = function(t) {
      return Object.getOwnPropertyNames(t);
    };
    function zi(e) {
      console && console.warn && console.warn(e);
    }
    var Ar = Number.isNaN || function(t) {
      return t !== t;
    };
    function x2() {
      x2.init.call(this);
    }
    mt.exports = x2;
    mt.exports.once = eo;
    x2.EventEmitter = x2;
    x2.prototype._events = undefined;
    x2.prototype._eventsCount = 0;
    x2.prototype._maxListeners = undefined;
    var Tr = 10;
    function He(e) {
      if (typeof e != "function")
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
    }
    Object.defineProperty(x2, "defaultMaxListeners", { enumerable: true, get: function() {
      return Tr;
    }, set: function(e) {
      if (typeof e != "number" || e < 0 || Ar(e))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
      Tr = e;
    } });
    x2.init = function() {
      (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
    };
    x2.prototype.setMaxListeners = function(t) {
      if (typeof t != "number" || t < 0 || Ar(t))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
      return this._maxListeners = t, this;
    };
    function Br(e) {
      return e._maxListeners === undefined ? x2.defaultMaxListeners : e._maxListeners;
    }
    x2.prototype.getMaxListeners = function() {
      return Br(this);
    };
    x2.prototype.emit = function(t) {
      for (var r = [], n = 1;n < arguments.length; n++)
        r.push(arguments[n]);
      var i = t === "error", o = this._events;
      if (o !== undefined)
        i = i && o.error === undefined;
      else if (!i)
        return false;
      if (i) {
        var a2;
        if (r.length > 0 && (a2 = r[0]), a2 instanceof Error)
          throw a2;
        var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
        throw s2.context = a2, s2;
      }
      var u2 = o[t];
      if (u2 === undefined)
        return false;
      if (typeof u2 == "function")
        Sr(u2, this, r);
      else
        for (var l2 = u2.length, h2 = Or(u2, l2), n = 0;n < l2; ++n)
          Sr(h2[n], this, r);
      return true;
    };
    function Cr(e, t, r, n) {
      var i, o, a2;
      if (He(r), o = e._events, o === undefined ? (o = e._events = Object.create(null), e._eventsCount = 0) : (o.newListener !== undefined && (e.emit("newListener", t, r.listener ? r.listener : r), o = e._events), a2 = o[t]), a2 === undefined)
        a2 = o[t] = r, ++e._eventsCount;
      else if (typeof a2 == "function" ? a2 = o[t] = n ? [r, a2] : [a2, r] : n ? a2.unshift(r) : a2.push(r), i = Br(e), i > 0 && a2.length > i && !a2.warned) {
        a2.warned = true;
        var s2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        s2.name = "MaxListenersExceededWarning", s2.emitter = e, s2.type = t, s2.count = a2.length, zi(s2);
      }
      return e;
    }
    x2.prototype.addListener = function(t, r) {
      return Cr(this, t, r, false);
    };
    x2.prototype.on = x2.prototype.addListener;
    x2.prototype.prependListener = function(t, r) {
      return Cr(this, t, r, true);
    };
    function Zi() {
      if (!this.fired)
        return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function Ir(e, t, r) {
      var n = { fired: false, wrapFn: undefined, target: e, type: t, listener: r }, i = Zi.bind(n);
      return i.listener = r, n.wrapFn = i, i;
    }
    x2.prototype.once = function(t, r) {
      return He(r), this.on(t, Ir(this, t, r)), this;
    };
    x2.prototype.prependOnceListener = function(t, r) {
      return He(r), this.prependListener(t, Ir(this, t, r)), this;
    };
    x2.prototype.removeListener = function(t, r) {
      var n, i, o, a2, s2;
      if (He(r), i = this._events, i === undefined)
        return this;
      if (n = i[t], n === undefined)
        return this;
      if (n === r || n.listener === r)
        --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[t], i.removeListener && this.emit("removeListener", t, n.listener || r));
      else if (typeof n != "function") {
        for (o = -1, a2 = n.length - 1;a2 >= 0; a2--)
          if (n[a2] === r || n[a2].listener === r) {
            s2 = n[a2].listener, o = a2;
            break;
          }
        if (o < 0)
          return this;
        o === 0 ? n.shift() : Ji(n, o), n.length === 1 && (i[t] = n[0]), i.removeListener !== undefined && this.emit("removeListener", t, s2 || r);
      }
      return this;
    };
    x2.prototype.off = x2.prototype.removeListener;
    x2.prototype.removeAllListeners = function(t) {
      var r, n, i;
      if (n = this._events, n === undefined)
        return this;
      if (n.removeListener === undefined)
        return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[t] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[t]), this;
      if (arguments.length === 0) {
        var o = Object.keys(n), a2;
        for (i = 0;i < o.length; ++i)
          a2 = o[i], a2 !== "removeListener" && this.removeAllListeners(a2);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
      }
      if (r = n[t], typeof r == "function")
        this.removeListener(t, r);
      else if (r !== undefined)
        for (i = r.length - 1;i >= 0; i--)
          this.removeListener(t, r[i]);
      return this;
    };
    function Lr(e, t, r) {
      var n = e._events;
      if (n === undefined)
        return [];
      var i = n[t];
      return i === undefined ? [] : typeof i == "function" ? r ? [i.listener || i] : [i] : r ? Qi(i) : Or(i, i.length);
    }
    x2.prototype.listeners = function(t) {
      return Lr(this, t, true);
    };
    x2.prototype.rawListeners = function(t) {
      return Lr(this, t, false);
    };
    x2.listenerCount = function(e, t) {
      return typeof e.listenerCount == "function" ? e.listenerCount(t) : Mr.call(e, t);
    };
    x2.prototype.listenerCount = Mr;
    function Mr(e) {
      var t = this._events;
      if (t !== undefined) {
        var r = t[e];
        if (typeof r == "function")
          return 1;
        if (r !== undefined)
          return r.length;
      }
      return 0;
    }
    x2.prototype.eventNames = function() {
      return this._eventsCount > 0 ? je(this._events) : [];
    };
    function Or(e, t) {
      for (var r = new Array(t), n = 0;n < t; ++n)
        r[n] = e[n];
      return r;
    }
    function Ji(e, t) {
      for (;t + 1 < e.length; t++)
        e[t] = e[t + 1];
      e.pop();
    }
    function Qi(e) {
      for (var t = new Array(e.length), r = 0;r < t.length; ++r)
        t[r] = e[r].listener || e[r];
      return t;
    }
    function eo(e, t) {
      return new Promise(function(r, n) {
        function i(a2) {
          e.removeListener(t, o), n(a2);
        }
        function o() {
          typeof e.removeListener == "function" && e.removeListener("error", i), r([].slice.call(arguments));
        }
        Fr(e, t, o, { once: true }), t !== "error" && to(e, i, { once: true });
      });
    }
    function to(e, t, r) {
      typeof e.on == "function" && Fr(e, "error", t, r);
    }
    function Fr(e, t, r, n) {
      if (typeof e.on == "function")
        n.once ? e.once(t, r) : e.on(t, r);
      else if (typeof e.addEventListener == "function")
        e.addEventListener(t, function i(o) {
          n.once && e.removeEventListener(t, i), r(o);
        });
      else
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
    }
  });
  _t = b2((Tf, Nr) => {
    Nr.exports = bt().EventEmitter;
  });
  qr = b2((We) => {
    We.byteLength = no;
    We.toByteArray = oo;
    We.fromByteArray = fo;
    var H = [], U2 = [], ro = typeof Uint8Array < "u" ? Uint8Array : Array, vt = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (ae = 0, Ur = vt.length;ae < Ur; ++ae)
      H[ae] = vt[ae], U2[vt.charCodeAt(ae)] = ae;
    var ae, Ur;
    U2["-".charCodeAt(0)] = 62;
    U2["_".charCodeAt(0)] = 63;
    function Pr(e) {
      var t = e.length;
      if (t % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var r = e.indexOf("=");
      r === -1 && (r = t);
      var n = r === t ? 0 : 4 - r % 4;
      return [r, n];
    }
    function no(e) {
      var t = Pr(e), r = t[0], n = t[1];
      return (r + n) * 3 / 4 - n;
    }
    function io(e, t, r) {
      return (t + r) * 3 / 4 - r;
    }
    function oo(e) {
      var t, r = Pr(e), n = r[0], i = r[1], o = new ro(io(e, n, i)), a2 = 0, s2 = i > 0 ? n - 4 : n, u2;
      for (u2 = 0;u2 < s2; u2 += 4)
        t = U2[e.charCodeAt(u2)] << 18 | U2[e.charCodeAt(u2 + 1)] << 12 | U2[e.charCodeAt(u2 + 2)] << 6 | U2[e.charCodeAt(u2 + 3)], o[a2++] = t >> 16 & 255, o[a2++] = t >> 8 & 255, o[a2++] = t & 255;
      return i === 2 && (t = U2[e.charCodeAt(u2)] << 2 | U2[e.charCodeAt(u2 + 1)] >> 4, o[a2++] = t & 255), i === 1 && (t = U2[e.charCodeAt(u2)] << 10 | U2[e.charCodeAt(u2 + 1)] << 4 | U2[e.charCodeAt(u2 + 2)] >> 2, o[a2++] = t >> 8 & 255, o[a2++] = t & 255), o;
    }
    function ao(e) {
      return H[e >> 18 & 63] + H[e >> 12 & 63] + H[e >> 6 & 63] + H[e & 63];
    }
    function so(e, t, r) {
      for (var n, i = [], o = t;o < r; o += 3)
        n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(ao(n));
      return i.join("");
    }
    function fo(e) {
      for (var t, r = e.length, n = r % 3, i = [], o = 16383, a2 = 0, s2 = r - n;a2 < s2; a2 += o)
        i.push(so(e, a2, a2 + o > s2 ? s2 : a2 + o));
      return n === 1 ? (t = e[r - 1], i.push(H[t >> 2] + H[t << 4 & 63] + "==")) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], i.push(H[t >> 10] + H[t >> 4 & 63] + H[t << 2 & 63] + "=")), i.join("");
    }
  });
  Dr = b2((Et) => {
    Et.read = function(e, t, r, n, i) {
      var o, a2, s2 = i * 8 - n - 1, u2 = (1 << s2) - 1, l2 = u2 >> 1, h2 = -7, c2 = r ? i - 1 : 0, d2 = r ? -1 : 1, p2 = e[t + c2];
      for (c2 += d2, o = p2 & (1 << -h2) - 1, p2 >>= -h2, h2 += s2;h2 > 0; o = o * 256 + e[t + c2], c2 += d2, h2 -= 8)
        ;
      for (a2 = o & (1 << -h2) - 1, o >>= -h2, h2 += n;h2 > 0; a2 = a2 * 256 + e[t + c2], c2 += d2, h2 -= 8)
        ;
      if (o === 0)
        o = 1 - l2;
      else {
        if (o === u2)
          return a2 ? NaN : (p2 ? -1 : 1) * (1 / 0);
        a2 = a2 + Math.pow(2, n), o = o - l2;
      }
      return (p2 ? -1 : 1) * a2 * Math.pow(2, o - n);
    };
    Et.write = function(e, t, r, n, i, o) {
      var a2, s2, u2, l2 = o * 8 - i - 1, h2 = (1 << l2) - 1, c2 = h2 >> 1, d2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p2 = n ? 0 : o - 1, g2 = n ? 1 : -1, E2 = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
      for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s2 = isNaN(t) ? 1 : 0, a2 = h2) : (a2 = Math.floor(Math.log(t) / Math.LN2), t * (u2 = Math.pow(2, -a2)) < 1 && (a2--, u2 *= 2), a2 + c2 >= 1 ? t += d2 / u2 : t += d2 * Math.pow(2, 1 - c2), t * u2 >= 2 && (a2++, u2 /= 2), a2 + c2 >= h2 ? (s2 = 0, a2 = h2) : a2 + c2 >= 1 ? (s2 = (t * u2 - 1) * Math.pow(2, i), a2 = a2 + c2) : (s2 = t * Math.pow(2, c2 - 1) * Math.pow(2, i), a2 = 0));i >= 8; e[r + p2] = s2 & 255, p2 += g2, s2 /= 256, i -= 8)
        ;
      for (a2 = a2 << i | s2, l2 += i;l2 > 0; e[r + p2] = a2 & 255, p2 += g2, a2 /= 256, l2 -= 8)
        ;
      e[r + p2 - g2] |= E2 * 128;
    };
  });
  _e = b2((be) => {
    var xt = qr(), we = Dr(), kr = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    be.Buffer = f2;
    be.SlowBuffer = yo;
    be.INSPECT_MAX_BYTES = 50;
    var $e = 2147483647;
    be.kMaxLength = $e;
    f2.TYPED_ARRAY_SUPPORT = uo();
    !f2.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function uo() {
      try {
        let e = new Uint8Array(1), t = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), e.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(f2.prototype, "parent", { enumerable: true, get: function() {
      if (!!f2.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(f2.prototype, "offset", { enumerable: true, get: function() {
      if (!!f2.isBuffer(this))
        return this.byteOffset;
    } });
    function X2(e) {
      if (e > $e)
        throw new RangeError('The value "' + e + '" is invalid for option "size"');
      let t = new Uint8Array(e);
      return Object.setPrototypeOf(t, f2.prototype), t;
    }
    function f2(e, t, r) {
      if (typeof e == "number") {
        if (typeof t == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return At(e);
      }
      return $r(e, t, r);
    }
    f2.poolSize = 8192;
    function $r(e, t, r) {
      if (typeof e == "string")
        return ho(e, t);
      if (ArrayBuffer.isView(e))
        return co(e);
      if (e == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
      if (W(e, ArrayBuffer) || e && W(e.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (W(e, SharedArrayBuffer) || e && W(e.buffer, SharedArrayBuffer)))
        return St(e, t, r);
      if (typeof e == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let n = e.valueOf && e.valueOf();
      if (n != null && n !== e)
        return f2.from(n, t, r);
      let i = po(e);
      if (i)
        return i;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] == "function")
        return f2.from(e[Symbol.toPrimitive]("string"), t, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
    }
    f2.from = function(e, t, r) {
      return $r(e, t, r);
    };
    Object.setPrototypeOf(f2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(f2, Uint8Array);
    function Gr(e) {
      if (typeof e != "number")
        throw new TypeError('"size" argument must be of type number');
      if (e < 0)
        throw new RangeError('The value "' + e + '" is invalid for option "size"');
    }
    function lo(e, t, r) {
      return Gr(e), e <= 0 ? X2(e) : t !== undefined ? typeof r == "string" ? X2(e).fill(t, r) : X2(e).fill(t) : X2(e);
    }
    f2.alloc = function(e, t, r) {
      return lo(e, t, r);
    };
    function At(e) {
      return Gr(e), X2(e < 0 ? 0 : Bt(e) | 0);
    }
    f2.allocUnsafe = function(e) {
      return At(e);
    };
    f2.allocUnsafeSlow = function(e) {
      return At(e);
    };
    function ho(e, t) {
      if ((typeof t != "string" || t === "") && (t = "utf8"), !f2.isEncoding(t))
        throw new TypeError("Unknown encoding: " + t);
      let r = Kr(e, t) | 0, n = X2(r), i = n.write(e, t);
      return i !== r && (n = n.slice(0, i)), n;
    }
    function Rt(e) {
      let t = e.length < 0 ? 0 : Bt(e.length) | 0, r = X2(t);
      for (let n = 0;n < t; n += 1)
        r[n] = e[n] & 255;
      return r;
    }
    function co(e) {
      if (W(e, Uint8Array)) {
        let t = new Uint8Array(e);
        return St(t.buffer, t.byteOffset, t.byteLength);
      }
      return Rt(e);
    }
    function St(e, t, r) {
      if (t < 0 || e.byteLength < t)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (e.byteLength < t + (r || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let n;
      return t === undefined && r === undefined ? n = new Uint8Array(e) : r === undefined ? n = new Uint8Array(e, t) : n = new Uint8Array(e, t, r), Object.setPrototypeOf(n, f2.prototype), n;
    }
    function po(e) {
      if (f2.isBuffer(e)) {
        let t = Bt(e.length) | 0, r = X2(t);
        return r.length === 0 || e.copy(r, 0, 0, t), r;
      }
      if (e.length !== undefined)
        return typeof e.length != "number" || It(e.length) ? X2(0) : Rt(e);
      if (e.type === "Buffer" && Array.isArray(e.data))
        return Rt(e.data);
    }
    function Bt(e) {
      if (e >= $e)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $e.toString(16) + " bytes");
      return e | 0;
    }
    function yo(e) {
      return +e != e && (e = 0), f2.alloc(+e);
    }
    f2.isBuffer = function(t) {
      return t != null && t._isBuffer === true && t !== f2.prototype;
    };
    f2.compare = function(t, r) {
      if (W(t, Uint8Array) && (t = f2.from(t, t.offset, t.byteLength)), W(r, Uint8Array) && (r = f2.from(r, r.offset, r.byteLength)), !f2.isBuffer(t) || !f2.isBuffer(r))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (t === r)
        return 0;
      let n = t.length, i = r.length;
      for (let o = 0, a2 = Math.min(n, i);o < a2; ++o)
        if (t[o] !== r[o]) {
          n = t[o], i = r[o];
          break;
        }
      return n < i ? -1 : i < n ? 1 : 0;
    };
    f2.isEncoding = function(t) {
      switch (String(t).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    f2.concat = function(t, r) {
      if (!Array.isArray(t))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (t.length === 0)
        return f2.alloc(0);
      let n;
      if (r === undefined)
        for (r = 0, n = 0;n < t.length; ++n)
          r += t[n].length;
      let i = f2.allocUnsafe(r), o = 0;
      for (n = 0;n < t.length; ++n) {
        let a2 = t[n];
        if (W(a2, Uint8Array))
          o + a2.length > i.length ? (f2.isBuffer(a2) || (a2 = f2.from(a2)), a2.copy(i, o)) : Uint8Array.prototype.set.call(i, a2, o);
        else if (f2.isBuffer(a2))
          a2.copy(i, o);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        o += a2.length;
      }
      return i;
    };
    function Kr(e, t) {
      if (f2.isBuffer(e))
        return e.length;
      if (ArrayBuffer.isView(e) || W(e, ArrayBuffer))
        return e.byteLength;
      if (typeof e != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
      let r = e.length, n = arguments.length > 2 && arguments[2] === true;
      if (!n && r === 0)
        return 0;
      let i = false;
      for (;; )
        switch (t) {
          case "ascii":
          case "latin1":
          case "binary":
            return r;
          case "utf8":
          case "utf-8":
            return Tt(e).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return r * 2;
          case "hex":
            return r >>> 1;
          case "base64":
            return tn(e).length;
          default:
            if (i)
              return n ? -1 : Tt(e).length;
            t = ("" + t).toLowerCase(), i = true;
        }
    }
    f2.byteLength = Kr;
    function go(e, t, r) {
      let n = false;
      if ((t === undefined || t < 0) && (t = 0), t > this.length || ((r === undefined || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, t >>>= 0, r <= t))
        return "";
      for (e || (e = "utf8");; )
        switch (e) {
          case "hex":
            return To(this, t, r);
          case "utf8":
          case "utf-8":
            return Yr(this, t, r);
          case "ascii":
            return Ro(this, t, r);
          case "latin1":
          case "binary":
            return So(this, t, r);
          case "base64":
            return Eo(this, t, r);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Ao(this, t, r);
          default:
            if (n)
              throw new TypeError("Unknown encoding: " + e);
            e = (e + "").toLowerCase(), n = true;
        }
    }
    f2.prototype._isBuffer = true;
    function se(e, t, r) {
      let n = e[t];
      e[t] = e[r], e[r] = n;
    }
    f2.prototype.swap16 = function() {
      let t = this.length;
      if (t % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let r = 0;r < t; r += 2)
        se(this, r, r + 1);
      return this;
    };
    f2.prototype.swap32 = function() {
      let t = this.length;
      if (t % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let r = 0;r < t; r += 4)
        se(this, r, r + 3), se(this, r + 1, r + 2);
      return this;
    };
    f2.prototype.swap64 = function() {
      let t = this.length;
      if (t % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let r = 0;r < t; r += 8)
        se(this, r, r + 7), se(this, r + 1, r + 6), se(this, r + 2, r + 5), se(this, r + 3, r + 4);
      return this;
    };
    f2.prototype.toString = function() {
      let t = this.length;
      return t === 0 ? "" : arguments.length === 0 ? Yr(this, 0, t) : go.apply(this, arguments);
    };
    f2.prototype.toLocaleString = f2.prototype.toString;
    f2.prototype.equals = function(t) {
      if (!f2.isBuffer(t))
        throw new TypeError("Argument must be a Buffer");
      return this === t ? true : f2.compare(this, t) === 0;
    };
    f2.prototype.inspect = function() {
      let t = "", r = be.INSPECT_MAX_BYTES;
      return t = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (t += " ... "), "<Buffer " + t + ">";
    };
    kr && (f2.prototype[kr] = f2.prototype.inspect);
    f2.prototype.compare = function(t, r, n, i, o) {
      if (W(t, Uint8Array) && (t = f2.from(t, t.offset, t.byteLength)), !f2.isBuffer(t))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t);
      if (r === undefined && (r = 0), n === undefined && (n = t ? t.length : 0), i === undefined && (i = 0), o === undefined && (o = this.length), r < 0 || n > t.length || i < 0 || o > this.length)
        throw new RangeError("out of range index");
      if (i >= o && r >= n)
        return 0;
      if (i >= o)
        return -1;
      if (r >= n)
        return 1;
      if (r >>>= 0, n >>>= 0, i >>>= 0, o >>>= 0, this === t)
        return 0;
      let a2 = o - i, s2 = n - r, u2 = Math.min(a2, s2), l2 = this.slice(i, o), h2 = t.slice(r, n);
      for (let c2 = 0;c2 < u2; ++c2)
        if (l2[c2] !== h2[c2]) {
          a2 = l2[c2], s2 = h2[c2];
          break;
        }
      return a2 < s2 ? -1 : s2 < a2 ? 1 : 0;
    };
    function Vr(e, t, r, n, i) {
      if (e.length === 0)
        return -1;
      if (typeof r == "string" ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, It(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
        if (i)
          return -1;
        r = e.length - 1;
      } else if (r < 0)
        if (i)
          r = 0;
        else
          return -1;
      if (typeof t == "string" && (t = f2.from(t, n)), f2.isBuffer(t))
        return t.length === 0 ? -1 : jr(e, t, r, n, i);
      if (typeof t == "number")
        return t = t & 255, typeof Uint8Array.prototype.indexOf == "function" ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : jr(e, [t], r, n, i);
      throw new TypeError("val must be string, number or Buffer");
    }
    function jr(e, t, r, n, i) {
      let o = 1, a2 = e.length, s2 = t.length;
      if (n !== undefined && (n = String(n).toLowerCase(), n === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
        if (e.length < 2 || t.length < 2)
          return -1;
        o = 2, a2 /= 2, s2 /= 2, r /= 2;
      }
      function u2(h2, c2) {
        return o === 1 ? h2[c2] : h2.readUInt16BE(c2 * o);
      }
      let l2;
      if (i) {
        let h2 = -1;
        for (l2 = r;l2 < a2; l2++)
          if (u2(e, l2) === u2(t, h2 === -1 ? 0 : l2 - h2)) {
            if (h2 === -1 && (h2 = l2), l2 - h2 + 1 === s2)
              return h2 * o;
          } else
            h2 !== -1 && (l2 -= l2 - h2), h2 = -1;
      } else
        for (r + s2 > a2 && (r = a2 - s2), l2 = r;l2 >= 0; l2--) {
          let h2 = true;
          for (let c2 = 0;c2 < s2; c2++)
            if (u2(e, l2 + c2) !== u2(t, c2)) {
              h2 = false;
              break;
            }
          if (h2)
            return l2;
        }
      return -1;
    }
    f2.prototype.includes = function(t, r, n) {
      return this.indexOf(t, r, n) !== -1;
    };
    f2.prototype.indexOf = function(t, r, n) {
      return Vr(this, t, r, n, true);
    };
    f2.prototype.lastIndexOf = function(t, r, n) {
      return Vr(this, t, r, n, false);
    };
    function wo(e, t, r, n) {
      r = Number(r) || 0;
      let i = e.length - r;
      n ? (n = Number(n), n > i && (n = i)) : n = i;
      let o = t.length;
      n > o / 2 && (n = o / 2);
      let a2;
      for (a2 = 0;a2 < n; ++a2) {
        let s2 = parseInt(t.substr(a2 * 2, 2), 16);
        if (It(s2))
          return a2;
        e[r + a2] = s2;
      }
      return a2;
    }
    function mo(e, t, r, n) {
      return Ge(Tt(t, e.length - r), e, r, n);
    }
    function bo(e, t, r, n) {
      return Ge(Lo(t), e, r, n);
    }
    function _o(e, t, r, n) {
      return Ge(tn(t), e, r, n);
    }
    function vo(e, t, r, n) {
      return Ge(Mo(t, e.length - r), e, r, n);
    }
    f2.prototype.write = function(t, r, n, i) {
      if (r === undefined)
        i = "utf8", n = this.length, r = 0;
      else if (n === undefined && typeof r == "string")
        i = r, n = this.length, r = 0;
      else if (isFinite(r))
        r = r >>> 0, isFinite(n) ? (n = n >>> 0, i === undefined && (i = "utf8")) : (i = n, n = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let o = this.length - r;
      if ((n === undefined || n > o) && (n = o), t.length > 0 && (n < 0 || r < 0) || r > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      i || (i = "utf8");
      let a2 = false;
      for (;; )
        switch (i) {
          case "hex":
            return wo(this, t, r, n);
          case "utf8":
          case "utf-8":
            return mo(this, t, r, n);
          case "ascii":
          case "latin1":
          case "binary":
            return bo(this, t, r, n);
          case "base64":
            return _o(this, t, r, n);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return vo(this, t, r, n);
          default:
            if (a2)
              throw new TypeError("Unknown encoding: " + i);
            i = ("" + i).toLowerCase(), a2 = true;
        }
    };
    f2.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Eo(e, t, r) {
      return t === 0 && r === e.length ? xt.fromByteArray(e) : xt.fromByteArray(e.slice(t, r));
    }
    function Yr(e, t, r) {
      r = Math.min(e.length, r);
      let n = [], i = t;
      for (;i < r; ) {
        let o = e[i], a2 = null, s2 = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
        if (i + s2 <= r) {
          let u2, l2, h2, c2;
          switch (s2) {
            case 1:
              o < 128 && (a2 = o);
              break;
            case 2:
              u2 = e[i + 1], (u2 & 192) === 128 && (c2 = (o & 31) << 6 | u2 & 63, c2 > 127 && (a2 = c2));
              break;
            case 3:
              u2 = e[i + 1], l2 = e[i + 2], (u2 & 192) === 128 && (l2 & 192) === 128 && (c2 = (o & 15) << 12 | (u2 & 63) << 6 | l2 & 63, c2 > 2047 && (c2 < 55296 || c2 > 57343) && (a2 = c2));
              break;
            case 4:
              u2 = e[i + 1], l2 = e[i + 2], h2 = e[i + 3], (u2 & 192) === 128 && (l2 & 192) === 128 && (h2 & 192) === 128 && (c2 = (o & 15) << 18 | (u2 & 63) << 12 | (l2 & 63) << 6 | h2 & 63, c2 > 65535 && c2 < 1114112 && (a2 = c2));
          }
        }
        a2 === null ? (a2 = 65533, s2 = 1) : a2 > 65535 && (a2 -= 65536, n.push(a2 >>> 10 & 1023 | 55296), a2 = 56320 | a2 & 1023), n.push(a2), i += s2;
      }
      return xo(n);
    }
    var Hr = 4096;
    function xo(e) {
      let t = e.length;
      if (t <= Hr)
        return String.fromCharCode.apply(String, e);
      let r = "", n = 0;
      for (;n < t; )
        r += String.fromCharCode.apply(String, e.slice(n, n += Hr));
      return r;
    }
    function Ro(e, t, r) {
      let n = "";
      r = Math.min(e.length, r);
      for (let i = t;i < r; ++i)
        n += String.fromCharCode(e[i] & 127);
      return n;
    }
    function So(e, t, r) {
      let n = "";
      r = Math.min(e.length, r);
      for (let i = t;i < r; ++i)
        n += String.fromCharCode(e[i]);
      return n;
    }
    function To(e, t, r) {
      let n = e.length;
      (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
      let i = "";
      for (let o = t;o < r; ++o)
        i += Oo[e[o]];
      return i;
    }
    function Ao(e, t, r) {
      let n = e.slice(t, r), i = "";
      for (let o = 0;o < n.length - 1; o += 2)
        i += String.fromCharCode(n[o] + n[o + 1] * 256);
      return i;
    }
    f2.prototype.slice = function(t, r) {
      let n = this.length;
      t = ~~t, r = r === undefined ? n : ~~r, t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), r < 0 ? (r += n, r < 0 && (r = 0)) : r > n && (r = n), r < t && (r = t);
      let i = this.subarray(t, r);
      return Object.setPrototypeOf(i, f2.prototype), i;
    };
    function C(e, t, r) {
      if (e % 1 !== 0 || e < 0)
        throw new RangeError("offset is not uint");
      if (e + t > r)
        throw new RangeError("Trying to access beyond buffer length");
    }
    f2.prototype.readUintLE = f2.prototype.readUIntLE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || C(t, r, this.length);
      let i = this[t], o = 1, a2 = 0;
      for (;++a2 < r && (o *= 256); )
        i += this[t + a2] * o;
      return i;
    };
    f2.prototype.readUintBE = f2.prototype.readUIntBE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || C(t, r, this.length);
      let i = this[t + --r], o = 1;
      for (;r > 0 && (o *= 256); )
        i += this[t + --r] * o;
      return i;
    };
    f2.prototype.readUint8 = f2.prototype.readUInt8 = function(t, r) {
      return t = t >>> 0, r || C(t, 1, this.length), this[t];
    };
    f2.prototype.readUint16LE = f2.prototype.readUInt16LE = function(t, r) {
      return t = t >>> 0, r || C(t, 2, this.length), this[t] | this[t + 1] << 8;
    };
    f2.prototype.readUint16BE = f2.prototype.readUInt16BE = function(t, r) {
      return t = t >>> 0, r || C(t, 2, this.length), this[t] << 8 | this[t + 1];
    };
    f2.prototype.readUint32LE = f2.prototype.readUInt32LE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + this[t + 3] * 16777216;
    };
    f2.prototype.readUint32BE = f2.prototype.readUInt32BE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), this[t] * 16777216 + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
    };
    f2.prototype.readBigUInt64LE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ie(t, this.length - 8);
      let i = r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24, o = this[++t] + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + n * 2 ** 24;
      return BigInt(i) + (BigInt(o) << BigInt(32));
    });
    f2.prototype.readBigUInt64BE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ie(t, this.length - 8);
      let i = r * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t], o = this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n;
      return (BigInt(i) << BigInt(32)) + BigInt(o);
    });
    f2.prototype.readIntLE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || C(t, r, this.length);
      let i = this[t], o = 1, a2 = 0;
      for (;++a2 < r && (o *= 256); )
        i += this[t + a2] * o;
      return o *= 128, i >= o && (i -= Math.pow(2, 8 * r)), i;
    };
    f2.prototype.readIntBE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || C(t, r, this.length);
      let i = r, o = 1, a2 = this[t + --i];
      for (;i > 0 && (o *= 256); )
        a2 += this[t + --i] * o;
      return o *= 128, a2 >= o && (a2 -= Math.pow(2, 8 * r)), a2;
    };
    f2.prototype.readInt8 = function(t, r) {
      return t = t >>> 0, r || C(t, 1, this.length), this[t] & 128 ? (255 - this[t] + 1) * -1 : this[t];
    };
    f2.prototype.readInt16LE = function(t, r) {
      t = t >>> 0, r || C(t, 2, this.length);
      let n = this[t] | this[t + 1] << 8;
      return n & 32768 ? n | 4294901760 : n;
    };
    f2.prototype.readInt16BE = function(t, r) {
      t = t >>> 0, r || C(t, 2, this.length);
      let n = this[t + 1] | this[t] << 8;
      return n & 32768 ? n | 4294901760 : n;
    };
    f2.prototype.readInt32LE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
    };
    f2.prototype.readInt32BE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
    };
    f2.prototype.readBigInt64LE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ie(t, this.length - 8);
      let i = this[t + 4] + this[t + 5] * 2 ** 8 + this[t + 6] * 2 ** 16 + (n << 24);
      return (BigInt(i) << BigInt(32)) + BigInt(r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24);
    });
    f2.prototype.readBigInt64BE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ie(t, this.length - 8);
      let i = (r << 24) + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t];
      return (BigInt(i) << BigInt(32)) + BigInt(this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n);
    });
    f2.prototype.readFloatLE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), we.read(this, t, true, 23, 4);
    };
    f2.prototype.readFloatBE = function(t, r) {
      return t = t >>> 0, r || C(t, 4, this.length), we.read(this, t, false, 23, 4);
    };
    f2.prototype.readDoubleLE = function(t, r) {
      return t = t >>> 0, r || C(t, 8, this.length), we.read(this, t, true, 52, 8);
    };
    f2.prototype.readDoubleBE = function(t, r) {
      return t = t >>> 0, r || C(t, 8, this.length), we.read(this, t, false, 52, 8);
    };
    function O2(e, t, r, n, i, o) {
      if (!f2.isBuffer(e))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (t > i || t < o)
        throw new RangeError('"value" argument is out of bounds');
      if (r + n > e.length)
        throw new RangeError("Index out of range");
    }
    f2.prototype.writeUintLE = f2.prototype.writeUIntLE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
        let s2 = Math.pow(2, 8 * n) - 1;
        O2(this, t, r, n, s2, 0);
      }
      let o = 1, a2 = 0;
      for (this[r] = t & 255;++a2 < n && (o *= 256); )
        this[r + a2] = t / o & 255;
      return r + n;
    };
    f2.prototype.writeUintBE = f2.prototype.writeUIntBE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
        let s2 = Math.pow(2, 8 * n) - 1;
        O2(this, t, r, n, s2, 0);
      }
      let o = n - 1, a2 = 1;
      for (this[r + o] = t & 255;--o >= 0 && (a2 *= 256); )
        this[r + o] = t / a2 & 255;
      return r + n;
    };
    f2.prototype.writeUint8 = f2.prototype.writeUInt8 = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 1, 255, 0), this[r] = t & 255, r + 1;
    };
    f2.prototype.writeUint16LE = f2.prototype.writeUInt16LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 65535, 0), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
    };
    f2.prototype.writeUint16BE = f2.prototype.writeUInt16BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 65535, 0), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
    };
    f2.prototype.writeUint32LE = f2.prototype.writeUInt32LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 4294967295, 0), this[r + 3] = t >>> 24, this[r + 2] = t >>> 16, this[r + 1] = t >>> 8, this[r] = t & 255, r + 4;
    };
    f2.prototype.writeUint32BE = f2.prototype.writeUInt32BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 4294967295, 0), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
    };
    function Xr(e, t, r, n, i) {
      en(t, n, i, e, r, 7);
      let o = Number(t & BigInt(4294967295));
      e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o;
      let a2 = Number(t >> BigInt(32) & BigInt(4294967295));
      return e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, r;
    }
    function zr(e, t, r, n, i) {
      en(t, n, i, e, r, 7);
      let o = Number(t & BigInt(4294967295));
      e[r + 7] = o, o = o >> 8, e[r + 6] = o, o = o >> 8, e[r + 5] = o, o = o >> 8, e[r + 4] = o;
      let a2 = Number(t >> BigInt(32) & BigInt(4294967295));
      return e[r + 3] = a2, a2 = a2 >> 8, e[r + 2] = a2, a2 = a2 >> 8, e[r + 1] = a2, a2 = a2 >> 8, e[r] = a2, r + 8;
    }
    f2.prototype.writeBigUInt64LE = ee(function(t, r = 0) {
      return Xr(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    f2.prototype.writeBigUInt64BE = ee(function(t, r = 0) {
      return zr(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    f2.prototype.writeIntLE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, !i) {
        let u2 = Math.pow(2, 8 * n - 1);
        O2(this, t, r, n, u2 - 1, -u2);
      }
      let o = 0, a2 = 1, s2 = 0;
      for (this[r] = t & 255;++o < n && (a2 *= 256); )
        t < 0 && s2 === 0 && this[r + o - 1] !== 0 && (s2 = 1), this[r + o] = (t / a2 >> 0) - s2 & 255;
      return r + n;
    };
    f2.prototype.writeIntBE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, !i) {
        let u2 = Math.pow(2, 8 * n - 1);
        O2(this, t, r, n, u2 - 1, -u2);
      }
      let o = n - 1, a2 = 1, s2 = 0;
      for (this[r + o] = t & 255;--o >= 0 && (a2 *= 256); )
        t < 0 && s2 === 0 && this[r + o + 1] !== 0 && (s2 = 1), this[r + o] = (t / a2 >> 0) - s2 & 255;
      return r + n;
    };
    f2.prototype.writeInt8 = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[r] = t & 255, r + 1;
    };
    f2.prototype.writeInt16LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 32767, -32768), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
    };
    f2.prototype.writeInt16BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 32767, -32768), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
    };
    f2.prototype.writeInt32LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 2147483647, -2147483648), this[r] = t & 255, this[r + 1] = t >>> 8, this[r + 2] = t >>> 16, this[r + 3] = t >>> 24, r + 4;
    };
    f2.prototype.writeInt32BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
    };
    f2.prototype.writeBigInt64LE = ee(function(t, r = 0) {
      return Xr(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    f2.prototype.writeBigInt64BE = ee(function(t, r = 0) {
      return zr(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function Zr(e, t, r, n, i, o) {
      if (r + n > e.length)
        throw new RangeError("Index out of range");
      if (r < 0)
        throw new RangeError("Index out of range");
    }
    function Jr(e, t, r, n, i) {
      return t = +t, r = r >>> 0, i || Zr(e, t, r, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), we.write(e, t, r, n, 23, 4), r + 4;
    }
    f2.prototype.writeFloatLE = function(t, r, n) {
      return Jr(this, t, r, true, n);
    };
    f2.prototype.writeFloatBE = function(t, r, n) {
      return Jr(this, t, r, false, n);
    };
    function Qr(e, t, r, n, i) {
      return t = +t, r = r >>> 0, i || Zr(e, t, rwe.write(e, t, r, n, 52, 8), r + 8;
    }
    f2.prototype.writeDoubleLE = function(t, r, n) {
      return Qr(this, t, r, true, n);
    };
    f2.prototype.writeDoubleBE = function(t, r, n) {
      return Qr(this, t, r, false, n);
    };
    f2.prototype.copy = function(t, r, n, i) {
      if (!f2.isBuffer(t))
        throw new TypeError("argument should be a Buffer");
      if (n || (n = 0), !i && i !== 0 && (i = this.length), r >= t.length && (r = t.length), r || (r = 0), i > 0 && i < n && (i = n), i === n || t.length === 0 || this.length === 0)
        return 0;
      if (r < 0)
        throw new RangeError("targetStart out of bounds");
      if (n < 0 || n >= this.length)
        throw new RangeError("Index out of range");
      if (i < 0)
        throw new RangeError("sourceEnd out of bounds");
      i > this.length && (i = this.length), t.length - r < i - n && (i = t.length - r + n);
      let o = i - n;
      return this === t && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r, n, i) : Uint8Array.prototype.set.call(t, this.subarray(n, i), r), o;
    };
    f2.prototype.fill = function(t, r, n, i) {
      if (typeof t == "string") {
        if (typeof r == "string" ? (i = r, r = 0, n = this.length) : typeof n == "string" && (i = n, n = this.length), i !== undefined && typeof i != "string")
          throw new TypeError("encoding must be a string");
        if (typeof i == "string" && !f2.isEncoding(i))
          throw new TypeError("Unknown encoding: " + i);
        if (t.length === 1) {
          let a2 = t.charCodeAt(0);
          (i === "utf8" && a2 < 128 || i === "latin1") && (t = a2);
        }
      } else
        typeof t == "number" ? t = t & 255 : typeof t == "boolean" && (t = Number(t));
      if (r < 0 || this.length < r || this.length < n)
        throw new RangeError("Out of range index");
      if (n <= r)
        return this;
      r = r >>> 0, n = n === undefined ? this.length : n >>> 0, t || (t = 0);
      let o;
      if (typeof t == "number")
        for (o = r;o < n; ++o)
          this[o] = t;
      else {
        let a2 = f2.isBuffer(t) ? t : f2.from(t, i), s2 = a2.length;
        if (s2 === 0)
          throw new TypeError('The value "' + t + '" is invalid for argument "value"');
        for (o = 0;o < n - r; ++o)
          this[o + r] = a2[o % s2];
      }
      return this;
    };
    var ge = {};
    function Ct(e, t, r) {
      ge[e] = class extends r {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: t.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e}]`, this.stack, delete this.name;
        }
        get code() {
          return e;
        }
        set code(i) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: i, writable: true });
        }
        toString() {
          return `${this.name} [${e}]: ${this.message}`;
        }
      };
    }
    Ct("ERR_BUFFER_OUT_OF_BOUNDS", function(e) {
      return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    Ct("ERR_INVALID_ARG_TYPE", function(e, t) {
      return `The "${e}" argument must be of type number. Received type ${typeof t}`;
    }, TypeError);
    Ct("ERR_OUT_OF_RANGE", function(e, t, r) {
      let n = `The value of "${e}" is out of range.`, i = r;
      return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? i = Wr(String(r)) : typeof r == "bigint" && (i = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (i = Wr(i)), i += "n"), n += ` It must be ${t}. Received ${i}`, n;
    }, RangeError);
    function Wr(e) {
      let t = "", r = e.length, n = e[0] === "-" ? 1 : 0;
      for (;r >= n + 4; r -= 3)
        t = `_${e.slice(r - 3, r)}${t}`;
      return `${e.slice(0, r)}${t}`;
    }
    function Bo(e, t, r) {
      me(t, "offset"), (e[t] === undefined || e[t + r] === undefined) && Ie(t, e.length - (r + 1));
    }
    function en(e, t, r, n, i, o) {
      if (e > r || e < t) {
        let a2 = typeof t == "bigint" ? "n" : "", s2;
        throw o > 3 ? t === 0 || t === BigInt(0) ? s2 = `>= 0${a2} and < 2${a2} ** ${(o + 1) * 8}${a2}` : s2 = `>= -(2${a2} ** ${(o + 1) * 8 - 1}${a2}) and < 2 ** ${(o + 1) * 8 - 1}${a2}` : s2 = `>= ${t}${a2} and <= ${r}${a2}`, new ge.ERR_OUT_OF_RANGE("value", s2, e);
      }
      Bo(n, i, o);
    }
    function me(e, t) {
      if (typeof e != "number")
        throw new ge.ERR_INVALID_ARG_TYPE(t, "number", e);
    }
    function Ie(e, t, r) {
      throw Math.floor(e) !== e ? (me(e, r), new ge.ERR_OUT_OF_RANGE(r || "offset", "an integer", e)) : t < 0 ? new ge.ERR_BUFFER_OUT_OF_BOUNDS : new ge.ERR_OUT_OF_RANGE(r || "offset", `>= ${r ? 1 : 0} and <= ${t}`, e);
    }
    var Co = /[^+/0-9A-Za-z-_]/g;
    function Io(e) {
      if (e = e.split("=")[0], e = e.trim().replace(Co, ""), e.length < 2)
        return "";
      for (;e.length % 4 !== 0; )
        e = e + "=";
      return e;
    }
    function Tt(e, t) {
      t = t || 1 / 0;
      let r, n = e.length, i = null, o = [];
      for (let a2 = 0;a2 < n; ++a2) {
        if (r = e.charCodeAt(a2), r > 55295 && r < 57344) {
          if (!i) {
            if (r > 56319) {
              (t -= 3) > -1 && o.push(239, 191, 189);
              continue;
            } else if (a2 + 1 === n) {
              (t -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            i = r;
            continue;
          }
          if (r < 56320) {
            (t -= 3) > -1 && o.push(239, 191, 189), i = r;
            continue;
          }
          r = (i - 55296 << 10 | r - 56320) + 65536;
        } else
          i && (t -= 3) > -1 && o.push(239, 191, 189);
        if (i = null, r < 128) {
          if ((t -= 1) < 0)
            break;
          o.push(r);
        } else if (r < 2048) {
          if ((t -= 2) < 0)
            break;
          o.push(r >> 6 | 192, r & 63 | 128);
        } else if (r < 65536) {
          if ((t -= 3) < 0)
            break;
          o.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
        } else if (r < 1114112) {
          if ((t -= 4) < 0)
            break;
          o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return o;
    }
    function Lo(e) {
      let t = [];
      for (let r = 0;r < e.length; ++r)
        t.push(e.charCodeAt(r) & 255);
      return t;
    }
    function Mo(e, t) {
      let r, n, i, o = [];
      for (let a2 = 0;a2 < e.length && !((t -= 2) < 0); ++a2)
        r = e.charCodeAt(a2), n = r >> 8, i = r % 256, o.push(i), o.push(n);
      return o;
    }
    function tn(e) {
      return xt.toByteArray(Io(e));
    }
    function Ge(e, t, r, n) {
      let i;
      for (i = 0;i < n && !(i + r >= t.length || i >= e.length); ++i)
        t[i + r] = e[i];
      return i;
    }
    function W(e, t) {
      return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name;
    }
    function It(e) {
      return e !== e;
    }
    var Oo = function() {
      let e = "0123456789abcdef", t = new Array(256);
      for (let r = 0;r < 16; ++r) {
        let n = r * 16;
        for (let i = 0;i < 16; ++i)
          t[n + i] = e[r] + e[i];
      }
      return t;
    }();
    function ee(e) {
      return typeof BigInt > "u" ? Fo : e;
    }
    function Fo() {
      throw new Error("BigInt not supported");
    }
  });
  Lt = b2(() => {
  });
  an = b2((Of, on) => {
    function rn(e, t) {
      var r = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function(i) {
          return Object.getOwnPropertyDescriptor(e, i).enumerable;
        })), r.push.apply(r, n);
      }
      return r;
    }
    function No(e) {
      for (var t = 1;t < arguments.length; t++) {
        var r = arguments[t] != null ? arguments[t] : {};
        t % 2 ? rn(Object(r), true).forEach(function(n) {
          Uo(e, n, r[n]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : rn(Object(r)).forEach(function(n) {
          Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
        });
      }
      return e;
    }
    function Uo(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    }
    function Po(e, t) {
      if (!(e instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    function nn(e, t) {
      for (var r = 0;r < t.length; r++) {
        var n = t[r];
        n.enumerable = n.enumerable || false, n.configurable = true, "value" in n && (n.writable = true), Object.defineProperty(e, n.key, n);
      }
    }
    function qo(e, t, r) {
      return t && nn(e.prototype, t), r && nn(e, r), e;
    }
    var Do = _e(), Ke = Do.Buffer, ko = Lt(), Mt = ko.inspect, jo = Mt && Mt.custom || "inspect";
    function Ho(e, t, r) {
      Ke.prototype.copy.call(e, t, r);
    }
    on.exports = function() {
      function e() {
        Po(this, e), this.head = null, this.tail = null, this.length = 0;
      }
      return qo(e, [{ key: "push", value: function(r) {
        var n = { data: r, next: null };
        this.length > 0 ? this.tail.next = n : this.head = n, this.tail = n, ++this.length;
      } }, { key: "unshift", value: function(r) {
        var n = { data: r, next: this.head };
        this.length === 0 && (this.tail = n), this.head = n, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r) {
        if (this.length === 0)
          return "";
        for (var n = this.head, i = "" + n.data;n = n.next; )
          i += r + n.data;
        return i;
      } }, { key: "concat", value: function(r) {
        if (this.length === 0)
          return Ke.alloc(0);
        for (var n = Ke.allocUnsafe(r >>> 0), i = this.head, o = 0;i; )
          Ho(i.data, n, o), o += i.data.length, i = i.next;
        return n;
      } }, { key: "consume", value: function(r, n) {
        var i;
        return r < this.head.data.length ? (i = this.head.data.slice(0, r), this.head.data = this.head.data.slice(r)) : r === this.head.data.length ? i = this.shift() : i = n ? this._getString(r) : this._getBuffer(r), i;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r) {
        var n = this.head, i = 1, o = n.data;
        for (r -= o.length;n = n.next; ) {
          var a2 = n.data, s2 = r > a2.length ? a2.length : r;
          if (s2 === a2.length ? o += a2 : o += a2.slice(0, r), r -= s2, r === 0) {
            s2 === a2.length ? (++i, n.next ? this.head = n.next : this.head = this.tail = null) : (this.head = n, n.data = a2.slice(s2));
            break;
          }
          ++i;
        }
        return this.length -= i, o;
      } }, { key: "_getBuffer", value: function(r) {
        var n = Ke.allocUnsafe(r), i = this.head, o = 1;
        for (i.data.copy(n), r -= i.data.length;i = i.next; ) {
          var a2 = i.data, s2 = r > a2.length ? a2.length : r;
          if (a2.copy(n, n.length - r, 0, s2), r -= s2, r === 0) {
            s2 === a2.length ? (++o, i.next ? this.head = i.next : this.head = this.tail = null) : (this.head = i, i.data = a2.slice(s2));
            break;
          }
          ++o;
        }
        return this.length -= o, n;
      } }, { key: jo, value: function(r, n) {
        return Mt(this, No({}, n, { depth: 0, customInspect: false }));
      } }]), e;
    }();
  });
  Ft = b2((Ff, fn) => {
    function Wo(e, t) {
      var r = this, n = this._readableState && this._readableState.destroyed, i = this._writableState && this._writableState.destroyed;
      return n || i ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(Ot, this, e)) : process.nextTick(Ot, this, e)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e || null, function(o) {
        !t && o ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(Ve, r) : (r._writableState.errorEmitted = true, process.nextTick(sn, r, o)) : process.nextTick(sn, r, o) : t ? (process.nextTick(Ve, r), t(o)) : process.nextTick(Ve, r);
      }), this);
    }
    function sn(e, t) {
      Ot(e, t), Ve(e);
    }
    function Ve(e) {
      e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
    }
    function $o() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function Ot(e, t) {
      e.emit("error", t);
    }
    function Go(e, t) {
      var { _readableState: r, _writableState: n } = e;
      r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
    }
    fn.exports = { destroy: Wo, undestroy: $o, errorOrDestroy: Go };
  });
  fe = b2((Nf, hn) => {
    function Ko(e, t) {
      e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t;
    }
    var ln = {};
    function P(e, t, r) {
      r || (r = Error);
      function n(o, a2, s2) {
        return typeof t == "string" ? t : t(o, a2, s2);
      }
      var i = function(o) {
        Ko(a2, o);
        function a2(s2, u2, l2) {
          return o.call(this, n(s2, u2, l2)) || this;
        }
        return a2;
      }(r);
      i.prototype.name = r.name, i.prototype.code = e, ln[e] = i;
    }
    function un(e, t) {
      if (Array.isArray(e)) {
        var r = e.length;
        return e = e.map(function(n) {
          return String(n);
        }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : r === 2 ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
      } else
        return "of ".concat(t, " ").concat(String(e));
    }
    function Vo(e, t, r) {
      return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
    }
    function Yo(e, t, r) {
      return (r === undefined || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
    }
    function Xo(e, t, r) {
      return typeof r != "number" && (r = 0), r + t.length > e.length ? false : e.indexOf(t, r) !== -1;
    }
    P("ERR_INVALID_OPT_VALUE", function(e, t) {
      return 'The value "' + t + '" is invalid for option "' + e + '"';
    }, TypeError);
    P("ERR_INVALID_ARG_TYPE", function(e, t, r) {
      var n;
      typeof t == "string" && Vo(t, "not ") ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be";
      var i;
      if (Yo(e, " argument"))
        i = "The ".concat(e, " ").concat(n, " ").concat(un(t, "type"));
      else {
        var o = Xo(e, ".") ? "property" : "argument";
        i = 'The "'.concat(e, '" ').concat(o, " ").concat(n, " ").concat(un(t, "type"));
      }
      return i += ". Received type ".concat(typeof r), i;
    }, TypeError);
    P("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    P("ERR_METHOD_NOT_IMPLEMENTED", function(e) {
      return "The " + e + " method is not implemented";
    });
    P("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    P("ERR_STREAM_DESTROYED", function(e) {
      return "Cannot call " + e + " after a stream was destroyed";
    });
    P("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    P("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    P("ERR_STREAM_WRITE_AFTER_END", "write after end");
    P("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    P("ERR_UNKNOWN_ENCODING", function(e) {
      return "Unknown encoding: " + e;
    }, TypeError);
    P("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    hn.exports.codes = ln;
  });
  Nt = b2((Uf, cn) => {
    var zo = fe().codes.ERR_INVALID_OPT_VALUE;
    function Zo(e, t, r) {
      return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
    }
    function Jo(e, t, r, n) {
      var i = Zo(t, n, r);
      if (i != null) {
        if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
          var o = n ? r : "highWaterMark";
          throw new zo(o, i);
        }
        return Math.floor(i);
      }
      return e.objectMode ? 16 : 16 * 1024;
    }
    cn.exports = { getHighWaterMark: Jo };
  });
  pn = b2((Pf, dn) => {
    dn.exports = Qo;
    function Qo(e, t) {
      if (Ut("noDeprecation"))
        return e;
      var r = false;
      function n() {
        if (!r) {
          if (Ut("throwDeprecation"))
            throw new Error(t);
          Ut("traceDeprecation") ? console.trace(t) : console.warn(t), r = true;
        }
        return e.apply(this, arguments);
      }
      return n;
    }
    function Ut(e) {
      try {
        if (!global.localStorage)
          return false;
      } catch {
        return false;
      }
      var t = global.localStorage[e];
      return t == null ? false : String(t).toLowerCase() === "true";
    }
  });
  Dt = b2((qf, _n) => {
    _n.exports = A2;
    function gn(e) {
      var t = this;
      this.next = null, this.entry = null, this.finish = function() {
        Ta(t, e);
      };
    }
    var ve;
    A2.WritableState = Me;
    var ea = { deprecate: pn() }, wn = _t(), Xe = _e().Buffer, ta = global.Uint8Array || function() {
    };
    function ra(e) {
      return Xe.from(e);
    }
    function na(e) {
      return Xe.isBuffer(e) || e instanceof ta;
    }
    var qt = Ft(), ia = Nt(), oa = ia.getHighWaterMark, te = fe().codes, aa = te.ERR_INVALID_ARG_TYPE, sa = te.ERR_METHOD_NOT_IMPLEMENTED, fa = te.ERR_MULTIPLE_CALLBACK, ua = te.ERR_STREAM_CANNOT_PIPE, la = te.ERR_STREAM_DESTROYED, ha = te.ERR_STREAM_NULL_VALUES, ca = te.ERR_STREAM_WRITE_AFTER_END, da = te.ERR_UNKNOWN_ENCODING, Ee = qt.errorOrDestroy;
    Q()(A2, wn);
    function pa() {
    }
    function Me(e, t, r) {
      ve = ve || ue(), e = e || {}, typeof r != "boolean" && (r = t instanceof ve), this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.writableObjectMode), this.highWaterMark = oa(this, e, "writableHighWaterMark", r), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var n = e.decodeStrings === false;
      this.decodeStrings = !n, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(i) {
        va(t, i);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = e.emitClose !== false, this.autoDestroy = !!e.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new gn(this);
    }
    Me.prototype.getBuffer = function() {
      for (var t = this.bufferedRequest, r = [];t; )
        r.push(t), t = t.next;
      return r;
    };
    (function() {
      try {
        Object.defineProperty(Me.prototype, "buffer", { get: ea.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var Ye;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Ye = Function.prototype[Symbol.hasInstance], Object.defineProperty(A2, Symbol.hasInstance, { value: function(t) {
      return Ye.call(this, t) ? true : this !== A2 ? false : t && t._writableState instanceof Me;
    } })) : Ye = function(t) {
      return t instanceof this;
    };
    function A2(e) {
      ve = ve || ue();
      var t = this instanceof ve;
      if (!t && !Ye.call(A2, this))
        return new A2(e);
      this._writableState = new Me(e, this, t), this.writable = true, e && (typeof e.write == "function" && (this._write = e.write), typeof e.writev == "function" && (this._writev = e.writev), typeof e.destroy == "function" && (this._destroy = e.destroy), typeof e.final == "function" && (this._final = e.final)), wn.call(this);
    }
    A2.prototype.pipe = function() {
      Ee(this, new ua);
    };
    function ya(e, t) {
      var r = new ca;
      Ee(e, r), process.nextTick(t, r);
    }
    function ga(e, t, r, n) {
      var i;
      return r === null ? i = new ha : typeof r != "string" && !t.objectMode && (i = new aa("chunk", ["string", "Buffer"], r)), i ? (Ee(e, i), process.nextTick(n, i), false) : true;
    }
    A2.prototype.write = function(e, t, r) {
      var n = this._writableState, i = false, o = !n.objectMode && na(e);
      return o && !Xe.isBuffer(e) && (e = ra(e)), typeof t == "function" && (r = t, t = null), o ? t = "buffer" : t || (t = n.defaultEncoding), typeof r != "function" && (r = pa), n.ending ? ya(this, r) : (o || ga(this, n, e, r)) && (n.pendingcb++, i = ma(this, n, o, e, t, r)), i;
    };
    A2.prototype.cork = function() {
      this._writableState.corked++;
    };
    A2.prototype.uncork = function() {
      var e = this._writableState;
      e.corked && (e.corked--, !e.writing && !e.corked && !e.bufferProcessing && e.bufferedRequest && mn(this, e));
    };
    A2.prototype.setDefaultEncoding = function(t) {
      if (typeof t == "string" && (t = t.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((t + "").toLowerCase()) > -1))
        throw new da(t);
      return this._writableState.defaultEncoding = t, this;
    };
    Object.defineProperty(A2.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function wa(e, t, r) {
      return !e.objectMode && e.decodeStrings !== false && typeof t == "string" && (t = Xe.from(t, r)), t;
    }
    Object.defineProperty(A2.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function ma(e, t, r, n, i, o) {
      if (!r) {
        var a2 = wa(t, n, i);
        n !== a2 && (r = true, i = "buffer", n = a2);
      }
      var s2 = t.objectMode ? 1 : n.length;
      t.length += s2;
      var u2 = t.length < t.highWaterMark;
      if (u2 || (t.needDrain = true), t.writing || t.corked) {
        var l2 = t.lastBufferedRequest;
        t.lastBufferedRequest = { chunk: n, encoding: i, isBuf: r, callback: o, next: null }, l2 ? l2.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
      } else
        Pt(e, t, false, s2, n, i, o);
      return u2;
    }
    function Pt(e, t, r, n, i, o, a2) {
      t.writelen = n, t.writecb = a2, t.writing = true, t.sync = true, t.destroyed ? t.onwrite(new la("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = false;
    }
    function ba(e, t, r, n, i) {
      --t.pendingcb, r ? (process.nextTick(i, n), process.nextTick(Le, e, t), e._writableState.errorEmitted = true, Ee(e, n)) : (i(n), e._writableState.errorEmitted = true, Ee(e, n), Le(e, t));
    }
    function _a(e) {
      e.writing = false, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
    }
    function va(e, t) {
      var r = e._writableState, n = r.sync, i = r.writecb;
      if (typeof i != "function")
        throw new fa;
      if (_a(r), t)
        ba(e, r, n, t, i);
      else {
        var o = bn(r) || e.destroyed;
        !o && !r.corked && !r.bufferProcessing && r.bufferedRequest && mn(e, r), n ? process.nextTick(yn, e, r, o, i) : yn(e, r, o, i);
      }
    }
    function yn(e, t, r, n) {
      r || Ea(e, t), t.pendingcb--, n(), Le(e, t);
    }
    function Ea(e, t) {
      t.length === 0 && t.needDrain && (t.needDrain = false, e.emit("drain"));
    }
    function mn(e, t) {
      t.bufferProcessing = true;
      var r = t.bufferedRequest;
      if (e._writev && r && r.next) {
        var n = t.bufferedRequestCount, i = new Array(n), o = t.corkedRequestsFree;
        o.entry = r;
        for (var a2 = 0, s2 = true;r; )
          i[a2] = r, r.isBuf || (s2 = false), r = r.next, a2 += 1;
        i.allBuffers = s2, Pt(e, t, true, t.length, i, "", o.finish), t.pendingcb++, t.lastBufferedRequest = null, o.next ? (t.corkedRequestsFree = o.next, o.next = null) : t.corkedRequestsFree = new gn(t), t.bufferedRequestCount = 0;
      } else {
        for (;r; ) {
          var { chunk: u2, encoding: l2, callback: h2 } = r, c2 = t.objectMode ? 1 : u2.length;
          if (Pt(e, t, false, c2, u2, l2, h2), r = r.next, t.bufferedRequestCount--, t.writing)
            break;
        }
        r === null && (t.lastBufferedRequest = null);
      }
      t.bufferedRequest = r, t.bufferProcessing = false;
    }
    A2.prototype._write = function(e, t, r) {
      r(new sa("_write()"));
    };
    A2.prototype._writev = null;
    A2.prototype.end = function(e, t, r) {
      var n = this._writableState;
      return typeof e == "function" ? (r = e, e = null, t = null) : typeof t == "function" && (r = t, t = null), e != null && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || Sa(this, n, r), this;
    };
    Object.defineProperty(A2.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function bn(e) {
      return e.ending && e.length === 0 && e.bufferedRequest === null && !e.finished && !e.writing;
    }
    function xa(e, t) {
      e._final(function(r) {
        t.pendingcb--, r && Ee(e, r), t.prefinished = true, e.emit("prefinish"), Le(e, t);
      });
    }
    function Ra(e, t) {
      !t.prefinished && !t.finalCalled && (typeof e._final == "function" && !t.destroyed ? (t.pendingcb++, t.finalCalled = true, process.nextTick(xa, e, t)) : (t.prefinished = true, e.emit("prefinish")));
    }
    function Le(e, t) {
      var r = bn(t);
      if (r && (Ra(e, t), t.pendingcb === 0 && (t.finished = true, e.emit("finish"), t.autoDestroy))) {
        var n = e._readableState;
        (!n || n.autoDestroy && n.endEmitted) && e.destroy();
      }
      return r;
    }
    function Sa(e, t, r) {
      t.ending = true, Le(e, t), r && (t.finished ? process.nextTick(r) : e.once("finish", r)), t.ended = true, e.writable = false;
    }
    function Ta(e, t, r) {
      var n = e.entry;
      for (e.entry = null;n; ) {
        var i = n.callback;
        t.pendingcb--, i(r), n = n.next;
      }
      t.corkedRequestsFree.next = e;
    }
    Object.defineProperty(A2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(t) {
      !this._writableState || (this._writableState.destroyed = t);
    } });
    A2.prototype.destroy = qt.destroy;
    A2.prototype._undestroy = qt.undestroy;
    A2.prototype._destroy = function(e, t) {
      t(e);
    };
  });
  ue = b2((Df, En) => {
    var Aa = Object.keys || function(e) {
      var t = [];
      for (var r in e)
        t.push(r);
      return t;
    };
    En.exports = $;
    var vn = Ht(), jt = Dt();
    Q()($, vn);
    for (kt = Aa(jt.prototype), ze = 0;ze < kt.length; ze++)
      Ze = kt[ze], $.prototype[Ze] || ($.prototype[Ze] = jt.prototype[Ze]);
    var kt, Ze, ze;
    function $(e) {
      if (!(this instanceof $))
        return new $(e);
      vn.call(this, e), jt.call(this, e), this.allowHalfOpen = true, e && (e.readable === false && (this.readable = false), e.writable === false && (this.writable = false), e.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", Ba)));
    }
    Object.defineProperty($.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty($.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty($.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Ba() {
      this._writableState.ended || process.nextTick(Ca, this);
    }
    function Ca(e) {
      e.end();
    }
    Object.defineProperty($.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(t) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = t, this._writableState.destroyed = t);
    } });
  });
  Sn = b2((Wt, Rn) => {
    var Je = _e(), G = Je.Buffer;
    function xn(e, t) {
      for (var r in e)
        t[r] = e[r];
    }
    G.from && G.alloc && G.allocUnsafe && G.allocUnsafeSlow ? Rn.exports = Je : (xn(Je, Wt), Wt.Buffer = le);
    function le(e, t, r) {
      return G(e, t, r);
    }
    le.prototype = Object.create(G.prototype);
    xn(G, le);
    le.from = function(e, t, r) {
      if (typeof e == "number")
        throw new TypeError("Argument must not be a number");
      return G(e, t, r);
    };
    le.alloc = function(e, t, r) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      var n = G(e);
      return t !== undefined ? typeof r == "string" ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
    };
    le.allocUnsafe = function(e) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      return G(e);
    };
    le.allocUnsafeSlow = function(e) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      return Je.SlowBuffer(e);
    };
  });
  Bn = b2((An) => {
    var Gt = Sn().Buffer, Tn = Gt.isEncoding || function(e) {
      switch (e = "" + e, e && e.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function Ia(e) {
      if (!e)
        return "utf8";
      for (var t;; )
        switch (e) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return e;
          default:
            if (t)
              return;
            e = ("" + e).toLowerCase(), t = true;
        }
    }
    function La(e) {
      var t = Ia(e);
      if (typeof t != "string" && (Gt.isEncoding === Tn || !Tn(e)))
        throw new Error("Unknown encoding: " + e);
      return t || e;
    }
    An.StringDecoder = Oe;
    function Oe(e) {
      this.encoding = La(e);
      var t;
      switch (this.encoding) {
        case "utf16le":
          this.text = Pa, this.end = qa, t = 4;
          break;
        case "utf8":
          this.fillLast = Fa, t = 4;
          break;
        case "base64":
          this.text = Da, this.end = ka, t = 3;
          break;
        default:
          this.write = ja, this.end = Ha;
          return;
      }
      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = Gt.allocUnsafe(t);
    }
    Oe.prototype.write = function(e) {
      if (e.length === 0)
        return "";
      var t, r;
      if (this.lastNeed) {
        if (t = this.fillLast(e), t === undefined)
          return "";
        r = this.lastNeed, this.lastNeed = 0;
      } else
        r = 0;
      return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
    };
    Oe.prototype.end = Ua;
    Oe.prototype.text = Na;
    Oe.prototype.fillLast = function(e) {
      if (this.lastNeed <= e.length)
        return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
    };
    function $t(e) {
      return e <= 127 ? 0 : e >> 5 === 6 ? 2 : e >> 4 === 14 ? 3 : e >> 3 === 30 ? 4 : e >> 6 === 2 ? -1 : -2;
    }
    function Ma(e, t, r) {
      var n = t.length - 1;
      if (n < r)
        return 0;
      var i = $t(t[n]);
      return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || i === -2 ? 0 : (i = $t(t[n]), i >= 0 ? (i > 0 && (e.lastNeed = i - 2), i) : --n < r || i === -2 ? 0 : (i = $t(t[n]), i >= 0 ? (i > 0 && (i === 2 ? i = 0 : e.lastNeed = i - 3), i) : 0));
    }
    function Oa(e, t, r) {
      if ((t[0] & 192) !== 128)
        return e.lastNeed = 0, "\uFFFD";
      if (e.lastNeed > 1 && t.length > 1) {
        if ((t[1] & 192) !== 128)
          return e.lastNeed = 1, "\uFFFD";
        if (e.lastNeed > 2 && t.length > 2 && (t[2] & 192) !== 128)
          return e.lastNeed = 2, "\uFFFD";
      }
    }
    function Fa(e) {
      var t = this.lastTotal - this.lastNeed, r = Oa(this, e, t);
      if (r !== undefined)
        return r;
      if (this.lastNeed <= e.length)
        return e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      e.copy(this.lastChar, t, 0, e.length), this.lastNeed -= e.length;
    }
    function Na(e, t) {
      var r = Ma(this, e, t);
      if (!this.lastNeed)
        return e.toString("utf8", t);
      this.lastTotal = r;
      var n = e.length - (r - this.lastNeed);
      return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
    }
    function Ua(e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + "\uFFFD" : t;
    }
    function Pa(e, t) {
      if ((e.length - t) % 2 === 0) {
        var r = e.toString("utf16le", t);
        if (r) {
          var n = r.charCodeAt(r.length - 1);
          if (n >= 55296 && n <= 56319)
            return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
        }
        return r;
      }
      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
    }
    function qa(e) {
      var t = e && e.length ? this.write(e) : "";
      if (this.lastNeed) {
        var r = this.lastTotal - this.lastNeed;
        return t + this.lastChar.toString("utf16le", 0, r);
      }
      return t;
    }
    function Da(e, t) {
      var r = (e.length - t) % 3;
      return r === 0 ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, r === 1 ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
    }
    function ka(e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
    }
    function ja(e) {
      return e.toString(this.encoding);
    }
    function Ha(e) {
      return e && e.length ? this.write(e) : "";
    }
  });
  Kt = {};
  Er(Kt, { StringDecoder: () => Qe.StringDecoder, default: () => Qe.StringDecoder });
  Vt = vr(() => {
    Qe = Rr(Bn());
  });
  et = b2((jf, Ln) => {
    var Cn = fe().codes.ERR_STREAM_PREMATURE_CLOSE;
    function Wa(e) {
      var t = false;
      return function() {
        if (!t) {
          t = true;
          for (var r = arguments.length, n = new Array(r), i = 0;i < r; i++)
            n[i] = arguments[i];
          e.apply(this, n);
        }
      };
    }
    function $a() {
    }
    function Ga(e) {
      return e.setHeader && typeof e.abort == "function";
    }
    function In(e, t, r) {
      if (typeof t == "function")
        return In(e, null, t);
      t || (t = {}), r = Wa(r || $a);
      var n = t.readable || t.readable !== false && e.readable, i = t.writable || t.writable !== false && e.writable, o = function() {
        e.writable || s2();
      }, a2 = e._writableState && e._writableState.finished, s2 = function() {
        i = false, a2 = true, n || r.call(e);
      }, u2 = e._readableState && e._readableState.endEmitted, l2 = function() {
        n = false, u2 = true, i || r.call(e);
      }, h2 = function(g2) {
        r.call(e, g2);
      }, c2 = function() {
        var g2;
        if (n && !u2)
          return (!e._readableState || !e._readableState.ended) && (g2 = new Cn), r.call(e, g2);
        if (i && !a2)
          return (!e._writableState || !e._writableState.ended) && (g2 = new Cn), r.call(e, g2);
      }, d2 = function() {
        e.req.on("finish", s2);
      };
      return Ga(e) ? (e.on("complete", s2), e.on("abort", c2), e.req ? d2() : e.on("request", d2)) : i && !e._writableState && (e.on("end", o), e.on("close", o)), e.on("end", l2), e.on("finish", s2), t.error !== false && e.on("error", h2), e.on("close", c2), function() {
        e.removeListener("complete", s2), e.removeListener("abort", c2), e.removeListener("request", d2), e.req && e.req.removeListener("finish", s2), e.removeListener("end", o), e.removeListener("close", o), e.removeListener("finish", s2), e.removeListener("end", l2), e.removeListener("error", h2), e.removeListener("close", c2);
      };
    }
    Ln.exports = In;
  });
  On = b2((Hf, Mn) => {
    var tt;
    function re(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    }
    var Ka = et(), ne = Symbol("lastResolve"), he = Symbol("lastReject"), Fe = Symbol("error"), rt = Symbol("ended"), ce = Symbol("lastPromise"), Yt = Symbol("handlePromise"), de = Symbol("stream");
    function ie(e, t) {
      return { value: e, done: t };
    }
    function Va(e) {
      var t = e[ne];
      if (t !== null) {
        var r = e[de].read();
        r !== null && (e[ce] = null, e[ne] = null, e[he] = null, t(ie(r, false)));
      }
    }
    function Ya(e) {
      process.nextTick(Va, e);
    }
    function Xa(e, t) {
      return function(r, n) {
        e.then(function() {
          if (t[rt]) {
            r(ie(undefined, true));
            return;
          }
          t[Yt](r, n);
        }, n);
      };
    }
    var za = Object.getPrototypeOf(function() {
    }), Za = Object.setPrototypeOf((tt = { get stream() {
      return this[de];
    }, next: function() {
      var t = this, r = this[Fe];
      if (r !== null)
        return Promise.reject(r);
      if (this[rt])
        return Promise.resolve(ie(undefined, true));
      if (this[de].destroyed)
        return new Promise(function(a2, s2) {
          process.nextTick(function() {
            t[Fe] ? s2(t[Fe]) : a2(ie(undefined, true));
          });
        });
      var n = this[ce], i;
      if (n)
        i = new Promise(Xa(n, this));
      else {
        var o = this[de].read();
        if (o !== null)
          return Promise.resolve(ie(o, false));
        i = new Promise(this[Yt]);
      }
      return this[ce] = i, i;
    } }, re(tt, Symbol.asyncIterator, function() {
      return this;
    }), re(tt, "return", function() {
      var t = this;
      return new Promise(function(r, n) {
        t[de].destroy(null, function(i) {
          if (i) {
            n(i);
            return;
          }
          r(ie(undefined, true));
        });
      });
    }), tt), za), Ja = function(t) {
      var r, n = Object.create(Za, (r = {}, re(r, de, { value: t, writable: true }), re(r, ne, { value: null, writable: true }), re(r, he, { value: null, writable: true }), re(r, Fe, { value: null, writable: true }), re(r, rt, { value: t._readableState.endEmitted, writable: true }), re(r, Yt, { value: function(o, a2) {
        var s2 = n[de].read();
        s2 ? (n[ce] = null, n[ne] = null, n[he] = null, o(ie(s2, false))) : (n[ne] = o, n[he] = a2);
      }, writable: true }), r));
      return n[ce] = null, Ka(t, function(i) {
        if (i && i.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var o = n[he];
          o !== null && (n[ce] = null, n[ne] = null, n[he] = null, o(i)), n[Fe] = i;
          return;
        }
        var a2 = n[ne];
        a2 !== null && (n[ce] = null, n[ne] = null, n[he] = null, a2(ie(undefined, true))), n[rt] = true;
      }), t.on("readable", Ya.bind(null, n)), n;
    };
    Mn.exports = Ja;
  });
  Nn = b2((Wf, Fn) => {
    Fn.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  Ht = b2((Gf, Gn) => {
    Gn.exports = _2;
    var xe;
    _2.ReadableState = Dn;
    var $f = bt().EventEmitter, qn = function(t, r) {
      return t.listeners(r).length;
    }, Ue = _t(), nt = _e().Buffer, Qa = global.Uint8Array || function() {
    };
    function es(e) {
      return nt.from(e);
    }
    function ts(e) {
      return nt.isBuffer(e) || e instanceof Qa;
    }
    var Xt = Lt(), w;
    Xt && Xt.debuglog ? w = Xt.debuglog("stream") : w = function() {
    };
    var rs = an(), rr = Ft(), ns = Nt(), is = ns.getHighWaterMark, it = fe().codes, os = it.ERR_INVALID_ARG_TYPE, as = it.ERR_STREAM_PUSH_AFTER_EOF, ss = it.ERR_METHOD_NOT_IMPLEMENTED, fs = it.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Re, zt, Zt;
    Q()(_2, Ue);
    var Ne = rr.errorOrDestroy, Jt = ["error", "close", "destroy", "pause", "resume"];
    function us(e, t, r) {
      if (typeof e.prependListener == "function")
        return e.prependListener(t, r);
      !e._events || !e._events[t] ? e.on(t, r) : Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]];
    }
    function Dn(e, t, r) {
      xe = xe || ue(), e = e || {}, typeof r != "boolean" && (r = t instanceof xe), this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.readableObjectMode), this.highWaterMark = is(this, e, "readableHighWaterMark", r), this.buffer = new rs, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = e.emitClose !== false, this.autoDestroy = !!e.autoDestroy, this.destroyed = false, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e.encoding && (Re || (Re = (Vt(), dt(Kt)).StringDecoder), this.decoder = new Re(e.encoding), this.encoding = e.encoding);
    }
    function _2(e) {
      if (xe = xe || ue(), !(this instanceof _2))
        return new _2(e);
      var t = this instanceof xe;
      this._readableState = new Dn(e, this, t), this.readable = true, e && (typeof e.read == "function" && (this._read = e.read), typeof e.destroy == "function" && (this._destroy = e.destroy)), Ue.call(this);
    }
    Object.defineProperty(_2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(t) {
      !this._readableState || (this._readableState.destroyed = t);
    } });
    _2.prototype.destroy = rr.destroy;
    _2.prototype._undestroy = rr.undestroy;
    _2.prototype._destroy = function(e, t) {
      t(e);
    };
    _2.prototype.push = function(e, t) {
      var r = this._readableState, n;
      return r.objectMode ? n = true : typeof e == "string" && (t = t || r.defaultEncoding, t !== r.encoding && (e = nt.from(e, t), t = ""), n = true), kn(this, e, t, false, n);
    };
    _2.prototype.unshift = function(e) {
      return kn(this, e, null, true, false);
    };
    function kn(e, t, r, n, i) {
      w("readableAddChunk", t);
      var o = e._readableState;
      if (t === null)
        o.reading = false, cs(e, o);
      else {
        var a2;
        if (i || (a2 = ls(o, t)), a2)
          Ne(e, a2);
        else if (o.objectMode || t && t.length > 0)
          if (typeof t != "string" && !o.objectMode && Object.getPrototypeOf(t) !== nt.prototype && (t = es(t)), n)
            o.endEmitted ? Ne(e, new fs) : Qt(e, o, t, true);
          else if (o.ended)
            Ne(e, new as);
          else {
            if (o.destroyed)
              return false;
            o.reading = false, o.decoder && !r ? (t = o.decoder.write(t), o.objectMode || t.length !== 0 ? Qt(e, o, t, false) : tr(e, o)) : Qt(e, o, t, false);
          }
        else
          n || (o.reading = false, tr(e, o));
      }
      return !o.ended && (o.length < o.highWaterMark || o.length === 0);
    }
    function Qt(e, t, r, n) {
      t.flowing && t.length === 0 && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && ot(e)), tr(e, t);
    }
    function ls(e, t) {
      var r;
      return !ts(t) && typeof t != "string" && t !== undefined && !e.objectMode && (r = new os("chunk", ["string", "Buffer", "Uint8Array"], t)), r;
    }
    _2.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    _2.prototype.setEncoding = function(e) {
      Re || (Re = (Vt(), dt(Kt)).StringDecoder);
      var t = new Re(e);
      this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r = this._readableState.buffer.head, n = "";r !== null; )
        n += t.write(r.data), r = r.next;
      return this._readableState.buffer.clear(), n !== "" && this._readableState.buffer.push(n), this._readableState.length = n.length, this;
    };
    var Un = 1073741824;
    function hs(e) {
      return e >= Un ? e = Un : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
    }
    function Pn(e, t) {
      return e <= 0 || t.length === 0 && t.ended ? 0 : t.objectMode ? 1 : e !== e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = hs(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = true, 0));
    }
    _2.prototype.read = function(e) {
      w("read", e), e = parseInt(e, 10);
      var t = this._readableState, r = e;
      if (e !== 0 && (t.emittedReadable = false), e === 0 && t.needReadable && ((t.highWaterMark !== 0 ? t.length >= t.highWaterMark : t.length > 0) || t.ended))
        return w("read: emitReadable", t.length, t.ended), t.length === 0 && t.ended ? er(this) : ot(this), null;
      if (e = Pn(e, t), e === 0 && t.ended)
        return t.length === 0 && er(this), null;
      var n = t.needReadable;
      w("need readable", n), (t.length === 0 || t.length - e < t.highWaterMark) && (n = true, w("length less than watermark", n)), t.ended || t.reading ? (n = false, w("reading or ended", n)) : n && (w("do read"), t.reading = true, t.sync = true, t.length === 0 && (t.needReadable = true), this._read(t.highWaterMark), t.sync = false, t.reading || (e = Pn(r, t)));
      var i;
      return e > 0 ? i = Wn(e, t) : i = null, i === null ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), t.length === 0 && (t.ended || (t.needReadable = true), r !== e && t.ended && er(this)), i !== null && this.emit("data", i), i;
    };
    function cs(e, t) {
      if (w("onEofChunk"), !t.ended) {
        if (t.decoder) {
          var r = t.decoder.end();
          r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
        }
        t.ended = true, t.sync ? ot(e) : (t.needReadable = false, t.emittedReadable || (t.emittedReadable = true, jn(e)));
      }
    }
    function ot(e) {
      var t = e._readableState;
      w("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = false, t.emittedReadable || (w("emitReadable", t.flowing), t.emittedReadable = true, process.nextTick(jn, e));
    }
    function jn(e) {
      var t = e._readableState;
      w("emitReadable_", t.destroyed, t.length, t.ended), !t.destroyed && (t.length || t.ended) && (e.emit("readable"), t.emittedReadable = false), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, nr(e);
    }
    function tr(e, t) {
      t.readingMore || (t.readingMore = true, process.nextTick(ds, e, t));
    }
    function ds(e, t) {
      for (;!t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && t.length === 0); ) {
        var r = t.length;
        if (w("maybeReadMore read 0"), e.read(0), r === t.length)
          break;
      }
      t.readingMore = false;
    }
    _2.prototype._read = function(e) {
      Ne(this, new ss("_read()"));
    };
    _2.prototype.pipe = function(e, t) {
      var r = this, n = this._readableState;
      switch (n.pipesCount) {
        case 0:
          n.pipes = e;
          break;
        case 1:
          n.pipes = [n.pipes, e];
          break;
        default:
          n.pipes.push(e);
          break;
      }
      n.pipesCount += 1, w("pipe count=%d opts=%j", n.pipesCount, t);
      var i = (!t || t.end !== false) && e !== process.stdout && e !== process.stderr, o = i ? s2 : E2;
      n.endEmitted ? process.nextTick(o) : r.once("end", o), e.on("unpipe", a2);
      function a2(v, m2) {
        w("onunpipe"), v === r && m2 && m2.hasUnpiped === false && (m2.hasUnpiped = true, h2());
      }
      function s2() {
        w("onend"), e.end();
      }
      var u2 = ps(r);
      e.on("drain", u2);
      var l2 = false;
      function h2() {
        w("cleanup"), e.removeListener("close", p2), e.removeListener("finish", g2), e.removeListener("drain", u2), e.removeListener("error", d2), e.removeListener("unpipe", a2), r.removeListener("end", s2), r.removeListener("end", E2), r.removeListener("data", c2), l2 = true, n.awaitDrain && (!e._writableState || e._writableState.needDrain) && u2();
      }
      r.on("data", c2);
      function c2(v) {
        w("ondata");
        var m2 = e.write(v);
        w("dest.write", m2), m2 === false && ((n.pipesCount === 1 && n.pipes === e || n.pipesCount > 1 && $n(n.pipes, e) !== -1) && !l2 && (w("false write response, pause", n.awaitDrain), n.awaitDrain++), r.pause());
      }
      function d2(v) {
        w("onerror", v), E2(), e.removeListener("error", d2), qn(e, "error") === 0 && Ne(e, v);
      }
      us(e, "error", d2);
      function p2() {
        e.removeListener("finish", g2), E2();
      }
      e.once("close", p2);
      function g2() {
        w("onfinish"), e.removeListener("close", p2), E2();
      }
      e.once("finish", g2);
      function E2() {
        w("unpipe"), r.unpipe(e);
      }
      return e.emit("pipe", r), n.flowing || (w("pipe resume"), r.resume()), e;
    };
    function ps(e) {
      return function() {
        var r = e._readableState;
        w("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && qn(e, "data") && (r.flowing = true, nr(e));
      };
    }
    _2.prototype.unpipe = function(e) {
      var t = this._readableState, r = { hasUnpiped: false };
      if (t.pipesCount === 0)
        return this;
      if (t.pipesCount === 1)
        return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = false, e && e.emit("unpipe", this, r), this);
      if (!e) {
        var { pipes: n, pipesCount: i } = t;
        t.pipes = null, t.pipesCount = 0, t.flowing = false;
        for (var o = 0;o < i; o++)
          n[o].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var a2 = $n(t.pipes, e);
      return a2 === -1 ? this : (t.pipes.splice(a2, 1), t.pipesCount -= 1, t.pipesCount === 1 && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);
    };
    _2.prototype.on = function(e, t) {
      var r = Ue.prototype.on.call(this, e, t), n = this._readableState;
      return e === "data" ? (n.readableListening = this.listenerCount("readable") > 0, n.flowing !== false && this.resume()) : e === "readable" && !n.endEmitted && !n.readableListening && (n.readableListening = n.needReadable = true, n.flowing = false, n.emittedReadable = false, w("on readable", n.length, n.reading), n.length ? ot(this) : n.reading || process.nextTick(ys, this)), r;
    };
    _2.prototype.addListener = _2.prototype.on;
    _2.prototype.removeListener = function(e, t) {
      var r = Ue.prototype.removeListener.call(this, e, t);
      return e === "readable" && process.nextTick(Hn, this), r;
    };
    _2.prototype.removeAllListeners = function(e) {
      var t = Ue.prototype.removeAllListeners.apply(this, arguments);
      return (e === "readable" || e === undefined) && process.nextTick(Hn, this), t;
    };
    function Hn(e) {
      var t = e._readableState;
      t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = true : e.listenerCount("data") > 0 && e.resume();
    }
    function ys(e) {
      w("readable nexttick read 0"), e.read(0);
    }
    _2.prototype.resume = function() {
      var e = this._readableState;
      return e.flowing || (w("resume"), e.flowing = !e.readableListening, gs(this, e)), e.paused = false, this;
    };
    function gs(e, t) {
      t.resumeScheduled || (t.resumeScheduled = true, process.nextTick(ws, e, t));
    }
    function ws(e, t) {
      w("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = false, e.emit("resume"), nr(e), t.flowing && !t.reading && e.read(0);
    }
    _2.prototype.pause = function() {
      return w("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (w("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function nr(e) {
      var t = e._readableState;
      for (w("flow", t.flowing);t.flowing && e.read() !== null; )
        ;
    }
    _2.prototype.wrap = function(e) {
      var t = this, r = this._readableState, n = false;
      e.on("end", function() {
        if (w("wrapped end"), r.decoder && !r.ended) {
          var a2 = r.decoder.end();
          a2 && a2.length && t.push(a2);
        }
        t.push(null);
      }), e.on("data", function(a2) {
        if (w("wrapped data"), r.decoder && (a2 = r.decoder.write(a2)), !(r.objectMode && a2 == null) && !(!r.objectMode && (!a2 || !a2.length))) {
          var s2 = t.push(a2);
          s2 || (n = true, e.pause());
        }
      });
      for (var i in e)
        this[i] === undefined && typeof e[i] == "function" && (this[i] = function(s2) {
          return function() {
            return e[s2].apply(e, arguments);
          };
        }(i));
      for (var o = 0;o < Jt.length; o++)
        e.on(Jt[o], this.emit.bind(this, Jt[o]));
      return this._read = function(a2) {
        w("wrapped _read", a2), n && (n = false, e.resume());
      }, this;
    };
    typeof Symbol == "function" && (_2.prototype[Symbol.asyncIterator] = function() {
      return zt === undefined && (zt = On()), zt(this);
    });
    Object.defineProperty(_2.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(_2.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(_2.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(t) {
      this._readableState && (this._readableState.flowing = t);
    } });
    _2._fromList = Wn;
    Object.defineProperty(_2.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Wn(e, t) {
      if (t.length === 0)
        return null;
      var r;
      return t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (t.decoder ? r = t.buffer.join("") : t.buffer.length === 1 ? r = t.buffer.first() : r = t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r;
    }
    function er(e) {
      var t = e._readableState;
      w("endReadable", t.endEmitted), t.endEmitted || (t.ended = true, process.nextTick(ms, t, e));
    }
    function ms(e, t) {
      if (w("endReadableNT", e.endEmitted, e.length), !e.endEmitted && e.length === 0 && (e.endEmitted = true, t.readable = false, t.emit("end"), e.autoDestroy)) {
        var r = t._writableState;
        (!r || r.autoDestroy && r.finished) && t.destroy();
      }
    }
    typeof Symbol == "function" && (_2.from = function(e, t) {
      return Zt === undefined && (Zt = Nn()), Zt(_2, e, t);
    });
    function $n(e, t) {
      for (var r = 0, n = e.length;r < n; r++)
        if (e[r] === t)
          return r;
      return -1;
    }
  });
  ir = b2((Kf, Vn) => {
    Vn.exports = z;
    var at = fe().codes, bs = at.ERR_METHOD_NOT_IMPLEMENTED, _s = at.ERR_MULTIPLE_CALLBACK, vs = at.ERR_TRANSFORM_ALREADY_TRANSFORMING, Es = at.ERR_TRANSFORM_WITH_LENGTH_0, st = ue();
    Q()(z, st);
    function xs(e, t) {
      var r = this._transformState;
      r.transforming = false;
      var n = r.writecb;
      if (n === null)
        return this.emit("error", new _s);
      r.writechunk = null, r.writecb = null, t != null && this.push(t), n(e);
      var i = this._readableState;
      i.reading = false, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
    }
    function z(e) {
      if (!(this instanceof z))
        return new z(e);
      st.call(this, e), this._transformState = { afterTransform: xs.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, e && (typeof e.transform == "function" && (this._transform = e.transform), typeof e.flush == "function" && (this._flush = e.flush)), this.on("prefinish", Rs);
    }
    function Rs() {
      var e = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(t, r) {
        Kn(e, t, r);
      }) : Kn(this, null, null);
    }
    z.prototype.push = function(e, t) {
      return this._transformState.needTransform = false, st.prototype.push.call(this, e, t);
    };
    z.prototype._transform = function(e, t, r) {
      r(new bs("_transform()"));
    };
    z.prototype._write = function(e, t, r) {
      var n = this._transformState;
      if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
        var i = this._readableState;
        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
      }
    };
    z.prototype._read = function(e) {
      var t = this._transformState;
      t.writechunk !== null && !t.transforming ? (t.transforming = true, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = true;
    };
    z.prototype._destroy = function(e, t) {
      st.prototype._destroy.call(this, e, function(r) {
        t(r);
      });
    };
    function Kn(e, t, r) {
      if (t)
        return e.emit("error", t);
      if (r != null && e.push(r), e._writableState.length)
        throw new Es;
      if (e._transformState.transforming)
        throw new vs;
      return e.push(null);
    }
  });
  zn = b2((Vf, Xn) => {
    Xn.exports = Pe;
    var Yn = ir();
    Q()(Pe, Yn);
    function Pe(e) {
      if (!(this instanceof Pe))
        return new Pe(e);
      Yn.call(this, e);
    }
    Pe.prototype._transform = function(e, t, r) {
      r(null, e);
    };
  });
  ti = b2((Yf, ei) => {
    var or;
    function Ss(e) {
      var t = false;
      return function() {
        t || (t = true, e.apply(undefined, arguments));
      };
    }
    var Qn = fe().codes, Ts = Qn.ERR_MISSING_ARGS, As = Qn.ERR_STREAM_DESTROYED;
    function Zn(e) {
      if (e)
        throw e;
    }
    function Bs(e) {
      return e.setHeader && typeof e.abort == "function";
    }
    function Cs(e, t, r, n) {
      n = Ss(n);
      var i = false;
      e.on("close", function() {
        i = true;
      }), or === undefined && (or = et()), or(e, { readable: t, writable: r }, function(a2) {
        if (a2)
          return n(a2);
        i = true, n();
      });
      var o = false;
      return function(a2) {
        if (!i && !o) {
          if (o = true, Bs(e))
            return e.abort();
          if (typeof e.destroy == "function")
            return e.destroy();
          n(a2 || new As("pipe"));
        }
      };
    }
    function Jn(e) {
      e();
    }
    function Is(e, t) {
      return e.pipe(t);
    }
    function Ls(e) {
      return !e.length || typeof e[e.length - 1] != "function" ? Zn : e.pop();
    }
    function Ms() {
      for (var e = arguments.length, t = new Array(e), r = 0;r < e; r++)
        t[r] = arguments[r];
      var n = Ls(t);
      if (Array.isArray(t[0]) && (t = t[0]), t.length < 2)
        throw new Ts("streams");
      var i, o = t.map(function(a2, s2) {
        var u2 = s2 < t.length - 1, l2 = s2 > 0;
        return Cs(a2, u2, l2, function(h2) {
          i || (i = h2), h2 && o.forEach(Jn), !u2 && (o.forEach(Jn), n(i));
        });
      });
      return t.reduce(Is);
    }
    ei.exports = Ms;
  });
  ar = b2((q, ri) => {
    q = ri.exports = Ht();
    q.Stream = q;
    q.Readable = q;
    q.Writable = Dt();
    q.Duplex = ue();
    q.Transform = ir();
    q.PassThrough = zn();
    q.finished = et();
    q.pipeline = ti();
  });
  ur = b2((fr) => {
    var ni = gt(), Os = Q(), ii = ar(), ft = fr.readyStates = { UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4 }, sr = fr.IncomingMessage = function(e, t, r, n) {
      var i = this;
      if (ii.Readable.call(i), i._mode = r, i.headers = {}, i.rawHeaders = [], i.trailers = {}, i.rawTrailers = [], i.on("end", function() {
        process.nextTick(function() {
          i.emit("close");
        });
      }), r === "fetch") {
        let c2 = function() {
          a2.read().then(function(d2) {
            if (!i._destroyed) {
              if (n(d2.done), d2.done) {
                i.push(null);
                return;
              }
              i.push(Buffer.from(d2.value)), c2();
            }
          }).catch(function(d2) {
            n(true), i._destroyed || i.emit("error", d2);
          });
        };
        var h2 = c2;
        if (i._fetchResponse = t, i.url = t.url, i.statusCode = t.status, i.statusMessage = t.statusText, t.headers.forEach(function(d2, p2) {
          i.headers[p2.toLowerCase()] = d2, i.rawHeaders.push(p2, d2);
        }), ni.writableStream) {
          var o = new WritableStream({ write: function(d2) {
            return n(false), new Promise(function(p2, g2) {
              i._destroyed ? g2() : i.push(Buffer.from(d2)) ? p2() : i._resumeFetch = p2;
            });
          }, close: function() {
            n(true), i._destroyed || i.push(null);
          }, abort: function(d2) {
            n(true), i._destroyed || i.emit("error", d2);
          } });
          try {
            t.body.pipeTo(o).catch(function(d2) {
              n(true), i._destroyed || i.emit("error", d2);
            });
            return;
          } catch {
          }
        }
        var a2 = t.body.getReader();
        c2();
      } else {
        i._xhr = e, i._pos = 0, i.url = e.responseURL, i.statusCode = e.status, i.statusMessage = e.statusText;
        var s2 = e.getAllResponseHeaders().split(/\r?\n/);
        if (s2.forEach(function(c2) {
          var d2 = c2.match(/^([^:]+):\s*(.*)/);
          if (d2) {
            var p2 = d2[1].toLowerCase();
            p2 === "set-cookie" ? (i.headers[p2] === undefined && (i.headers[p2] = []), i.headers[p2].push(d2[2])) : i.headers[p2] !== undefined ? i.headers[p2] += ", " + d2[2] : i.headers[p2] = d2[2], i.rawHeaders.push(d2[1], d2[2]);
          }
        }), i._charset = "x-user-defined", !ni.overrideMimeType) {
          var u2 = i.rawHeaders["mime-type"];
          if (u2) {
            var l2 = u2.match(/;\s*charset=([^;])(;|$)/);
            l2 && (i._charset = l2[1].toLowerCase());
          }
          i._charset || (i._charset = "utf-8");
        }
      }
    };
    Os(sr, ii.Readable);
    sr.prototype._read = function() {
      var e = this, t = e._resumeFetch;
      t && (e._resumeFetch = null, t());
    };
    sr.prototype._onXHRProgress = function(e) {
      var t = this, r = t._xhr, n = null;
      switch (t._mode) {
        case "text":
          if (n = r.responseText, n.length > t._pos) {
            var i = n.substr(t._pos);
            if (t._charset === "x-user-defined") {
              for (var o = Buffer.alloc(i.length), a2 = 0;a2 < i.length; a2++)
                o[a2] = i.charCodeAt(a2) & 255;
              t.push(o);
            } else
              t.push(i, t._charset);
            t._pos = n.length;
          }
          break;
        case "arraybuffer":
          if (r.readyState !== ft.DONE || !r.response)
            break;
          n = r.response, t.push(Buffer.from(new Uint8Array(n)));
          break;
        case "moz-chunked-arraybuffer":
          if (n = r.response, r.readyState !== ft.LOADING || !n)
            break;
          t.push(Buffer.from(new Uint8Array(n)));
          break;
        case "ms-stream":
          if (n = r.response, r.readyState !== ft.LOADING)
            break;
          var s2 = new global.MSStreamReader;
          s2.onprogress = function() {
            s2.result.byteLength > t._pos && (t.push(Buffer.from(new Uint8Array(s2.result.slice(t._pos)))), t._pos = s2.result.byteLength);
          }, s2.onload = function() {
            e(true), t.push(null);
          }, s2.readAsArrayBuffer(n);
          break;
      }
      t._xhr.readyState === ft.DONE && t._mode !== "ms-stream" && (e(true), t.push(null));
    };
  });
  fi = b2((zf, si) => {
    var pe = gt(), Fs = Q(), ai = ur(), lr = ar(), Ns = ai.IncomingMessage, oi = ai.readyStates;
    function Us(e, t) {
      return pe.fetch && t ? "fetch" : pe.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : pe.msstream ? "ms-stream" : pe.arraybuffer && e ? "arraybuffer" : "text";
    }
    var M2 = si.exports = function(e) {
      var t = this;
      lr.Writable.call(t), t._opts = e, t._body = [], t._headers = {}, e.auth && t.setHeader("Authorization", "Basic " + Buffer.from(e.auth).toString("base64")), Object.keys(e.headers).forEach(function(i) {
        t.setHeader(i, e.headers[i]);
      });
      var r, n = true;
      if (e.mode === "disable-fetch" || "requestTimeout" in e && !pe.abortController)
        n = false, r = true;
      else if (e.mode === "prefer-streaming")
        r = false;
      else if (e.mode === "allow-wrong-content-type")
        r = !pe.overrideMimeType;
      else if (!e.mode || e.mode === "default" || e.mode === "prefer-fast")
        r = true;
      else
        throw new Error("Invalid value for opts.mode");
      t._mode = Us(r, n), t._fetchTimer = null, t._socketTimeout = null, t._socketTimer = null, t.on("finish", function() {
        t._onFinish();
      });
    };
    Fs(M2, lr.Writable);
    M2.prototype.setHeader = function(e, t) {
      var r = this, n = e.toLowerCase();
      qs.indexOf(n) === -1 && (r._headers[n] = { name: e, value: t });
    };
    M2.prototype.getHeader = function(e) {
      var t = this._headers[e.toLowerCase()];
      return t ? t.value : null;
    };
    M2.prototype.removeHeader = function(e) {
      var t = this;
      delete t._headers[e.toLowerCase()];
    };
    M2.prototype._onFinish = function() {
      var e = this;
      if (!e._destroyed) {
        var t = e._opts;
        "timeout" in t && t.timeout !== 0 && e.setTimeout(t.timeout);
        var r = e._headers, n = null;
        t.method !== "GET" && t.method !== "HEAD" && (n = new Blob(e._body, { type: (r["content-type"] || {}).value || "" }));
        var i = [];
        if (Object.keys(r).forEach(function(u2) {
          var l2 = r[u2].name, h2 = r[u2].value;
          Array.isArray(h2) ? h2.forEach(function(c2) {
            i.push([l2, c2]);
          }) : i.push([l2, h2]);
        }), e._mode === "fetch") {
          var o = null;
          if (pe.abortController) {
            var a2 = new AbortController;
            o = a2.signal, e._fetchAbortController = a2, "requestTimeout" in t && t.requestTimeout !== 0 && (e._fetchTimer = global.setTimeout(function() {
              e.emit("requestTimeout"), e._fetchAbortController && e._fetchAbortController.abort();
            }, t.requestTimeout));
          }
          global.fetch(e._opts.url, { method: e._opts.method, headers: i, body: n || undefined, mode: "cors", credentials: t.withCredentials ? "include" : "same-origin", signal: o }).then(function(u2) {
            e._fetchResponse = u2, e._resetTimers(false), e._connect();
          }, function(u2) {
            e._resetTimers(true), e._destroyed || e.emit("error", u2);
          });
        } else {
          var s2 = e._xhr = new global.XMLHttpRequest;
          try {
            s2.open(e._opts.method, e._opts.url, true);
          } catch (u2) {
            process.nextTick(function() {
              e.emit("error", u2);
            });
            return;
          }
          "responseType" in s2 && (s2.responseType = e._mode), "withCredentials" in s2 && (s2.withCredentials = !!t.withCredentials), e._mode === "text" && "overrideMimeType" in s2 && s2.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t && (s2.timeout = t.requestTimeout, s2.ontimeout = function() {
            e.emit("requestTimeout");
          }), i.forEach(function(u2) {
            s2.setRequestHeader(u2[0], u2[1]);
          }), e._response = null, s2.onreadystatechange = function() {
            switch (s2.readyState) {
              case oi.LOADING:
              case oi.DONE:
                e._onXHRProgress();
                break;
            }
          }, e._mode === "moz-chunked-arraybuffer" && (s2.onprogress = function() {
            e._onXHRProgress();
          }), s2.onerror = function() {
            e._destroyed || (e._resetTimers(true), e.emit("error", new Error("XHR error")));
          };
          try {
            s2.send(n);
          } catch (u2) {
            process.nextTick(function() {
              e.emit("error", u2);
            });
            return;
          }
        }
      }
    };
    function Ps(e) {
      try {
        var t = e.status;
        return t !== null && t !== 0;
      } catch {
        return false;
      }
    }
    M2.prototype._onXHRProgress = function() {
      var e = this;
      e._resetTimers(false), !(!Ps(e._xhr) || e._destroyed) && (e._response || e._connect(), e._response._onXHRProgress(e._resetTimers.bind(e)));
    };
    M2.prototype._connect = function() {
      var e = this;
      e._destroyed || (e._response = new Ns(e._xhr, e._fetchResponse, e._mode, e._resetTimers.bind(e)), e._response.on("error", function(t) {
        e.emit("error", t);
      }), e.emit("response", e._response));
    };
    M2.prototype._write = function(e, t, r) {
      var n = this;
      n._body.push(e), r();
    };
    M2.prototype._resetTimers = function(e) {
      var t = this;
      global.clearTimeout(t._socketTimer), t._socketTimer = null, e ? (global.clearTimeout(t._fetchTimer), t._fetchTimer = null) : t._socketTimeout && (t._socketTimer = global.setTimeout(function() {
        t.emit("timeout");
      }, t._socketTimeout));
    };
    M2.prototype.abort = M2.prototype.destroy = function(e) {
      var t = this;
      t._destroyed = true, t._resetTimers(true), t._response && (t._response._destroyed = true), t._xhr ? t._xhr.abort() : t._fetchAbortController && t._fetchAbortController.abort(), e && t.emit("error", e);
    };
    M2.prototype.end = function(e, t, r) {
      var n = this;
      typeof e == "function" && (r = e, e = undefined), lr.Writable.prototype.end.call(n, e, t, r);
    };
    M2.prototype.setTimeout = function(e, t) {
      var r = this;
      t && r.once("timeout", t), r._socketTimeout = e, r._resetTimers(false);
    };
    M2.prototype.flushHeaders = function() {
    };
    M2.prototype.setNoDelay = function() {
    };
    M2.prototype.setSocketKeepAlive = function() {
    };
    var qs = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
  });
  li = b2((Zf, ui) => {
    ui.exports = ks;
    var Ds = Object.prototype.hasOwnProperty;
    function ks() {
      for (var e = {}, t = 0;t < arguments.length; t++) {
        var r = arguments[t];
        for (var n in r)
          Ds.call(r, n) && (e[n] = r[n]);
      }
      return e;
    }
  });
  ci = b2((Jf, hi) => {
    hi.exports = { 100: "Continue", 101: "Switching Protocols", 102: "Processing", 200: "OK", 201: "Created", 202: "Accepted", 203: "Non-Authoritative Information", 204: "No Content", 205: "Reset Content", 206: "Partial Content", 207: "Multi-Status", 208: "Already Reported", 226: "IM Used", 300: "Multiple Choices", 301: "Moved Permanently", 302: "Found", 303: "See Other", 304: "Not Modified", 305: "Use Proxy", 307: "Temporary Redirect", 308: "Permanent Redirect", 400: "Bad Request", 401: "Unauthorized", 402: "Payment Required", 403: "Forbidden", 404: "Not Found", 405: "Method Not Allowed", 406: "Not Acceptable", 407: "Proxy Authentication Required", 408: "Request Timeout", 409: "Conflict", 410: "Gone", 411: "Length Required", 412: "Precondition Failed", 413: "Payload Too Large", 414: "URI Too Long", 415: "Unsupported Media Type", 416: "Range Not Satisfiable", 417: "Expectation Failed", 418: "I'm a teapot", 421: "Misdirected Request", 422: "Unprocessable Entity", 423: "Locked", 424: "Failed Dependency", 425: "Unordered Collection", 426: "Upgrade Required", 428: "Precondition Required", 429: "Too Many Requests", 431: "Request Header Fields Too Large", 451: "Unavailable For Legal Reasons", 500: "Internal Server Error", 501: "Not Implemented", 502: "Bad Gateway", 503: "Service Unavailable", 504: "Gateway Timeout", 505: "HTTP Version Not Supported", 506: "Variant Also Negotiates", 507: "Insufficient Storage", 508: "Loop Detected", 509: "Bandwidth Limit Exceeded", 510: "Not Extended", 511: "Network Authentication Required" };
  });
  _i = {};
  Er(_i, { decode: () => pr, default: () => Ys, encode: () => yr, toASCII: () => bi, toUnicode: () => mi, ucs2decode: () => dr, ucs2encode: () => gi });
  vi = vr(() => {
    pi = "-", js = /^xn--/, Hs = /[^\0-\x7F]/, Ws = /[\x2E\u3002\uFF0E\uFF61]/g, $s = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, hr = 36 - 1, K = Math.floor, cr = String.fromCharCode;
    gi = (e) => String.fromCodePoint(...e), Ks = function(e) {
      return e >= 48 && e < 58 ? 26 + (e - 48) : e >= 65 && e < 91 ? e - 65 : e >= 97 && e < 123 ? e - 97 : 36;
    }, di = function(e, t) {
      return e + 22 + 75 * (e < 26) - ((t != 0) << 5);
    }, wi = function(e, t, r) {
      let n = 0;
      for (e = r ? K(e / 700) : e >> 1, e += K(e / t);e > hr * 26 >> 1; n += 36)
        e = K(e / hr);
      return K(n + (hr + 1) * e / (e + 38));
    }, pr = function(e) {
      let t = [], r = e.length, n = 0, i = 128, o = 72, a2 = e.lastIndexOf(pi);
      a2 < 0 && (a2 = 0);
      for (let s2 = 0;s2 < a2; ++s2)
        e.charCodeAt(s2) >= 128 && oe("not-basic"), t.push(e.charCodeAt(s2));
      for (let s2 = a2 > 0 ? a2 + 1 : 0;s2 < r; ) {
        let u2 = n;
        for (let h2 = 1, c2 = 36;; c2 += 36) {
          s2 >= r && oe("invalid-input");
          let d2 = Ks(e.charCodeAt(s2++));
          d2 >= 36 && oe("invalid-input"), d2 > K((2147483647 - n) / h2) && oe("overflow"), n += d2 * h2;
          let p2 = c2 <= o ? 1 : c2 >= o + 26 ? 26 : c2 - o;
          if (d2 < p2)
            break;
          let g2 = 36 - p2;
          h2 > K(2147483647 / g2) && oe("overflow"), h2 *= g2;
        }
        let l2 = t.length + 1;
        o = wi(n - u2, l2, u2 == 0), K(n / l2) > 2147483647 - i && oe("overflow"), i += K(n / l2), n %= l2, t.splice(n++, 0, i);
      }
      return String.fromCodePoint(...t);
    }, yr = function(e) {
      let t = [];
      e = dr(e);
      let r = e.length, n = 128, i = 0, o = 72;
      for (let u2 of e)
        u2 < 128 && t.push(cr(u2));
      let a2 = t.length, s2 = a2;
      for (a2 && t.push(pi);s2 < r; ) {
        let u2 = 2147483647;
        for (let h2 of e)
          h2 >= n && h2 < u2 && (u2 = h2);
        let l2 = s2 + 1;
        u2 - n > K((2147483647 - i) / l2) && oe("overflow"), i += (u2 - n) * l2, n = u2;
        for (let h2 of e)
          if (h2 < n && ++i > 2147483647 && oe("overflow"), h2 === n) {
            let c2 = i;
            for (let d2 = 36;; d2 += 36) {
              let p2 = d2 <= o ? 1 : d2 >= o + 26 ? 26 : d2 - o;
              if (c2 < p2)
                break;
              let g2 = c2 - p2, E2 = 36 - p2;
              t.push(cr(di(p2 + g2 % E2, 0))), c2 = K(g2 / E2);
            }
            t.push(cr(di(c2, 0))), o = wi(i, l2, s2 === a2), i = 0, ++s2;
          }
        ++i, ++n;
      }
      return t.join("");
    }, mi = function(e) {
      return yi(e, function(t) {
        return js.test(t) ? pr(t.slice(4).toLowerCase()) : t;
      });
    }, bi = function(e) {
      return yi(e, function(t) {
        return Hs.test(t) ? "xn--" + yr(t) : t;
      });
    }, Vs = { version: "2.1.0", ucs2: { decode: dr, encode: gi }, decode: pr, encode: yr, toASCII: bi, toUnicode: mi }, Ys = Vs;
  });
  xi = b2((Qf, Ei) => {
    Ei.exports = { isString: function(e) {
      return typeof e == "string";
    }, isObject: function(e) {
      return typeof e == "object" && e !== null;
    }, isNull: function(e) {
      return e === null;
    }, isNullOrUndefined: function(e) {
      return e == null;
    } };
  });
  Si = b2((eu, Ri) => {
    var Xs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, zs = Object.keys || function() {
      var e = Object.prototype.hasOwnProperty, t = !{ toString: null }.propertyIsEnumerable("toString"), r = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], n = r.length;
      return function(i) {
        if (typeof i != "function" && ((typeof i > "u" ? "undefined" : Xs(i)) !== "object" || i === null))
          throw new TypeError("Object.keys called on non-object");
        var o = [], a2, s2;
        for (a2 in i)
          e.call(i, a2) && o.push(a2);
        if (t)
          for (s2 = 0;s2 < n; s2++)
            e.call(i, r[s2]) && o.push(r[s2]);
        return o;
      };
    }();
    Ri.exports = zs;
  });
  Ni = b2((tu, Fi) => {
    var Li = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, lt = Fi.exports = { unescapeBuffer: ef, unescape: Oi, escape: rf, stringify: Bi, encode: Bi, parse: Ii, decode: Ii }, Zs = _e().Buffer, Js = Si(), Qs = function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    }, Ti = function(t, r, n) {
      var i;
      if (t == null)
        throw new TypeError('"arr" is null or not defined');
      var o = Object(t), a2 = o.length >>> 0;
      if (a2 === 0)
        return -1;
      var s2 = n | 0;
      if (s2 >= a2)
        return -1;
      for (i = Math.max(s2 >= 0 ? s2 : a2 - Math.abs(s2), 0);i < a2; ) {
        if (i in o && o[i] === r)
          return i;
        i++;
      }
      return -1;
    };
    function Mi() {
    }
    Mi.prototype = Object.create ? Object.create(null) : {};
    var Ai = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    function ef(e, t) {
      for (var r = Zs.allocUnsafe(e.length), n = 0, i, o, a2, s2, u2 = 0, l2 = 0;; u2++) {
        if (u2 < e.length)
          s2 = e.charCodeAt(u2);
        else {
          n > 0 && (r[l2++] = 37, n === 2 && (r[l2++] = a2));
          break;
        }
        switch (n) {
          case 0:
            switch (s2) {
              case 37:
                i = 0, o = 0, n = 1;
                break;
              case 43:
                t && (s2 = 32);
              default:
                r[l2++] = s2;
                break;
            }
            break;
          case 1:
            if (a2 = s2, i = Ai[s2], !(i >= 0)) {
              r[l2++] = 37, r[l2++] = s2, n = 0;
              break;
            }
            n = 2;
            break;
          case 2:
            if (n = 0, o = Ai[s2], !(o >= 0)) {
              r[l2++] = 37, r[l2++] = a2, r[l2++] = s2;
              break;
            }
            r[l2++] = 16 * i + o;
            break;
        }
      }
      return r.slice(0, l2);
    }
    function Oi(e, t) {
      try {
        return decodeURIComponent(e);
      } catch {
        return lt.unescapeBuffer(e, t).toString();
      }
    }
    var k2 = [];
    for (Se = 0;Se < 256; ++Se)
      k2[Se] = "%" + ((Se < 16 ? "0" : "") + Se.toString(16)).toUpperCase();
    var Se, tf = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0];
    function rf(e) {
      typeof e != "string" && ((typeof e > "u" ? "undefined" : Li(e)) === "object" ? e = String(e) : e += "");
      for (var t = "", r = 0, n = 0;n < e.length; ++n) {
        var i = e.charCodeAt(n);
        if (i < 128) {
          if (tf[i] === 1)
            continue;
          r < n && (t += e.slice(r, n)), r = n + 1, t += k2[i];
          continue;
        }
        if (r < n && (t += e.slice(r, n)), i < 2048) {
          r = n + 1, t += k2[192 | i >> 6] + k2[128 | i & 63];
          continue;
        }
        if (i < 55296 || i >= 57344) {
          r = n + 1, t += k2[224 | i >> 12] + k2[128 | i >> 6 & 63] + k2[128 | i & 63];
          continue;
        }
        ++n;
        var o;
        if (n < e.length)
          o = e.charCodeAt(n) & 1023;
        else
          throw new URIError("URI malformed");
        r = n + 1, i = 65536 + ((i & 1023) << 10 | o), t += k2[240 | i >> 18] + k2[128 | i >> 12 & 63] + k2[128 | i >> 6 & 63] + k2[128 | i & 63];
      }
      return r === 0 ? e : r < e.length ? t + e.slice(r) : t;
    }
    function gr(e) {
      return typeof e == "string" ? e : typeof e == "number" && isFinite(e) ? "" + e : typeof e == "boolean" ? e ? "true" : "false" : "";
    }
    function Bi(e, t, r, n) {
      t = t || "&", r = r || "=";
      var i = lt.escape;
      if (n && typeof n.encodeURIComponent == "function" && (i = n.encodeURIComponent), e !== null && (typeof e > "u" ? "undefined" : Li(e)) === "object") {
        for (var o = Js(e), a2 = o.length, s2 = a2 - 1, u2 = "", l2 = 0;l2 < a2; ++l2) {
          var h2 = o[l2], c2 = e[h2], d2 = i(gr(h2)) + r;
          if (Qs(c2)) {
            for (var p2 = c2.length, g2 = p2 - 1, E2 = 0;E2 < p2; ++E2)
              u2 += d2 + i(gr(c2[E2])), E2 < g2 && (u2 += t);
            p2 && l2 < s2 && (u2 += t);
          } else
            u2 += d2 + i(gr(c2)), l2 < s2 && (u2 += t);
        }
        return u2;
      }
      return "";
    }
    function Ci(e) {
      if (e.length === 0)
        return [];
      if (e.length === 1)
        return [e.charCodeAt(0)];
      for (var t = [], r = 0;r < e.length; ++r)
        t[t.length] = e.charCodeAt(r);
      return t;
    }
    var nf = [38], of = [61];
    function Ii(e, t, r, n) {
      var i = new Mi;
      if (typeof e != "string" || e.length === 0)
        return i;
      var o = t ? Ci(t + "") : nf, a2 = r ? Ci(r + "") : of, s2 = o.length, u2 = a2.length, l2 = 1000;
      n && typeof n.maxKeys == "number" && (l2 = n.maxKeys > 0 ? n.maxKeys : -1);
      var h2 = lt.unescape;
      n && typeof n.decodeURIComponent == "function" && (h2 = n.decodeURIComponent);
      for (var c2 = h2 !== Oi, d2 = [], p2 = 0, g2 = 0, E2 = 0, v = 0, m2 = "", y2 = "", R = c2, I2 = c2, T = 0, S = 0;S < e.length; ++S) {
        var B2 = e.charCodeAt(S);
        if (B2 === o[E2]) {
          if (++E2 === s2) {
            var F = S - E2 + 1;
            if (v < u2 ? g2 < F && (m2 += e.slice(g2, F)) : g2 < F && (y2 += e.slice(g2, F)), R && (m2 = ut(m2, h2)), I2 && (y2 = ut(y2, h2)), m2 || y2 || g2 - p2 > s2 || S === 0)
              if (Ti(d2, m2) === -1)
                i[m2] = y2, d2[d2.length] = m2;
              else {
                var L2 = i[m2] || "";
                L2.pop ? L2[L2.length] = y2 : L2 && (i[m2] = [L2, y2]);
              }
            else
              S === 1 && delete i[m2];
            if (--l2 === 0)
              break;
            R = I2 = c2, T = 0, m2 = y2 = "", p2 = g2, g2 = S + 1, E2 = v = 0;
          }
          continue;
        } else
          E2 = 0, I2 || (B2 === 37 ? T = 1 : T > 0 && (B2 >= 48 && B2 <= 57 || B2 >= 65 && B2 <= 70 || B2 >= 97 && B2 <= 102) ? ++T === 3 && (I2 = true) : T = 0);
        if (v < u2)
          if (B2 === a2[v]) {
            if (++v === u2) {
              var Y = S - v + 1;
              g2 < Y && (m2 += e.slice(g2, Y)), T = 0, g2 = S + 1;
            }
            continue;
          } else
            v = 0, R || (B2 === 37 ? T = 1 : T > 0 && (B2 >= 48 && B2 <= 57 || B2 >= 65 && B2 <= 70 || B2 >= 97 && B2 <= 102) ? ++T === 3 && (R = true) : T = 0);
        B2 === 43 && (v < u2 ? (g2 < S && (m2 += e.slice(g2, S)), m2 += "%20", R = true) : (g2 < S && (y2 += e.slice(g2, S)), y2 += "%20", I2 = true), g2 = S + 1);
      }
      if (l2 !== 0 && (g2 < e.length || v > 0))
        if (g2 < e.length && (v < u2 ? m2 += e.slice(g2) : E2 < s2 && (y2 += e.slice(g2))), R && (m2 = ut(m2, h2)), I2 && (y2 = ut(y2, h2)), Ti(d2, m2) === -1)
          i[m2] = y2, d2[d2.length] = m2;
        else {
          var Z = i[m2];
          Z.pop ? Z[Z.length] = y2 : i[m2] = [Z, y2];
        }
      return i;
    }
    function ut(e, t) {
      try {
        return t(e);
      } catch {
        return lt.unescape(e, true);
      }
    }
  });
  Di = b2((Ae) => {
    var af = (vi(), dt(_i)), V2 = xi();
    Ae.parse = qe;
    Ae.resolve = gf;
    Ae.resolveObject = wf;
    Ae.format = yf;
    Ae.Url = D;
    function D() {
      this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
    }
    var sf = /^([a-z0-9.+-]+:)/i, ff = /:[0-9]*$/, uf = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, lf = ["<", ">", '"', "`", " ", "\r", `
`, "	"], hf = ["{", "}", "|", "\\", "^", "`"].concat(lf), wr = ["'"].concat(hf), Ui = ["%", "/", "?", ";", "#"].concat(wr), Pi = ["/", "?", "#"], cf = 255, qi = /^[+a-z0-9A-Z_-]{0,63}$/, df = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, pf = { javascript: true, "javascript:": true }, mr = { javascript: true, "javascript:": true }, Te = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, br = Ni();
    function qe(e, t, r) {
      if (e && V2.isObject(e) && e instanceof D)
        return e;
      var n = new D;
      return n.parse(e, t, r), n;
    }
    D.prototype.parse = function(e, t, r) {
      if (!V2.isString(e))
        throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
      var n = e.indexOf("?"), i = n !== -1 && n < e.indexOf("#") ? "?" : "#", o = e.split(i), a2 = /\\/g;
      o[0] = o[0].replace(a2, "/"), e = o.join(i);
      var s2 = e;
      if (s2 = s2.trim(), !r && e.split("#").length === 1) {
        var u2 = uf.exec(s2);
        if (u2)
          return this.path = s2, this.href = s2, this.pathname = u2[1], u2[2] ? (this.search = u2[2], t ? this.query = br.parse(this.search.substr(1)) : this.query = this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
      }
      var l2 = sf.exec(s2);
      if (l2) {
        l2 = l2[0];
        var h2 = l2.toLowerCase();
        this.protocol = h2, s2 = s2.substr(l2.length);
      }
      if (r || l2 || s2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var c2 = s2.substr(0, 2) === "//";
        c2 && !(l2 && mr[l2]) && (s2 = s2.substr(2), this.slashes = true);
      }
      if (!mr[l2] && (c2 || l2 && !Te[l2])) {
        for (var d2 = -1, p2 = 0;p2 < Pi.length; p2++) {
          var g2 = s2.indexOf(Pi[p2]);
          g2 !== -1 && (d2 === -1 || g2 < d2) && (d2 = g2);
        }
        var E2, v;
        d2 === -1 ? v = s2.lastIndexOf("@") : v = s2.lastIndexOf("@", d2), v !== -1 && (E2 = s2.slice(0, v), s2 = s2.slice(v + 1), this.auth = decodeURIComponent(E2)), d2 = -1;
        for (var p2 = 0;p2 < Ui.length; p2++) {
          var g2 = s2.indexOf(Ui[p2]);
          g2 !== -1 && (d2 === -1 || g2 < d2) && (d2 = g2);
        }
        d2 === -1 && (d2 = s2.length), this.host = s2.slice(0, d2), s2 = s2.slice(d2), this.parseHost(), this.hostname = this.hostname || "";
        var m2 = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!m2)
          for (var y2 = this.hostname.split(/\./), p2 = 0, R = y2.length;p2 < R; p2++) {
            var I2 = y2[p2];
            if (!!I2 && !I2.match(qi)) {
              for (var T = "", S = 0, B2 = I2.length;S < B2; S++)
                I2.charCodeAt(S) > 127 ? T += "x" : T += I2[S];
              if (!T.match(qi)) {
                var F = y2.slice(0, p2), L2 = y2.slice(p2 + 1), Y = I2.match(df);
                Y && (F.push(Y[1]), L2.unshift(Y[2])), L2.length && (s2 = "/" + L2.join(".") + s2), this.hostname = F.join(".");
                break;
              }
            }
          }
        this.hostname.length > cf ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), m2 || (this.hostname = af.toASCII(this.hostname));
        var Z = this.port ? ":" + this.port : "", Wi = this.hostname || "";
        this.host = Wi + Z, this.href += this.host, m2 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), s2[0] !== "/" && (s2 = "/" + s2));
      }
      if (!pf[h2])
        for (var p2 = 0, R = wr.length;p2 < R; p2++) {
          var Be = wr[p2];
          if (s2.indexOf(Be) !== -1) {
            var ht = encodeURIComponent(Be);
            ht === Be && (ht = escape(Be)), s2 = s2.split(Be).join(ht);
          }
        }
      var ct = s2.indexOf("#");
      ct !== -1 && (this.hash = s2.substr(ct), s2 = s2.slice(0, ct));
      var De = s2.indexOf("?");
      if (De !== -1 ? (this.search = s2.substr(De), this.query = s2.substr(De + 1), t && (this.query = br.parse(this.query)), s2 = s2.slice(0, De)) : t && (this.search = "", this.query = {}), s2 && (this.pathname = s2), Te[h2] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
        var Z = this.pathname || "", $i = this.search || "";
        this.path = Z + $i;
      }
      return this.href = this.format(), this;
    };
    function yf(e) {
      return V2.isString(e) && (e = qe(e)), e instanceof D ? e.format() : D.prototype.format.call(e);
    }
    D.prototype.format = function() {
      var e = this.auth || "";
      e && (e = encodeURIComponent(e), e = e.replace(/%3A/i, ":"), e += "@");
      var t = this.protocol || "", r = this.pathname || "", n = this.hash || "", i = false, o = "";
      this.host ? i = e + this.host : this.hostname && (i = e + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (i += ":" + this.port)), this.query && V2.isObject(this.query) && Object.keys(this.query).length && (o = br.stringify(this.query));
      var a2 = this.search || o && "?" + o || "";
      return t && t.substr(-1) !== ":" && (t += ":"), this.slashes || (!t || Te[t]) && i !== false ? (i = "//" + (i || ""), r && r.charAt(0) !== "/" && (r = "/" + r)) : i || (i = ""), n && n.charAt(0) !== "#" && (n = "#" + n), a2 && a2.charAt(0) !== "?" && (a2 = "?" + a2), r = r.replace(/[?#]/g, function(s2) {
        return encodeURIComponent(s2);
      }), a2 = a2.replace("#", "%23"), t + i + r + a2 + n;
    };
    function gf(e, t) {
      return qe(e, false, true).resolve(t);
    }
    D.prototype.resolve = function(e) {
      return this.resolveObject(qe(e, false, true)).format();
    };
    function wf(e, t) {
      return e ? qe(e, false, true).resolveObject(t) : t;
    }
    D.prototype.resolveObject = function(e) {
      if (V2.isString(e)) {
        var t = new D;
        t.parse(e, false, true), e = t;
      }
      for (var r = new D, n = Object.keys(this), i = 0;i < n.length; i++) {
        var o = n[i];
        r[o] = this[o];
      }
      if (r.hash = e.hash, e.href === "")
        return r.href = r.format(), r;
      if (e.slashes && !e.protocol) {
        for (var a2 = Object.keys(e), s2 = 0;s2 < a2.length; s2++) {
          var u2 = a2[s2];
          u2 !== "protocol" && (r[u2] = e[u2]);
        }
        return Te[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
      }
      if (e.protocol && e.protocol !== r.protocol) {
        if (!Te[e.protocol]) {
          for (var l2 = Object.keys(e), h2 = 0;h2 < l2.length; h2++) {
            var c2 = l2[h2];
            r[c2] = e[c2];
          }
          return r.href = r.format(), r;
        }
        if (r.protocol = e.protocol, !e.host && !mr[e.protocol]) {
          for (var R = (e.pathname || "").split("/");R.length && !(e.host = R.shift()); )
            ;
          e.host || (e.host = ""), e.hostname || (e.hostname = ""), R[0] !== "" && R.unshift(""), R.length < 2 && R.unshift(""), r.pathname = R.join("/");
        } else
          r.pathname = e.pathname;
        if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
          var d2 = r.pathname || "", p2 = r.search || "";
          r.path = d2 + p2;
        }
        return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
      }
      var g2 = r.pathname && r.pathname.charAt(0) === "/", E2 = e.host || e.pathname && e.pathname.charAt(0) === "/", v = E2 || g2 || r.host && e.pathname, m2 = v, y2 = r.pathname && r.pathname.split("/") || [], R = e.pathname && e.pathname.split("/") || [], I2 = r.protocol && !Te[r.protocol];
      if (I2 && (r.hostname = "", r.port = null, r.host && (y2[0] === "" ? y2[0] = r.host : y2.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && (R[0] === "" ? R[0] = e.host : R.unshift(e.host)), e.host = null), v = v && (R[0] === "" || y2[0] === "")), E2)
        r.host = e.host || e.host === "" ? e.host : r.host, r.hostname = e.hostname || e.hostname === "" ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, y2 = R;
      else if (R.length)
        y2 || (y2 = []), y2.pop(), y2 = y2.concat(R), r.search = e.search, r.query = e.query;
      else if (!V2.isNullOrUndefined(e.search)) {
        if (I2) {
          r.hostname = r.host = y2.shift();
          var T = r.host && r.host.indexOf("@") > 0 ? r.host.split("@") : false;
          T && (r.auth = T.shift(), r.host = r.hostname = T.shift());
        }
        return r.search = e.search, r.query = e.query, (!V2.isNull(r.pathname) || !V2.isNull(r.search)) && (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
      }
      if (!y2.length)
        return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
      for (var S = y2.slice(-1)[0], B2 = (r.host || e.host || y2.length > 1) && (S === "." || S === "..") || S === "", F = 0, L2 = y2.length;L2 >= 0; L2--)
        S = y2[L2], S === "." ? y2.splice(L2, 1) : S === ".." ? (y2.splice(L2, 1), F++) : F && (y2.splice(L2, 1), F--);
      if (!v && !m2)
        for (;F--; F)
          y2.unshift("..");
      v && y2[0] !== "" && (!y2[0] || y2[0].charAt(0) !== "/") && y2.unshift(""), B2 && y2.join("/").substr(-1) !== "/" && y2.push("");
      var Y = y2[0] === "" || y2[0] && y2[0].charAt(0) === "/";
      if (I2) {
        r.hostname = r.host = Y ? "" : y2.length ? y2.shift() : "";
        var T = r.host && r.host.indexOf("@") > 0 ? r.host.split("@") : false;
        T && (r.auth = T.shift(), r.host = r.hostname = T.shift());
      }
      return v = v || r.host && y2.length, v && !Y && y2.unshift(""), y2.length ? r.pathname = y2.join("/") : (r.pathname = null, r.path = null), (!V2.isNull(r.pathname) || !V2.isNull(r.search)) && (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
    };
    D.prototype.parseHost = function() {
      var e = this.host, t = ff.exec(e);
      t && (t = t[0], t !== ":" && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
    };
  });
  Hi = b2((ji) => {
    var ki = fi(), mf = ur(), bf = li(), _f = ci(), vf = Di(), j2 = ji;
    j2.request = function(e, t) {
      typeof e == "string" ? e = vf.parse(e) : e = bf(e);
      var r = global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "", n = e.protocol || r, i = e.hostname || e.host, o = e.port, a2 = e.path || "/";
      i && i.indexOf(":") !== -1 && (i = "[" + i + "]"), e.url = (i ? n + "//" + i : "") + (o ? ":" + o : "") + a2, e.method = (e.method || "GET").toUpperCase(), e.headers = e.headers || {};
      var s2 = new ki(e);
      return t && s2.on("response", t), s2;
    };
    j2.get = function(t, r) {
      var n = j2.request(t, r);
      return n.end(), n;
    };
    j2.ClientRequest = ki;
    j2.IncomingMessage = mf.IncomingMessage;
    j2.Agent = function() {
    };
    j2.Agent.defaultMaxSockets = 4;
    j2.globalAgent = new j2.Agent;
    j2.STATUS_CODES = _f;
    j2.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
  });
  _r = Rr(Hi());
  iu = _r.default;
  ({ request: ou, get: au, ClientRequest: su, IncomingMessage: fu, Agent: uu, globalAgent: lu, STATUS_CODES: hu, METHODS: cu } = _r.default);
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
});

// node:https
var exports_https = {};
__export(exports_https, {
  default: () => {
    {
      return Cf;
    }
  }
});
var oe2, Js, vi2, _r2, Ji, He, Qi, eo, to, ro, Cr, b3, mt, We, $e, bt2, _t2, xt, Q2, Tt, At, $r, Gr, _e2, qt, cn, jt, fe2, Wt, _n, Kt2, ue2, Ln, Fn, Qt, nt, er, it, Dn, jn, Xt, hr2, ri, si, dr2, gr, pi2, gi2, mi2, Ti, _i2, Ys2, Xs, zs, Zs, mr, K2, br, Ei, Qs, bi2, xi2, vr2, Er2, Ri, Si2, ef, tf, Ai, Ii, Li, ji, Ar, Vi2, Ir, ke2, Cf;
var init_https = __esm(() => {
  oe2 = function(e) {
    throw new RangeError(Zs[e]);
  };
  Js = function(e, t) {
    let r = [], n = e.length;
    for (;n--; )
      r[n] = t(e[n]);
    return r;
  };
  vi2 = function(e, t) {
    let r = e.split("@"), n = "";
    r.length > 1 && (n = r[0] + "@", e = r[1]), e = e.replace(zs, ".");
    let i = e.split("."), o = Js(i, t).join(".");
    return n + o;
  };
  _r2 = function(e) {
    let t = [], r = 0, n = e.length;
    for (;r < n; ) {
      let i = e.charCodeAt(r++);
      if (i >= 55296 && i <= 56319 && r < n) {
        let o = e.charCodeAt(r++);
        (o & 64512) == 56320 ? t.push(((i & 1023) << 10) + (o & 1023) + 65536) : (t.push(i), r--);
      } else
        t.push(i);
    }
    return t;
  };
  Ji = Object.create;
  He = Object.defineProperty;
  Qi = Object.getOwnPropertyDescriptor;
  eo = Object.getOwnPropertyNames;
  to = Object.getPrototypeOf;
  ro = Object.prototype.hasOwnProperty;
  Cr = (e, t) => () => (e && (t = e(e = 0)), t);
  b3 = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
  mt = (e, t) => {
    for (var r in t)
      He(e, r, { get: t[r], enumerable: true });
  };
  We = (e, t, r, n) => {
    if (t && typeof t == "object" || typeof t == "function")
      for (let i of eo(t))
        !ro.call(e, i) && i !== r && He(e, i, { get: () => t[i], enumerable: !(n = Qi(t, i)) || n.enumerable });
    return e;
  };
  $e = (e, t, r) => (We(e, t, "default"), r && We(r, t, "default"));
  bt2 = (e, t, r) => (r = e != null ? Ji(to(e)) : {}, We(t || !e || !e.__esModule ? He(r, "default", { value: e, enumerable: true }) : r, e));
  _t2 = (e) => We(He({}, "__esModule", { value: true }), e);
  xt = b3((N2) => {
    N2.fetch = Ie(global.fetch) && Ie(global.ReadableStream);
    N2.writableStream = Ie(global.WritableStream);
    N2.abortController = Ie(global.AbortController);
    var J;
    function vt() {
      if (J !== undefined)
        return J;
      if (global.XMLHttpRequest) {
        J = new global.XMLHttpRequest;
        try {
          J.open("GET", global.XDomainRequest ? "/" : "https://example.com");
        } catch {
          J = null;
        }
      } else
        J = null;
      return J;
    }
    function Et(e) {
      var t = vt();
      if (!t)
        return false;
      try {
        return t.responseType = e, t.responseType === e;
      } catch {
      }
      return false;
    }
    N2.arraybuffer = N2.fetch || Et("arraybuffer");
    N2.msstream = !N2.fetch && Et("ms-stream");
    N2.mozchunkedarraybuffer = !N2.fetch && Et("moz-chunked-arraybuffer");
    N2.overrideMimeType = N2.fetch || (vt() ? Ie(vt().overrideMimeType) : false);
    function Ie(e) {
      return typeof e == "function";
    }
    J = null;
  });
  Q2 = b3((Of, Rt) => {
    typeof Object.create == "function" ? Rt.exports = function(t, r) {
      r && (t.super_ = r, t.prototype = Object.create(r.prototype, { constructor: { value: t, enumerable: false, writable: true, configurable: true } }));
    } : Rt.exports = function(t, r) {
      if (r) {
        t.super_ = r;
        var n = function() {
        };
        n.prototype = r.prototype, t.prototype = new n, t.prototype.constructor = t;
      }
    };
  });
  Tt = b3((Ff, St) => {
    var ye = typeof Reflect == "object" ? Reflect : null, Lr = ye && typeof ye.apply == "function" ? ye.apply : function(t, r, n) {
      return Function.prototype.apply.call(t, r, n);
    }, Ge;
    ye && typeof ye.ownKeys == "function" ? Ge = ye.ownKeys : Object.getOwnPropertySymbols ? Ge = function(t) {
      return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));
    } : Ge = function(t) {
      return Object.getOwnPropertyNames(t);
    };
    function no(e) {
      console && console.warn && console.warn(e);
    }
    var Or = Number.isNaN || function(t) {
      return t !== t;
    };
    function x2() {
      x2.init.call(this);
    }
    St.exports = x2;
    St.exports.once = so;
    x2.EventEmitter = x2;
    x2.prototype._events = undefined;
    x2.prototype._eventsCount = 0;
    x2.prototype._maxListeners = undefined;
    var Mr = 10;
    function Ke(e) {
      if (typeof e != "function")
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
    }
    Object.defineProperty(x2, "defaultMaxListeners", { enumerable: true, get: function() {
      return Mr;
    }, set: function(e) {
      if (typeof e != "number" || e < 0 || Or(e))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
      Mr = e;
    } });
    x2.init = function() {
      (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
    };
    x2.prototype.setMaxListeners = function(t) {
      if (typeof t != "number" || t < 0 || Or(t))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
      return this._maxListeners = t, this;
    };
    function Fr(e) {
      return e._maxListeners === undefined ? x2.defaultMaxListeners : e._maxListeners;
    }
    x2.prototype.getMaxListeners = function() {
      return Fr(this);
    };
    x2.prototype.emit = function(t) {
      for (var r = [], n = 1;n < arguments.length; n++)
        r.push(arguments[n]);
      var i = t === "error", o = this._events;
      if (o !== undefined)
        i = i && o.error === undefined;
      else if (!i)
        return false;
      if (i) {
        var a2;
        if (r.length > 0 && (a2 = r[0]), a2 instanceof Error)
          throw a2;
        var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
        throw s2.context = a2, s2;
      }
      var u2 = o[t];
      if (u2 === undefined)
        return false;
      if (typeof u2 == "function")
        Lr(u2, this, r);
      else
        for (var l2 = u2.length, h2 = Dr2(u2, l2), n = 0;n < l2; ++n)
          Lr(h2[n], this, r);
      return true;
    };
    function Nr(e, t, r, n) {
      var i, o, a2;
      if (Ke(r), o = e._events, o === undefined ? (o = e._events = Object.create(null), e._eventsCount = 0) : (o.newListener !== undefined && (e.emit("newListener", t, r.listener ? r.listener : r), o = e._events), a2 = o[t]), a2 === undefined)
        a2 = o[t] = r, ++e._eventsCount;
      else if (typeof a2 == "function" ? a2 = o[t] = n ? [r, a2] : [a2, r] : n ? a2.unshift(r) : a2.push(r), i = Fr(e), i > 0 && a2.length > i && !a2.warned) {
        a2.warned = true;
        var s2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        s2.name = "MaxListenersExceededWarning", s2.emitter = e, s2.type = t, s2.count = a2.length, no(s2);
      }
      return e;
    }
    x2.prototype.addListener = function(t, r) {
      return Nr(this, t, r, false);
    };
    x2.prototype.on = x2.prototype.addListener;
    x2.prototype.prependListener = function(t, r) {
      return Nr(this, t, r, true);
    };
    function io() {
      if (!this.fired)
        return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function Ur(e, t, r) {
      var n = { fired: false, wrapFn: undefined, target: e, type: t, listener: r }, i = io.bind(n);
      return i.listener = r, n.wrapFn = i, i;
    }
    x2.prototype.once = function(t, r) {
      return Ke(r), this.on(t, Ur(this, t, r)), this;
    };
    x2.prototype.prependOnceListener = function(t, r) {
      return Ke(r), this.prependListener(t, Ur(this, t, r)), this;
    };
    x2.prototype.removeListener = function(t, r) {
      var n, i, o, a2, s2;
      if (Ke(r), i = this._events, i === undefined)
        return this;
      if (n = i[t], n === undefined)
        return this;
      if (n === r || n.listener === r)
        --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[t], i.removeListener && this.emit("removeListener", t, n.listener || r));
      else if (typeof n != "function") {
        for (o = -1, a2 = n.length - 1;a2 >= 0; a2--)
          if (n[a2] === r || n[a2].listener === r) {
            s2 = n[a2].listener, o = a2;
            break;
          }
        if (o < 0)
          return this;
        o === 0 ? n.shift() : oo(n, o), n.length === 1 && (i[t] = n[0]), i.removeListener !== undefined && this.emit("removeListener", t, s2 || r);
      }
      return this;
    };
    x2.prototype.off = x2.prototype.removeListener;
    x2.prototype.removeAllListeners = function(t) {
      var r, n, i;
      if (n = this._events, n === undefined)
        return this;
      if (n.removeListener === undefined)
        return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[t] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[t]), this;
      if (arguments.length === 0) {
        var o = Object.keys(n), a2;
        for (i = 0;i < o.length; ++i)
          a2 = o[i], a2 !== "removeListener" && this.removeAllListeners(a2);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
      }
      if (r = n[t], typeof r == "function")
        this.removeListener(t, r);
      else if (r !== undefined)
        for (i = r.length - 1;i >= 0; i--)
          this.removeListener(t, r[i]);
      return this;
    };
    function Pr(e, t, r) {
      var n = e._events;
      if (n === undefined)
        return [];
      var i = n[t];
      return i === undefined ? [] : typeof i == "function" ? r ? [i.listener || i] : [i] : r ? ao(i) : Dr2(i, i.length);
    }
    x2.prototype.listeners = function(t) {
      return Pr(this, t, true);
    };
    x2.prototype.rawListeners = function(t) {
      return Pr(this, t, false);
    };
    x2.listenerCount = function(e, t) {
      return typeof e.listenerCount == "function" ? e.listenerCount(t) : qr2.call(e, t);
    };
    x2.prototype.listenerCount = qr2;
    function qr2(e) {
      var t = this._events;
      if (t !== undefined) {
        var r = t[e];
        if (typeof r == "function")
          return 1;
        if (r !== undefined)
          return r.length;
      }
      return 0;
    }
    x2.prototype.eventNames = function() {
      return this._eventsCount > 0 ? Ge(this._events) : [];
    };
    function Dr2(e, t) {
      for (var r = new Array(t), n = 0;n < t; ++n)
        r[n] = e[n];
      return r;
    }
    function oo(e, t) {
      for (;t + 1 < e.length; t++)
        e[t] = e[t + 1];
      e.pop();
    }
    function ao(e) {
      for (var t = new Array(e.length), r = 0;r < t.length; ++r)
        t[r] = e[r].listener || e[r];
      return t;
    }
    function so(e, t) {
      return new Promise(function(r, n) {
        function i(a2) {
          e.removeListener(t, o), n(a2);
        }
        function o() {
          typeof e.removeListener == "function" && e.removeListener("error", i), r([].slice.call(arguments));
        }
        kr(e, t, o, { once: true }), t !== "error" && fo(e, i, { once: true });
      });
    }
    function fo(e, t, r) {
      typeof e.on == "function" && kr(e, "error", t, r);
    }
    function kr(e, t, r, n) {
      if (typeof e.on == "function")
        n.once ? e.once(t, r) : e.on(t, r);
      else if (typeof e.addEventListener == "function")
        e.addEventListener(t, function i(o) {
          n.once && e.removeEventListener(t, i), r(o);
        });
      else
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
    }
  });
  At = b3((Nf, jr) => {
    jr.exports = Tt().EventEmitter;
  });
  $r = b3((Ve) => {
    Ve.byteLength = lo;
    Ve.toByteArray = co;
    Ve.fromByteArray = go;
    var W = [], U2 = [], uo = typeof Uint8Array < "u" ? Uint8Array : Array, Bt = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (ae = 0, Wr = Bt.length;ae < Wr; ++ae)
      W[ae] = Bt[ae], U2[Bt.charCodeAt(ae)] = ae;
    var ae, Wr;
    U2["-".charCodeAt(0)] = 62;
    U2["_".charCodeAt(0)] = 63;
    function Hr(e) {
      var t = e.length;
      if (t % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var r = e.indexOf("=");
      r === -1 && (r = t);
      var n = r === t ? 0 : 4 - r % 4;
      return [r, n];
    }
    function lo(e) {
      var t = Hr(e), r = t[0], n = t[1];
      return (r + n) * 3 / 4 - n;
    }
    function ho(e, t, r) {
      return (t + r) * 3 / 4 - r;
    }
    function co(e) {
      var t, r = Hr(e), n = r[0], i = r[1], o = new uo(ho(e, n, i)), a2 = 0, s2 = i > 0 ? n - 4 : n, u2;
      for (u2 = 0;u2 < s2; u2 += 4)
        t = U2[e.charCodeAt(u2)] << 18 | U2[e.charCodeAt(u2 + 1)] << 12 | U2[e.charCodeAt(u2 + 2)] << 6 | U2[e.charCodeAt(u2 + 3)], o[a2++] = t >> 16 & 255, o[a2++] = t >> 8 & 255, o[a2++] = t & 255;
      return i === 2 && (t = U2[e.charCodeAt(u2)] << 2 | U2[e.charCodeAt(u2 + 1)] >> 4, o[a2++] = t & 255), i === 1 && (t = U2[e.charCodeAt(u2)] << 10 | U2[e.charCodeAt(u2 + 1)] << 4 | U2[e.charCodeAt(u2 + 2)] >> 2, o[a2++] = t >> 8 & 255, o[a2++] = t & 255), o;
    }
    function po(e) {
      return W[e >> 18 & 63] + W[e >> 12 & 63] + W[e >> 6 & 63] + W[e & 63];
    }
    function yo(e, t, r) {
      for (var n, i = [], o = t;o < r; o += 3)
        n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(po(n));
      return i.join("");
    }
    function go(e) {
      for (var t, r = e.length, n = r % 3, i = [], o = 16383, a2 = 0, s2 = r - n;a2 < s2; a2 += o)
        i.push(yo(e, a2, a2 + o > s2 ? s2 : a2 + o));
      return n === 1 ? (t = e[r - 1], i.push(W[t >> 2] + W[t << 4 & 63] + "==")) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], i.push(W[t >> 10] + W[t >> 4 & 63] + W[t << 2 & 63] + "=")), i.join("");
    }
  });
  Gr = b3((It) => {
    It.read = function(e, t, r, n, i) {
      var o, a2, s2 = i * 8 - n - 1, u2 = (1 << s2) - 1, l2 = u2 >> 1, h2 = -7, c2 = r ? i - 1 : 0, d2 = r ? -1 : 1, p2 = e[t + c2];
      for (c2 += d2, o = p2 & (1 << -h2) - 1, p2 >>= -h2, h2 += s2;h2 > 0; o = o * 256 + e[t + c2], c2 += d2, h2 -= 8)
        ;
      for (a2 = o & (1 << -h2) - 1, o >>= -h2, h2 += n;h2 > 0; a2 = a2 * 256 + e[t + c2], c2 += d2, h2 -= 8)
        ;
      if (o === 0)
        o = 1 - l2;
      else {
        if (o === u2)
          return a2 ? NaN : (p2 ? -1 : 1) * (1 / 0);
        a2 = a2 + Math.pow(2, n), o = o - l2;
      }
      return (p2 ? -1 : 1) * a2 * Math.pow(2, o - n);
    };
    It.write = function(e, t, r, n, i, o) {
      var a2, s2, u2, l2 = o * 8 - i - 1, h2 = (1 << l2) - 1, c2 = h2 >> 1, d2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p2 = n ? 0 : o - 1, g2 = n ? 1 : -1, E2 = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
      for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s2 = isNaN(t) ? 1 : 0, a2 = h2) : (a2 = Math.floor(Math.log(t) / Math.LN2), t * (u2 = Math.pow(2, -a2)) < 1 && (a2--, u2 *= 2), a2 + c2 >= 1 ? t += d2 / u2 : t += d2 * Math.pow(2, 1 - c2), t * u2 >= 2 && (a2++, u2 /= 2), a2 + c2 >= h2 ? (s2 = 0, a2 = h2) : a2 + c2 >= 1 ? (s2 = (t * u2 - 1) * Math.pow(2, i), a2 = a2 + c2) : (s2 = t * Math.pow(2, c2 - 1) * Math.pow(2, i), a2 = 0));i >= 8; e[r + p2] = s2 & 255, p2 += g2, s2 /= 256, i -= 8)
        ;
      for (a2 = a2 << i | s2, l2 += i;l2 > 0; e[r + p2] = a2 & 255, p2 += g2, a2 /= 256, l2 -= 8)
        ;
      e[r + p2 - g2] |= E2 * 128;
    };
  });
  _e2 = b3((be) => {
    var Ct = $r(), we = Gr(), Kr = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    be.Buffer = f2;
    be.SlowBuffer = Eo;
    be.INSPECT_MAX_BYTES = 50;
    var Ye = 2147483647;
    be.kMaxLength = Ye;
    f2.TYPED_ARRAY_SUPPORT = wo();
    !f2.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function wo() {
      try {
        let e = new Uint8Array(1), t = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), e.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(f2.prototype, "parent", { enumerable: true, get: function() {
      if (!!f2.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(f2.prototype, "offset", { enumerable: true, get: function() {
      if (!!f2.isBuffer(this))
        return this.byteOffset;
    } });
    function X2(e) {
      if (e > Ye)
        throw new RangeError('The value "' + e + '" is invalid for option "size"');
      let t = new Uint8Array(e);
      return Object.setPrototypeOf(t, f2.prototype), t;
    }
    function f2(e, t, r) {
      if (typeof e == "number") {
        if (typeof t == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return Ft2(e);
      }
      return zr(e, t, r);
    }
    f2.poolSize = 8192;
    function zr(e, t, r) {
      if (typeof e == "string")
        return bo(e, t);
      if (ArrayBuffer.isView(e))
        return _o(e);
      if (e == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
      if (H(e, ArrayBuffer) || e && H(e.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (H(e, SharedArrayBuffer) || e && H(e.buffer, SharedArrayBuffer)))
        return Mt(e, t, r);
      if (typeof e == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let n = e.valueOf && e.valueOf();
      if (n != null && n !== e)
        return f2.from(n, t, r);
      let i = vo(e);
      if (i)
        return i;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] == "function")
        return f2.from(e[Symbol.toPrimitive]("string"), t, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
    }
    f2.from = function(e, t, r) {
      return zr(e, t, r);
    };
    Object.setPrototypeOf(f2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(f2, Uint8Array);
    function Zr(e) {
      if (typeof e != "number")
        throw new TypeError('"size" argument must be of type number');
      if (e < 0)
        throw new RangeError('The value "' + e + '" is invalid for option "size"');
    }
    function mo(e, t, r) {
      return Zr(e), e <= 0 ? X2(e) : t !== undefined ? typeof r == "string" ? X2(e).fill(t, r) : X2(e).fill(t) : X2(e);
    }
    f2.alloc = function(e, t, r) {
      return mo(e, t, r);
    };
    function Ft2(e) {
      return Zr(e), X2(e < 0 ? 0 : Nt2(e) | 0);
    }
    f2.allocUnsafe = function(e) {
      return Ft2(e);
    };
    f2.allocUnsafeSlow = function(e) {
      return Ft2(e);
    };
    function bo(e, t) {
      if ((typeof t != "string" || t === "") && (t = "utf8"), !f2.isEncoding(t))
        throw new TypeError("Unknown encoding: " + t);
      let r = Jr(e, t) | 0, n = X2(r), i = n.write(e, t);
      return i !== r && (n = n.slice(0, i)), n;
    }
    function Lt2(e) {
      let t = e.length < 0 ? 0 : Nt2(e.length) | 0, r = X2(t);
      for (let n = 0;n < t; n += 1)
        r[n] = e[n] & 255;
      return r;
    }
    function _o(e) {
      if (H(e, Uint8Array)) {
        let t = new Uint8Array(e);
        return Mt(t.buffer, t.byteOffset, t.byteLength);
      }
      return Lt2(e);
    }
    function Mt(e, t, r) {
      if (t < 0 || e.byteLength < t)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (e.byteLength < t + (r || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let n;
      return t === undefined && r === undefined ? n = new Uint8Array(e) : r === undefined ? n = new Uint8Array(e, t) : n = new Uint8Array(e, t, r), Object.setPrototypeOf(n, f2.prototype), n;
    }
    function vo(e) {
      if (f2.isBuffer(e)) {
        let t = Nt2(e.length) | 0, r = X2(t);
        return r.length === 0 || e.copy(r, 0, 0, t), r;
      }
      if (e.length !== undefined)
        return typeof e.length != "number" || Pt(e.length) ? X2(0) : Lt2(e);
      if (e.type === "Buffer" && Array.isArray(e.data))
        return Lt2(e.data);
    }
    function Nt2(e) {
      if (e >= Ye)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Ye.toString(16) + " bytes");
      return e | 0;
    }
    function Eo(e) {
      return +e != e && (e = 0), f2.alloc(+e);
    }
    f2.isBuffer = function(t) {
      return t != null && t._isBuffer === true && t !== f2.prototype;
    };
    f2.compare = function(t, r) {
      if (H(t, Uint8Array) && (t = f2.from(t, t.offset, t.byteLength)), H(r, Uint8Array) && (r = f2.from(r, r.offset, r.byteLength)), !f2.isBuffer(t) || !f2.isBuffer(r))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (t === r)
        return 0;
      let n = t.length, i = r.length;
      for (let o = 0, a2 = Math.min(n, i);o < a2; ++o)
        if (t[o] !== r[o]) {
          n = t[o], i = r[o];
          break;
        }
      return n < i ? -1 : i < n ? 1 : 0;
    };
    f2.isEncoding = function(t) {
      switch (String(t).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    f2.concat = function(t, r) {
      if (!Array.isArray(t))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (t.length === 0)
        return f2.alloc(0);
      let n;
      if (r === undefined)
        for (r = 0, n = 0;n < t.length; ++n)
          r += t[n].length;
      let i = f2.allocUnsafe(r), o = 0;
      for (n = 0;n < t.length; ++n) {
        let a2 = t[n];
        if (H(a2, Uint8Array))
          o + a2.length > i.length ? (f2.isBuffer(a2) || (a2 = f2.from(a2)), a2.copy(i, o)) : Uint8Array.prototype.set.call(i, a2, o);
        else if (f2.isBuffer(a2))
          a2.copy(i, o);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        o += a2.length;
      }
      return i;
    };
    function Jr(e, t) {
      if (f2.isBuffer(e))
        return e.length;
      if (ArrayBuffer.isView(e) || H(e, ArrayBuffer))
        return e.byteLength;
      if (typeof e != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
      let r = e.length, n = arguments.length > 2 && arguments[2] === true;
      if (!n && r === 0)
        return 0;
      let i = false;
      for (;; )
        switch (t) {
          case "ascii":
          case "latin1":
          case "binary":
            return r;
          case "utf8":
          case "utf-8":
            return Ot(e).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return r * 2;
          case "hex":
            return r >>> 1;
          case "base64":
            return fn(e).length;
          default:
            if (i)
              return n ? -1 : Ot(e).length;
            t = ("" + t).toLowerCase(), i = true;
        }
    }
    f2.byteLength = Jr;
    function xo(e, t, r) {
      let n = false;
      if ((t === undefined || t < 0) && (t = 0), t > this.length || ((r === undefined || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, t >>>= 0, r <= t))
        return "";
      for (e || (e = "utf8");; )
        switch (e) {
          case "hex":
            return Oo(this, t, r);
          case "utf8":
          case "utf-8":
            return en(this, t, r);
          case "ascii":
            return Lo(this, t, r);
          case "latin1":
          case "binary":
            return Mo(this, t, r);
          case "base64":
            return Io(this, t, r);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Fo(this, t, r);
          default:
            if (n)
              throw new TypeError("Unknown encoding: " + e);
            e = (e + "").toLowerCase(), n = true;
        }
    }
    f2.prototype._isBuffer = true;
    function se(e, t, r) {
      let n = e[t];
      e[t] = e[r], e[r] = n;
    }
    f2.prototype.swap16 = function() {
      let t = this.length;
      if (t % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let r = 0;r < t; r += 2)
        se(this, r, r + 1);
      return this;
    };
    f2.prototype.swap32 = function() {
      let t = this.length;
      if (t % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let r = 0;r < t; r += 4)
        se(this, r, r + 3), se(this, r + 1, r + 2);
      return this;
    };
    f2.prototype.swap64 = function() {
      let t = this.length;
      if (t % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let r = 0;r < t; r += 8)
        se(this, r, r + 7), se(this, r + 1, r + 6), se(this, r + 2, r + 5), se(this, r + 3, r + 4);
      return this;
    };
    f2.prototype.toString = function() {
      let t = this.length;
      return t === 0 ? "" : arguments.length === 0 ? en(this, 0, t) : xo.apply(this, arguments);
    };
    f2.prototype.toLocaleString = f2.prototype.toString;
    f2.prototype.equals = function(t) {
      if (!f2.isBuffer(t))
        throw new TypeError("Argument must be a Buffer");
      return this === t ? true : f2.compare(this, t) === 0;
    };
    f2.prototype.inspect = function() {
      let t = "", r = be.INSPECT_MAX_BYTES;
      return t = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (t += " ... "), "<Buffer " + t + ">";
    };
    Kr && (f2.prototype[Kr] = f2.prototype.inspect);
    f2.prototype.compare = function(t, r, n, i, o) {
      if (H(t, Uint8Array) && (t = f2.from(t, t.offset, t.byteLength)), !f2.isBuffer(t))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t);
      if (r === undefined && (r = 0), n === undefined && (n = t ? t.length : 0), i === undefined && (i = 0), o === undefined && (o = this.length), r < 0 || n > t.length || i < 0 || o > this.length)
        throw new RangeError("out of range index");
      if (i >= o && r >= n)
        return 0;
      if (i >= o)
        return -1;
      if (r >= n)
        return 1;
      if (r >>>= 0, n >>>= 0, i >>>= 0, o >>>= 0, this === t)
        return 0;
      let a2 = o - i, s2 = n - r, u2 = Math.min(a2, s2), l2 = this.slice(i, o), h2 = t.slice(r, n);
      for (let c2 = 0;c2 < u2; ++c2)
        if (l2[c2] !== h2[c2]) {
          a2 = l2[c2], s2 = h2[c2];
          break;
        }
      return a2 < s2 ? -1 : s2 < a2 ? 1 : 0;
    };
    function Qr(e, t, r, n, i) {
      if (e.length === 0)
        return -1;
      if (typeof r == "string" ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, Pt(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
        if (i)
          return -1;
        r = e.length - 1;
      } else if (r < 0)
        if (i)
          r = 0;
        else
          return -1;
      if (typeof t == "string" && (t = f2.from(t, n)), f2.isBuffer(t))
        return t.length === 0 ? -1 : Vr(e, t, r, n, i);
      if (typeof t == "number")
        return t = t & 255, typeof Uint8Array.prototype.indexOf == "function" ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : Vr(e, [t], r, n, i);
      throw new TypeError("val must be string, number or Buffer");
    }
    function Vr(e, t, r, n, i) {
      let o = 1, a2 = e.length, s2 = t.length;
      if (n !== undefined && (n = String(n).toLowerCase(), n === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
        if (e.length < 2 || t.length < 2)
          return -1;
        o = 2, a2 /= 2, s2 /= 2, r /= 2;
      }
      function u2(h2, c2) {
        return o === 1 ? h2[c2] : h2.readUInt16BE(c2 * o);
      }
      let l2;
      if (i) {
        let h2 = -1;
        for (l2 = r;l2 < a2; l2++)
          if (u2(e, l2) === u2(t, h2 === -1 ? 0 : l2 - h2)) {
            if (h2 === -1 && (h2 = l2), l2 - h2 + 1 === s2)
              return h2 * o;
          } else
            h2 !== -1 && (l2 -= l2 - h2), h2 = -1;
      } else
        for (r + s2 > a2 && (r = a2 - s2), l2 = r;l2 >= 0; l2--) {
          let h2 = true;
          for (let c2 = 0;c2 < s2; c2++)
            if (u2(e, l2 + c2) !== u2(t, c2)) {
              h2 = false;
              break;
            }
          if (h2)
            return l2;
        }
      return -1;
    }
    f2.prototype.includes = function(t, r, n) {
      return this.indexOf(t, r, n) !== -1;
    };
    f2.prototype.indexOf = function(t, r, n) {
      return Qr(this, t, r, n, true);
    };
    f2.prototype.lastIndexOf = function(t, r, n) {
      return Qr(this, t, r, n, false);
    };
    function Ro(e, t, r, n) {
      r = Number(r) || 0;
      let i = e.length - r;
      n ? (n = Number(n), n > i && (n = i)) : n = i;
      let o = t.length;
      n > o / 2 && (n = o / 2);
      let a2;
      for (a2 = 0;a2 < n; ++a2) {
        let s2 = parseInt(t.substr(a2 * 2, 2), 16);
        if (Pt(s2))
          return a2;
        e[r + a2] = s2;
      }
      return a2;
    }
    function So(e, t, r, n) {
      return Xe(Ot(t, e.length - r), e, r, n);
    }
    function To(e, t, r, n) {
      return Xe(qo(t), e, r, n);
    }
    function Ao(e, t, r, n) {
      return Xe(fn(t), e, r, n);
    }
    function Bo(e, t, r, n) {
      return Xe(Do(t, e.length - r), e, r, n);
    }
    f2.prototype.write = function(t, r, n, i) {
      if (r === undefined)
        i = "utf8", n = this.length, r = 0;
      else if (n === undefined && typeof r == "string")
        i = r, n = this.length, r = 0;
      else if (isFinite(r))
        r = r >>> 0, isFinite(n) ? (n = n >>> 0, i === undefined && (i = "utf8")) : (i = n, n = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let o = this.length - r;
      if ((n === undefined || n > o) && (n = o), t.length > 0 && (n < 0 || r < 0) || r > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      i || (i = "utf8");
      let a2 = false;
      for (;; )
        switch (i) {
          case "hex":
            return Ro(this, t, r, n);
          case "utf8":
          case "utf-8":
            return So(this, t, r, n);
          case "ascii":
          case "latin1":
          case "binary":
            return To(this, t, r, n);
          case "base64":
            return Ao(this, t, r, n);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Bo(this, t, r, n);
          default:
            if (a2)
              throw new TypeError("Unknown encoding: " + i);
            i = ("" + i).toLowerCase(), a2 = true;
        }
    };
    f2.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Io(e, t, r) {
      return t === 0 && r === e.length ? Ct.fromByteArray(e) : Ct.fromByteArray(e.slice(t, r));
    }
    function en(e, t, r) {
      r = Math.min(e.length, r);
      let n = [], i = t;
      for (;i < r; ) {
        let o = e[i], a2 = null, s2 = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
        if (i + s2 <= r) {
          let u2, l2, h2, c2;
          switch (s2) {
            case 1:
              o < 128 && (a2 = o);
              break;
            case 2:
              u2 = e[i + 1], (u2 & 192) === 128 && (c2 = (o & 31) << 6 | u2 & 63, c2 > 127 && (a2 = c2));
              break;
            case 3:
              u2 = e[i + 1], l2 = e[i + 2], (u2 & 192) === 128 && (l2 & 192) === 128 && (c2 = (o & 15) << 12 | (u2 & 63) << 6 | l2 & 63, c2 > 2047 && (c2 < 55296 || c2 > 57343) && (a2 = c2));
              break;
            case 4:
              u2 = e[i + 1], l2 = e[i + 2], h2 = e[i + 3], (u2 & 192) === 128 && (l2 & 192) === 128 && (h2 & 192) === 128 && (c2 = (o & 15) << 18 | (u2 & 63) << 12 | (l2 & 63) << 6 | h2 & 63, c2 > 65535 && c2 < 1114112 && (a2 = c2));
          }
        }
        a2 === null ? (a2 = 65533, s2 = 1) : a2 > 65535 && (a2 -= 65536, n.push(a2 >>> 10 & 1023 | 55296), a2 = 56320 | a2 & 1023), n.push(a2), i += s2;
      }
      return Co(n);
    }
    var Yr = 4096;
    function Co(e) {
      let t = e.length;
      if (t <= Yr)
        return String.fromCharCode.apply(String, e);
      let r = "", n = 0;
      for (;n < t; )
        r += String.fromCharCode.apply(String, e.slice(n, n += Yr));
      return r;
    }
    function Lo(e, t, r) {
      let n = "";
      r = Math.min(e.length, r);
      for (let i = t;i < r; ++i)
        n += String.fromCharCode(e[i] & 127);
      return n;
    }
    function Mo(e, t, r) {
      let n = "";
      r = Math.min(e.length, r);
      for (let i = t;i < r; ++i)
        n += String.fromCharCode(e[i]);
      return n;
    }
    function Oo(e, t, r) {
      let n = e.length;
      (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
      let i = "";
      for (let o = t;o < r; ++o)
        i += ko[e[o]];
      return i;
    }
    function Fo(e, t, r) {
      let n = e.slice(t, r), i = "";
      for (let o = 0;o < n.length - 1; o += 2)
        i += String.fromCharCode(n[o] + n[o + 1] * 256);
      return i;
    }
    f2.prototype.slice = function(t, r) {
      let n = this.length;
      t = ~~t, r = r === undefined ? n : ~~r, t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), r < 0 ? (r += n, r < 0 && (r = 0)) : r > n && (r = n), r < t && (r = t);
      let i = this.subarray(t, r);
      return Object.setPrototypeOf(i, f2.prototype), i;
    };
    function I2(e, t, r) {
      if (e % 1 !== 0 || e < 0)
        throw new RangeError("offset is not uint");
      if (e + t > r)
        throw new RangeError("Trying to access beyond buffer length");
    }
    f2.prototype.readUintLE = f2.prototype.readUIntLE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || I2(t, r, this.length);
      let i = this[t], o = 1, a2 = 0;
      for (;++a2 < r && (o *= 256); )
        i += this[t + a2] * o;
      return i;
    };
    f2.prototype.readUintBE = f2.prototype.readUIntBE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || I2(t, r, this.length);
      let i = this[t + --r], o = 1;
      for (;r > 0 && (o *= 256); )
        i += this[t + --r] * o;
      return i;
    };
    f2.prototype.readUint8 = f2.prototype.readUInt8 = function(t, r) {
      return t = t >>> 0, r || I2(t, 1, this.length), this[t];
    };
    f2.prototype.readUint16LE = f2.prototype.readUInt16LE = function(t, r) {
      return t = t >>> 0, r || I2(t, 2, this.length), this[t] | this[t + 1] << 8;
    };
    f2.prototype.readUint16BE = f2.prototype.readUInt16BE = function(t, r) {
      return t = t >>> 0, r || I2(t, 2, this.length), this[t] << 8 | this[t + 1];
    };
    f2.prototype.readUint32LE = f2.prototype.readUInt32LE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + this[t + 3] * 16777216;
    };
    f2.prototype.readUint32BE = f2.prototype.readUInt32BE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), this[t] * 16777216 + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
    };
    f2.prototype.readBigUInt64LE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ce(t, this.length - 8);
      let i = r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24, o = this[++t] + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + n * 2 ** 24;
      return BigInt(i) + (BigInt(o) << BigInt(32));
    });
    f2.prototype.readBigUInt64BE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ce(t, this.length - 8);
      let i = r * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t], o = this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n;
      return (BigInt(i) << BigInt(32)) + BigInt(o);
    });
    f2.prototype.readIntLE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || I2(t, r, this.length);
      let i = this[t], o = 1, a2 = 0;
      for (;++a2 < r && (o *= 256); )
        i += this[t + a2] * o;
      return o *= 128, i >= o && (i -= Math.pow(2, 8 * r)), i;
    };
    f2.prototype.readIntBE = function(t, r, n) {
      t = t >>> 0, r = r >>> 0, n || I2(t, r, this.length);
      let i = r, o = 1, a2 = this[t + --i];
      for (;i > 0 && (o *= 256); )
        a2 += this[t + --i] * o;
      return o *= 128, a2 >= o && (a2 -= Math.pow(2, 8 * r)), a2;
    };
    f2.prototype.readInt8 = function(t, r) {
      return t = t >>> 0, r || I2(t, 1, this.length), this[t] & 128 ? (255 - this[t] + 1) * -1 : this[t];
    };
    f2.prototype.readInt16LE = function(t, r) {
      t = t >>> 0, r || I2(t, 2, this.length);
      let n = this[t] | this[t + 1] << 8;
      return n & 32768 ? n | 4294901760 : n;
    };
    f2.prototype.readInt16BE = function(t, r) {
      t = t >>> 0, r || I2(t, 2, this.length);
      let n = this[t + 1] | this[t] << 8;
      return n & 32768 ? n | 4294901760 : n;
    };
    f2.prototype.readInt32LE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
    };
    f2.prototype.readInt32BE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
    };
    f2.prototype.readBigInt64LE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ce(t, this.length - 8);
      let i = this[t + 4] + this[t + 5] * 2 ** 8 + this[t + 6] * 2 ** 16 + (n << 24);
      return (BigInt(i) << BigInt(32)) + BigInt(r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24);
    });
    f2.prototype.readBigInt64BE = ee(function(t) {
      t = t >>> 0, me(t, "offset");
      let r = this[t], n = this[t + 7];
      (r === undefined || n === undefined) && Ce(t, this.length - 8);
      let i = (r << 24) + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t];
      return (BigInt(i) << BigInt(32)) + BigInt(this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n);
    });
    f2.prototype.readFloatLE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), we.read(this, t, true, 23, 4);
    };
    f2.prototype.readFloatBE = function(t, r) {
      return t = t >>> 0, r || I2(t, 4, this.length), we.read(this, t, false, 23, 4);
    };
    f2.prototype.readDoubleLE = function(t, r) {
      return t = t >>> 0, r || I2(t, 8, this.length), we.read(this, t, true, 52, 8);
    };
    f2.prototype.readDoubleBE = function(t, r) {
      return t = t >>> 0, r || I2(t, 8, this.length), we.read(this, t, false, 52, 8);
    };
    function O2(e, t, r, n, i, o) {
      if (!f2.isBuffer(e))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (t > i || t < o)
        throw new RangeError('"value" argument is out of bounds');
      if (r + n > e.length)
        throw new RangeError("Index out of range");
    }
    f2.prototype.writeUintLE = f2.prototype.writeUIntLE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
        let s2 = Math.pow(2, 8 * n) - 1;
        O2(this, t, r, n, s2, 0);
      }
      let o = 1, a2 = 0;
      for (this[r] = t & 255;++a2 < n && (o *= 256); )
        this[r + a2] = t / o & 255;
      return r + n;
    };
    f2.prototype.writeUintBE = f2.prototype.writeUIntBE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
        let s2 = Math.pow(2, 8 * n) - 1;
        O2(this, t, r, n, s2, 0);
      }
      let o = n - 1, a2 = 1;
      for (this[r + o] = t & 255;--o >= 0 && (a2 *= 256); )
        this[r + o] = t / a2 & 255;
      return r + n;
    };
    f2.prototype.writeUint8 = f2.prototype.writeUInt8 = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 1, 255, 0), this[r] = t & 255, r + 1;
    };
    f2.prototype.writeUint16LE = f2.prototype.writeUInt16LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 65535, 0), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
    };
    f2.prototype.writeUint16BE = f2.prototype.writeUInt16BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 65535, 0), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
    };
    f2.prototype.writeUint32LE = f2.prototype.writeUInt32LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 4294967295, 0), this[r + 3] = t >>> 24, this[r + 2] = t >>> 16, this[r + 1] = t >>> 8, this[r] = t & 255, r + 4;
    };
    f2.prototype.writeUint32BE = f2.prototype.writeUInt32BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 4294967295, 0), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
    };
    function tn(e, t, r, n, i) {
      sn(t, n, i, e, r, 7);
      let o = Number(t & BigInt(4294967295));
      e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o;
      let a2 = Number(t >> BigInt(32) & BigInt(4294967295));
      return e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, a2 = a2 >> 8, e[r++] = a2, r;
    }
    function rn(e, t, r, n, i) {
      sn(t, n, i, e, r, 7);
      let o = Number(t & BigInt(4294967295));
      e[r + 7] = o, o = o >> 8, e[r + 6] = o, o = o >> 8, e[r + 5] = o, o = o >> 8, e[r + 4] = o;
      let a2 = Number(t >> BigInt(32) & BigInt(4294967295));
      return e[r + 3] = a2, a2 = a2 >> 8, e[r + 2] = a2, a2 = a2 >> 8, e[r + 1] = a2, a2 = a2 >> 8, e[r] = a2, r + 8;
    }
    f2.prototype.writeBigUInt64LE = ee(function(t, r = 0) {
      return tn(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    f2.prototype.writeBigUInt64BE = ee(function(t, r = 0) {
      return rn(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    f2.prototype.writeIntLE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, !i) {
        let u2 = Math.pow(2, 8 * n - 1);
        O2(this, t, r, n, u2 - 1, -u2);
      }
      let o = 0, a2 = 1, s2 = 0;
      for (this[r] = t & 255;++o < n && (a2 *= 256); )
        t < 0 && s2 === 0 && this[r + o - 1] !== 0 && (s2 = 1), this[r + o] = (t / a2 >> 0) - s2 & 255;
      return r + n;
    };
    f2.prototype.writeIntBE = function(t, r, n, i) {
      if (t = +t, r = r >>> 0, !i) {
        let u2 = Math.pow(2, 8 * n - 1);
        O2(this, t, r, n, u2 - 1, -u2);
      }
      let o = n - 1, a2 = 1, s2 = 0;
      for (this[r + o] = t & 255;--o >= 0 && (a2 *= 256); )
        t < 0 && s2 === 0 && this[r + o + 1] !== 0 && (s2 = 1), this[r + o] = (t / a2 >> 0) - s2 & 255;
      return r + n;
    };
    f2.prototype.writeInt8 = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[r] = t & 255, r + 1;
    };
    f2.prototype.writeInt16LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 32767, -32768), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
    };
    f2.prototype.writeInt16BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 2, 32767, -32768), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
    };
    f2.prototype.writeInt32LE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 2147483647, -2147483648), this[r] = t & 255, this[r + 1] = t >>> 8, this[r + 2] = t >>> 16, this[r + 3] = t >>> 24, r + 4;
    };
    f2.prototype.writeInt32BE = function(t, r, n) {
      return t = +t, r = r >>> 0, n || O2(this, t, r, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
    };
    f2.prototype.writeBigInt64LE = ee(function(t, r = 0) {
      return tn(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    f2.prototype.writeBigInt64BE = ee(function(t, r = 0) {
      return rn(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function nn(e, t, r, n, i, o) {
      if (r + n > e.length)
        throw new RangeError("Index out of range");
      if (r < 0)
        throw new RangeError("Index out of range");
    }
    function on(e, t, r, n, i) {
      return t = +t, r = r >>> 0, i || nn(e, t, r, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), we.write(e, t, r, n, 23, 4), r + 4;
    }
    f2.prototype.writeFloatLE = function(t, r, n) {
      return on(this, t, r, true, n);
    };
    f2.prototype.writeFloatBE = function(t, r, n) {
      return on(this, t, r, false, n);
    };
    function an2(e, t, r, n, i) {
      return t = +t, r = r >>> 0, i || nn(e, t, r, 8, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), we.write(e, t, r, n, 52, 8), r + 8;
    }
    f2.prototype.writeDoubleLE = function(t, r, n) {
      return an2(this, t, r, true, n);
    };
    f2.prototype.writeDoubleBE = function(t, r, n) {
      return an2(this, t, r, false, n);
    };
    f2.prototype.copy = function(t, r, n, i) {
      if (!f2.isBuffer(t))
        throw new TypeError("argument should be a Buffer");
      if (n || (n = 0), !i && i !== 0 && (i = this.length), r >= t.length && (r = t.length), r || (r = 0), i > 0 && i < n && (i = n), i === n || t.length === 0 || this.length === 0)
        return 0;
      if (r < 0)
        throw new RangeError("targetStart out of bounds");
      if (n < 0 || n >= this.length)
        throw new RangeError("Index out of range");
      if (i < 0)
        throw new RangeError("sourceEnd out of bounds");
      i > this.length && (i = this.length), t.length - r < i - n && (i = t.length - r + n);
      let o = i - n;
      return this === t && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r, n, i) : Uint8Array.prototype.set.call(t, this.subarray(n, i), r), o;
    };
    f2.prototype.fill = function(t, r, n, i) {
      if (typeof t == "string") {
        if (typeof r == "string" ? (i = r, r = 0, n = this.length) : typeof n == "string" && (i = n, n = this.length), i !== undefined && typeof i != "string")
          throw new TypeError("encoding must be a string");
        if (typeof i == "string" && !f2.isEncoding(i))
          throw new TypeError("Unknown encoding: " + i);
        if (t.length === 1) {
          let a2 = t.charCodeAt(0);
          (i === "utf8" && a2 < 128 || i === "latin1") && (t = a2);
        }
      } else
        typeof t == "number" ? t = t & 255 : typeof t == "boolean" && (t = Number(t));
      if (r < 0 || this.length < r || this.length < n)
        throw new RangeError("Out of range index");
      if (n <= r)
        return this;
      r = r >>> 0, n = n === undefined ? this.length : n >>> 0, t || (t = 0);
      let o;
      if (typeof t == "number")
        for (o = r;o < n; ++o)
          this[o] = t;
      else {
        let a2 = f2.isBuffer(t) ? t : f2.from(t, i), s2 = a2.length;
        if (s2 === 0)
          throw new TypeError('The value "' + t + '" is invalid for argument "value"');
        for (o = 0;o < n - r; ++o)
          this[o + r] = a2[o % s2];
      }
      return this;
    };
    var ge = {};
    function Ut(e, t, r) {
      ge[e] = class extends r {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: t.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e}]`, this.stack, delete this.name;
        }
        get code() {
          return e;
        }
        set code(i) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: i, writable: true });
        }
        toString() {
          return `${this.name} [${e}]: ${this.message}`;
        }
      };
    }
    Ut("ERR_BUFFER_OUT_OF_BOUNDS", function(e) {
      return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    Ut("ERR_INVALID_ARG_TYPE", function(e, t) {
      return `The "${e}" argument must be of type number. Received type ${typeof t}`;
    }, TypeError);
    Ut("ERR_OUT_OF_RANGE", function(e, t, r) {
      let n = `The value of "${e}" is out of range.`, i = r;
      return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? i = Xr(String(r)) : typeof r == "bigint" && (i = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (i = Xr(i)), i += "n"), n += ` It must be ${t}. Received ${i}`, n;
    }, RangeError);
    function Xr(e) {
      let t = "", r = e.length, n = e[0] === "-" ? 1 : 0;
      for (;r >= n + 4; r -= 3)
        t = `_${e.slice(r - 3, r)}${t}`;
      return `${e.slice(0, r)}${t}`;
    }
    function No(e, t, r) {
      me(t, "offset"), (e[t] === undefined || e[t + r] === undefined) && Ce(t, e.length - (r + 1));
    }
    function sn(e, t, r, n, i, o) {
      if (e > r || e < t) {
        let a2 = typeof t == "bigint" ? "n" : "", s2;
        throw o > 3 ? t === 0 || t === BigInt(0) ? s2 = `>= 0${a2} and < 2${a2} ** ${(o + 1) * 8}${a2}` : s2 = `>= -(2${a2} ** ${(o + 1) * 8 - 1}${a2}) and < 2 ** ${(o + 1) * 8 - 1}${a2}` : s2 = `>= ${t}${a2} and <= ${r}${a2}`, new ge.ERR_OUT_OF_RANGE("value", s2, e);
      }
      No(n, i, o);
    }
    function me(e, t) {
      if (typeof e != "number")
        throw new ge.ERR_INVALID_ARG_TYPE(t, "number", e);
    }
    function Ce(e, t, r) {
      throw Math.floor(e) !== e ? (me(e, r), new ge.ERR_OUT_OF_RANGE(r || "offset", "an integer", e)) : t < 0 ? new ge.ERR_BUFFER_OUT_OF_BOUNDS : new ge.ERR_OUT_OF_RANGE(r || "offset", `>= ${r ? 1 : 0} and <= ${t}`, e);
    }
    var Uo = /[^+/0-9A-Za-z-_]/g;
    function Po(e) {
      if (e = e.split("=")[0], e = e.trim().replace(Uo, ""), e.length < 2)
        return "";
      for (;e.length % 4 !== 0; )
        e = e + "=";
      return e;
    }
    function Ot(e, t) {
      t = t || 1 / 0;
      let r, n = e.length, i = null, o = [];
      for (let a2 = 0;a2 < n; ++a2) {
        if (r = e.charCodeAt(a2), r > 55295 && r < 57344) {
          if (!i) {
            if (r > 56319) {
              (t -= 3) > -1 && o.push(239, 191, 189);
              continue;
            } else if (a2 + 1 === n) {
              (t -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            i = r;
            continue;
          }
          if (r < 56320) {
            (t -= 3) > -1 && o.push(239, 191, 189), i = r;
            continue;
          }
          r = (i - 55296 << 10 | r - 56320) + 65536;
        } else
          i && (t -= 3) > -1 && o.push(239, 191, 189);
        if (i = null, r < 128) {
          if ((t -= 1) < 0)
            break;
          o.push(r);
        } else if (r < 2048) {
          if ((t -= 2) < 0)
            break;
          o.push(r >> 6 | 192, r & 63 | 128);
        } else if (r < 65536) {
          if ((t -= 3) < 0)
            break;
          o.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
        } else if (r < 1114112) {
          if ((t -= 4) < 0)
            break;
          o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return o;
    }
    function qo(e) {
      let t = [];
      for (let r = 0;r < e.length; ++r)
        t.push(e.charCodeAt(r) & 255);
      return t;
    }
    function Do(e, t) {
      let r, n, i, o = [];
      for (let a2 = 0;a2 < e.length && !((t -= 2) < 0); ++a2)
        r = e.charCodeAt(a2), n = r >> 8, i = r % 256, o.push(i), o.push(n);
      return o;
    }
    function fn(e) {
      return Ct.toByteArray(Po(e));
    }
    function Xe(e, t, r, n) {
      let i;
      for (i = 0;i < n && !(i + r >= t.length || i >= e.length); ++i)
        t[i + r] = e[i];
      return i;
    }
    function H(e, t) {
      return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name;
    }
    function Pt(e) {
      return e !== e;
    }
    var ko = function() {
      let e = "0123456789abcdef", t = new Array(256);
      for (let r = 0;r < 16; ++r) {
        let n = r * 16;
        for (let i = 0;i < 16; ++i)
          t[n + i] = e[r] + e[i];
      }
      return t;
    }();
    function ee(e) {
      return typeof BigInt > "u" ? jo : e;
    }
    function jo() {
      throw new Error("BigInt not supported");
    }
  });
  qt = b3(() => {
  });
  cn = b3((Wf, hn) => {
    function un(e, t) {
      var r = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function(i) {
          return Object.getOwnPropertyDescriptor(e, i).enumerable;
        })), r.push.apply(r, n);
      }
      return r;
    }
    function Wo(e) {
      for (var t = 1;t < arguments.length; t++) {
        var r = arguments[t] != null ? arguments[t] : {};
        t % 2 ? un(Object(r), true).forEach(function(n) {
          Ho(e, n, r[n]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : un(Object(r)).forEach(function(n) {
          Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
        });
      }
      return e;
    }
    function Ho(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    }
    function $o(e, t) {
      if (!(e instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    function ln(e, t) {
      for (var r = 0;r < t.length; r++) {
        var n = t[r];
        n.enumerable = n.enumerable || false, n.configurable = true, "value" in n && (n.writable = true), Object.defineProperty(e, n.key, n);
      }
    }
    function Go(e, t, r) {
      return t && ln(e.prototype, t), r && ln(e, r), e;
    }
    var Ko = _e2(), ze = Ko.Buffer, Vo = qt(), Dt2 = Vo.inspect, Yo = Dt2 && Dt2.custom || "inspect";
    function Xo(e, t, r) {
      ze.prototype.copy.call(e, t, r);
    }
    hn.exports = function() {
      function e() {
        $o(this, e), this.head = null, this.tail = null, this.length = 0;
      }
      return Go(e, [{ key: "push", value: function(r) {
        var n = { data: r, next: null };
        this.length > 0 ? this.tail.next = n : this.head = n, this.tail = n, ++this.length;
      } }, { key: "unshift", value: function(r) {
        var n = { data: r, next: this.head };
        this.length === 0 && (this.tail = n), this.head = n, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r) {
        if (this.length === 0)
          return "";
        for (var n = this.head, i = "" + n.data;n = n.next; )
          i += r + n.data;
        return i;
      } }, { key: "concat", value: function(r) {
        if (this.length === 0)
          return ze.alloc(0);
        for (var n = ze.allocUnsafe(r >>> 0), i = this.head, o = 0;i; )
          Xo(i.data, n, o), o += i.data.length, i = i.next;
        return n;
      } }, { key: "consume", value: function(r, n) {
        var i;
        return r < this.head.data.length ? (i = this.head.data.slice(0, r), this.head.data = this.head.data.slice(r)) : r === this.head.data.length ? i = this.shift() : i = n ? this._getString(r) : this._getBuffer(r), i;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r) {
        var n = this.head, i = 1, o = n.data;
        for (r -= o.length;n = n.next; ) {
          var a2 = n.data, s2 = r > a2.length ? a2.length : r;
          if (s2 === a2.length ? o += a2 : o += a2.slice(0, r), r -= s2, r === 0) {
            s2 === a2.length ? (++i, n.next ? this.head = n.next : this.head = this.tail = null) : (this.head = n, n.data = a2.slice(s2));
            break;
          }
          ++i;
        }
        return this.length -= i, o;
      } }, { key: "_getBuffer", value: function(r) {
        var n = ze.allocUnsafe(r), i = this.head, o = 1;
        for (i.data.copy(n), r -= i.data.length;i = i.next; ) {
          var a2 = i.data, s2 = r > a2.length ? a2.length : r;
          if (a2.copy(n, n.length - r, 0, s2), r -= s2, r === 0) {
            s2 === a2.length ? (++o, i.next ? this.head = i.next : this.head = this.tail = null) : (this.head = i, i.data = a2.slice(s2));
            break;
          }
          ++o;
        }
        return this.length -= o, n;
      } }, { key: Yo, value: function(r, n) {
        return Dt2(this, Wo({}, n, { depth: 0, customInspect: false }));
      } }]), e;
    }();
  });
  jt = b3((Hf, pn2) => {
    function zo(e, t) {
      var r = this, n = this._readableState && this._readableState.destroyed, i = this._writableState && this._writableState.destroyed;
      return n || i ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(kt, this, e)) : process.nextTick(kt, this, e)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e || null, function(o) {
        !t && o ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(Ze, r) : (r._writableState.errorEmitted = true, process.nextTick(dn, r, o)) : process.nextTick(dn, r, o) : t ? (process.nextTick(Ze, r), t(o)) : process.nextTick(Ze, r);
      }), this);
    }
    function dn(e, t) {
      kt(e, t), Ze(e);
    }
    function Ze(e) {
      e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
    }
    function Zo() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function kt(e, t) {
      e.emit("error", t);
    }
    function Jo(e, t) {
      var { _readableState: r, _writableState: n } = e;
      r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
    }
    pn2.exports = { destroy: zo, undestroy: Zo, errorOrDestroy: Jo };
  });
  fe2 = b3(($f, wn) => {
    function Qo(e, t) {
      e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t;
    }
    var gn = {};
    function P(e, t, r) {
      r || (r = Error);
      function n(o, a2, s2) {
        return typeof t == "string" ? t : t(o, a2, s2);
      }
      var i = function(o) {
        Qo(a2, o);
        function a2(s2, u2, l2) {
          return o.call(this, n(s2, u2, l2)) || this;
        }
        return a2;
      }(r);
      i.prototype.name = r.name, i.prototype.code = e, gn[e] = i;
    }
    function yn(e, t) {
      if (Array.isArray(e)) {
        var r = e.length;
        return e = e.map(function(n) {
          return String(n);
        }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : r === 2 ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
      } else
        return "of ".concat(t, " ").concat(String(e));
    }
    function ea(e, t, r) {
      return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
    }
    function ta(e, t, r) {
      return (r === undefined || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
    }
    function ra(e, t, r) {
      return typeof r != "number" && (r = 0), r + t.length > e.length ? false : e.indexOf(t, r) !== -1;
    }
    P("ERR_INVALID_OPT_VALUE", function(e, t) {
      return 'The value "' + t + '" is invalid for option "' + e + '"';
    }, TypeError);
    P("ERR_INVALID_ARG_TYPE", function(e, t, r) {
      var n;
      typeof t == "string" && ea(t, "not ") ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be";
      var i;
      if (ta(e, " argument"))
        i = "The ".concat(e, " ").concat(n, " ").concat(yn(t, "type"));
      else {
        var o = ra(e, ".") ? "property" : "argument";
        i = 'The "'.concat(e, '" ').concat(o, " ").concat(n, " ").concat(yn(t, "type"));
      }
      return i += ". Received type ".concat(typeof r), i;
    }, TypeError);
    P("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    P("ERR_METHOD_NOT_IMPLEMENTED", function(e) {
      return "The " + e + " method is not implemented";
    });
    P("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    P("ERR_STREAM_DESTROYED", function(e) {
      return "Cannot call " + e + " after a stream was destroyed";
    });
    P("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    P("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    P("ERR_STREAM_WRITE_AFTER_END", "write after end");
    P("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    P("ERR_UNKNOWN_ENCODING", function(e) {
      return "Unknown encoding: " + e;
    }, TypeError);
    P("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    wn.exports.codes = gn;
  });
  Wt = b3((Gf, mn) => {
    var na = fe2().codes.ERR_INVALID_OPT_VALUE;
    function ia(e, t, r) {
      return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
    }
    function oa(e, t, r, n) {
      var i = ia(t, n, r);
      if (i != null) {
        if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
          var o = n ? r : "highWaterMark";
          throw new na(o, i);
        }
        return Math.floor(i);
      }
      return e.objectMode ? 16 : 16 * 1024;
    }
    mn.exports = { getHighWaterMark: oa };
  });
  _n = b3((Kf, bn) => {
    bn.exports = aa;
    function aa(e, t) {
      if (Ht2("noDeprecation"))
        return e;
      var r = false;
      function n() {
        if (!r) {
          if (Ht2("throwDeprecation"))
            throw new Error(t);
          Ht2("traceDeprecation") ? console.trace(t) : console.warn(t), r = true;
        }
        return e.apply(this, arguments);
      }
      return n;
    }
    function Ht2(e) {
      try {
        if (!global.localStorage)
          return false;
      } catch {
        return false;
      }
      var t = global.localStorage[e];
      return t == null ? false : String(t).toLowerCase() === "true";
    }
  });
  Kt2 = b3((Vf, Tn) => {
    Tn.exports = A2;
    function En(e) {
      var t = this;
      this.next = null, this.entry = null, this.finish = function() {
        Oa(t, e);
      };
    }
    var ve;
    A2.WritableState = Me;
    var sa = { deprecate: _n() }, xn = At(), Qe2 = _e2().Buffer, fa = global.Uint8Array || function() {
    };
    function ua(e) {
      return Qe2.from(e);
    }
    function la(e) {
      return Qe2.isBuffer(e) || e instanceof fa;
    }
    var Gt = jt(), ha = Wt(), ca = ha.getHighWaterMark, te = fe2().codes, da = te.ERR_INVALID_ARG_TYPE, pa = te.ERR_METHOD_NOT_IMPLEMENTED, ya = te.ERR_MULTIPLE_CALLBACK, ga = te.ERR_STREAM_CANNOT_PIPE, wa = te.ERR_STREAM_DESTROYED, ma = te.ERR_STREAM_NULL_VALUES, ba = te.ERR_STREAM_WRITE_AFTER_END, _a = te.ERR_UNKNOWN_ENCODING, Ee = Gt.errorOrDestroy;
    Q2()(A2, xn);
    function va() {
    }
    function Me(e, t, r) {
      ve = ve || ue2(), e = e || {}, typeof r != "boolean" && (r = t instanceof ve), this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.writableObjectMode), this.highWaterMark = ca(this, e, "writableHighWaterMark", r), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var n = e.decodeStrings === false;
      this.decodeStrings = !n, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(i) {
        Ba(t, i);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = e.emitClose !== false, this.autoDestroy = !!e.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new En(this);
    }
    Me.prototype.getBuffer = function() {
      for (var t = this.bufferedRequest, r = [];t; )
        r.push(t), t = t.next;
      return r;
    };
    (function() {
      try {
        Object.defineProperty(Me.prototype, "buffer", { get: sa.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var Je;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Je = Function.prototype[Symbol.hasInstance], Object.defineProperty(A2, Symbol.hasInstance, { value: function(t) {
      return Je.call(this, t) ? true : this !== A2 ? false : t && t._writableState instanceof Me;
    } })) : Je = function(t) {
      return t instanceof this;
    };
    function A2(e) {
      ve = ve || ue2();
      var t = this instanceof ve;
      if (!t && !Je.call(A2, this))
        return new A2(e);
      this._writableState = new Me(e, this, t), this.writable = true, e && (typeof e.write == "function" && (this._write = e.write), typeof e.writev == "function" && (this._writev = e.writev), typeof e.destroy == "function" && (this._destroy = e.destroy), typeof e.final == "function" && (this._final = e.final)), xn.call(this);
    }
    A2.prototype.pipe = function() {
      Ee(this, new ga);
    };
    function Ea(e, t) {
      var r = new ba;
      Ee(e, r), process.nextTick(t, r);
    }
    function xa(e, t, r, n) {
      var i;
      return r === null ? i = new ma : typeof r != "string" && !t.objectMode && (i = new da("chunk", ["string", "Buffer"], r)), i ? (Ee(e, i), process.nextTick(n, i), false) : true;
    }
    A2.prototype.write = function(e, t, r) {
      var n = this._writableState, i = false, o = !n.objectMode && la(e);
      return o && !Qe2.isBuffer(e) && (e = ua(e)), typeof t == "function" && (r = t, t = null), o ? t = "buffer" : t || (t = n.defaultEncoding), typeof r != "function" && (r = va), n.ending ? Ea(this, r) : (o || xa(this, n, e, r)) && (n.pendingcb++, i = Sa(this, n, o, e, t, r)), i;
    };
    A2.prototype.cork = function() {
      this._writableState.corked++;
    };
    A2.prototype.uncork = function() {
      var e = this._writableState;
      e.corked && (e.corked--, !e.writing && !e.corked && !e.bufferProcessing && e.bufferedRequest && Rn(this, e));
    };
    A2.prototype.setDefaultEncoding = function(t) {
      if (typeof t == "string" && (t = t.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((t + "").toLowerCase()) > -1))
        throw new _a(t);
      return this._writableState.defaultEncoding = t, this;
    };
    Object.defineProperty(A2.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function Ra(e, t, r) {
      return !e.objectMode && e.decodeStrings !== false && typeof t == "string" && (t = Qe2.from(t, r)), t;
    }
    Object.defineProperty(A2.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function Sa(e, t, r, n, i, o) {
      if (!r) {
        var a2 = Ra(t, n, i);
        n !== a2 && (r = true, i = "buffer", n = a2);
      }
      var s2 = t.objectMode ? 1 : n.length;
      t.length += s2;
      var u2 = t.length < t.highWaterMark;
      if (u2 || (t.needDrain = true), t.writing || t.corked) {
        var l2 = t.lastBufferedRequest;
        t.lastBufferedRequest = { chunk: n, encoding: i, isBuf: r, callback: o, next: null }, l2 ? l2.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
      } else
        $t(e, t, false, s2, n, i, o);
      return u2;
    }
    function $t(e, t, r, n, i, o, a2) {
      t.writelen = n, t.writecb = a2, t.writing = true, t.sync = true, t.destroyed ? t.onwrite(new wa("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = false;
    }
    function Ta(e, t, r, n, i) {
      --t.pendingcb, r ? (process.nextTick(i, n), process.nextTick(Le, e, t), e._writableState.errorEmitted = true, Ee(e, n)) : (i(n), e._writableState.errorEmitted = true, Ee(e, n), Le(e, t));
    }
    function Aa(e) {
      e.writing = false, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
    }
    function Ba(e, t) {
      var r = e._writableState, n = r.sync, i = r.writecb;
      if (typeof i != "function")
        throw new ya;
      if (Aa(r), t)
        Ta(e, r, n, t, i);
      else {
        var o = Sn2(r) || e.destroyed;
        !o && !r.corked && !r.bufferProcessing && r.bufferedRequest && Rn(e, r), n ? process.nextTick(vn, e, r, o, i) : vn(e, r, o, i);
      }
    }
    function vn(e, t, r, n) {
      r || Ia(e, t), t.pendingcb--, n(), Le(e, t);
    }
    function Ia(e, t) {
      t.length === 0 && t.needDrain && (t.needDrain = false, e.emit("drain"));
    }
    function Rn(e, t) {
      t.bufferProcessing = true;
      var r = t.bufferedRequest;
      if (e._writev && r && r.next) {
        var n = t.bufferedRequestCount, i = new Array(n), o = t.corkedRequestsFree;
        o.entry = r;
        for (var a2 = 0, s2 = true;r; )
          i[a2] = r, r.isBuf || (s2 = false), r = r.next, a2 += 1;
        i.allBuffers = s2, $t(e, t, true, t.length, i, "", o.finish), t.pendingcb++, t.lastBufferedRequest = null, o.next ? (t.corkedRequestsFree = o.next, o.next = null) : t.corkedRequestsFree = new En(t), t.bufferedRequestCount = 0;
      } else {
        for (;r; ) {
          var { chunk: u2, encoding: l2, callback: h2 } = r, c2 = t.objectMode ? 1 : u2.length;
          if ($t(e, t, false, c2, u2, l2, h2), r = r.next, t.bufferedRequestCount--, t.writing)
            break;
        }
        r === null && (t.lastBufferedRequest = null);
      }
      t.bufferedRequest = r, t.bufferProcessing = false;
    }
    A2.prototype._write = function(e, t, r) {
      r(new pa("_write()"));
    };
    A2.prototype._writev = null;
    A2.prototype.end = function(e, t, r) {
      var n = this._writableState;
      return typeof e == "function" ? (r = e, e = null, t = null) : typeof t == "function" && (r = t, t = null), e != null && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || Ma(this, n, r), this;
    };
    Object.defineProperty(A2.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Sn2(e) {
      return e.ending && e.length === 0 && e.bufferedRequest === null && !e.finished && !e.writing;
    }
    function Ca(e, t) {
      e._final(function(r) {
        t.pendingcb--, r && Ee(e, r), t.prefinished = true, e.emit("prefinish"), Le(e, t);
      });
    }
    function La(e, t) {
      !t.prefinished && !t.finalCalled && (typeof e._final == "function" && !t.destroyed ? (t.pendingcb++, t.finalCalled = true, process.nextTick(Ca, e, t)) : (t.prefinished = true, e.emit("prefinish")));
    }
    function Le(e, t) {
      var r = Sn2(t);
      if (r && (La(e, t), t.pendingcb === 0 && (t.finished = true, e.emit("finish"), t.autoDestroy))) {
        var n = e._readableState;
        (!n || n.autoDestroy && n.endEmitted) && e.destroy();
      }
      return r;
    }
    function Ma(e, t, r) {
      t.ending = true, Le(e, t), r && (t.finished ? process.nextTick(r) : e.once("finish", r)), t.ended = true, e.writable = false;
    }
    function Oa(e, t, r) {
      var n = e.entry;
      for (e.entry = null;n; ) {
        var i = n.callback;
        t.pendingcb--, i(r), n = n.next;
      }
      t.corkedRequestsFree.next = e;
    }
    Object.defineProperty(A2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(t) {
      !this._writableState || (this._writableState.destroyed = t);
    } });
    A2.prototype.destroy = Gt.destroy;
    A2.prototype._undestroy = Gt.undestroy;
    A2.prototype._destroy = function(e, t) {
      t(e);
    };
  });
  ue2 = b3((Yf, Bn2) => {
    var Fa = Object.keys || function(e) {
      var t = [];
      for (var r in e)
        t.push(r);
      return t;
    };
    Bn2.exports = $;
    var An = Xt(), Yt = Kt2();
    Q2()($, An);
    for (Vt2 = Fa(Yt.prototype), et2 = 0;et2 < Vt2.length; et2++)
      tt = Vt2[et2], $.prototype[tt] || ($.prototype[tt] = Yt.prototype[tt]);
    var Vt2, tt, et2;
    function $(e) {
      if (!(this instanceof $))
        return new $(e);
      An.call(this, e), Yt.call(this, e), this.allowHalfOpen = true, e && (e.readable === false && (this.readable = false), e.writable === false && (this.writable = false), e.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", Na)));
    }
    Object.defineProperty($.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty($.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty($.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Na() {
      this._writableState.ended || process.nextTick(Ua, this);
    }
    function Ua(e) {
      e.end();
    }
    Object.defineProperty($.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(t) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = t, this._writableState.destroyed = t);
    } });
  });
  Ln = b3((zt, Cn) => {
    var rt = _e2(), G = rt.Buffer;
    function In(e, t) {
      for (var r in e)
        t[r] = e[r];
    }
    G.from && G.alloc && G.allocUnsafe && G.allocUnsafeSlow ? Cn.exports = rt : (In(rt, zt), zt.Buffer = le);
    function le(e, t, r) {
      return G(e, t, r);
    }
    le.prototype = Object.create(G.prototype);
    In(G, le);
    le.from = function(e, t, r) {
      if (typeof e == "number")
        throw new TypeError("Argument must not be a number");
      return G(e, t, r);
    };
    le.alloc = function(e, t, r) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      var n = G(e);
      return t !== undefined ? typeof r == "string" ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
    };
    le.allocUnsafe = function(e) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      return G(e);
    };
    le.allocUnsafeSlow = function(e) {
      if (typeof e != "number")
        throw new TypeError("Argument must be a number");
      return rt.SlowBuffer(e);
    };
  });
  Fn = b3((On2) => {
    var Jt = Ln().Buffer, Mn = Jt.isEncoding || function(e) {
      switch (e = "" + e, e && e.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function Pa(e) {
      if (!e)
        return "utf8";
      for (var t;; )
        switch (e) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return e;
          default:
            if (t)
              return;
            e = ("" + e).toLowerCase(), t = true;
        }
    }
    function qa(e) {
      var t = Pa(e);
      if (typeof t != "string" && (Jt.isEncoding === Mn || !Mn(e)))
        throw new Error("Unknown encoding: " + e);
      return t || e;
    }
    On2.StringDecoder = Oe;
    function Oe(e) {
      this.encoding = qa(e);
      var t;
      switch (this.encoding) {
        case "utf16le":
          this.text = $a, this.end = Ga, t = 4;
          break;
        case "utf8":
          this.fillLast = ja, t = 4;
          break;
        case "base64":
          this.text = Ka, this.end = Va, t = 3;
          break;
        default:
          this.write = Ya, this.end = Xa;
          return;
      }
      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = Jt.allocUnsafe(t);
    }
    Oe.prototype.write = function(e) {
      if (e.length === 0)
        return "";
      var t, r;
      if (this.lastNeed) {
        if (t = this.fillLast(e), t === undefined)
          return "";
        r = this.lastNeed, this.lastNeed = 0;
      } else
        r = 0;
      return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
    };
    Oe.prototype.end = Ha;
    Oe.prototype.text = Wa;
    Oe.prototype.fillLast = function(e) {
      if (this.lastNeed <= e.length)
        return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
    };
    function Zt(e) {
      return e <= 127 ? 0 : e >> 5 === 6 ? 2 : e >> 4 === 14 ? 3 : e >> 3 === 30 ? 4 : e >> 6 === 2 ? -1 : -2;
    }
    function Da(e, t, r) {
      var n = t.length - 1;
      if (n < r)
        return 0;
      var i = Zt(t[n]);
      return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || i === -2 ? 0 : (i = Zt(t[n]), i >= 0 ? (i > 0 && (e.lastNeed = i - 2), i) : --n < r || i === -2 ? 0 : (i = Zt(t[n]), i >= 0 ? (i > 0 && (i === 2 ? i = 0 : e.lastNeed = i - 3), i) : 0));
    }
    function ka(e, t, r) {
      if ((t[0] & 192) !== 128)
        return e.lastNeed = 0, "\uFFFD";
      if (e.lastNeed > 1 && t.length > 1) {
        if ((t[1] & 192) !== 128)
          return e.lastNeed = 1, "\uFFFD";
        if (e.lastNeed > 2 && t.length > 2 && (t[2] & 192) !== 128)
          return e.lastNeed = 2, "\uFFFD";
      }
    }
    function ja(e) {
      var t = this.lastTotal - this.lastNeed, r = ka(this, e, t);
      if (r !== undefined)
        return r;
      if (this.lastNeed <= e.length)
        return e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      e.copy(this.lastChar, t, 0, e.length), this.lastNeed -= e.length;
    }
    function Wa(e, t) {
      var r = Da(this, e, t);
      if (!this.lastNeed)
        return e.toString("utf8", t);
      this.lastTotal = r;
      var n = e.length - (r - this.lastNeed);
      return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
    }
    function Ha(e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + "\uFFFD" : t;
    }
    function $a(e, t) {
      if ((e.length - t) % 2 === 0) {
        var r = e.toString("utf16le", t);
        if (r) {
          var n = r.charCodeAt(r.length - 1);
          if (n >= 55296 && n <= 56319)
            return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
        }
        return r;
      }
      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
    }
    function Ga(e) {
      var t = e && e.length ? this.write(e) : "";
      if (this.lastNeed) {
        var r = this.lastTotal - this.lastNeed;
        return t + this.lastChar.toString("utf16le", 0, r);
      }
      return t;
    }
    function Ka(e, t) {
      var r = (e.length - t) % 3;
      return r === 0 ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, r === 1 ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
    }
    function Va(e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
    }
    function Ya(e) {
      return e.toString(this.encoding);
    }
    function Xa(e) {
      return e && e.length ? this.write(e) : "";
    }
  });
  Qt = {};
  mt(Qt, { StringDecoder: () => nt.StringDecoder, default: () => nt.StringDecoder });
  er = Cr(() => {
    nt = bt2(Fn());
  });
  it = b3((zf, Pn) => {
    var Nn2 = fe2().codes.ERR_STREAM_PREMATURE_CLOSE;
    function za(e) {
      var t = false;
      return function() {
        if (!t) {
          t = true;
          for (var r = arguments.length, n = new Array(r), i = 0;i < r; i++)
            n[i] = arguments[i];
          e.apply(this, n);
        }
      };
    }
    function Za() {
    }
    function Ja(e) {
      return e.setHeader && typeof e.abort == "function";
    }
    function Un(e, t, r) {
      if (typeof t == "function")
        return Un(e, null, t);
      t || (t = {}), r = za(r || Za);
      var n = t.readable || t.readable !== false && e.readable, i = t.writable || t.writable !== false && e.writable, o = function() {
        e.writable || s2();
      }, a2 = e._writableState && e._writableState.finished, s2 = function() {
        i = false, a2 = true, n || r.call(e);
      }, u2 = e._readableState && e._readableState.endEmitted, l2 = function() {
        n = false, u2 = true, i || r.call(e);
      }, h2 = function(g2) {
        r.call(e, g2);
      }, c2 = function() {
        var g2;
        if (n && !u2)
          return (!e._readableState || !e._readableState.ended) && (g2 = new Nn2), r.call(e, g2);
        if (i && !a2)
          return (!e._writableState || !e._writableState.ended) && (g2 = new Nn2), r.call(e, g2);
      }, d2 = function() {
        e.req.on("finish", s2);
      };
      return Ja(e) ? (e.on("complete", s2), e.on("abort", c2), e.req ? d2() : e.on("request", d2)) : i && !e._writableState && (e.on("end", o), e.on("close", o)), e.on("end", l2), e.on("finish", s2), t.error !== false && e.on("error", h2), e.on("close", c2), function() {
        e.removeListener("complete", s2), e.removeListener("abort", c2), e.removeListener("request", d2), e.req && e.req.removeListener("finish", s2), e.removeListener("end", o), e.removeListener("close", o), e.removeListener("finish", s2), e.removeListener("end", l2), e.removeListener("error", h2), e.removeListener("close", c2);
      };
    }
    Pn.exports = Un;
  });
  Dn = b3((Zf, qn) => {
    var ot;
    function re(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    }
    var Qa = it(), ne = Symbol("lastResolve"), he = Symbol("lastReject"), Fe = Symbol("error"), at = Symbol("ended"), ce = Symbol("lastPromise"), tr = Symbol("handlePromise"), de = Symbol("stream");
    function ie(e, t) {
      return { value: e, done: t };
    }
    function es(e) {
      var t = e[ne];
      if (t !== null) {
        var r = e[de].read();
        r !== null && (e[ce] = null, e[ne] = null, e[he] = null, t(ie(r, false)));
      }
    }
    function ts(e) {
      process.nextTick(es, e);
    }
    function rs(e, t) {
      return function(r, n) {
        e.then(function() {
          if (t[at]) {
            r(ie(undefined, true));
            return;
          }
          t[tr](r, n);
        }, n);
      };
    }
    var ns = Object.getPrototypeOf(function() {
    }), is = Object.setPrototypeOf((ot = { get stream() {
      return this[de];
    }, next: function() {
      var t = this, r = this[Fe];
      if (r !== null)
        return Promise.reject(r);
      if (this[at])
        return Promise.resolve(ie(undefined, true));
      if (this[de].destroyed)
        return new Promise(function(a2, s2) {
          process.nextTick(function() {
            t[Fe] ? s2(t[Fe]) : a2(ie(undefined, true));
          });
        });
      var n = this[ce], i;
      if (n)
        i = new Promise(rs(n, this));
      else {
        var o = this[de].read();
        if (o !== null)
          return Promise.resolve(ie(o, false));
        i = new Promise(this[tr]);
      }
      return this[ce] = i, i;
    } }, re(ot, Symbol.asyncIterator, function() {
      return this;
    }), re(ot, "return", function() {
      var t = this;
      return new Promise(function(r, n) {
        t[de].destroy(null, function(i) {
          if (i) {
            n(i);
            return;
          }
          r(ie(undefined, true));
        });
      });
    }), ot), ns), os = function(t) {
      var r, n = Object.create(is, (r = {}, re(r, de, { value: t, writable: true }), re(r, ne, { value: null, writable: true }), re(r, he, { value: null, writable: true }), re(r, Fe, { value: null, writable: true }), re(r, at, { value: t._readableState.endEmitted, writable: true }), re(r, tr, { value: function(o, a2) {
        var s2 = n[de].read();
        s2 ? (n[ce] = null, n[ne] = null, n[he] = null, o(ie(s2, false))) : (n[ne] = o, n[he] = a2);
      }, writable: true }), r));
      return n[ce] = null, Qa(t, function(i) {
        if (i && i.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var o = n[he];
          o !== null && (n[ce] = null, n[ne] = null, n[he] = null, o(i)), n[Fe] = i;
          return;
        }
        var a2 = n[ne];
        a2 !== null && (n[ce] = null, n[ne] = null, n[he] = null, a2(ie(undefined, true))), n[at] = true;
      }), t.on("readable", ts.bind(null, n)), n;
    };
    qn.exports = os;
  });
  jn = b3((Jf, kn) => {
    kn.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  Xt = b3((eu, Zn) => {
    Zn.exports = _2;
    var xe;
    _2.ReadableState = Gn;
    var Qf = Tt().EventEmitter, $n = function(t, r) {
      return t.listeners(r).length;
    }, Ue = At(), st = _e2().Buffer, as = global.Uint8Array || function() {
    };
    function ss(e) {
      return st.from(e);
    }
    function fs(e) {
      return st.isBuffer(e) || e instanceof as;
    }
    var rr = qt(), w;
    rr && rr.debuglog ? w = rr.debuglog("stream") : w = function() {
    };
    var us = cn(), ur2 = jt(), ls = Wt(), hs = ls.getHighWaterMark, ft = fe2().codes, cs = ft.ERR_INVALID_ARG_TYPE, ds = ft.ERR_STREAM_PUSH_AFTER_EOF, ps = ft.ERR_METHOD_NOT_IMPLEMENTED, ys = ft.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Re, nr, ir2;
    Q2()(_2, Ue);
    var Ne = ur2.errorOrDestroy, or = ["error", "close", "destroy", "pause", "resume"];
    function gs(e, t, r) {
      if (typeof e.prependListener == "function")
        return e.prependListener(t, r);
      !e._events || !e._events[t] ? e.on(t, r) : Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]];
    }
    function Gn(e, t, r) {
      xe = xe || ue2(), e = e || {}, typeof r != "boolean" && (r = t instanceof xe), this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.readableObjectMode), this.highWaterMark = hs(this, e, "readableHighWaterMark", r), this.buffer = new us, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = e.emitClose !== false, this.autoDestroy = !!e.autoDestroy, this.destroyed = false, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e.encoding && (Re || (Re = (er(), _t2(Qt)).StringDecoder), this.decoder = new Re(e.encoding), this.encoding = e.encoding);
    }
    function _2(e) {
      if (xe = xe || ue2(), !(this instanceof _2))
        return new _2(e);
      var t = this instanceof xe;
      this._readableState = new Gn(e, this, t), this.readable = true, e && (typeof e.read == "function" && (this._read = e.read), typeof e.destroy == "function" && (this._destroy = e.destroy)), Ue.call(this);
    }
    Object.defineProperty(_2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(t) {
      !this._readableState || (this._readableState.destroyed = t);
    } });
    _2.prototype.destroy = ur2.destroy;
    _2.prototype._undestroy = ur2.undestroy;
    _2.prototype._destroy = function(e, t) {
      t(e);
    };
    _2.prototype.push = function(e, t) {
      var r = this._readableState, n;
      return r.objectMode ? n = true : typeof e == "string" && (t = t || r.defaultEncoding, t !== r.encoding && (e = st.from(e, t), t = ""), n = true), Kn(this, e, t, false, n);
    };
    _2.prototype.unshift = function(e) {
      return Kn(this, e, null, true, false);
    };
    function Kn(e, t, r, n, i) {
      w("readableAddChunk", t);
      var o = e._readableState;
      if (t === null)
        o.reading = false, bs(e, o);
      else {
        var a2;
        if (i || (a2 = ws(o, t)), a2)
          Ne(e, a2);
        else if (o.objectMode || t && t.length > 0)
          if (typeof t != "string" && !o.objectMode && Object.getPrototypeOf(t) !== st.prototype && (t = ss(t)), n)
            o.endEmitted ? Ne(e, new ys) : ar2(e, o, t, true);
          else if (o.ended)
            Ne(e, new ds);
          else {
            if (o.destroyed)
              return false;
            o.reading = false, o.decoder && !r ? (t = o.decoder.write(t), o.objectMode || t.length !== 0 ? ar2(e, o, t, false) : fr(e, o)) : ar2(e, o, t, false);
          }
        else
          n || (o.reading = false, fr(e, o));
      }
      return !o.ended && (o.length < o.highWaterMark || o.length === 0);
    }
    function ar2(e, t, r, n) {
      t.flowing && t.length === 0 && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && ut(e)), fr(e, t);
    }
    function ws(e, t) {
      var r;
      return !fs(t) && typeof t != "string" && t !== undefined && !e.objectMode && (r = new cs("chunk", ["string", "Buffer", "Uint8Array"], t)), r;
    }
    _2.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    _2.prototype.setEncoding = function(e) {
      Re || (Re = (er(), _t2(Qt)).StringDecoder);
      var t = new Re(e);
      this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r = this._readableState.buffer.head, n = "";r !== null; )
        n += t.write(r.data), r = r.next;
      return this._readableState.buffer.clear(), n !== "" && this._readableState.buffer.push(n), this._readableState.length = n.length, this;
    };
    var Wn = 1073741824;
    function ms(e) {
      return e >= Wn ? e = Wn : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
    }
    function Hn(e, t) {
      return e <= 0 || t.length === 0 && t.ended ? 0 : t.objectMode ? 1 : e !== e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = ms(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = true, 0));
    }
    _2.prototype.read = function(e) {
      w("read", e), e = parseInt(e, 10);
      var t = this._readableState, r = e;
      if (e !== 0 && (t.emittedReadable = false), e === 0 && t.needReadable && ((t.highWaterMark !== 0 ? t.length >= t.highWaterMark : t.length > 0) || t.ended))
        return w("read: emitReadable", t.length, t.ended), t.length === 0 && t.ended ? sr(this) : ut(this), null;
      if (e = Hn(e, t), e === 0 && t.ended)
        return t.length === 0 && sr(this), null;
      var n = t.needReadable;
      w("need readable", n), (t.length === 0 || t.length - e < t.highWaterMark) && (n = true, w("length less than watermark", n)), t.ended || t.reading ? (n = false, w("reading or ended", n)) : n && (w("do read"), t.reading = true, t.sync = true, t.length === 0 && (t.needReadable = true), this._read(t.highWaterMark), t.sync = false, t.reading || (e = Hn(r, t)));
      var i;
      return e > 0 ? i = Xn(e, t) : i = null, i === null ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), t.length === 0 && (t.ended || (t.needReadable = true), r !== e && t.ended && sr(this)), i !== null && this.emit("data", i), i;
    };
    function bs(e, t) {
      if (w("onEofChunk"), !t.ended) {
        if (t.decoder) {
          var r = t.decoder.end();
          r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
        }
        t.ended = true, t.sync ? ut(e) : (t.needReadable = false, t.emittedReadable || (t.emittedReadable = true, Vn(e)));
      }
    }
    function ut(e) {
      var t = e._readableState;
      w("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = false, t.emittedReadable || (w("emitReadable", t.flowing), t.emittedReadable = true, process.nextTick(Vn, e));
    }
    function Vn(e) {
      var t = e._readableState;
      w("emitReadable_", t.destroyed, t.length, t.ended), !t.destroyed && (t.length || t.ended) && (e.emit("readable"), t.emittedReadable = false), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, lr(e);
    }
    function fr(e, t) {
      t.readingMore || (t.readingMore = true, process.nextTick(_s, e, t));
    }
    function _s(e, t) {
      for (;!t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && t.length === 0); ) {
        var r = t.length;
        if (w("maybeReadMore read 0"), e.read(0), r === t.length)
          break;
      }
      t.readingMore = false;
    }
    _2.prototype._read = function(e) {
      Ne(this, new ps("_read()"));
    };
    _2.prototype.pipe = function(e, t) {
      var r = this, n = this._readableState;
      switch (n.pipesCount) {
        case 0:
          n.pipes = e;
          break;
        case 1:
          n.pipes = [n.pipes, e];
          break;
        default:
          n.pipes.push(e);
          break;
      }
      n.pipesCount += 1, w("pipe count=%d opts=%j", n.pipesCount, t);
      var i = (!t || t.end !== false) && e !== process.stdout && e !== process.stderr, o = i ? s2 : E2;
      n.endEmitted ? process.nextTick(o) : r.once("end", o), e.on("unpipe", a2);
      function a2(v, m2) {
        w("onunpipe"), v === r && m2 && m2.hasUnpiped === false && (m2.hasUnpiped = true, h2());
      }
      function s2() {
        w("onend"), e.end();
      }
      var u2 = vs(r);
      e.on("drain", u2);
      var l2 = false;
      function h2() {
        w("cleanup"), e.removeListener("close", p2), e.removeListener("finish", g2), e.removeListener("drain", u2), e.removeListener("error", d2), e.removeListener("unpipe", a2), r.removeListener("end", s2), r.removeListener("end", E2), r.removeListener("data", c2), l2 = true, n.awaitDrain && (!e._writableState || e._writableState.needDrain) && u2();
      }
      r.on("data", c2);
      function c2(v) {
        w("ondata");
        var m2 = e.write(v);
        w("dest.write", m2), m2 === false && ((n.pipesCount === 1 && n.pipes === e || n.pipesCount > 1 && zn2(n.pipes, e) !== -1) && !l2 && (w("false write response, pause", n.awaitDrain), n.awaitDrain++), r.pause());
      }
      function d2(v) {
        w("onerror", v), E2(), e.removeListener("error", d2), $n(e, "error") === 0 && Ne(e, v);
      }
      gs(e, "error", d2);
      function p2() {
        e.removeListener("finish", g2), E2();
      }
      e.once("close", p2);
      function g2() {
        w("onfinish"), e.removeListener("close", p2), E2();
      }
      e.once("finish", g2);
      function E2() {
        w("unpipe"), r.unpipe(e);
      }
      return e.emit("pipe", r), n.flowing || (w("pipe resume"), r.resume()), e;
    };
    function vs(e) {
      return function() {
        var r = e._readableState;
        w("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && $n(e, "data") && (r.flowing = true, lr(e));
      };
    }
    _2.prototype.unpipe = function(e) {
      var t = this._readableState, r = { hasUnpiped: false };
      if (t.pipesCount === 0)
        return this;
      if (t.pipesCount === 1)
        return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = false, e && e.emit("unpipe", this, r), this);
      if (!e) {
        var { pipes: n, pipesCount: i } = t;
        t.pipes = null, t.pipesCount = 0, t.flowing = false;
        for (var o = 0;o < i; o++)
          n[o].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var a2 = zn2(t.pipes, e);
      return a2 === -1 ? this : (t.pipes.splice(a2, 1), t.pipesCount -= 1, t.pipesCount === 1 && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);
    };
    _2.prototype.on = function(e, t) {
      var r = Ue.prototype.on.call(this, e, t), n = this._readableState;
      return e === "data" ? (n.readableListening = this.listenerCount("readable") > 0, n.flowing !== false && this.resume()) : e === "readable" && !n.endEmitted && !n.readableListening && (n.readableListening = n.needReadable = true, n.flowing = false, n.emittedReadable = false, w("on readable", n.length, n.reading), n.length ? ut(this) : n.reading || process.nextTick(Es, this)), r;
    };
    _2.prototype.addListener = _2.prototype.on;
    _2.prototype.removeListener = function(e, t) {
      var r = Ue.prototype.removeListener.call(this, e, t);
      return e === "readable" && process.nextTick(Yn, this), r;
    };
    _2.prototype.removeAllListeners = function(e) {
      var t = Ue.prototype.removeAllListeners.apply(this, arguments);
      return (e === "readable" || e === undefined) && process.nextTick(Yn, this), t;
    };
    function Yn(e) {
      var t = e._readableState;
      t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = true : e.listenerCount("data") > 0 && e.resume();
    }
    function Es(e) {
      w("readable nexttick read 0"), e.read(0);
    }
    _2.prototype.resume = function() {
      var e = this._readableState;
      return e.flowing || (w("resume"), e.flowing = !e.readableListening, xs(this, e)), e.paused = false, this;
    };
    function xs(e, t) {
      t.resumeScheduled || (t.resumeScheduled = true, process.nextTick(Rs, e, t));
    }
    function Rs(e, t) {
      w("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = false, e.emit("resume"), lr(e), t.flowing && !t.reading && e.read(0);
    }
    _2.prototype.pause = function() {
      return w("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (w("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function lr(e) {
      var t = e._readableState;
      for (w("flow", t.flowing);t.flowing && e.read() !== null; )
        ;
    }
    _2.prototype.wrap = function(e) {
      var t = this, r = this._readableState, n = false;
      e.on("end", function() {
        if (w("wrapped end"), r.decoder && !r.ended) {
          var a2 = r.decoder.end();
          a2 && a2.length && t.push(a2);
        }
        t.push(null);
      }), e.on("data", function(a2) {
        if (w("wrapped data"), r.decoder && (a2 = r.decoder.write(a2)), !(r.objectMode && a2 == null) && !(!r.objectMode && (!a2 || !a2.length))) {
          var s2 = t.push(a2);
          s2 || (n = true, e.pause());
        }
      });
      for (var i in e)
        this[i] === undefined && typeof e[i] == "function" && (this[i] = function(s2) {
          return function() {
            return e[s2].apply(e, arguments);
          };
        }(i));
      for (var o = 0;o < or.length; o++)
        e.on(or[o], this.emit.bind(this, or[o]));
      return this._read = function(a2) {
        w("wrapped _read", a2), n && (n = false, e.resume());
      }, this;
    };
    typeof Symbol == "function" && (_2.prototype[Symbol.asyncIterator] = function() {
      return nr === undefined && (nr = Dn()), nr(this);
    });
    Object.defineProperty(_2.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(_2.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(_2.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(t) {
      this._readableState && (this._readableState.flowing = t);
    } });
    _2._fromList = Xn;
    Object.defineProperty(_2.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Xn(e, t) {
      if (t.length === 0)
        return null;
      var r;
      return t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (t.decoder ? r = t.buffer.join("") : t.buffer.length === 1 ? r = t.buffer.first() : r = t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r;
    }
    function sr(e) {
      var t = e._readableState;
      w("endReadable", t.endEmitted), t.endEmitted || (t.ended = true, process.nextTick(Ss, t, e));
    }
    function Ss(e, t) {
      if (w("endReadableNT", e.endEmitted, e.length), !e.endEmitted && e.length === 0 && (e.endEmitted = true, t.readable = false, t.emit("end"), e.autoDestroy)) {
        var r = t._writableState;
        (!r || r.autoDestroy && r.finished) && t.destroy();
      }
    }
    typeof Symbol == "function" && (_2.from = function(e, t) {
      return ir2 === undefined && (ir2 = jn()), ir2(_2, e, t);
    });
    function zn2(e, t) {
      for (var r = 0, n = e.length;r < n; r++)
        if (e[r] === t)
          return r;
      return -1;
    }
  });
  hr2 = b3((tu, Qn) => {
    Qn.exports = z;
    var lt = fe2().codes, Ts = lt.ERR_METHOD_NOT_IMPLEMENTED, As = lt.ERR_MULTIPLE_CALLBACK, Bs = lt.ERR_TRANSFORM_ALREADY_TRANSFORMING, Is = lt.ERR_TRANSFORM_WITH_LENGTH_0, ht = ue2();
    Q2()(z, ht);
    function Cs(e, t) {
      var r = this._transformState;
      r.transforming = false;
      var n = r.writecb;
      if (n === null)
        return this.emit("error", new As);
      r.writechunk = null, r.writecb = null, t != null && this.push(t), n(e);
      var i = this._readableState;
      i.reading = false, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
    }
    function z(e) {
      if (!(this instanceof z))
        return new z(e);
      ht.call(this, e), this._transformState = { afterTransform: Cs.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, e && (typeof e.transform == "function" && (this._transform = e.transform), typeof e.flush == "function" && (this._flush = e.flush)), this.on("prefinish", Ls);
    }
    function Ls() {
      var e = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(t, r) {
        Jn(e, t, r);
      }) : Jn(this, null, null);
    }
    z.prototype.push = function(e, t) {
      return this._transformState.needTransform = false, ht.prototype.push.call(this, e, t);
    };
    z.prototype._transform = function(e, t, r) {
      r(new Ts("_transform()"));
    };
    z.prototype._write = function(e, t, r) {
      var n = this._transformState;
      if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
        var i = this._readableState;
        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
      }
    };
    z.prototype._read = function(e) {
      var t = this._transformState;
      t.writechunk !== null && !t.transforming ? (t.transforming = true, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = true;
    };
    z.prototype._destroy = function(e, t) {
      ht.prototype._destroy.call(this, e, function(r) {
        t(r);
      });
    };
    function Jn(e, t, r) {
      if (t)
        return e.emit("error", t);
      if (r != null && e.push(r), e._writableState.length)
        throw new Is;
      if (e._transformState.transforming)
        throw new Bs;
      return e.push(null);
    }
  });
  ri = b3((ru, ti2) => {
    ti2.exports = Pe;
    var ei = hr2();
    Q2()(Pe, ei);
    function Pe(e) {
      if (!(this instanceof Pe))
        return new Pe(e);
      ei.call(this, e);
    }
    Pe.prototype._transform = function(e, t, r) {
      r(null, e);
    };
  });
  si = b3((nu, ai) => {
    var cr2;
    function Ms(e) {
      var t = false;
      return function() {
        t || (t = true, e.apply(undefined, arguments));
      };
    }
    var oi = fe2().codes, Os = oi.ERR_MISSING_ARGS, Fs = oi.ERR_STREAM_DESTROYED;
    function ni(e) {
      if (e)
        throw e;
    }
    function Ns(e) {
      return e.setHeader && typeof e.abort == "function";
    }
    function Us(e, t, r, n) {
      n = Ms(n);
      var i = false;
      e.on("close", function() {
        i = true;
      }), cr2 === undefined && (cr2 = it()), cr2(e, { readable: t, writable: r }, function(a2) {
        if (a2)
          return n(a2);
        i = true, n();
      });
      var o = false;
      return function(a2) {
        if (!i && !o) {
          if (o = true, Ns(e))
            return e.abort();
          if (typeof e.destroy == "function")
            return e.destroy();
          n(a2 || new Fs("pipe"));
        }
      };
    }
    function ii(e) {
      e();
    }
    function Ps(e, t) {
      return e.pipe(t);
    }
    function qs(e) {
      return !e.length || typeof e[e.length - 1] != "function" ? ni : e.pop();
    }
    function Ds() {
      for (var e = arguments.length, t = new Array(e), r = 0;r < e; r++)
        t[r] = arguments[r];
      var n = qs(t);
      if (Array.isArray(t[0]) && (t = t[0]), t.length < 2)
        throw new Os("streams");
      var i, o = t.map(function(a2, s2) {
        var u2 = s2 < t.length - 1, l2 = s2 > 0;
        return Us(a2, u2, l2, function(h2) {
          i || (i = h2), h2 && o.forEach(ii), !u2 && (o.forEach(ii), n(i));
        });
      });
      return t.reduce(Ps);
    }
    ai.exports = Ds;
  });
  dr2 = b3((q, fi2) => {
    q = fi2.exports = Xt();
    q.Stream = q;
    q.Readable = q;
    q.Writable = Kt2();
    q.Duplex = ue2();
    q.Transform = hr2();
    q.PassThrough = ri();
    q.finished = it();
    q.pipeline = si();
  });
  gr = b3((yr2) => {
    var ui = xt(), ks = Q2(), li2 = dr2(), ct = yr2.readyStates = { UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4 }, pr2 = yr2.IncomingMessage = function(e, t, r, n) {
      var i = this;
      if (li2.Readable.call(i), i._mode = r, i.headers = {}, i.rawHeaders = [], i.trailers = {}, i.rawTrailers = [], i.on("end", function() {
        process.nextTick(function() {
          i.emit("close");
        });
      }), r === "fetch") {
        let c2 = function() {
          a2.read().then(function(d2) {
            if (!i._destroyed) {
              if (n(d2.done), d2.done) {
                i.push(null);
                return;
              }
              i.push(Buffer.from(d2.value)), c2();
            }
          }).catch(function(d2) {
            n(true), i._destroyed || i.emit("error", d2);
          });
        };
        var h2 = c2;
        if (i._fetchResponse = t, i.url = t.url, i.statusCode = t.status, i.statusMessage = t.statusText, t.headers.forEach(function(d2, p2) {
          i.headers[p2.toLowerCase()] = d2, i.rawHeaders.push(p2, d2);
        }), ui.writableStream) {
          var o = new WritableStream({ write: function(d2) {
            return n(false), new Promise(function(p2, g2) {
              i._destroyed ? g2() : i.push(Buffer.from(d2)) ? p2() : i._resumeFetch = p2;
            });
          }, close: function() {
            n(true), i._destroyed || i.push(null);
          }, abort: function(d2) {
            n(true), i._destroyed || i.emit("error", d2);
          } });
          try {
            t.body.pipeTo(o).catch(function(d2) {
              n(true), i._destroyed || i.emit("error", d2);
            });
            return;
          } catch {
          }
        }
        var a2 = t.body.getReader();
        c2();
      } else {
        i._xhr = e, i._pos = 0, i.url = e.responseURL, i.statusCode = e.status, i.statusMessage = e.statusText;
        var s2 = e.getAllResponseHeaders().split(/\r?\n/);
        if (s2.forEach(function(c2) {
          var d2 = c2.match(/^([^:]+):\s*(.*)/);
          if (d2) {
            var p2 = d2[1].toLowerCase();
            p2 === "set-cookie" ? (i.headers[p2] === undefined && (i.headers[p2] = []), i.headers[p2].push(d2[2])) : i.headers[p2] !== undefined ? i.headers[p2] += ", " + d2[2] : i.headers[p2] = d2[2], i.rawHeaders.push(d2[1], d2[2]);
          }
        }), i._charset = "x-user-defined", !ui.overrideMimeType) {
          var u2 = i.rawHeaders["mime-type"];
          if (u2) {
            var l2 = u2.match(/;\s*charset=([^;])(;|$)/);
            l2 && (i._charset = l2[1].toLowerCase());
          }
          i._charset || (i._charset = "utf-8");
        }
      }
    };
    ks(pr2, li2.Readable);
    pr2.prototype._read = function() {
      var e = this, t = e._resumeFetch;
      t && (e._resumeFetch = null, t());
    };
    pr2.prototype._onXHRProgress = function(e) {
      var t = this, r = t._xhr, n = null;
      switch (t._mode) {
        case "text":
          if (n = r.responseText, n.length > t._pos) {
            var i = n.substr(t._pos);
            if (t._charset === "x-user-defined") {
              for (var o = Buffer.alloc(i.length), a2 = 0;a2 < i.length; a2++)
                o[a2] = i.charCodeAt(a2) & 255;
              t.push(o);
            } else
              t.push(i, t._charset);
            t._pos = n.length;
          }
          break;
        case "arraybuffer":
          if (r.readyState !== ct.DONE || !r.response)
            break;
          n = r.response, t.push(Buffer.from(new Uint8Array(n)));
          break;
        case "moz-chunked-arraybuffer":
          if (n = r.response, r.readyState !== ct.LOADING || !n)
            break;
          t.push(Buffer.from(new Uint8Array(n)));
          break;
        case "ms-stream":
          if (n = r.response, r.readyState !== ct.LOADING)
            break;
          var s2 = new global.MSStreamReader;
          s2.onprogress = function() {
            s2.result.byteLength > t._pos && (t.push(Buffer.from(new Uint8Array(s2.result.slice(t._pos)))), t._pos = s2.result.byteLength);
          }, s2.onload = function() {
            e(true), t.push(null);
          }, s2.readAsArrayBuffer(n);
          break;
      }
      t._xhr.readyState === ct.DONE && t._mode !== "ms-stream" && (e(true), t.push(null));
    };
  });
  pi2 = b3((ou2, di2) => {
    var pe = xt(), js2 = Q2(), ci2 = gr(), wr = dr2(), Ws2 = ci2.IncomingMessage, hi = ci2.readyStates;
    function Hs2(e, t) {
      return pe.fetch && t ? "fetch" : pe.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : pe.msstream ? "ms-stream" : pe.arraybuffer && e ? "arraybuffer" : "text";
    }
    var M2 = di2.exports = function(e) {
      var t = this;
      wr.Writable.call(t), t._opts = e, t._body = [], t._headers = {}, e.auth && t.setHeader("Authorization", "Basic " + Buffer.from(e.auth).toString("base64")), Object.keys(e.headers).forEach(function(i) {
        t.setHeader(i, e.headers[i]);
      });
      var r, n = true;
      if (e.mode === "disable-fetch" || "requestTimeout" in e && !pe.abortController)
        n = false, r = true;
      else if (e.mode === "prefer-streaming")
        r = false;
      else if (e.mode === "allow-wrong-content-type")
        r = !pe.overrideMimeType;
      else if (!e.mode || e.mode === "default" || e.mode === "prefer-fast")
        r = true;
      else
        throw new Error("Invalid value for opts.mode");
      t._mode = Hs2(r, n), t._fetchTimer = null, t._socketTimeout = null, t._socketTimer = null, t.on("finish", function() {
        t._onFinish();
      });
    };
    js2(M2, wr.Writable);
    M2.prototype.setHeader = function(e, t) {
      var r = this, n = e.toLowerCase();
      Gs2.indexOf(n) === -1 && (r._headers[n] = { name: e, value: t });
    };
    M2.prototype.getHeader = function(e) {
      var t = this._headers[e.toLowerCase()];
      return t ? t.value : null;
    };
    M2.prototype.removeHeader = function(e) {
      var t = this;
      delete t._headers[e.toLowerCase()];
    };
    M2.prototype._onFinish = function() {
      var e = this;
      if (!e._destroyed) {
        var t = e._opts;
        "timeout" in t && t.timeout !== 0 && e.setTimeout(t.timeout);
        var r = e._headers, n = null;
        t.method !== "GET" && t.method !== "HEAD" && (n = new Blob(e._body, { type: (r["content-type"] || {}).value || "" }));
        var i = [];
        if (Object.keys(r).forEach(function(u2) {
          var l2 = r[u2].name, h2 = r[u2].value;
          Array.isArray(h2) ? h2.forEach(function(c2) {
            i.push([l2, c2]);
          }) : i.push([l2, h2]);
        }), e._mode === "fetch") {
          var o = null;
          if (pe.abortController) {
            var a2 = new AbortController;
            o = a2.signal, e._fetchAbortController = a2, "requestTimeout" in t && t.requestTimeout !== 0 && (e._fetchTimer = global.setTimeout(function() {
              e.emit("requestTimeout"), e._fetchAbortController && e._fetchAbortController.abort();
            }, t.requestTimeout));
          }
          global.fetch(e._opts.url, { method: e._opts.method, headers: i, body: n || undefined, mode: "cors", credentials: t.withCredentials ? "include" : "same-origin", signal: o }).then(function(u2) {
            e._fetchResponse = u2, e._resetTimers(false), e._connect();
          }, function(u2) {
            e._resetTimers(true), e._destroyed || e.emit("error", u2);
          });
        } else {
          var s2 = e._xhr = new global.XMLHttpRequest;
          try {
            s2.open(e._opts.method, e._opts.url, true);
          } catch (u2) {
            process.nextTick(function() {
              e.emit("error", u2);
            });
            return;
          }
          "responseType" in s2 && (s2.responseType = e._mode), "withCredentials" in s2 && (s2.withCredentials = !!t.withCredentials), e._mode === "text" && "overrideMimeType" in s2 && s2.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t && (s2.timeout = t.requestTimeout, s2.ontimeout = function() {
            e.emit("requestTimeout");
          }), i.forEach(function(u2) {
            s2.setRequestHeader(u2[0], u2[1]);
          }), e._response = null, s2.onreadystatechange = function() {
            switch (s2.readyState) {
              case hi.LOADING:
              case hi.DONE:
                e._onXHRProgress();
                break;
            }
          }, e._mode === "moz-chunked-arraybuffer" && (s2.onprogress = function() {
            e._onXHRProgress();
          }), s2.onerror = function() {
            e._destroyed || (e._resetTimers(true), e.emit("error", new Error("XHR error")));
          };
          try {
            s2.send(n);
          } catch (u2) {
            process.nextTick(function() {
              e.emit("error", u2);
            });
            return;
          }
        }
      }
    };
    function $s2(e) {
      try {
        var t = e.status;
        return t !== null && t !== 0;
      } catch {
        return false;
      }
    }
    M2.prototype._onXHRProgress = function() {
      var e = this;
      e._resetTimers(false), !(!$s2(e._xhr) || e._destroyed) && (e._response || e._connect(), e._response._onXHRProgress(e._resetTimers.bind(e)));
    };
    M2.prototype._connect = function() {
      var e = this;
      e._destroyed || (e._response = new Ws2(e._xhr, e._fetchResponse, e._mode, e._resetTimers.bind(e)), e._response.on("error", function(t) {
        e.emit("error", t);
      }), e.emit("response", e._response));
    };
    M2.prototype._write = function(e, t, r) {
      var n = this;
      n._body.push(e), r();
    };
    M2.prototype._resetTimers = function(e) {
      var t = this;
      global.clearTimeout(t._socketTimer), t._socketTimer = null, e ? (global.clearTimeout(t._fetchTimer), t._fetchTimer = null) : t._socketTimeout && (t._socketTimer = global.setTimeout(function() {
        t.emit("timeout");
      }, t._socketTimeout));
    };
    M2.prototype.abort = M2.prototype.destroy = function(e) {
      var t = this;
      t._destroyed = true, t._resetTimers(true), t._response && (t._response._destroyed = true), t._xhr ? t._xhr.abort() : t._fetchAbortController && t._fetchAbortController.abort(), e && t.emit("error", e);
    };
    M2.prototype.end = function(e, t, r) {
      var n = this;
      typeof e == "function" && (r = e, e = undefined), wr.Writable.prototype.end.call(n, e, t, r);
    };
    M2.prototype.setTimeout = function(e, t) {
      var r = this;
      t && r.once("timeout", t), r._socketTimeout = e, r._resetTimers(false);
    };
    M2.prototype.flushHeaders = function() {
    };
    M2.prototype.setNoDelay = function() {
    };
    M2.prototype.setSocketKeepAlive = function() {
    };
    var Gs2 = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
  });
  gi2 = b3((au2, yi2) => {
    yi2.exports = Vs2;
    var Ks2 = Object.prototype.hasOwnProperty;
    function Vs2() {
      for (var e = {}, t = 0;t < arguments.length; t++) {
        var r = arguments[t];
        for (var n in r)
          Ks2.call(r, n) && (e[n] = r[n]);
      }
      return e;
    }
  });
  mi2 = b3((su2, wi2) => {
    wi2.exports = { 100: "Continue", 101: "Switching Protocols", 102: "Processing", 200: "OK", 201: "Created", 202: "Accepted", 203: "Non-Authoritative Information", 204: "No Content", 205: "Reset Content", 206: "Partial Content", 207: "Multi-Status", 208: "Already Reported", 226: "IM Used", 300: "Multiple Choices", 301: "Moved Permanently", 302: "Found", 303: "See Other", 304: "Not Modified", 305: "Use Proxy", 307: "Temporary Redirect", 308: "Permanent Redirect", 400: "Bad Request", 401: "Unauthorized", 402: "Payment Required", 403: "Forbidden", 404: "Not Found", 405: "Method Not Allowed", 406: "Not Acceptable", 407: "Proxy Authentication Required", 408: "Request Timeout", 409: "Conflict", 410: "Gone", 411: "Length Required", 412: "Precondition Failed", 413: "Payload Too Large", 414: "URI Too Long", 415: "Unsupported Media Type", 416: "Range Not Satisfiable", 417: "Expectation Failed", 418: "I'm a teapot", 421: "Misdirected Request", 422: "Unprocessable Entity", 423: "Locked", 424: "Failed Dependency", 425: "Unordered Collection", 426: "Upgrade Required", 428: "Precondition Required", 429: "Too Many Requests", 431: "Request Header Fields Too Large", 451: "Unavailable For Legal Reasons", 500: "Internal Server Error", 501: "Not Implemented", 502: "Bad Gateway", 503: "Service Unavailable", 504: "Gateway Timeout", 505: "HTTP Version Not Supported", 506: "Variant Also Negotiates", 507: "Insufficient Storage", 508: "Loop Detected", 509: "Bandwidth Limit Exceeded", 510: "Not Extended", 511: "Network Authentication Required" };
  });
  Ti = {};
  mt(Ti, { decode: () => vr2, default: () => tf, encode: () => Er2, toASCII: () => Si2, toUnicode: () => Ri, ucs2decode: () => _r2, ucs2encode: () => Ei });
  Ai = Cr(() => {
    _i2 = "-", Ys2 = /^xn--/, Xs = /[^\0-\x7F]/, zs = /[\x2E\u3002\uFF0E\uFF61]/g, Zs = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, mr = 36 - 1, K2 = Math.floor, br = String.fromCharCode;
    Ei = (e) => String.fromCodePoint(...e), Qs = function(e) {
      return e >= 48 && e < 58 ? 26 + (e - 48) : e >= 65 && e < 91 ? e - 65 : e >= 97 && e < 123 ? e - 97 : 36;
    }, bi2 = function(e, t) {
      return e + 22 + 75 * (e < 26) - ((t != 0) << 5);
    }, xi2 = function(e, t, r) {
      let n = 0;
      for (e = r ? K2(e / 700) : e >> 1, e += K2(e / t);e > mr * 26 >> 1; n += 36)
        e = K2(e / mr);
      return K2(n + (mr + 1) * e / (e + 38));
    }, vr2 = function(e) {
      let t = [], r = e.length, n = 0, i = 128, o = 72, a2 = e.lastIndexOf(_i2);
      a2 < 0 && (a2 = 0);
      for (let s2 = 0;s2 < a2; ++s2)
        e.charCodeAt(s2) >= 128 && oe2("not-basic"), t.push(e.charCodeAt(s2));
      for (let s2 = a2 > 0 ? a2 + 1 : 0;s2 < r; ) {
        let u2 = n;
        for (let h2 = 1, c2 = 36;; c2 += 36) {
          s2 >= r && oe2("invalid-input");
          let d2 = Qs(e.charCodeAt(s2++));
          d2 >= 36 && oe2("invalid-input"), d2 > K2((2147483647 - n) / h2) && oe2("overflow"), n += d2 * h2;
          let p2 = c2 <= o ? 1 : c2 >= o + 26 ? 26 : c2 - o;
          if (d2 < p2)
            break;
          let g2 = 36 - p2;
          h2 > K2(2147483647 / g2) && oe2("overflow"), h2 *= g2;
        }
        let l2 = t.length + 1;
        o = xi2(n - u2, l2, u2 == 0), K2(n / l2) > 2147483647 - i && oe2("overflow"), i += K2(n / l2), n %= l2, t.splice(n++, 0, i);
      }
      return String.fromCodePoint(...t);
    }, Er2 = function(e) {
      let t = [];
      e = _r2(e);
      let r = e.length, n = 128, i = 0, o = 72;
      for (let u2 of e)
        u2 < 128 && t.push(br(u2));
      let a2 = t.length, s2 = a2;
      for (a2 && t.push(_i2);s2 < r; ) {
        let u2 = 2147483647;
        for (let h2 of e)
          h2 >= n && h2 < u2 && (u2 = h2);
        let l2 = s2 + 1;
        u2 - n > K2((2147483647 - i) / l2) && oe2("overflow"), i += (u2 - n) * l2, n = u2;
        for (let h2 of e)
          if (h2 < n && ++i > 2147483647 && oe2("overflow"), h2 === n) {
            let c2 = i;
            for (let d2 = 36;; d2 += 36) {
              let p2 = d2 <= o ? 1 : d2 >= o + 26 ? 26 : d2 - o;
              if (c2 < p2)
                break;
              let g2 = c2 - p2, E2 = 36 - p2;
              t.push(br(bi2(p2 + g2 % E2, 0))), c2 = K2(g2 / E2);
            }
            t.push(br(bi2(c2, 0))), o = xi2(i, l2, s2 === a2), i = 0, ++s2;
          }
        ++i, ++n;
      }
      return t.join("");
    }, Ri = function(e) {
      return vi2(e, function(t) {
        return Ys2.test(t) ? vr2(t.slice(4).toLowerCase()) : t;
      });
    }, Si2 = function(e) {
      return vi2(e, function(t) {
        return Xs.test(t) ? "xn--" + Er2(t) : t;
      });
    }, ef = { version: "2.1.0", ucs2: { decode: _r2, encode: Ei }, decode: vr2, encode: Er2, toASCII: Si2, toUnicode: Ri }, tf = ef;
  });
  Ii = b3((fu2, Bi) => {
    Bi.exports = { isString: function(e) {
      return typeof e == "string";
    }, isObject: function(e) {
      return typeof e == "object" && e !== null;
    }, isNull: function(e) {
      return e === null;
    }, isNullOrUndefined: function(e) {
      return e == null;
    } };
  });
  Li = b3((uu2, Ci) => {
    var rf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, nf = Object.keys || function() {
      var e = Object.prototype.hasOwnProperty, t = !{ toString: null }.propertyIsEnumerable("toString"), r = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], n = r.length;
      return function(i) {
        if (typeof i != "function" && ((typeof i > "u" ? "undefined" : rf(i)) !== "object" || i === null))
          throw new TypeError("Object.keys called on non-object");
        var o = [], a2, s2;
        for (a2 in i)
          e.call(i, a2) && o.push(a2);
        if (t)
          for (s2 = 0;s2 < n; s2++)
            e.call(i, r[s2]) && o.push(r[s2]);
        return o;
      };
    }();
    Ci.exports = nf;
  });
  ji = b3((lu2, ki) => {
    var Pi = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, pt = ki.exports = { unescapeBuffer: ff, unescape: Di2, escape: lf, stringify: Fi, encode: Fi, parse: Ui, decode: Ui }, of = _e2().Buffer, af = Li(), sf = function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    }, Mi = function(t, r, n) {
      var i;
      if (t == null)
        throw new TypeError('"arr" is null or not defined');
      var o = Object(t), a2 = o.length >>> 0;
      if (a2 === 0)
        return -1;
      var s2 = n | 0;
      if (s2 >= a2)
        return -1;
      for (i = Math.max(s2 >= 0 ? s2 : a2 - Math.abs(s2), 0);i < a2; ) {
        if (i in o && o[i] === r)
          return i;
        i++;
      }
      return -1;
    };
    function qi() {
    }
    qi.prototype = Object.create ? Object.create(null) : {};
    var Oi = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    function ff(e, t) {
      for (var r = of.allocUnsafe(e.length), n = 0, i, o, a2, s2, u2 = 0, l2 = 0;; u2++) {
        if (u2 < e.length)
          s2 = e.charCodeAt(u2);
        else {
          n > 0 && (r[l2++] = 37, n === 2 && (r[l2++] = a2));
          break;
        }
        switch (n) {
          case 0:
            switch (s2) {
              case 37:
                i = 0, o = 0, n = 1;
                break;
              case 43:
                t && (s2 = 32);
              default:
                r[l2++] = s2;
                break;
            }
            break;
          case 1:
            if (a2 = s2, i = Oi[s2], !(i >= 0)) {
              r[l2++] = 37, r[l2++] = s2, n = 0;
              break;
            }
            n = 2;
            break;
          case 2:
            if (n = 0, o = Oi[s2], !(o >= 0)) {
              r[l2++] = 37, r[l2++] = a2, r[l2++] = s2;
              break;
            }
            r[l2++] = 16 * i + o;
            break;
        }
      }
      return r.slice(0, l2);
    }
    function Di2(e, t) {
      try {
        return decodeURIComponent(e);
      } catch {
        return pt.unescapeBuffer(e, t).toString();
      }
    }
    var k2 = [];
    for (Se = 0;Se < 256; ++Se)
      k2[Se] = "%" + ((Se < 16 ? "0" : "") + Se.toString(16)).toUpperCase();
    var Se, uf = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0];
    function lf(e) {
      typeof e != "string" && ((typeof e > "u" ? "undefined" : Pi(e)) === "object" ? e = String(e) : e += "");
      for (var t = "", r = 0, n = 0;n < e.length; ++n) {
        var i = e.charCodeAt(n);
        if (i < 128) {
          if (uf[i] === 1)
            continue;
          r < n && (t += e.slice(r, n)), r = n + 1, t += k2[i];
          continue;
        }
        if (r < n && (t += e.slice(r, n)), i < 2048) {
          r = n + 1, t += k2[192 | i >> 6] + k2[128 | i & 63];
          continue;
        }
        if (i < 55296 || i >= 57344) {
          r = n + 1, t += k2[224 | i >> 12] + k2[128 | i >> 6 & 63] + k2[128 | i & 63];
          continue;
        }
        ++n;
        var o;
        if (n < e.length)
          o = e.charCodeAt(n) & 1023;
        else
          throw new URIError("URI malformed");
        r = n + 1, i = 65536 + ((i & 1023) << 10 | o), t += k2[240 | i >> 18] + k2[128 | i >> 12 & 63] + k2[128 | i >> 6 & 63] + k2[128 | i & 63];
      }
      return r === 0 ? e : r < e.length ? t + e.slice(r) : t;
    }
    function xr2(e) {
      return typeof e == "string" ? e : typeof e == "number" && isFinite(e) ? "" + e : typeof e == "boolean" ? e ? "true" : "false" : "";
    }
    function Fi(e, t, r, n) {
      t = t || "&", r = r || "=";
      var i = pt.escape;
      if (n && typeof n.encodeURIComponent == "function" && (i = n.encodeURIComponent), e !== null && (typeof e > "u" ? "undefined" : Pi(e)) === "object") {
        for (var o = af(e), a2 = o.length, s2 = a2 - 1, u2 = "", l2 = 0;l2 < a2; ++l2) {
          var h2 = o[l2], c2 = e[h2], d2 = i(xr2(h2)) + r;
          if (sf(c2)) {
            for (var p2 = c2.length, g2 = p2 - 1, E2 = 0;E2 < p2; ++E2)
              u2 += d2 + i(xr2(c2[E2])), E2 < g2 && (u2 += t);
            p2 && l2 < s2 && (u2 += t);
          } else
            u2 += d2 + i(xr2(c2)), l2 < s2 && (u2 += t);
        }
        return u2;
      }
      return "";
    }
    function Ni2(e) {
      if (e.length === 0)
        return [];
      if (e.length === 1)
        return [e.charCodeAt(0)];
      for (var t = [], r = 0;r < e.length; ++r)
        t[t.length] = e.charCodeAt(r);
      return t;
    }
    var hf = [38], cf = [61];
    function Ui(e, t, r, n) {
      var i = new qi;
      if (typeof e != "string" || e.length === 0)
        return i;
      var o = t ? Ni2(t + "") : hf, a2 = r ? Ni2(r + "") : cf, s2 = o.length, u2 = a2.length, l2 = 1000;
      n && typeof n.maxKeys == "number" && (l2 = n.maxKeys > 0 ? n.maxKeys : -1);
      var h2 = pt.unescape;
      n && typeof n.decodeURIComponent == "function" && (h2 = n.decodeURIComponent);
      for (var c2 = h2 !== Di2, d2 = [], p2 = 0, g2 = 0, E2 = 0, v = 0, m2 = "", y2 = "", R = c2, C = c2, T = 0, S = 0;S < e.length; ++S) {
        var B2 = e.charCodeAt(S);
        if (B2 === o[E2]) {
          if (++E2 === s2) {
            var F = S - E2 + 1;
            if (v < u2 ? g2 < F && (m2 += e.slice(g2, F)) : g2 < F && (y2 += e.slice(g2, F)), R && (m2 = dt2(m2, h2)), C && (y2 = dt2(y2, h2)), m2 || y2 || g2 - p2 > s2 || S === 0)
              if (Mi(d2, m2) === -1)
                i[m2] = y2, d2[d2.length] = m2;
              else {
                var L2 = i[m2] || "";
                L2.pop ? L2[L2.length] = y2 : L2 && (i[m2] = [L2, y2]);
              }
            else
              S === 1 && delete i[m2];
            if (--l2 === 0)
              break;
            R = C = c2, T = 0, m2 = y2 = "", p2 = g2, g2 = S + 1, E2 = v = 0;
          }
          continue;
        } else
          E2 = 0, C || (B2 === 37 ? T = 1 : T > 0 && (B2 >= 48 && B2 <= 57 || B2 >= 65 && B2 <= 70 || B2 >= 97 && B2 <= 102) ? ++T === 3 && (C = true) : T = 0);
        if (v < u2)
          if (B2 === a2[v]) {
            if (++v === u2) {
              var Y = S - v + 1;
              g2 < Y && (m2 += e.slice(g2, Y)), T = 0, g2 = S + 1;
            }
            continue;
          } else
            v = 0, R || (B2 === 37 ? T = 1 : T > 0 && (B2 >= 48 && B2 <= 57 || B2 >= 65 && B2 <= 70 || B2 >= 97 && B2 <= 102) ? ++T === 3 && (R = true) : T = 0);
        B2 === 43 && (v < u2 ? (g2 < S && (m2 += e.slice(g2, S)), m2 += "%20", R = true) : (g2 < S && (y2 += e.slice(g2, S)), y2 += "%20", C = true), g2 = S + 1);
      }
      if (l2 !== 0 && (g2 < e.length || v > 0))
        if (g2 < e.length && (v < u2 ? m2 += e.slice(g2) : E2 < s2 && (y2 += e.slice(g2))), R && (m2 = dt2(m2, h2)), C && (y2 = dt2(y2, h2)), Mi(d2, m2) === -1)
          i[m2] = y2, d2[d2.length] = m2;
        else {
          var Z = i[m2];
          Z.pop ? Z[Z.length] = y2 : i[m2] = [Z, y2];
        }
      return i;
    }
    function dt2(e, t) {
      try {
        return t(e);
      } catch {
        return pt.unescape(e, true);
      }
    }
  });
  Ar = b3((Ae) => {
    var df = (Ai(), _t2(Ti)), V2 = Ii();
    Ae.parse = qe;
    Ae.resolve = xf;
    Ae.resolveObject = Rf;
    Ae.format = Ef;
    Ae.Url = D;
    function D() {
      this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
    }
    var pf = /^([a-z0-9.+-]+:)/i, yf = /:[0-9]*$/, gf = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, wf = ["<", ">", '"', "`", " ", "\r", `
`, "	"], mf = ["{", "}", "|", "\\", "^", "`"].concat(wf), Rr2 = ["'"].concat(mf), Wi = ["%", "/", "?", ";", "#"].concat(Rr2), Hi2 = ["/", "?", "#"], bf = 255, $i = /^[+a-z0-9A-Z_-]{0,63}$/, _f = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, vf = { javascript: true, "javascript:": true }, Sr = { javascript: true, "javascript:": true }, Te = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, Tr = ji();
    function qe(e, t, r) {
      if (e && V2.isObject(e) && e instanceof D)
        return e;
      var n = new D;
      return n.parse(e, t, r), n;
    }
    D.prototype.parse = function(e, t, r) {
      if (!V2.isString(e))
        throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
      var n = e.indexOf("?"), i = n !== -1 && n < e.indexOf("#") ? "?" : "#", o = e.split(i), a2 = /\\/g;
      o[0] = o[0].replace(a2, "/"), e = o.join(i);
      var s2 = e;
      if (s2 = s2.trim(), !r && e.split("#").length === 1) {
        var u2 = gf.exec(s2);
        if (u2)
          return this.path = s2, this.href = s2, this.pathname = u2[1], u2[2] ? (this.search = u2[2], t ? this.query = Tr.parse(this.search.substr(1)) : this.query = this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
      }
      var l2 = pf.exec(s2);
      if (l2) {
        l2 = l2[0];
        var h2 = l2.toLowerCase();
        this.protocol = h2, s2 = s2.substr(l2.length);
      }
      if (r || l2 || s2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var c2 = s2.substr(0, 2) === "//";
        c2 && !(l2 && Sr[l2]) && (s2 = s2.substr(2), this.slashes = true);
      }
      if (!Sr[l2] && (c2 || l2 && !Te[l2])) {
        for (var d2 = -1, p2 = 0;p2 < Hi2.length; p2++) {
          var g2 = s2.indexOf(Hi2[p2]);
          g2 !== -1 && (d2 === -1 || g2 < d2) && (d2 = g2);
        }
        var E2, v;
        d2 === -1 ? v = s2.lastIndexOf("@") : v = s2.lastIndexOf("@", d2), v !== -1 && (E2 = s2.slice(0, v), s2 = s2.slice(v + 1), this.auth = decodeURIComponent(E2)), d2 = -1;
        for (var p2 = 0;p2 < Wi.length; p2++) {
          var g2 = s2.indexOf(Wi[p2]);
          g2 !== -1 && (d2 === -1 || g2 < d2) && (d2 = g2);
        }
        d2 === -1 && (d2 = s2.length), this.host = s2.slice(0, d2), s2 = s2.slice(d2), this.parseHost(), this.hostname = this.hostname || "";
        var m2 = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!m2)
          for (var y2 = this.hostname.split(/\./), p2 = 0, R = y2.length;p2 < R; p2++) {
            var C = y2[p2];
            if (!!C && !C.match($i)) {
              for (var T = "", S = 0, B2 = C.length;S < B2; S++)
                C.charCodeAt(S) > 127 ? T += "x" : T += C[S];
              if (!T.match($i)) {
                var F = y2.slice(0, p2), L2 = y2.slice(p2 + 1), Y = C.match(_f);
                Y && (F.push(Y[1]), L2.unshift(Y[2])), L2.length && (s2 = "/" + L2.join(".") + s2), this.hostname = F.join(".");
                break;
              }
            }
          }
        this.hostname.length > bf ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), m2 || (this.hostname = df.toASCII(this.hostname));
        var Z = this.port ? ":" + this.port : "", zi = this.hostname || "";
        this.host = zi + Z, this.href += this.host, m2 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), s2[0] !== "/" && (s2 = "/" + s2));
      }
      if (!vf[h2])
        for (var p2 = 0, R = Rr2.length;p2 < R; p2++) {
          var Be = Rr2[p2];
          if (s2.indexOf(Be) !== -1) {
            var gt2 = encodeURIComponent(Be);
            gt2 === Be && (gt2 = escape(Be)), s2 = s2.split(Be).join(gt2);
          }
        }
      var wt = s2.indexOf("#");
      wt !== -1 && (this.hash = s2.substr(wt), s2 = s2.slice(0, wt));
      var je = s2.indexOf("?");
      if (je !== -1 ? (this.search = s2.substr(je), this.query = s2.substr(je + 1), t && (this.query = Tr.parse(this.query)), s2 = s2.slice(0, je)) : t && (this.search = "", this.query = {}), s2 && (this.pathname = s2), Te[h2] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
        var Z = this.pathname || "", Zi = this.search || "";
        this.path = Z + Zi;
      }
      return this.href = this.format(), this;
    };
    function Ef(e) {
      return V2.isString(e) && (e = qe(e)), e instanceof D ? e.format() : D.prototype.format.call(e);
    }
    D.prototype.format = function() {
      var e = this.auth || "";
      e && (e = encodeURIComponent(e), e = e.replace(/%3A/i, ":"), e += "@");
      var t = this.protocol || "", r = this.pathname || "", n = this.hash || "", i = false, o = "";
      this.host ? i = e + this.host : this.hostname && (i = e + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (i += ":" + this.port)), this.query && V2.isObject(this.query) && Object.keys(this.query).length && (o = Tr.stringify(this.query));
      var a2 = this.search || o && "?" + o || "";
      return t && t.substr(-1) !== ":" && (t += ":"), this.slashes || (!t || Te[t]) && i !== false ? (i = "//" + (i || ""), r && r.charAt(0) !== "/" && (r = "/" + r)) : i || (i = ""), n && n.charAt(0) !== "#" && (n = "#" + n), a2 && a2.charAt(0) !== "?" && (a2 = "?" + a2), r = r.replace(/[?#]/g, function(s2) {
        return encodeURIComponent(s2);
      }), a2 = a2.replace("#", "%23"), t + i + r + a2 + n;
    };
    function xf(e, t) {
      return qe(e, false, true).resolve(t);
    }
    D.prototype.resolve = function(e) {
      return this.resolveObject(qe(e, false, true)).format();
    };
    function Rf(e, t) {
      return e ? qe(e, false, true).resolveObject(t) : t;
    }
    D.prototype.resolveObject = function(e) {
      if (V2.isString(e)) {
        var t = new D;
        t.parse(e, false, true), e = t;
      }
      for (var r = new D, n = Object.keys(this), i = 0;i < n.length; i++) {
        var o = n[i];
        r[o] = this[o];
      }
      if (r.hash = e.hash, e.href === "")
        return r.href = r.format(), r;
      if (e.slashes && !e.protocol) {
        for (var a2 = Object.keys(e), s2 = 0;s2 < a2.length; s2++) {
          var u2 = a2[s2];
          u2 !== "protocol" && (r[u2] = e[u2]);
        }
        return Te[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
      }
      if (e.protocol && e.protocol !== r.protocol) {
        if (!Te[e.protocol]) {
          for (var l2 = Object.keys(e), h2 = 0;h2 < l2.length; h2++) {
            var c2 = l2[h2];
            r[c2] = e[c2];
          }
          return r.href = r.format(), r;
        }
        if (r.protocol = e.protocol, !e.host && !Sr[e.protocol]) {
          for (var R = (e.pathname || "").split("/");R.length && !(e.host = R.shift()); )
            ;
          e.host || (e.host = ""), e.hostname || (e.hostname = ""), R[0] !== "" && R.unshift(""), R.length < 2 && R.unshift(""), r.pathname = R.join("/");
        } else
          r.pathname = e.pathname;
        if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
          var d2 = r.pathname || "", p2 = r.search || "";
          r.path = d2 + p2;
        }
        return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
      }
      var g2 = r.pathname && r.pathname.charAt(0) === "/", E2 = e.host || e.pathname && e.pathname.charAt(0) === "/", v = E2 || g2 || r.host && e.pathname, m2 = v, y2 = r.pathname && r.pathname.split("/") || [], R = e.pathname && e.pathname.split("/") || [], C = r.protocol && !Te[r.protocol];
      if (C && (r.hostname = "", r.port = null, r.host && (y2[0] === "" ? y2[0] = r.host : y2.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && (R[0] === "" ? R[0] = e.host : R.unshift(e.host)), e.host = null), v = v && (R[0] === "" || y2[0] === "")), E2)
        r.host = e.host || e.host === "" ? e.host : r.host, r.hostname = e.hostname || e.hostname === "" ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, y2 = R;
      else if (R.length)
        y2 || (y2 = []), y2.pop(), y2 = y2.concat(R), r.search = e.search, r.query = e.query;
      else if (!V2.isNullOrUndefined(e.search)) {
        if (C) {
          r.hostname = r.host = y2.shift();
          var T = r.host && r.host.indexOf("@") > 0 ? r.host.split("@") : false;
          T && (r.auth = T.shift(), r.host = r.hostname = T.shift());
        }
        return r.search = e.search, r.query = e.query, (!V2.isNull(r.pathname) || !V2.isNull(r.search)) && (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
      }
      if (!y2.length)
        return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
      for (var S = y2.slice(-1)[0], B2 = (r.host || e.host || y2.length > 1) && (S === "." || S === "..") || S === "", F = 0, L2 = y2.length;L2 >= 0; L2--)
        S = y2[L2], S === "." ? y2.splice(L2, 1) : S === ".." ? (y2.splice(L2, 1), F++) : F && (y2.splice(L2, 1), F--);
      if (!v && !m2)
        for (;F--; F)
          y2.unshift("..");
      v && y2[0] !== "" && (!y2[0] || y2[0].charAt(0) !== "/") && y2.unshift(""), B2 && y2.join("/").substr(-1) !== "/" && y2.push("");
      var Y = y2[0] === "" || y2[0] && y2[0].charAt(0) === "/";
      if (C) {
        r.hostname = r.host = Y ? "" : y2.length ? y2.shift() : "";
        var T = r.host && r.host.indexOf("@") > 0 ? r.host.split("@") : false;
        T && (r.auth = T.shift(), r.host = r.hostname = T.shift());
      }
      return v = v || r.host && y2.length, v && !Y && y2.unshift(""), y2.length ? r.pathname = y2.join("/") : (r.pathname = null, r.path = null), (!V2.isNull(r.pathname) || !V2.isNull(r.search)) && (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
    };
    D.prototype.parseHost = function() {
      var e = this.host, t = yf.exec(e);
      t && (t = t[0], t !== ":" && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
    };
  });
  Vi2 = b3((Ki2) => {
    var Gi2 = pi2(), Sf = gr(), Tf = gi2(), Af = mi2(), Bf = Ar(), j2 = Ki2;
    j2.request = function(e, t) {
      typeof e == "string" ? e = Bf.parse(e) : e = Tf(e);
      var r = global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "", n = e.protocol || r, i = e.hostname || e.host, o = e.port, a2 = e.path || "/";
      i && i.indexOf(":") !== -1 && (i = "[" + i + "]"), e.url = (i ? n + "//" + i : "") + (o ? ":" + o : "") + a2, e.method = (e.method || "GET").toUpperCase(), e.headers = e.headers || {};
      var s2 = new Gi2(e);
      return t && s2.on("response", t), s2;
    };
    j2.get = function(t, r) {
      var n = j2.request(t, r);
      return n.end(), n;
    };
    j2.ClientRequest = Gi2;
    j2.IncomingMessage = Sf.IncomingMessage;
    j2.Agent = function() {
    };
    j2.Agent.defaultMaxSockets = 4;
    j2.globalAgent = new j2.Agent;
    j2.STATUS_CODES = Af;
    j2.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
  });
  Ir = b3((du, Xi2) => {
    var De = Vi2(), If = Ar(), Br = Xi2.exports;
    for (yt in De)
      De.hasOwnProperty(yt) && (Br[yt] = De[yt]);
    var yt;
    Br.request = function(e, t) {
      return e = Yi2(e), De.request.call(this, e, t);
    };
    Br.get = function(e, t) {
      return e = Yi2(e), De.get.call(this, e, t);
    };
    function Yi2(e) {
      if (typeof e == "string" && (e = If.parse(e)), e.protocol || (e.protocol = "https:"), e.protocol !== "https:")
        throw new Error('Protocol "' + e.protocol + '" not supported. Expected "https:"');
      return e;
    }
  });
  ke2 = {};
  mt(ke2, { default: () => Cf });
  $e(ke2, bt2(Ir()));
  Cf = bt2(Ir());
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
});

// node:url
var exports_url = {};
__export(exports_url, {
  resolveObject: () => {
    {
      return it2;
    }
  },
  resolve: () => {
    {
      return nt2;
    }
  },
  pathToFileURL: () => {
    {
      return V2;
    }
  },
  parse: () => {
    {
      return L2;
    }
  },
  format: () => {
    {
      return at;
    }
  },
  fileURLToPath: () => {
    {
      return W;
    }
  },
  default: () => {
    {
      return ft;
    }
  },
  Url: () => {
    {
      return m2;
    }
  },
  URLSearchParams: () => {
    {
      return k2;
    }
  },
  URL: () => {
    {
      return K3;
    }
  }
});
var M2, S, I2, H, m2, L2, at, nt2, it2, K3, k2, F, Q3, E2, tt, st, ht, B2, D, G, et2, J, rt, ot, N2, R, Z, V2, W, ft;
var init_url = __esm(() => {
  M2 = function(s2) {
    return typeof s2 == "string";
  };
  S = function(s2) {
    return typeof s2 == "object" && s2 !== null;
  };
  I2 = function(s2) {
    return s2 === null;
  };
  H = function(s2) {
    return s2 == null;
  };
  m2 = function() {
    this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
  };
  L2 = function(s2, r, t) {
    if (s2 && S(s2) && s2 instanceof m2)
      return s2;
    var o = new m2;
    return o.parse(s2, r, t), o;
  };
  at = function(s2) {
    return M2(s2) && (s2 = L2(s2)), s2 instanceof m2 ? s2.format() : m2.prototype.format.call(s2);
  };
  nt2 = function(s2, r) {
    return L2(s2, false, true).resolve(r);
  };
  it2 = function(s2, r) {
    return s2 ? L2(s2, false, true).resolveObject(r) : r;
  };
  ({ URL: K3, URLSearchParams: k2, [Symbol.for("Bun.lazy")]: F } = globalThis);
  Q3 = /^([a-z0-9.+-]+:)/i;
  E2 = /:[0-9]*$/;
  tt = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
  st = ["<", ">", '"', "`", " ", "\r", `
`, "	"];
  ht = ["{", "}", "|", "\\", "^", "`"].concat(st);
  B2 = ["'"].concat(ht);
  D = ["%", "/", "?", ";", "#"].concat(B2);
  G = ["/", "?", "#"];
  et2 = 255;
  J = /^[+a-z0-9A-Z_-]{0,63}$/;
  rt = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
  ot = { javascript: true, "javascript:": true };
  N2 = { javascript: true, "javascript:": true };
  R = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true };
  Z = { parse(s2) {
    var r = decodeURIComponent;
    return (s2 + "").replace(/\+/g, " ").split("&").filter(Boolean).reduce(function(t, o, a2) {
      var l2 = o.split("="), f2 = r(l2[0] || ""), h2 = r(l2[1] || ""), y2 = t[f2];
      return t[f2] = y2 === undefined ? h2 : [].concat(y2, h2), t;
    }, {});
  }, stringify(s2) {
    var r = encodeURIComponent;
    return Object.keys(s2 || {}).reduce(function(t, o) {
      return [].concat(s2[o]).forEach(function(a2) {
        t.push(r(o) + "=" + r(a2));
      }), t;
    }, []).join("&").replace(/\s/g, "+");
  } };
  m2.prototype.parse = function(s2, r, t) {
    if (!M2(s2))
      throw new TypeError("Parameter 'url' must be a string, not " + typeof s2);
    var o = s2.indexOf("?"), a2 = o !== -1 && o < s2.indexOf("#") ? "?" : "#", l2 = s2.split(a2), f2 = /\\/g;
    l2[0] = l2[0].replace(f2, "/"), s2 = l2.join(a2);
    var h2 = s2;
    if (h2 = h2.trim(), !t && s2.split("#").length === 1) {
      var y2 = tt.exec(h2);
      if (y2)
        return this.path = h2, this.href = h2, this.pathname = y2[1], y2[2] ? (this.search = y2[2], r ? this.query = Z.parse(this.search.substr(1)) : this.query = this.search.substr(1)) : r && (this.search = "", this.query = {}), this;
    }
    var c2 = Q3.exec(h2);
    if (c2) {
      c2 = c2[0];
      var v = c2.toLowerCase();
      this.protocol = v, h2 = h2.substr(c2.length);
    }
    if (t || c2 || h2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var A2 = h2.substr(0, 2) === "//";
      A2 && !(c2 && N2[c2]) && (h2 = h2.substr(2), this.slashes = true);
    }
    if (!N2[c2] && (A2 || c2 && !R[c2])) {
      for (var u2 = -1, n = 0;n < G.length; n++) {
        var b4 = h2.indexOf(G[n]);
        b4 !== -1 && (u2 === -1 || b4 < u2) && (u2 = b4);
      }
      var j2, p2;
      u2 === -1 ? p2 = h2.lastIndexOf("@") : p2 = h2.lastIndexOf("@", u2), p2 !== -1 && (j2 = h2.slice(0, p2), h2 = h2.slice(p2 + 1), this.auth = decodeURIComponent(j2)), u2 = -1;
      for (var n = 0;n < D.length; n++) {
        var b4 = h2.indexOf(D[n]);
        b4 !== -1 && (u2 === -1 || b4 < u2) && (u2 = b4);
      }
      u2 === -1 && (u2 = h2.length), this.host = h2.slice(0, u2), h2 = h2.slice(u2), this.parseHost(), this.hostname = this.hostname || "";
      var P = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
      if (!P)
        for (var e = this.hostname.split(/\./), n = 0, i = e.length;n < i; n++) {
          var d2 = e[n];
          if (!!d2 && !d2.match(J)) {
            for (var g2 = "", x2 = 0, _2 = d2.length;x2 < _2; x2++)
              d2.charCodeAt(x2) > 127 ? g2 += "x" : g2 += d2[x2];
            if (!g2.match(J)) {
              var q = e.slice(0, n), O2 = e.slice(n + 1), U2 = d2.match(rt);
              U2 && (q.push(U2[1]), O2.unshift(U2[2])), O2.length && (h2 = "/" + O2.join(".") + h2), this.hostname = q.join(".");
              break;
            }
          }
        }
      this.hostname.length > et2 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), P || (this.hostname = new K3(`https://${this.hostname}`).hostname);
      var w = this.port ? ":" + this.port : "", X2 = this.hostname || "";
      this.host = X2 + w, this.href += this.host, P && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), h2[0] !== "/" && (h2 = "/" + h2));
    }
    if (!ot[v])
      for (var n = 0, i = B2.length;n < i; n++) {
        var C = B2[n];
        if (h2.indexOf(C) !== -1) {
          var z = encodeURIComponent(C);
          z === C && (z = escape(C)), h2 = h2.split(C).join(z);
        }
      }
    var $ = h2.indexOf("#");
    $ !== -1 && (this.hash = h2.substr($), h2 = h2.slice(0, $));
    var T = h2.indexOf("?");
    if (T !== -1 ? (this.search = h2.substr(T), this.query = h2.substr(T + 1), r && (this.query = Z.parse(this.query)), h2 = h2.slice(0, T)) : r && (this.search = "", this.query = {}), h2 && (this.pathname = h2), R[v] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
      var w = this.pathname || "", Y = this.search || "";
      this.path = w + Y;
    }
    return this.href = this.format(), this;
  };
  m2.prototype.format = function() {
    var s2 = this.auth || "";
    s2 && (s2 = encodeURIComponent(s2), s2 = s2.replace(/%3A/i, ":"), s2 += "@");
    var r = this.protocol || "", t = this.pathname || "", o = this.hash || "", a2 = false, l2 = "";
    this.host ? a2 = s2 + this.host : this.hostname && (a2 = s2 + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (a2 += ":" + this.port)), this.query && S(this.query) && Object.keys(this.query).length && (l2 = Z.stringify(this.query));
    var f2 = this.search || l2 && "?" + l2 || "";
    return r && r.substr(-1) !== ":" && (r += ":"), this.slashes || (!r || R[r]) && a2 !== false ? (a2 = "//" + (a2 || ""), t && t.charAt(0) !== "/" && (t = "/" + t)) : a2 || (a2 = ""), o && o.charAt(0) !== "#" && (o = "#" + o), f2 && f2.charAt(0) !== "?" && (f2 = "?" + f2), t = t.replace(/[?#]/g, function(h2) {
      return encodeURIComponent(h2);
    }), f2 = f2.replace("#", "%23"), r + a2 + t + f2 + o;
  };
  m2.prototype.resolve = function(s2) {
    return this.resolveObject(L2(s2, false, true)).format();
  };
  m2.prototype.resolveObject = function(s2) {
    if (M2(s2)) {
      var r = new m2;
      r.parse(s2, false, true), s2 = r;
    }
    for (var t = new m2, o = Object.keys(this), a2 = 0;a2 < o.length; a2++) {
      var l2 = o[a2];
      t[l2] = this[l2];
    }
    if (t.hash = s2.hash, s2.href === "")
      return t.href = t.format(), t;
    if (s2.slashes && !s2.protocol) {
      for (var f2 = Object.keys(s2), h2 = 0;h2 < f2.length; h2++) {
        var y2 = f2[h2];
        y2 !== "protocol" && (t[y2] = s2[y2]);
      }
      return R[t.protocol] && t.hostname && !t.pathname && (t.path = t.pathname = "/"), t.href = t.format(), t;
    }
    if (s2.protocol && s2.protocol !== t.protocol) {
      if (!R[s2.protocol]) {
        for (var c2 = Object.keys(s2), v = 0;v < c2.length; v++) {
          var A2 = c2[v];
          t[A2] = s2[A2];
        }
        return t.href = t.format(), t;
      }
      if (t.protocol = s2.protocol, !s2.host && !N2[s2.protocol]) {
        for (var i = (s2.pathname || "").split("/");i.length && !(s2.host = i.shift()); )
          ;
        s2.host || (s2.host = ""), s2.hostname || (s2.hostname = ""), i[0] !== "" && i.unshift(""), i.length < 2 && i.unshift(""), t.pathname = i.join("/");
      } else
        t.pathname = s2.pathname;
      if (t.search = s2.search, t.query = s2.query, t.host = s2.host || "", t.auth = s2.auth, t.hostname = s2.hostname || s2.host, t.port = s2.port, t.pathname || t.search) {
        var u2 = t.pathname || "", n = t.search || "";
        t.path = u2 + n;
      }
      return t.slashes = t.slashes || s2.slashes, t.href = t.format(), t;
    }
    var b4 = t.pathname && t.pathname.charAt(0) === "/", j2 = s2.host || s2.pathname && s2.pathname.charAt(0) === "/", p2 = j2 || b4 || t.host && s2.pathname, P = p2, e = t.pathname && t.pathname.split("/") || [], i = s2.pathname && s2.pathname.split("/") || [], d2 = t.protocol && !R[t.protocol];
    if (d2 && (t.hostname = "", t.port = null, t.host && (e[0] === "" ? e[0] = t.host : e.unshift(t.host)), t.host = "", s2.protocol && (s2.hostname = null, s2.port = null, s2.host && (i[0] === "" ? i[0] = s2.host : i.unshift(s2.host)), s2.host = null), p2 = p2 && (i[0] === "" || e[0] === "")), j2)
      t.host = s2.host || s2.host === "" ? s2.host : t.host, t.hostname = s2.hostname || s2.hostname === "" ? s2.hostname : t.hostname, t.search = s2.search, t.query = s2.query, e = i;
    else if (i.length)
      e || (e = []), e.pop(), e = e.concat(i), t.search = s2.search, t.query = s2.query;
    else if (!H(s2.search)) {
      if (d2) {
        t.hostname = t.host = e.shift();
        var g2 = t.host && t.host.indexOf("@") > 0 ? t.host.split("@") : false;
        g2 && (t.auth = g2.shift(), t.host = t.hostname = g2.shift());
      }
      return t.search = s2.search, t.query = s2.query, (!I2(t.pathname) || !I2(t.search)) && (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.href = t.format(), t;
    }
    if (!e.length)
      return t.pathname = null, t.search ? t.path = "/" + t.search : t.path = null, t.href = t.format(), t;
    for (var x2 = e.slice(-1)[0], _2 = (t.host || s2.host || e.length > 1) && (x2 === "." || x2 === "..") || x2 === "", q = 0, O2 = e.length;O2 >= 0; O2--)
      x2 = e[O2], x2 === "." ? e.splice(O2, 1) : x2 === ".." ? (e.splice(O2, 1), q++) : q && (e.splice(O2, 1), q--);
    if (!p2 && !P)
      for (;q--; q)
        e.unshift("..");
    p2 && e[0] !== "" && (!e[0] || e[0].charAt(0) !== "/") && e.unshift(""), _2 && e.join("/").substr(-1) !== "/" && e.push("");
    var U2 = e[0] === "" || e[0] && e[0].charAt(0) === "/";
    if (d2) {
      t.hostname = t.host = U2 ? "" : e.length ? e.shift() : "";
      var g2 = t.host && t.host.indexOf("@") > 0 ? t.host.split("@") : false;
      g2 && (t.auth = g2.shift(), t.host = t.hostname = g2.shift());
    }
    return p2 = p2 || t.host && e.length, p2 && !U2 && e.unshift(""), e.length ? t.pathname = e.join("/") : (t.pathname = null, t.path = null), (!I2(t.pathname) || !I2(t.search)) && (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.auth = s2.auth || t.auth, t.slashes = t.slashes || s2.slashes, t.href = t.format(), t;
  };
  m2.prototype.parseHost = function() {
    var s2 = this.host, r = E2.exec(s2);
    r && (r = r[0], r !== ":" && (this.port = r.substr(1)), s2 = s2.substr(0, s2.length - r.length)), s2 && (this.hostname = s2);
  };
  F && (V2 = F("pathToFileURL"), W = F("fileURLToPath"));
  ft = { parse: L2, resolve: nt2, resolveObject: it2, format: at, Url: m2, pathToFileURL: V2, fileURLToPath: W, URL: K3, URLSearchParams: k2 };
});

// node_modules/clean-css/lib/utils/is-http-resource.js
var require_is_http_resource = __commonJS((exports, module) => {
  var isHttpResource = function(uri) {
    return HTTP_RESOURCE_PATTERN.test(uri);
  };
  var HTTP_RESOURCE_PATTERN = /^http:\/\//;
  module.exports = isHttpResource;
});

// node_modules/clean-css/lib/utils/is-https-resource.js
var require_is_https_resource = __commonJS((exports, module) => {
  var isHttpsResource = function(uri) {
    return HTTPS_RESOURCE_PATTERN.test(uri);
  };
  var HTTPS_RESOURCE_PATTERN = /^https:\/\//;
  module.exports = isHttpsResource;
});

// node_modules/clean-css/lib/reader/load-remote-resource.js
var require_load_remote_resource = __commonJS((exports, module) => {
  var loadRemoteResource = function(uri, inlineRequest, inlineTimeout, callback) {
    var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;
    var errorHandled = false;
    var requestOptions;
    var fetch;
    requestOptions = override(url.parse(uri), inlineRequest || {});
    if (inlineRequest.hostname !== undefined) {
      requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;
      requestOptions.path = requestOptions.href;
    }
    fetch = proxyProtocol && !isHttpsResource(proxyProtocol) || isHttpResource(uri) ? http.get : https.get;
    fetch(requestOptions, function(res) {
      var chunks = [];
      var movedUri;
      if (errorHandled) {
        return;
      }
      if (res.statusCode < 200 || res.statusCode > 399) {
        return callback(res.statusCode, null);
      } else if (res.statusCode > 299) {
        movedUri = url.resolve(uri, res.headers.location);
        return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);
      }
      res.on("data", function(chunk) {
        chunks.push(chunk.toString());
      });
      res.on("end", function() {
        var body = chunks.join("");
        callback(null, body);
      });
    }).on("error", function(res) {
      if (errorHandled) {
        return;
      }
      errorHandled = true;
      callback(res.message, null);
    }).on("timeout", function() {
      if (errorHandled) {
        return;
      }
      errorHandled = true;
      callback("timeout", null);
    }).setTimeout(inlineTimeout);
  };
  var http = (init_http(), __toCommonJS(exports_http));
  var https = (init_https(), __toCommonJS(exports_https));
  var url = (init_url(), __toCommonJS(exports_url));
  var isHttpResource = require_is_http_resource();
  var isHttpsResource = require_is_https_resource();
  var override = require_override();
  var HTTP_PROTOCOL = "http:";
  module.exports = loadRemoteResource;
});

// node_modules/clean-css/lib/options/fetch.js
var require_fetch = __commonJS((exports, module) => {
  var fetchFrom = function(callback) {
    return callback || loadRemoteResource;
  };
  var loadRemoteResource = require_load_remote_resource();
  module.exports = fetchFrom;
});

// node_modules/clean-css/lib/options/inline.js
var require_inline = __commonJS((exports, module) => {
  var inlineOptionsFrom = function(rules) {
    if (Array.isArray(rules)) {
      return rules;
    }
    if (rules === false) {
      return ["none"];
    }
    return rules === undefined ? ["local"] : rules.split(",");
  };
  module.exports = inlineOptionsFrom;
});

// node_modules/clean-css/lib/options/inline-request.js
var require_inline_request = __commonJS((exports, module) => {
  var inlineRequestFrom = function(option) {
    return override(proxyOptionsFrom(process.env.HTTP_PROXY || process.env.http_proxy), option || {});
  };
  var proxyOptionsFrom = function(httpProxy) {
    return httpProxy ? {
      hostname: url.parse(httpProxy).hostname,
      port: parseInt(url.parse(httpProxy).port)
    } : {};
  };
  var url = (init_url(), __toCommonJS(exports_url));
  var override = require_override();
  module.exports = inlineRequestFrom;
});

// node_modules/clean-css/lib/options/inline-timeout.js
var require_inline_timeout = __commonJS((exports, module) => {
  var inlineTimeoutFrom = function(option) {
    return option || DEFAULT_TIMEOUT;
  };
  var DEFAULT_TIMEOUT = 5000;
  module.exports = inlineTimeoutFrom;
});

// node_modules/clean-css/lib/options/rebase.js
var require_rebase = __commonJS((exports, module) => {
  var rebaseFrom = function(rebaseOption) {
    return rebaseOption === undefined ? true : !!rebaseOption;
  };
  module.exports = rebaseFrom;
});

// node:path
var exports_path = {};
__export(exports_path, {
  default: () => {
    {
      return q;
    }
  }
});
var L3, b4, z, D2, T, R2, _2, E3, C, A2, y2, h2, m3, q;
var init_path = __esm(() => {
  L3 = Object.create;
  b4 = Object.defineProperty;
  z = Object.getOwnPropertyDescriptor;
  D2 = Object.getOwnPropertyNames;
  T = Object.getPrototypeOf;
  R2 = Object.prototype.hasOwnProperty;
  _2 = (f2, e) => () => (e || f2((e = { exports: {} }).exports, e), e.exports);
  E3 = (f2, e) => {
    for (var r in e)
      b4(f2, r, { get: e[r], enumerable: true });
  };
  C = (f2, e, r, l2) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let i of D2(e))
        !R2.call(f2, i) && i !== r && b4(f2, i, { get: () => e[i], enumerable: !(l2 = z(e, i)) || l2.enumerable });
    return f2;
  };
  A2 = (f2, e, r) => (C(f2, e, "default"), r && C(r, e, "default"));
  y2 = (f2, e, r) => (r = f2 != null ? L3(T(f2)) : {}, C(e || !f2 || !f2.__esModule ? b4(r, "default", { value: f2, enumerable: true }) : r, f2));
  h2 = _2((F2, S2) => {
    function c2(f2) {
      if (typeof f2 != "string")
        throw new TypeError("Path must be a string. Received " + JSON.stringify(f2));
    }
    function w(f2, e) {
      for (var r = "", l2 = 0, i = -1, s2 = 0, n, t = 0;t <= f2.length; ++t) {
        if (t < f2.length)
          n = f2.charCodeAt(t);
        else {
          if (n === 47)
            break;
          n = 47;
        }
        if (n === 47) {
          if (!(i === t - 1 || s2 === 1))
            if (i !== t - 1 && s2 === 2) {
              if (r.length < 2 || l2 !== 2 || r.charCodeAt(r.length - 1) !== 46 || r.charCodeAt(r.length - 2) !== 46) {
                if (r.length > 2) {
                  var a2 = r.lastIndexOf("/");
                  if (a2 !== r.length - 1) {
                    a2 === -1 ? (r = "", l2 = 0) : (r = r.slice(0, a2), l2 = r.length - 1 - r.lastIndexOf("/")), i = t, s2 = 0;
                    continue;
                  }
                } else if (r.length === 2 || r.length === 1) {
                  r = "", l2 = 0, i = t, s2 = 0;
                  continue;
                }
              }
              e && (r.length > 0 ? r += "/.." : r = "..", l2 = 2);
            } else
              r.length > 0 ? r += "/" + f2.slice(i + 1, t) : r = f2.slice(i + 1, t), l2 = t - i - 1;
          i = t, s2 = 0;
        } else
          n === 46 && s2 !== -1 ? ++s2 : s2 = -1;
      }
      return r;
    }
    function J2(f2, e) {
      var r = e.dir || e.root, l2 = e.base || (e.name || "") + (e.ext || "");
      return r ? r === e.root ? r + l2 : r + f2 + l2 : l2;
    }
    var g2 = { resolve: function() {
      for (var e = "", r = false, l2, i = arguments.length - 1;i >= -1 && !r; i--) {
        var s2;
        i >= 0 ? s2 = arguments[i] : (l2 === undefined && (l2 = process.cwd()), s2 = l2), c2(s2), s2.length !== 0 && (e = s2 + "/" + e, r = s2.charCodeAt(0) === 47);
      }
      return e = w(e, !r), r ? e.length > 0 ? "/" + e : "/" : e.length > 0 ? e : ".";
    }, normalize: function(e) {
      if (c2(e), e.length === 0)
        return ".";
      var r = e.charCodeAt(0) === 47, l2 = e.charCodeAt(e.length - 1) === 47;
      return e = w(e, !r), e.length === 0 && !r && (e = "."), e.length > 0 && l2 && (e += "/"), r ? "/" + e : e;
    }, isAbsolute: function(e) {
      return c2(e), e.length > 0 && e.charCodeAt(0) === 47;
    }, join: function() {
      if (arguments.length === 0)
        return ".";
      for (var e, r = 0;r < arguments.length; ++r) {
        var l2 = arguments[r];
        c2(l2), l2.length > 0 && (e === undefined ? e = l2 : e += "/" + l2);
      }
      return e === undefined ? "." : g2.normalize(e);
    }, relative: function(e, r) {
      if (c2(e), c2(r), e === r || (e = g2.resolve(e), r = g2.resolve(r), e === r))
        return "";
      for (var l2 = 1;l2 < e.length && e.charCodeAt(l2) === 47; ++l2)
        ;
      for (var i = e.length, s2 = i - l2, n = 1;n < r.length && r.charCodeAt(n) === 47; ++n)
        ;
      for (var t = r.length, a2 = t - n, v = s2 < a2 ? s2 : a2, u2 = -1, o = 0;o <= v; ++o) {
        if (o === v) {
          if (a2 > v) {
            if (r.charCodeAt(n + o) === 47)
              return r.slice(n + o + 1);
            if (o === 0)
              return r.slice(n + o);
          } else
            s2 > v && (e.charCodeAt(l2 + o) === 47 ? u2 = o : o === 0 && (u2 = 0));
          break;
        }
        var k3 = e.charCodeAt(l2 + o), P = r.charCodeAt(n + o);
        if (k3 !== P)
          break;
        k3 === 47 && (u2 = o);
      }
      var d2 = "";
      for (o = l2 + u2 + 1;o <= i; ++o)
        (o === i || e.charCodeAt(o) === 47) && (d2.length === 0 ? d2 += ".." : d2 += "/..");
      return d2.length > 0 ? d2 + r.slice(n + u2) : (n += u2, r.charCodeAt(n) === 47 && ++n, r.slice(n));
    }, _makeLong: function(e) {
      return e;
    }, dirname: function(e) {
      if (c2(e), e.length === 0)
        return ".";
      for (var r = e.charCodeAt(0), l2 = r === 47, i = -1, s2 = true, n = e.length - 1;n >= 1; --n)
        if (r = e.charCodeAt(n), r === 47) {
          if (!s2) {
            i = n;
            break;
          }
        } else
          s2 = false;
      return i === -1 ? l2 ? "/" : "." : l2 && i === 1 ? "//" : e.slice(0, i);
    }, basename: function(e, r) {
      if (r !== undefined && typeof r != "string")
        throw new TypeError('"ext" argument must be a string');
      c2(e);
      var l2 = 0, i = -1, s2 = true, n;
      if (r !== undefined && r.length > 0 && r.length <= e.length) {
        if (r.length === e.length && r === e)
          return "";
        var t = r.length - 1, a2 = -1;
        for (n = e.length - 1;n >= 0; --n) {
          var v = e.charCodeAt(n);
          if (v === 47) {
            if (!s2) {
              l2 = n + 1;
              break;
            }
          } else
            a2 === -1 && (s2 = false, a2 = n + 1), t >= 0 && (v === r.charCodeAt(t) ? --t === -1 && (i = n) : (t = -1, i = a2));
        }
        return l2 === i ? i = a2 : i === -1 && (i = e.length), e.slice(l2, i);
      } else {
        for (n = e.length - 1;n >= 0; --n)
          if (e.charCodeAt(n) === 47) {
            if (!s2) {
              l2 = n + 1;
              break;
            }
          } else
            i === -1 && (s2 = false, i = n + 1);
        return i === -1 ? "" : e.slice(l2, i);
      }
    }, extname: function(e) {
      c2(e);
      for (var r = -1, l2 = 0, i = -1, s2 = true, n = 0, t = e.length - 1;t >= 0; --t) {
        var a2 = e.charCodeAt(t);
        if (a2 === 47) {
          if (!s2) {
            l2 = t + 1;
            break;
          }
          continue;
        }
        i === -1 && (s2 = false, i = t + 1), a2 === 46 ? r === -1 ? r = t : n !== 1 && (n = 1) : r !== -1 && (n = -1);
      }
      return r === -1 || i === -1 || n === 0 || n === 1 && r === i - 1 && r === l2 + 1 ? "" : e.slice(r, i);
    }, format: function(e) {
      if (e === null || typeof e != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof e);
      return J2("/", e);
    }, parse: function(e) {
      c2(e);
      var r = { root: "", dir: "", base: "", ext: "", name: "" };
      if (e.length === 0)
        return r;
      var l2 = e.charCodeAt(0), i = l2 === 47, s2;
      i ? (r.root = "/", s2 = 1) : s2 = 0;
      for (var n = -1, t = 0, a2 = -1, v = true, u2 = e.length - 1, o = 0;u2 >= s2; --u2) {
        if (l2 = e.charCodeAt(u2), l2 === 47) {
          if (!v) {
            t = u2 + 1;
            break;
          }
          continue;
        }
        a2 === -1 && (v = false, a2 = u2 + 1), l2 === 46 ? n === -1 ? n = u2 : o !== 1 && (o = 1) : n !== -1 && (o = -1);
      }
      return n === -1 || a2 === -1 || o === 0 || o === 1 && n === a2 - 1 && n === t + 1 ? a2 !== -1 && (t === 0 && i ? r.base = r.name = e.slice(1, a2) : r.base = r.name = e.slice(t, a2)) : (t === 0 && i ? (r.name = e.slice(1, n), r.base = e.slice(1, a2)) : (r.name = e.slice(t, n), r.base = e.slice(t, a2)), r.ext = e.slice(n, a2)), t > 0 ? r.dir = e.slice(0, t - 1) : i && (r.dir = "/"), r;
    }, sep: "/", delimiter: ":", win32: null, posix: null };
    g2.posix = g2;
    S2.exports = g2;
  });
  m3 = {};
  E3(m3, { default: () => q });
  A2(m3, y2(h2()));
  q = y2(h2());
});

// node_modules/clean-css/lib/options/rebase-to.js
var require_rebase_to = __commonJS((exports, module) => {
  var rebaseToFrom = function(option) {
    return option ? path.resolve(option) : process.cwd();
  };
  var path = (init_path(), __toCommonJS(exports_path));
  module.exports = rebaseToFrom;
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS((exports) => {
  var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  exports.encode = function(number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };
  exports.decode = function(charCode) {
    var bigA = 65;
    var bigZ = 90;
    var littleA = 97;
    var littleZ = 122;
    var zero = 48;
    var nine = 57;
    var plus = 43;
    var slash = 47;
    var littleOffset = 26;
    var numberOffset = 52;
    if (bigA <= charCode && charCode <= bigZ) {
      return charCode - bigA;
    }
    if (littleA <= charCode && charCode <= littleZ) {
      return charCode - littleA + littleOffset;
    }
    if (zero <= charCode && charCode <= nine) {
      return charCode - zero + numberOffset;
    }
    if (charCode == plus) {
      return 62;
    }
    if (charCode == slash) {
      return 63;
    }
    return -1;
  };
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS((exports) => {
  var toVLQSigned = function(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
  };
  var fromVLQSigned = function(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
  };
  var base64 = require_base64();
  var VLQ_BASE_SHIFT = 5;
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
  var VLQ_BASE_MASK = VLQ_BASE - 1;
  var VLQ_CONTINUATION_BIT = VLQ_BASE;
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);
    return encoded;
  };
  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;
    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };
});

// node_modules/source-map/lib/util.js
var require_util = __commonJS((exports) => {
  var getArg = function(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  };
  var urlParse = function(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  };
  var urlGenerate = function(aParsedUrl) {
    var url = "";
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ":";
    }
    url += "//";
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + "@";
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  };
  var normalize = function(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);
    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1;i >= 0; i--) {
      part = parts[i];
      if (part === ".") {
        parts.splice(i, 1);
      } else if (part === "..") {
        up++;
      } else if (up > 0) {
        if (part === "") {
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join("/");
    if (path === "") {
      path = isAbsolute ? "/" : ".";
    }
    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  };
  var join = function(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || "/";
    }
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  };
  var relative = function(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, "");
    var level = 0;
    while (aPath.indexOf(aRoot + "/") !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }
      ++level;
    }
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  };
  var identity = function(s2) {
    return s2;
  };
  var toSetString = function(aStr) {
    if (isProtoString(aStr)) {
      return "$" + aStr;
    }
    return aStr;
  };
  var fromSetString = function(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }
    return aStr;
  };
  var isProtoString = function(s2) {
    if (!s2) {
      return false;
    }
    var length = s2.length;
    if (length < 9) {
      return false;
    }
    if (s2.charCodeAt(length - 1) !== 95 || s2.charCodeAt(length - 2) !== 95 || s2.charCodeAt(length - 3) !== 111 || s2.charCodeAt(length - 4) !== 116 || s2.charCodeAt(length - 5) !== 111 || s2.charCodeAt(length - 6) !== 114 || s2.charCodeAt(length - 7) !== 112 || s2.charCodeAt(length - 8) !== 95 || s2.charCodeAt(length - 9) !== 95) {
      return false;
    }
    for (var i = length - 10;i >= 0; i--) {
      if (s2.charCodeAt(i) !== 36) {
        return false;
      }
    }
    return true;
  };
  var compareByOriginalPositions = function(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  };
  var compareByGeneratedPositionsDeflated = function(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  };
  var strcmp = function(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }
    if (aStr1 === null) {
      return 1;
    }
    if (aStr2 === null) {
      return -1;
    }
    if (aStr1 > aStr2) {
      return 1;
    }
    return -1;
  };
  var compareByGeneratedPositionsInflated = function(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  };
  var parseSourceMapInput = function(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
  };
  var computeSourceURL = function(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || "";
    if (sourceRoot) {
      if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
        sourceRoot += "/";
      }
      sourceURL = sourceRoot + sourceURL;
    }
    if (sourceMapURL) {
      var parsed = urlParse(sourceMapURL);
      if (!parsed) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (parsed.path) {
        var index = parsed.path.lastIndexOf("/");
        if (index >= 0) {
          parsed.path = parsed.path.substring(0, index + 1);
        }
      }
      sourceURL = join(urlGenerate(parsed), sourceURL);
    }
    return normalize(sourceURL);
  };
  exports.getArg = getArg;
  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;
  exports.urlParse = urlParse;
  exports.urlGenerate = urlGenerate;
  exports.normalize = normalize;
  exports.join = join;
  exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
  };
  exports.relative = relative;
  var supportsNullProto = function() {
    var obj = Object.create(null);
    return !("__proto__" in obj);
  }();
  exports.toSetString = supportsNullProto ? identity : toSetString;
  exports.fromSetString = supportsNullProto ? identity : fromSetString;
  exports.compareByOriginalPositions = compareByOriginalPositions;
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  exports.parseSourceMapInput = parseSourceMapInput;
  exports.computeSourceURL = computeSourceURL;
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS((exports) => {
  var ArraySet = function() {
    this._array = [];
    this._set = hasNativeMap ? new Map : Object.create(null);
  };
  var util = require_util();
  var has = Object.prototype.hasOwnProperty;
  var hasNativeMap = typeof Map !== "undefined";
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet;
    for (var i = 0, len = aArray.length;i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };
  ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  };
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      if (hasNativeMap) {
        this._set.set(aStr, idx);
      } else {
        this._set[sStr] = idx;
      }
    }
  };
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
      return this._set.has(aStr);
    } else {
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    }
  };
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
      var idx = this._set.get(aStr);
      if (idx >= 0) {
        return idx;
      }
    } else {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) {
        return this._set[sStr];
      }
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error("No element indexed by " + aIdx);
  };
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };
  exports.ArraySet = ArraySet;
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS((exports) => {
  var generatedPositionAfter = function(mappingA, mappingB) {
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  };
  var MappingList = function() {
    this._array = [];
    this._sorted = true;
    this._last = { generatedLine: -1, generatedColumn: 0 };
  };
  var util = require_util();
  MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };
  MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };
  exports.MappingList = MappingList;
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS((exports) => {
  var SourceMapGenerator = function(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, "file", null);
    this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
    this._skipValidation = util.getArg(aArgs, "skipValidation", false);
    this._sources = new ArraySet;
    this._names = new ArraySet;
    this._mappings = new MappingList;
    this._sourcesContents = null;
  };
  var base64VLQ = require_base64_vlq();
  var util = require_util();
  var ArraySet = require_array_set().ArraySet;
  var MappingList = require_mapping_list().MappingList;
  SourceMapGenerator.prototype._version = 3;
  SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot
    });
    aSourceMapConsumer.eachMapping(function(mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };
      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }
        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };
        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }
      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }
      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };
  SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, "generated");
    var original = util.getArg(aArgs, "original", null);
    var source = util.getArg(aArgs, "source", null);
    var name = util.getArg(aArgs, "name", null);
    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }
    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }
    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }
    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source,
      name
    });
  };
  SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }
    if (aSourceContent != null) {
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };
  SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    var newSources = new ArraySet;
    var newNames = new ArraySet;
    this._mappings.unsortedForEach(function(mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }
      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }
      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }
    }, this);
    this._sources = newSources;
    this._names = newNames;
    aSourceMapConsumer.sources.forEach(function(sourceFile2) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile2 = util.join(aSourceMapPath, sourceFile2);
        }
        if (sourceRoot != null) {
          sourceFile2 = util.relative(sourceRoot, sourceFile2);
        }
        this.setSourceContent(sourceFile2, content);
      }
    }, this);
  };
  SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
      throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
    }
    if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
      return;
    } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
      return;
    } else {
      throw new Error("Invalid mapping: " + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };
  SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = "";
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length;i < len; i++) {
      mapping = mappings[i];
      next = "";
      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ";";
          previousGeneratedLine++;
        }
      } else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ",";
        }
      }
      next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;
      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;
        next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;
        next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;
        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }
      result += next;
    }
    return result;
  };
  SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
  };
  SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }
    return map;
  };
  SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };
  exports.SourceMapGenerator = SourceMapGenerator;
});

// node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS((exports) => {
  var recursiveSearch = function(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      return mid;
    } else if (cmp > 0) {
      if (aHigh - mid > 1) {
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    } else {
      if (mid - aLow > 1) {
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  };
  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }
    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }
    return index;
  };
});

// node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS((exports) => {
  var swap = function(ary, x2, y3) {
    var temp = ary[x2];
    ary[x2] = ary[y3];
    ary[y3] = temp;
  };
  var randomIntInRange = function(low, high) {
    return Math.round(low + Math.random() * (high - low));
  };
  var doQuickSort = function(ary, comparator, p2, r) {
    if (p2 < r) {
      var pivotIndex = randomIntInRange(p2, r);
      var i = p2 - 1;
      swap(ary, pivotIndex, r);
      var pivot = ary[r];
      for (var j2 = p2;j2 < r; j2++) {
        if (comparator(ary[j2], pivot) <= 0) {
          i += 1;
          swap(ary, i, j2);
        }
      }
      swap(ary, i + 1, j2);
      var q2 = i + 1;
      doQuickSort(ary, comparator, p2, q2 - 1);
      doQuickSort(ary, comparator, q2 + 1, r);
    }
  };
  exports.quickSort = function(ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };
});

// node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS((exports) => {
  var SourceMapConsumer = function(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === "string") {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
  };
  var BasicSourceMapConsumer = function(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === "string") {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, "version");
    var sources = util.getArg(sourceMap, "sources");
    var names = util.getArg(sourceMap, "names", []);
    var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
    var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
    var mappings = util.getArg(sourceMap, "mappings");
    var file = util.getArg(sourceMap, "file", null);
    if (version != this._version) {
      throw new Error("Unsupported version: " + version);
    }
    if (sourceRoot) {
      sourceRoot = util.normalize(sourceRoot);
    }
    sources = sources.map(String).map(util.normalize).map(function(source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
    });
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);
    this._absoluteSources = this._sources.toArray().map(function(s2) {
      return util.computeSourceURL(sourceRoot, s2, aSourceMapURL);
    });
    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
  };
  var Mapping = function() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  };
  var IndexedSourceMapConsumer = function(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === "string") {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, "version");
    var sections = util.getArg(sourceMap, "sections");
    if (version != this._version) {
      throw new Error("Unsupported version: " + version);
    }
    this._sources = new ArraySet;
    this._names = new ArraySet;
    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function(s2) {
      if (s2.url) {
        throw new Error("Support for url field in sections not implemented.");
      }
      var offset = util.getArg(s2, "offset");
      var offsetLine = util.getArg(offset, "line");
      var offsetColumn = util.getArg(offset, "column");
      if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
        throw new Error("Section offsets must be ordered and non-overlapping.");
      }
      lastOffset = offset;
      return {
        generatedOffset: {
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s2, "map"), aSourceMapURL)
      };
    });
  };
  var util = require_util();
  var binarySearch = require_binary_search();
  var ArraySet = require_array_set().ArraySet;
  var base64VLQ = require_base64_vlq();
  var quickSort = require_quick_sort().quickSort;
  SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
  };
  SourceMapConsumer.prototype._version = 3;
  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
    configurable: true,
    enumerable: true,
    get: function() {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__generatedMappings;
    }
  });
  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
    configurable: true,
    enumerable: true,
    get: function() {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__originalMappings;
    }
  });
  SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c2 = aStr.charAt(index);
    return c2 === ";" || c2 === ",";
  };
  SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };
  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;
  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;
  SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    var mappings;
    switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
    }
    var sourceRoot = this.sourceRoot;
    mappings.map(function(mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };
  SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, "line");
    var needle = {
      source: util.getArg(aArgs, "source"),
      originalLine: line,
      originalColumn: util.getArg(aArgs, "column", 0)
    };
    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }
    var mappings = [];
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          });
          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;
        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          });
          mapping = this._originalMappings[++index];
        }
      }
    }
    return mappings;
  };
  exports.SourceMapConsumer = SourceMapConsumer;
  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
  BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    if (this._sources.has(relativeSource)) {
      return this._sources.indexOf(relativeSource);
    }
    var i;
    for (i = 0;i < this._absoluteSources.length; ++i) {
      if (this._absoluteSources[i] == aSource) {
        return i;
      }
    }
    return -1;
  };
  BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);
    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function(s2) {
      return util.computeSourceURL(smc.sourceRoot, s2, aSourceMapURL);
    });
    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];
    for (var i = 0, length = generatedMappings.length;i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;
      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;
        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }
        destOriginalMappings.push(destMapping);
      }
      destGeneratedMappings.push(destMapping);
    }
    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
    return smc;
  };
  BasicSourceMapConsumer.prototype._version = 3;
  Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
    get: function() {
      return this._absoluteSources.slice();
    }
  });
  BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;
    while (index < length) {
      if (aStr.charAt(index) === ";") {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      } else if (aStr.charAt(index) === ",") {
        index++;
      } else {
        mapping = new Mapping;
        mapping.generatedLine = generatedLine;
        for (end = index;end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);
        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }
          if (segment.length === 2) {
            throw new Error("Found a source, but no line and column");
          }
          if (segment.length === 3) {
            throw new Error("Found a source and line, but no column");
          }
          cachedSegments[str] = segment;
        }
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;
        if (segment.length > 1) {
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          mapping.originalLine += 1;
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;
          if (segment.length > 4) {
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }
        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === "number") {
          originalMappings.push(mapping);
        }
      }
    }
    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;
    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };
  BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
    if (aNeedle[aLineName] <= 0) {
      throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
    }
    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };
  BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0;index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];
        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }
      mapping.lastGeneratedColumn = Infinity;
    }
  };
  BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, "line"),
      generatedColumn: util.getArg(aArgs, "column")
    };
    var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._generatedMappings[index];
      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, "source", null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, "name", null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source,
          line: util.getArg(mapping, "originalLine", null),
          column: util.getArg(mapping, "originalColumn", null),
          name
        };
      }
    }
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
      return sc == null;
    });
  };
  BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }
    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    var url;
    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
      }
      if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };
  BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, "source");
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }
    var needle = {
      source,
      originalLine: util.getArg(aArgs, "line"),
      originalColumn: util.getArg(aArgs, "column")
    };
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, "generatedLine", null),
          column: util.getArg(mapping, "generatedColumn", null),
          lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
        };
      }
    }
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };
  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
  IndexedSourceMapConsumer.prototype._version = 3;
  Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
    get: function() {
      var sources = [];
      for (var i = 0;i < this._sections.length; i++) {
        for (var j2 = 0;j2 < this._sections[i].consumer.sources.length; j2++) {
          sources.push(this._sections[i].consumer.sources[j2]);
        }
      }
      return sources;
    }
  });
  IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, "line"),
      generatedColumn: util.getArg(aArgs, "column")
    };
    var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
      var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
      if (cmp) {
        return cmp;
      }
      return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
    });
    var section = this._sections[sectionIndex];
    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }
    return section.consumer.originalPositionFor({
      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
      bias: aArgs.bias
    });
  };
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function(s2) {
      return s2.consumer.hasContentsOfAllSources();
    });
  };
  IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0;i < this._sections.length; i++) {
      var section = this._sections[i];
      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };
  IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0;i < this._sections.length; i++) {
      var section = this._sections[i];
      if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
        };
        return ret;
      }
    }
    return {
      line: null,
      column: null
    };
  };
  IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0;i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j2 = 0;j2 < sectionMappings.length; j2++) {
        var mapping = sectionMappings[j2];
        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);
        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }
        var adjustedMapping = {
          source,
          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name
        };
        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === "number") {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }
    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };
  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
});

// node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS((exports) => {
  var SourceNode = function(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null)
      this.add(aChunks);
  };
  var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
  var util = require_util();
  var REGEX_NEWLINE = /(\r?\n)/;
  var NEWLINE_CODE = 10;
  var isSourceNode = "$$$isSourceNode$$$";
  SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    var node = new SourceNode;
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      var newLine = getNextLine() || "";
      return lineContents + newLine;
      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
      }
    };
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
    var lastMapping = null;
    aSourceMapConsumer.eachMapping(function(mapping) {
      if (lastMapping !== null) {
        if (lastGeneratedLine < mapping.generatedLine) {
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
        } else {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          lastMapping = mapping;
          return;
        }
      }
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || "";
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });
    return node;
    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
      }
    }
  };
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function(chunk) {
        this.add(chunk);
      }, this);
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length - 1;i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length;i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      } else {
        if (chunk !== "") {
          aFn(chunk, {
            source: this.source,
            line: this.line,
            column: this.column,
            name: this.name
          });
        }
      }
    }
  };
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0;i < len - 1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    } else if (typeof lastChild === "string") {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    } else {
      this.children.push("".replace(aPattern, aReplacement));
    }
    return this;
  };
  SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };
  SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length;i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }
    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length;i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function(chunk) {
      str += chunk;
    });
    return str;
  };
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function(chunk, original) {
      generated.code += chunk;
      if (original.source !== null && original.line !== null && original.column !== null) {
        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length;idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function(sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });
    return { code: generated.code, map };
  };
  exports.SourceNode = SourceNode;
});

// node_modules/source-map/source-map.js
var require_source_map = __commonJS((exports) => {
  exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
  exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
  exports.SourceNode = require_source_node().SourceNode;
});

// node_modules/clean-css/lib/reader/input-source-map-tracker.js
var require_input_source_map_tracker = __commonJS((exports, module) => {
  var inputSourceMapTracker = function() {
    var maps = {};
    return {
      all: all2.bind(null, maps),
      isTracking: isTracking.bind(null, maps),
      originalPositionFor: originalPositionFor.bind(null, maps),
      track: track.bind(null, maps)
    };
  };
  var all2 = function(maps) {
    return maps;
  };
  var isTracking = function(maps, source) {
    return source in maps;
  };
  var originalPositionFor = function(maps, metadata, range, selectorFallbacks) {
    var line = metadata[0];
    var column = metadata[1];
    var source = metadata[2];
    var position = {
      line,
      column: column + range
    };
    var originalPosition;
    while (!originalPosition && position.column > column) {
      position.column--;
      originalPosition = maps[source].originalPositionFor(position);
    }
    if (!originalPosition || originalPosition.column < 0) {
      return metadata;
    }
    if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {
      return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);
    }
    return originalPosition.line !== null ? toMetadata(originalPosition) : metadata;
  };
  var toMetadata = function(asHash) {
    return [asHash.line, asHash.column, asHash.source];
  };
  var track = function(maps, source, data) {
    maps[source] = new SourceMapConsumer(data);
  };
  var SourceMapConsumer = require_source_map().SourceMapConsumer;
  module.exports = inputSourceMapTracker;
});

// node_modules/clean-css/lib/utils/is-remote-resource.js
var require_is_remote_resource = __commonJS((exports, module) => {
  var isRemoteResource = function(uri) {
    return REMOTE_RESOURCE_PATTERN.test(uri);
  };
  var REMOTE_RESOURCE_PATTERN = /^(\w+:\/\/|\/\/)/;
  module.exports = isRemoteResource;
});

// node_modules/clean-css/lib/utils/has-protocol.js
var require_has_protocol = __commonJS((exports, module) => {
  var hasProtocol = function(uri) {
    return !NO_PROTOCOL_RESOURCE_PATTERN.test(uri);
  };
  var NO_PROTOCOL_RESOURCE_PATTERN = /^\/\//;
  module.exports = hasProtocol;
});

// node_modules/clean-css/lib/reader/is-allowed-resource.js
var require_is_allowed_resource = __commonJS((exports, module) => {
  var isAllowedResource = function(uri, isRemote, rules) {
    var match;
    var absoluteUri;
    var allowed = isRemote ? false : true;
    var rule;
    var isNegated;
    var normalizedRule;
    var i;
    if (rules.length === 0) {
      return false;
    }
    if (isRemote && !hasProtocol(uri)) {
      uri = HTTP_PROTOCOL + uri;
    }
    match = isRemote ? url.parse(uri).host : uri;
    absoluteUri = isRemote ? uri : path.resolve(uri);
    for (i = 0;i < rules.length; i++) {
      rule = rules[i];
      isNegated = rule[0] == "!";
      normalizedRule = rule.substring(1);
      if (isNegated && isRemote && isRemoteRule(normalizedRule)) {
        allowed = allowed && !isAllowedResource(uri, true, [normalizedRule]);
      } else if (isNegated && !isRemote && !isRemoteRule(normalizedRule)) {
        allowed = allowed && !isAllowedResource(uri, false, [normalizedRule]);
      } else if (isNegated) {
        allowed = allowed && true;
      } else if (rule == "all") {
        allowed = true;
      } else if (isRemote && rule == "local") {
        allowed = allowed || false;
      } else if (isRemote && rule == "remote") {
        allowed = true;
      } else if (!isRemote && rule == "remote") {
        allowed = false;
      } else if (!isRemote && rule == "local") {
        allowed = true;
      } else if (rule === match) {
        allowed = true;
      } else if (rule === uri) {
        allowed = true;
      } else if (isRemote && absoluteUri.indexOf(rule) === 0) {
        allowed = true;
      } else if (!isRemote && absoluteUri.indexOf(path.resolve(rule)) === 0) {
        allowed = true;
      } else if (isRemote != isRemoteRule(normalizedRule)) {
        allowed = allowed && true;
      } else {
        allowed = false;
      }
    }
    return allowed;
  };
  var isRemoteRule = function(rule) {
    return isRemoteResource(rule) || url.parse(HTTP_PROTOCOL + "//" + rule).host == rule;
  };
  var path = (init_path(), __toCommonJS(exports_path));
  var url = (init_url(), __toCommonJS(exports_url));
  var isRemoteResource = require_is_remote_resource();
  var hasProtocol = require_has_protocol();
  var HTTP_PROTOCOL = "http:";
  module.exports = isAllowedResource;
});

// node_modules/clean-css/lib/reader/match-data-uri.js
var require_match_data_uri = __commonJS((exports, module) => {
  var matchDataUri = function(uri) {
    return DATA_URI_PATTERN.exec(uri);
  };
  var DATA_URI_PATTERN = /^data:(\S*?)?(;charset=[^;]+)?(;[^,]+?)?,(.+)/;
  module.exports = matchDataUri;
});

// node_modules/clean-css/lib/reader/rebase-local-map.js
var require_rebase_local_map = __commonJS((exports, module) => {
  var rebaseLocalMap = function(sourceMap, sourceUri, rebaseTo) {
    var currentPath = path.resolve("");
    var absoluteUri = path.resolve(currentPath, sourceUri);
    var absoluteUriDirectory = path.dirname(absoluteUri);
    sourceMap.sources = sourceMap.sources.map(function(source) {
      return path.relative(rebaseTo, path.resolve(absoluteUriDirectory, source));
    });
    return sourceMap;
  };
  var path = (init_path(), __toCommonJS(exports_path));
  module.exports = rebaseLocalMap;
});

// node_modules/clean-css/lib/reader/rebase-remote-map.js
var require_rebase_remote_map = __commonJS((exports, module) => {
  var rebaseRemoteMap = function(sourceMap, sourceUri) {
    var sourceDirectory = path.dirname(sourceUri);
    sourceMap.sources = sourceMap.sources.map(function(source) {
      return url.resolve(sourceDirectory, source);
    });
    return sourceMap;
  };
  var path = (init_path(), __toCommonJS(exports_path));
  var url = (init_url(), __toCommonJS(exports_url));
  module.exports = rebaseRemoteMap;
});

// node_modules/clean-css/lib/utils/is-data-uri-resource.js
var require_is_data_uri_resource = __commonJS((exports, module) => {
  var isDataUriResource = function(uri) {
    return DATA_URI_PATTERN.test(uri);
  };
  var DATA_URI_PATTERN = /^data:(\S*?)?(;charset=[^;]+)?(;[^,]+?)?,(.+)/;
  module.exports = isDataUriResource;
});

// node_modules/clean-css/lib/reader/apply-source-maps.js
var require_apply_source_maps = __commonJS((exports, module) => {
  var applySourceMaps = function(tokens, context, callback) {
    var applyContext = {
      callback,
      fetch: context.options.fetch,
      index: 0,
      inline: context.options.inline,
      inlineRequest: context.options.inlineRequest,
      inlineTimeout: context.options.inlineTimeout,
      inputSourceMapTracker: context.inputSourceMapTracker,
      localOnly: context.localOnly,
      processedTokens: [],
      rebaseTo: context.options.rebaseTo,
      sourceTokens: tokens,
      warnings: context.warnings
    };
    return context.options.sourceMap && tokens.length > 0 ? doApplySourceMaps(applyContext) : callback(tokens);
  };
  var doApplySourceMaps = function(applyContext) {
    var singleSourceTokens = [];
    var lastSource = findTokenSource(applyContext.sourceTokens[0]);
    var source;
    var token;
    var l2;
    for (l2 = applyContext.sourceTokens.length;applyContext.index < l2; applyContext.index++) {
      token = applyContext.sourceTokens[applyContext.index];
      source = findTokenSource(token);
      if (source != lastSource) {
        singleSourceTokens = [];
        lastSource = source;
      }
      singleSourceTokens.push(token);
      applyContext.processedTokens.push(token);
      if (token[0] == Token.COMMENT && MAP_MARKER_PATTERN.test(token[1])) {
        return fetchAndApplySourceMap(token[1], source, singleSourceTokens, applyContext);
      }
    }
    return applyContext.callback(applyContext.processedTokens);
  };
  var findTokenSource = function(token) {
    var scope;
    var metadata;
    if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT) {
      metadata = token[2][0];
    } else {
      scope = token[1][0];
      metadata = scope[2][0];
    }
    return metadata[2];
  };
  var fetchAndApplySourceMap = function(sourceMapComment, source, singleSourceTokens, applyContext) {
    return extractInputSourceMapFrom(sourceMapComment, applyContext, function(inputSourceMap) {
      if (inputSourceMap) {
        applyContext.inputSourceMapTracker.track(source, inputSourceMap);
        applySourceMapRecursively(singleSourceTokens, applyContext.inputSourceMapTracker);
      }
      applyContext.index++;
      return doApplySourceMaps(applyContext);
    });
  };
  var extractInputSourceMapFrom = function(sourceMapComment, applyContext, whenSourceMapReady) {
    var uri = MAP_MARKER_PATTERN.exec(sourceMapComment)[1];
    var absoluteUri;
    var sourceMap;
    var rebasedMap;
    if (isDataUriResource(uri)) {
      sourceMap = extractInputSourceMapFromDataUri(uri);
      return whenSourceMapReady(sourceMap);
    } else if (isRemoteResource(uri)) {
      return loadInputSourceMapFromRemoteUri(uri, applyContext, function(sourceMap2) {
        var parsedMap;
        if (sourceMap2) {
          parsedMap = JSON.parse(sourceMap2);
          rebasedMap = rebaseRemoteMap(parsedMap, uri);
          whenSourceMapReady(rebasedMap);
        } else {
          whenSourceMapReady(null);
        }
      });
    } else {
      absoluteUri = path.resolve(applyContext.rebaseTo, uri);
      sourceMap = loadInputSourceMapFromLocalUri(absoluteUri, applyContext);
      if (sourceMap) {
        rebasedMap = rebaseLocalMap(sourceMap, absoluteUri, applyContext.rebaseTo);
        return whenSourceMapReady(rebasedMap);
      } else {
        return whenSourceMapReady(null);
      }
    }
  };
  var extractInputSourceMapFromDataUri = function(uri) {
    var dataUriMatch = matchDataUri(uri);
    var charset = dataUriMatch[2] ? dataUriMatch[2].split(/[=;]/)[2] : "us-ascii";
    var encoding = dataUriMatch[3] ? dataUriMatch[3].split(";")[1] : "utf8";
    var data = encoding == "utf8" ? global.unescape(dataUriMatch[4]) : dataUriMatch[4];
    var buffer = new Buffer(data, encoding);
    buffer.charset = charset;
    return JSON.parse(buffer.toString());
  };
  var loadInputSourceMapFromRemoteUri = function(uri, applyContext, whenLoaded) {
    var isAllowed = isAllowedResource(uri, true, applyContext.inline);
    var isRuntimeResource = !hasProtocol(uri);
    if (applyContext.localOnly) {
      applyContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
      return whenLoaded(null);
    } else if (isRuntimeResource) {
      applyContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
      return whenLoaded(null);
    } else if (!isAllowed) {
      applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
      return whenLoaded(null);
    }
    applyContext.fetch(uri, applyContext.inlineRequest, applyContext.inlineTimeout, function(error, body) {
      if (error) {
        applyContext.warnings.push('Missing source map at "' + uri + '" - ' + error);
        return whenLoaded(null);
      }
      whenLoaded(body);
    });
  };
  var loadInputSourceMapFromLocalUri = function(uri, applyContext) {
    var isAllowed = isAllowedResource(uri, false, applyContext.inline);
    var sourceMap;
    if (!fs.existsSync(uri) || !fs.statSync(uri).isFile()) {
      applyContext.warnings.push('Ignoring local source map at "' + uri + '" as resource is missing.');
      return null;
    } else if (!isAllowed) {
      applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
      return null;
    }
    sourceMap = fs.readFileSync(uri, "utf-8");
    return JSON.parse(sourceMap);
  };
  var applySourceMapRecursively = function(tokens, inputSourceMapTracker) {
    var token;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      switch (token[0]) {
        case Token.AT_RULE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.AT_RULE_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token.AT_RULE_BLOCK_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.NESTED_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token.NESTED_BLOCK_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.COMMENT:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.PROPERTY:
          applySourceMapRecursively(token, inputSourceMapTracker);
          break;
        case Token.PROPERTY_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          break;
        case Token.PROPERTY_NAME:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.PROPERTY_VALUE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token.RULE:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token.RULE_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
      }
    }
    return tokens;
  };
  var applySourceMapTo = function(token, inputSourceMapTracker) {
    var value = token[1];
    var metadata = token[2];
    var newMetadata = [];
    var i, l2;
    for (i = 0, l2 = metadata.length;i < l2; i++) {
      newMetadata.push(inputSourceMapTracker.originalPositionFor(metadata[i], value.length));
    }
    token[2] = newMetadata;
  };
  var fs = (()=>({}));
  var path = (init_path(), __toCommonJS(exports_path));
  var isAllowedResource = require_is_allowed_resource();
  var matchDataUri = require_match_data_uri();
  var rebaseLocalMap = require_rebase_local_map();
  var rebaseRemoteMap = require_rebase_remote_map();
  var Token = require_token();
  var hasProtocol = require_has_protocol();
  var isDataUriResource = require_is_data_uri_resource();
  var isRemoteResource = require_is_remote_resource();
  var MAP_MARKER_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;
  module.exports = applySourceMaps;
});

// node_modules/clean-css/lib/reader/extract-import-url-and-media.js
var require_extract_import_url_and_media = __commonJS((exports, module) => {
  var extractImportUrlAndMedia = function(atRuleValue) {
    var uri;
    var mediaQuery;
    var stripped;
    var parts;
    stripped = atRuleValue.replace(IMPORT_PREFIX_PATTERN, "").trim().replace(URL_PREFIX_PATTERN, "(").replace(URL_SUFFIX_PATTERN, ")").replace(QUOTE_PREFIX_PATTERN, "").replace(QUOTE_SUFFIX_PATTERN, "");
    parts = split(stripped, " ");
    uri = parts[0].replace(BRACE_PREFIX, "").replace(BRACE_SUFFIX, "");
    mediaQuery = parts.slice(1).join(" ");
    return [uri, mediaQuery];
  };
  var split = require_split();
  var BRACE_PREFIX = /^\(/;
  var BRACE_SUFFIX = /\)$/;
  var IMPORT_PREFIX_PATTERN = /^@import/i;
  var QUOTE_PREFIX_PATTERN = /['"]\s*/;
  var QUOTE_SUFFIX_PATTERN = /\s*['"]/;
  var URL_PREFIX_PATTERN = /^url\(\s*/i;
  var URL_SUFFIX_PATTERN = /\s*\)/i;
  module.exports = extractImportUrlAndMedia;
});

// node_modules/clean-css/lib/reader/load-original-sources.js
var require_load_original_sources = __commonJS((exports, module) => {
  var loadOriginalSources = function(context, callback) {
    var loadContext = {
      callback,
      fetch: context.options.fetch,
      index: 0,
      inline: context.options.inline,
      inlineRequest: context.options.inlineRequest,
      inlineTimeout: context.options.inlineTimeout,
      localOnly: context.localOnly,
      rebaseTo: context.options.rebaseTo,
      sourcesContent: context.sourcesContent,
      uriToSource: uriToSourceMapping(context.inputSourceMapTracker.all()),
      warnings: context.warnings
    };
    return context.options.sourceMap && context.options.sourceMapInlineSources ? doLoadOriginalSources(loadContext) : callback();
  };
  var uriToSourceMapping = function(allSourceMapConsumers) {
    var mapping = {};
    var consumer;
    var uri;
    var source;
    var i, l2;
    for (source in allSourceMapConsumers) {
      consumer = allSourceMapConsumers[source];
      for (i = 0, l2 = consumer.sources.length;i < l2; i++) {
        uri = consumer.sources[i];
        source = consumer.sourceContentFor(uri, true);
        mapping[uri] = source;
      }
    }
    return mapping;
  };
  var doLoadOriginalSources = function(loadContext) {
    var uris = Object.keys(loadContext.uriToSource);
    var uri;
    var source;
    var total;
    for (total = uris.length;loadContext.index < total; loadContext.index++) {
      uri = uris[loadContext.index];
      source = loadContext.uriToSource[uri];
      if (source) {
        loadContext.sourcesContent[uri] = source;
      } else {
        return loadOriginalSource(uri, loadContext);
      }
    }
    return loadContext.callback();
  };
  var loadOriginalSource = function(uri, loadContext) {
    var content;
    if (isRemoteResource(uri)) {
      return loadOriginalSourceFromRemoteUri(uri, loadContext, function(content2) {
        loadContext.index++;
        loadContext.sourcesContent[uri] = content2;
        return doLoadOriginalSources(loadContext);
      });
    } else {
      content = loadOriginalSourceFromLocalUri(uri, loadContext);
      loadContext.index++;
      loadContext.sourcesContent[uri] = content;
      return doLoadOriginalSources(loadContext);
    }
  };
  var loadOriginalSourceFromRemoteUri = function(uri, loadContext, whenLoaded) {
    var isAllowed = isAllowedResource(uri, true, loadContext.inline);
    var isRuntimeResource = !hasProtocol(uri);
    if (loadContext.localOnly) {
      loadContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
      return whenLoaded(null);
    } else if (isRuntimeResource) {
      loadContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
      return whenLoaded(null);
    } else if (!isAllowed) {
      loadContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
      return whenLoaded(null);
    }
    loadContext.fetch(uri, loadContext.inlineRequest, loadContext.inlineTimeout, function(error, content) {
      if (error) {
        loadContext.warnings.push('Missing original source at "' + uri + '" - ' + error);
      }
      whenLoaded(content);
    });
  };
  var loadOriginalSourceFromLocalUri = function(relativeUri, loadContext) {
    var isAllowed = isAllowedResource(relativeUri, false, loadContext.inline);
    var absoluteUri = path.resolve(loadContext.rebaseTo, relativeUri);
    if (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile()) {
      loadContext.warnings.push('Ignoring local source map at "' + absoluteUri + '" as resource is missing.');
      return null;
    } else if (!isAllowed) {
      loadContext.warnings.push('Cannot fetch "' + absoluteUri + '" as resource is not allowed.');
      return null;
    }
    return fs.readFileSync(absoluteUri, "utf8");
  };
  var fs = (()=>({}));
  var path = (init_path(), __toCommonJS(exports_path));
  var isAllowedResource = require_is_allowed_resource();
  var hasProtocol = require_has_protocol();
  var isRemoteResource = require_is_remote_resource();
  module.exports = loadOriginalSources;
});

// node_modules/clean-css/lib/reader/normalize-path.js
var require_normalize_path = __commonJS((exports, module) => {
  var normalizePath = function(path) {
    return path.replace(WINDOWS_SEPARATOR_PATTERN, UNIX_SEPARATOR);
  };
  var UNIX_SEPARATOR = "/";
  var WINDOWS_SEPARATOR_PATTERN = /\\/g;
  module.exports = normalizePath;
});

// node_modules/clean-css/lib/reader/restore-import.js
var require_restore_import = __commonJS((exports, module) => {
  var restoreImport = function(uri, mediaQuery) {
    return ("@import " + uri + " " + mediaQuery).trim();
  };
  module.exports = restoreImport;
});

// node_modules/clean-css/lib/reader/rewrite-url.js
var require_rewrite_url = __commonJS((exports, module) => {
  var rebase = function(uri, rebaseConfig) {
    if (!rebaseConfig) {
      return uri;
    }
    if (isAbsolute(uri) && !isRemote(rebaseConfig.toBase)) {
      return uri;
    }
    if (isRemote(uri) || isSVGMarker(uri) || isInternal(uri)) {
      return uri;
    }
    if (isData(uri)) {
      return "\'" + uri + "\'";
    }
    if (isRemote(rebaseConfig.toBase)) {
      return url.resolve(rebaseConfig.toBase, uri);
    }
    return rebaseConfig.absolute ? normalize(absolute(uri, rebaseConfig)) : normalize(relative(uri, rebaseConfig));
  };
  var isAbsolute = function(uri) {
    return path.isAbsolute(uri);
  };
  var isSVGMarker = function(uri) {
    return uri[0] == "#";
  };
  var isInternal = function(uri) {
    return /^\w+:\w+/.test(uri);
  };
  var isRemote = function(uri) {
    return /^[^:]+?:\/\//.test(uri) || uri.indexOf("//") === 0;
  };
  var isData = function(uri) {
    return uri.indexOf("data:") === 0;
  };
  var absolute = function(uri, rebaseConfig) {
    return path.resolve(path.join(rebaseConfig.fromBase || "", uri)).replace(rebaseConfig.toBase, "");
  };
  var relative = function(uri, rebaseConfig) {
    return path.relative(rebaseConfig.toBase, path.join(rebaseConfig.fromBase || "", uri));
  };
  var normalize = function(uri) {
    return isWindows ? uri.replace(/\\/g, "/") : uri;
  };
  var quoteFor = function(unquotedUrl) {
    if (unquotedUrl.indexOf(SINGLE_QUOTE) > -1) {
      return DOUBLE_QUOTE;
    } else if (unquotedUrl.indexOf(DOUBLE_QUOTE) > -1) {
      return SINGLE_QUOTE;
    } else if (hasWhitespace(unquotedUrl) || hasRoundBrackets(unquotedUrl)) {
      return SINGLE_QUOTE;
    } else {
      return "";
    }
  };
  var hasWhitespace = function(url2) {
    return WHITESPACE_PATTERN.test(url2);
  };
  var hasRoundBrackets = function(url2) {
    return ROUND_BRACKETS_PATTERN.test(url2);
  };
  var rewriteUrl = function(originalUrl, rebaseConfig, pathOnly) {
    var strippedUrl = originalUrl.replace(URL_PREFIX_PATTERN, "").replace(URL_SUFFIX_PATTERN, "").trim();
    var unquotedUrl = strippedUrl.replace(QUOTE_PREFIX_PATTERN, "").replace(QUOTE_SUFFIX_PATTERN, "").trim();
    var quote = strippedUrl[0] == SINGLE_QUOTE || strippedUrl[0] == DOUBLE_QUOTE ? strippedUrl[0] : quoteFor(unquotedUrl);
    return pathOnly ? rebase(unquotedUrl, rebaseConfig) : URL_PREFIX + quote + rebase(unquotedUrl, rebaseConfig) + quote + URL_SUFFIX;
  };
  var path = (init_path(), __toCommonJS(exports_path));
  var url = (init_url(), __toCommonJS(exports_url));
  var DOUBLE_QUOTE = '"';
  var SINGLE_QUOTE = "\'";
  var URL_PREFIX = "url(";
  var URL_SUFFIX = ")";
  var QUOTE_PREFIX_PATTERN = /^["']/;
  var QUOTE_SUFFIX_PATTERN = /["']$/;
  var ROUND_BRACKETS_PATTERN = /[\(\)]/;
  var URL_PREFIX_PATTERN = /^url\(/i;
  var URL_SUFFIX_PATTERN = /\)$/;
  var WHITESPACE_PATTERN = /\s/;
  var isWindows = process.platform == "win32";
  module.exports = rewriteUrl;
});

// node_modules/clean-css/lib/utils/is-import.js
var require_is_import = __commonJS((exports, module) => {
  var isImport = function(value) {
    return IMPORT_PREFIX_PATTERN.test(value);
  };
  var IMPORT_PREFIX_PATTERN = /^@import/i;
  module.exports = isImport;
});

// node_modules/clean-css/lib/reader/rebase.js
var require_rebase2 = __commonJS((exports, module) => {
  var rebase = function(tokens, rebaseAll, validator, rebaseConfig) {
    return rebaseAll ? rebaseEverything(tokens, validator, rebaseConfig) : rebaseAtRules(tokens, validator, rebaseConfig);
  };
  var rebaseEverything = function(tokens, validator, rebaseConfig) {
    var token;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      switch (token[0]) {
        case Token.AT_RULE:
          rebaseAtRule(token, validator, rebaseConfig);
          break;
        case Token.AT_RULE_BLOCK:
          rebaseProperties(token[2], validator, rebaseConfig);
          break;
        case Token.COMMENT:
          rebaseSourceMapComment(token, rebaseConfig);
          break;
        case Token.NESTED_BLOCK:
          rebaseEverything(token[2], validator, rebaseConfig);
          break;
        case Token.RULE:
          rebaseProperties(token[2], validator, rebaseConfig);
          break;
      }
    }
    return tokens;
  };
  var rebaseAtRules = function(tokens, validator, rebaseConfig) {
    var token;
    var i, l2;
    for (i = 0, l2 = tokens.length;i < l2; i++) {
      token = tokens[i];
      switch (token[0]) {
        case Token.AT_RULE:
          rebaseAtRule(token, validator, rebaseConfig);
          break;
      }
    }
    return tokens;
  };
  var rebaseAtRule = function(token, validator, rebaseConfig) {
    if (!isImport(token[1])) {
      return;
    }
    var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
    var newUrl = rewriteUrl(uriAndMediaQuery[0], rebaseConfig);
    var mediaQuery = uriAndMediaQuery[1];
    token[1] = restoreImport(newUrl, mediaQuery);
  };
  var rebaseSourceMapComment = function(token, rebaseConfig) {
    var matches = SOURCE_MAP_COMMENT_PATTERN.exec(token[1]);
    if (matches && matches[1].indexOf("data:") === -1) {
      token[1] = token[1].replace(matches[1], rewriteUrl(matches[1], rebaseConfig, true));
    }
  };
  var rebaseProperties = function(properties, validator, rebaseConfig) {
    var property;
    var value;
    var i, l2;
    var j2, m4;
    for (i = 0, l2 = properties.length;i < l2; i++) {
      property = properties[i];
      for (j2 = 2, m4 = property.length;j2 < m4; j2++) {
        value = property[j2][1];
        if (validator.isUrl(value)) {
          property[j2][1] = rewriteUrl(value, rebaseConfig);
        }
      }
    }
  };
  var extractImportUrlAndMedia = require_extract_import_url_and_media();
  var restoreImport = require_restore_import();
  var rewriteUrl = require_rewrite_url();
  var Token = require_token();
  var isImport = require_is_import();
  var SOURCE_MAP_COMMENT_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;
  module.exports = rebase;
});

// node_modules/clean-css/lib/tokenizer/tokenize.js
var require_tokenize = __commonJS((exports, module) => {
  var tokenize = function(source, externalContext) {
    var internalContext = {
      level: Level.BLOCK,
      position: {
        source: externalContext.source || undefined,
        line: 1,
        column: 0,
        index: 0
      }
    };
    return intoTokens(source, externalContext, internalContext, false);
  };
  var intoTokens = function(source, externalContext, internalContext, isNested) {
    var allTokens = [];
    var newTokens = allTokens;
    var lastToken;
    var ruleToken;
    var ruleTokens = [];
    var propertyToken;
    var metadata;
    var metadatas = [];
    var level = internalContext.level;
    var levels = [];
    var buffer = [];
    var buffers = [];
    var serializedBuffer;
    var serializedBufferPart;
    var roundBracketLevel = 0;
    var isQuoted;
    var isSpace;
    var isNewLineNix;
    var isNewLineWin;
    var isCarriageReturn;
    var isCommentStart;
    var wasCommentStart = false;
    var isCommentEnd;
    var wasCommentEnd = false;
    var isCommentEndMarker;
    var isEscaped;
    var wasEscaped = false;
    var isRaw = false;
    var seekingValue = false;
    var seekingPropertyBlockClosing = false;
    var position = internalContext.position;
    var lastCommentStartAt;
    for (;position.index < source.length; position.index++) {
      var character = source[position.index];
      isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;
      isSpace = character == Marker.SPACE || character == Marker.TAB;
      isNewLineNix = character == Marker.NEW_LINE_NIX;
      isNewLineWin = character == Marker.NEW_LINE_NIX && source[position.index - 1] == Marker.CARRIAGE_RETURN;
      isCarriageReturn = character == Marker.CARRIAGE_RETURN && source[position.index + 1] && source[position.index + 1] != Marker.NEW_LINE_NIX;
      isCommentStart = !wasCommentEnd && level != Level.COMMENT && !isQuoted && character == Marker.ASTERISK && source[position.index - 1] == Marker.FORWARD_SLASH;
      isCommentEndMarker = !wasCommentStart && !isQuoted && character == Marker.FORWARD_SLASH && source[position.index - 1] == Marker.ASTERISK;
      isCommentEnd = level == Level.COMMENT && isCommentEndMarker;
      roundBracketLevel = Math.max(roundBracketLevel, 0);
      metadata = buffer.length === 0 ? [position.line, position.column, position.source] : metadata;
      if (isEscaped) {
        buffer.push(character);
      } else if (!isCommentEnd && level == Level.COMMENT) {
        buffer.push(character);
      } else if (!isCommentStart && !isCommentEnd && isRaw) {
        buffer.push(character);
      } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
        metadatas.push(metadata);
        buffer.push(character);
        buffers.push(buffer.slice(0, buffer.length - 2));
        buffer = buffer.slice(buffer.length - 2);
        metadata = [position.line, position.column - 1, position.source];
        levels.push(level);
        level = Level.COMMENT;
      } else if (isCommentStart) {
        levels.push(level);
        level = Level.COMMENT;
        buffer.push(character);
      } else if (isCommentEnd && isIgnoreStartComment(buffer)) {
        serializedBuffer = buffer.join("").trim() + character;
        lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];
        newTokens.push(lastToken);
        isRaw = true;
        metadata = metadatas.pop() || null;
        buffer = buffers.pop() || [];
      } else if (isCommentEnd && isIgnoreEndComment(buffer)) {
        serializedBuffer = buffer.join("") + character;
        lastCommentStartAt = serializedBuffer.lastIndexOf(Marker.FORWARD_SLASH + Marker.ASTERISK);
        serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);
        lastToken = [Token.RAW, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];
        newTokens.push(lastToken);
        serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);
        metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];
        lastToken = [Token.COMMENT, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];
        newTokens.push(lastToken);
        isRaw = false;
        level = levels.pop();
        metadata = metadatas.pop() || null;
        buffer = buffers.pop() || [];
      } else if (isCommentEnd) {
        serializedBuffer = buffer.join("").trim() + character;
        lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];
        newTokens.push(lastToken);
        level = levels.pop();
        metadata = metadatas.pop() || null;
        buffer = buffers.pop() || [];
      } else if (isCommentEndMarker && source[position.index + 1] != Marker.ASTERISK) {
        externalContext.warnings.push("Unexpected \'*/\' at " + formatPosition([position.line, position.column, position.source]) + ".");
        buffer = [];
      } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {
        levels.push(level);
        level = Level.SINGLE_QUOTE;
        buffer.push(character);
      } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
        level = levels.pop();
        buffer.push(character);
      } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {
        levels.push(level);
        level = Level.DOUBLE_QUOTE;
        buffer.push(character);
      } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
        level = levels.pop();
        buffer.push(character);
      } else if (!isCommentStart && !isCommentEnd && character != Marker.CLOSE_ROUND_BRACKET && character != Marker.OPEN_ROUND_BRACKET && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {
        buffer.push(character);
      } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {
        buffer.push(character);
        roundBracketLevel++;
      } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {
        buffer.push(character);
        roundBracketLevel--;
      } else if (character == Marker.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker.AT) {
        serializedBuffer = buffer.join("").trim();
        allTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        buffer = [];
      } else if (character == Marker.COMMA && level == Level.BLOCK && ruleToken) {
        serializedBuffer = buffer.join("").trim();
        ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);
        buffer = [];
      } else if (character == Marker.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.AT_RULE) {
        buffer.push(character);
      } else if (character == Marker.COMMA && level == Level.BLOCK) {
        ruleToken = [tokenTypeFrom(buffer), [], []];
        serializedBuffer = buffer.join("").trim();
        ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, 0)]]);
        buffer = [];
      } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && ruleToken && ruleToken[0] == Token.NESTED_BLOCK) {
        serializedBuffer = buffer.join("").trim();
        ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        allTokens.push(ruleToken);
        levels.push(level);
        position.column++;
        position.index++;
        buffer = [];
        ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
        ruleToken = null;
      } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.NESTED_BLOCK) {
        serializedBuffer = buffer.join("").trim();
        ruleToken = ruleToken || [Token.NESTED_BLOCK, [], []];
        ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        allTokens.push(ruleToken);
        levels.push(level);
        position.column++;
        position.index++;
        buffer = [];
        ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
        ruleToken = null;
      } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK) {
        serializedBuffer = buffer.join("").trim();
        ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];
        ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);
        newTokens = ruleToken[2];
        allTokens.push(ruleToken);
        levels.push(level);
        level = Level.RULE;
        buffer = [];
      } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {
        ruleTokens.push(ruleToken);
        ruleToken = [Token.PROPERTY_BLOCK, []];
        propertyToken.push(ruleToken);
        newTokens = ruleToken[1];
        levels.push(level);
        level = Level.RULE;
        seekingValue = false;
      } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {
        serializedBuffer = buffer.join("").trim();
        ruleTokens.push(ruleToken);
        ruleToken = [Token.AT_RULE_BLOCK, [], []];
        ruleToken[1].push([Token.AT_RULE_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        newTokens.push(ruleToken);
        newTokens = ruleToken[2];
        levels.push(level);
        level = Level.RULE;
        buffer = [];
      } else if (character == Marker.COLON && level == Level.RULE && !seekingValue) {
        serializedBuffer = buffer.join("").trim();
        propertyToken = [Token.PROPERTY, [Token.PROPERTY_NAME, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]];
        newTokens.push(propertyToken);
        seekingValue = true;
        buffer = [];
      } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && ruleTokens.length > 0 && buffer.length > 0 && buffer[0] == Marker.AT) {
        serializedBuffer = buffer.join("").trim();
        ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        buffer = [];
      } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && buffer.length > 0) {
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken = null;
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && buffer.length === 0) {
        propertyToken = null;
        seekingValue = false;
      } else if (character == Marker.SEMICOLON && level == Level.RULE && buffer.length > 0 && buffer[0] == Marker.AT) {
        serializedBuffer = buffer.join("");
        newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {
        seekingPropertyBlockClosing = false;
        buffer = [];
      } else if (character == Marker.SEMICOLON && level == Level.RULE && buffer.length === 0) {
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && seekingValue && buffer.length > 0 && ruleTokens.length > 0) {
        serializedBuffer = buffer.join("");
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken = null;
        ruleToken = ruleTokens.pop();
        newTokens = ruleToken[2];
        level = levels.pop();
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && buffer.length > 0 && buffer[0] == Marker.AT && ruleTokens.length > 0) {
        serializedBuffer = buffer.join("");
        ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken = null;
        ruleToken = ruleTokens.pop();
        newTokens = ruleToken[2];
        level = levels.pop();
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && ruleTokens.length > 0) {
        propertyToken = null;
        ruleToken = ruleTokens.pop();
        newTokens = ruleToken[2];
        level = levels.pop();
        seekingValue = false;
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && buffer.length > 0) {
        serializedBuffer = buffer.join("");
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken = null;
        ruleToken = ruleTokens.pop();
        newTokens = allTokens;
        level = levels.pop();
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && buffer.length > 0 && buffer[0] == Marker.AT) {
        propertyToken = null;
        ruleToken = null;
        serializedBuffer = buffer.join("").trim();
        newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        newTokens = allTokens;
        level = levels.pop();
        seekingValue = false;
        buffer = [];
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && levels[levels.length - 1] == Level.RULE) {
        propertyToken = null;
        ruleToken = ruleTokens.pop();
        newTokens = ruleToken[2];
        level = levels.pop();
        seekingValue = false;
        seekingPropertyBlockClosing = true;
        buffer = [];
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE) {
        propertyToken = null;
        ruleToken = null;
        newTokens = allTokens;
        level = levels.pop();
        seekingValue = false;
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK && !isNested && position.index <= source.length - 1) {
        externalContext.warnings.push("Unexpected \'}\' at " + formatPosition([position.line, position.column, position.source]) + ".");
        buffer.push(character);
      } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {
        break;
      } else if (character == Marker.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {
        buffer.push(character);
        roundBracketLevel++;
      } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue && roundBracketLevel == 1) {
        buffer.push(character);
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        roundBracketLevel--;
        buffer = [];
      } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {
        buffer.push(character);
        roundBracketLevel--;
      } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue && buffer.length > 0) {
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);
        buffer = [];
      } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue) {
        propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);
        buffer = [];
      } else if (character == Marker.COMMA && level == Level.RULE && seekingValue && buffer.length > 0) {
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);
        buffer = [];
      } else if (character == Marker.COMMA && level == Level.RULE && seekingValue) {
        propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);
        buffer = [];
      } else if (character == Marker.CLOSE_SQUARE_BRACKET && propertyToken && propertyToken.length > 1 && buffer.length > 0 && isRepeatToken(buffer)) {
        buffer.push(character);
        serializedBuffer = buffer.join("").trim();
        propertyToken[propertyToken.length - 1][1] += serializedBuffer;
        buffer = [];
      } else if ((isSpace || isNewLineNix && !isNewLineWin) && level == Level.RULE && seekingValue && propertyToken && buffer.length > 0) {
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        buffer = [];
      } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {
        serializedBuffer = buffer.join("").trim();
        propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
        buffer = [];
      } else if (isNewLineWin && level == Level.RULE && seekingValue) {
        buffer = [];
      } else if (buffer.length == 1 && isNewLineWin) {
        buffer.pop();
      } else if (buffer.length > 0 || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {
        buffer.push(character);
      }
      wasEscaped = isEscaped;
      isEscaped = !wasEscaped && character == Marker.BACK_SLASH;
      wasCommentStart = isCommentStart;
      wasCommentEnd = isCommentEnd;
      position.line = isNewLineWin || isNewLineNix || isCarriageReturn ? position.line + 1 : position.line;
      position.column = isNewLineWin || isNewLineNix || isCarriageReturn ? 0 : position.column + 1;
    }
    if (seekingValue) {
      externalContext.warnings.push("Missing \'}\' at " + formatPosition([position.line, position.column, position.source]) + ".");
    }
    if (seekingValue && buffer.length > 0) {
      serializedBuffer = buffer.join("").replace(TAIL_BROKEN_VALUE_PATTERN, "");
      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);
      buffer = [];
    }
    if (buffer.length > 0) {
      externalContext.warnings.push("Invalid character(s) \'" + buffer.join("") + "\' at " + formatPosition(metadata) + ". Ignoring.");
    }
    return allTokens;
  };
  var isIgnoreStartComment = function(buffer) {
    return IGNORE_START_COMMENT_PATTERN.test(buffer.join("") + Marker.FORWARD_SLASH);
  };
  var isIgnoreEndComment = function(buffer) {
    return IGNORE_END_COMMENT_PATTERN.test(buffer.join("") + Marker.FORWARD_SLASH);
  };
  var originalMetadata = function(metadata, value, externalContext, selectorFallbacks) {
    var source = metadata[2];
    return externalContext.inputSourceMapTracker.isTracking(source) ? externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks) : metadata;
  };
  var tokenTypeFrom = function(buffer) {
    var isAtRule = buffer[0] == Marker.AT || buffer[0] == Marker.UNDERSCORE;
    var ruleWord = buffer.join("").split(RULE_WORD_SEPARATOR_PATTERN)[0];
    if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {
      return Token.NESTED_BLOCK;
    } else if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {
      return Token.AT_RULE;
    } else if (isAtRule) {
      return Token.AT_RULE_BLOCK;
    } else {
      return Token.RULE;
    }
  };
  var tokenScopeFrom = function(tokenType) {
    if (tokenType == Token.RULE) {
      return Token.RULE_SCOPE;
    } else if (tokenType == Token.NESTED_BLOCK) {
      return Token.NESTED_BLOCK_SCOPE;
    } else if (tokenType == Token.AT_RULE_BLOCK) {
      return Token.AT_RULE_BLOCK_SCOPE;
    }
  };
  var isPageMarginBox = function(buffer) {
    var serializedBuffer = buffer.join("").trim();
    return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;
  };
  var isRepeatToken = function(buffer) {
    return REPEAT_PATTERN.test(buffer.join("") + Marker.CLOSE_SQUARE_BRACKET);
  };
  var Marker = require_marker();
  var Token = require_token();
  var formatPosition = require_format_position();
  var Level = {
    BLOCK: "block",
    COMMENT: "comment",
    DOUBLE_QUOTE: "double-quote",
    RULE: "rule",
    SINGLE_QUOTE: "single-quote"
  };
  var AT_RULES = [
    "@charset",
    "@import"
  ];
  var BLOCK_RULES = [
    "@-moz-document",
    "@document",
    "@-moz-keyframes",
    "@-ms-keyframes",
    "@-o-keyframes",
    "@-webkit-keyframes",
    "@keyframes",
    "@media",
    "@supports"
  ];
  var IGNORE_END_COMMENT_PATTERN = /\/\* clean\-css ignore:end \*\/$/;
  var IGNORE_START_COMMENT_PATTERN = /^\/\* clean\-css ignore:start \*\//;
  var PAGE_MARGIN_BOXES = [
    "@bottom-center",
    "@bottom-left",
    "@bottom-left-corner",
    "@bottom-right",
    "@bottom-right-corner",
    "@left-bottom",
    "@left-middle",
    "@left-top",
    "@right-bottom",
    "@right-middle",
    "@right-top",
    "@top-center",
    "@top-left",
    "@top-left-corner",
    "@top-right",
    "@top-right-corner"
  ];
  var EXTRA_PAGE_BOXES = [
    "@footnote",
    "@footnotes",
    "@left",
    "@page-float-bottom",
    "@page-float-top",
    "@right"
  ];
  var REPEAT_PATTERN = /^\[\s{0,31}\d+\s{0,31}\]$/;
  var RULE_WORD_SEPARATOR_PATTERN = /[\s\(]/;
  var TAIL_BROKEN_VALUE_PATTERN = /[\s|\}]*$/;
  module.exports = tokenize;
});

// node_modules/clean-css/lib/reader/read-sources.js
var require_read_sources = __commonJS((exports, module) => {
  var readSources = function(input, context, callback) {
    return doReadSources(input, context, function(tokens) {
      return applySourceMaps(tokens, context, function() {
        return loadOriginalSources(context, function() {
          return callback(tokens);
        });
      });
    });
  };
  var doReadSources = function(input, context, callback) {
    if (typeof input == "string") {
      return fromString(input, context, callback);
    } else if (Buffer.isBuffer(input)) {
      return fromString(input.toString(), context, callback);
    } else if (Array.isArray(input)) {
      return fromArray(input, context, callback);
    } else if (typeof input == "object") {
      return fromHash(input, context, callback);
    }
  };
  var fromString = function(input, context, callback) {
    context.source = undefined;
    context.sourcesContent[undefined] = input;
    context.stats.originalSize += input.length;
    return fromStyles(input, context, { inline: context.options.inline }, callback);
  };
  var fromArray = function(input, context, callback) {
    var inputAsImports = input.reduce(function(accumulator, uriOrHash) {
      if (typeof uriOrHash === "string") {
        return addStringSource(uriOrHash, accumulator);
      } else {
        return addHashSource(uriOrHash, context, accumulator);
      }
    }, []);
    return fromStyles(inputAsImports.join(""), context, { inline: ["all"] }, callback);
  };
  var fromHash = function(input, context, callback) {
    var inputAsImports = addHashSource(input, context, []);
    return fromStyles(inputAsImports.join(""), context, { inline: ["all"] }, callback);
  };
  var addStringSource = function(input, imports) {
    imports.push(restoreAsImport(normalizeUri(input)));
    return imports;
  };
  var addHashSource = function(input, context, imports) {
    var uri;
    var normalizedUri;
    var source;
    for (uri in input) {
      source = input[uri];
      normalizedUri = normalizeUri(uri);
      imports.push(restoreAsImport(normalizedUri));
      context.sourcesContent[normalizedUri] = source.styles;
      if (source.sourceMap) {
        trackSourceMap(source.sourceMap, normalizedUri, context);
      }
    }
    return imports;
  };
  var normalizeUri = function(uri) {
    var currentPath = path.resolve("");
    var absoluteUri;
    var relativeToCurrentPath;
    var normalizedUri;
    if (isRemoteResource(uri)) {
      return uri;
    }
    absoluteUri = path.isAbsolute(uri) ? uri : path.resolve(uri);
    relativeToCurrentPath = path.relative(currentPath, absoluteUri);
    normalizedUri = normalizePath(relativeToCurrentPath);
    return normalizedUri;
  };
  var trackSourceMap = function(sourceMap, uri, context) {
    var parsedMap = typeof sourceMap == "string" ? JSON.parse(sourceMap) : sourceMap;
    var rebasedMap = isRemoteResource(uri) ? rebaseRemoteMap(parsedMap, uri) : rebaseLocalMap(parsedMap, uri || UNKNOWN_URI, context.options.rebaseTo);
    context.inputSourceMapTracker.track(uri, rebasedMap);
  };
  var restoreAsImport = function(uri) {
    return restoreImport("url(" + uri + ")", "") + Marker.SEMICOLON;
  };
  var fromStyles = function(styles, context, parentInlinerContext, callback) {
    var tokens;
    var rebaseConfig = {};
    if (!context.source) {
      rebaseConfig.fromBase = path.resolve("");
      rebaseConfig.toBase = context.options.rebaseTo;
    } else if (isRemoteResource(context.source)) {
      rebaseConfig.fromBase = context.source;
      rebaseConfig.toBase = context.source;
    } else if (path.isAbsolute(context.source)) {
      rebaseConfig.fromBase = path.dirname(context.source);
      rebaseConfig.toBase = context.options.rebaseTo;
    } else {
      rebaseConfig.fromBase = path.dirname(path.resolve(context.source));
      rebaseConfig.toBase = context.options.rebaseTo;
    }
    tokens = tokenize(styles, context);
    tokens = rebase(tokens, context.options.rebase, context.validator, rebaseConfig);
    return allowsAnyImports(parentInlinerContext.inline) ? inline(tokens, context, parentInlinerContext, callback) : callback(tokens);
  };
  var allowsAnyImports = function(inline2) {
    return !(inline2.length == 1 && inline2[0] == "none");
  };
  var inline = function(tokens, externalContext, parentInlinerContext, callback) {
    var inlinerContext = {
      afterContent: false,
      callback,
      errors: externalContext.errors,
      externalContext,
      fetch: externalContext.options.fetch,
      inlinedStylesheets: parentInlinerContext.inlinedStylesheets || externalContext.inlinedStylesheets,
      inline: parentInlinerContext.inline,
      inlineRequest: externalContext.options.inlineRequest,
      inlineTimeout: externalContext.options.inlineTimeout,
      isRemote: parentInlinerContext.isRemote || false,
      localOnly: externalContext.localOnly,
      outputTokens: [],
      rebaseTo: externalContext.options.rebaseTo,
      sourceTokens: tokens,
      warnings: externalContext.warnings
    };
    return doInlineImports(inlinerContext);
  };
  var doInlineImports = function(inlinerContext) {
    var token;
    var i, l2;
    for (i = 0, l2 = inlinerContext.sourceTokens.length;i < l2; i++) {
      token = inlinerContext.sourceTokens[i];
      if (token[0] == Token.AT_RULE && isImport(token[1])) {
        inlinerContext.sourceTokens.splice(0, i);
        return inlineStylesheet(token, inlinerContext);
      } else if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT) {
        inlinerContext.outputTokens.push(token);
      } else {
        inlinerContext.outputTokens.push(token);
        inlinerContext.afterContent = true;
      }
    }
    inlinerContext.sourceTokens = [];
    return inlinerContext.callback(inlinerContext.outputTokens);
  };
  var inlineStylesheet = function(token, inlinerContext) {
    var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
    var uri = uriAndMediaQuery[0];
    var mediaQuery = uriAndMediaQuery[1];
    var metadata = token[2];
    return isRemoteResource(uri) ? inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) : inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext);
  };
  var inlineRemoteStylesheet = function(uri, mediaQuery, metadata, inlinerContext) {
    var isAllowed = isAllowedResource(uri, true, inlinerContext.inline);
    var originalUri = uri;
    var isLoaded = uri in inlinerContext.externalContext.sourcesContent;
    var isRuntimeResource = !hasProtocol(uri);
    if (inlinerContext.inlinedStylesheets.indexOf(uri) > -1) {
      inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as it has already been imported.');
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    } else if (inlinerContext.localOnly && inlinerContext.afterContent) {
      inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as no callback given and after other content.');
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    } else if (isRuntimeResource) {
      inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no protocol given.');
      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    } else if (inlinerContext.localOnly && !isLoaded) {
      inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no callback given.');
      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    } else if (!isAllowed && inlinerContext.afterContent) {
      inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as resource is not allowed and after other content.');
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    } else if (!isAllowed) {
      inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as resource is not allowed.');
      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    }
    inlinerContext.inlinedStylesheets.push(uri);
    function whenLoaded(error, importedStyles) {
      if (error) {
        inlinerContext.errors.push('Broken @import declaration of "' + uri + '" - ' + error);
        return process.nextTick(function() {
          inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
          inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
          doInlineImports(inlinerContext);
        });
      }
      inlinerContext.inline = inlinerContext.externalContext.options.inline;
      inlinerContext.isRemote = true;
      inlinerContext.externalContext.source = originalUri;
      inlinerContext.externalContext.sourcesContent[uri] = importedStyles;
      inlinerContext.externalContext.stats.originalSize += importedStyles.length;
      return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
        importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      });
    }
    return isLoaded ? whenLoaded(null, inlinerContext.externalContext.sourcesContent[uri]) : inlinerContext.fetch(uri, inlinerContext.inlineRequest, inlinerContext.inlineTimeout, whenLoaded);
  };
  var inlineLocalStylesheet = function(uri, mediaQuery, metadata, inlinerContext) {
    var currentPath = path.resolve("");
    var absoluteUri = path.isAbsolute(uri) ? path.resolve(currentPath, uri[0] == "/" ? uri.substring(1) : uri) : path.resolve(inlinerContext.rebaseTo, uri);
    var relativeToCurrentPath = path.relative(currentPath, absoluteUri);
    var importedStyles;
    var isAllowed = isAllowedResource(uri, false, inlinerContext.inline);
    var normalizedPath = normalizePath(relativeToCurrentPath);
    var isLoaded = normalizedPath in inlinerContext.externalContext.sourcesContent;
    if (inlinerContext.inlinedStylesheets.indexOf(absoluteUri) > -1) {
      inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as it has already been imported.');
    } else if (!isLoaded && (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile())) {
      inlinerContext.errors.push('Ignoring local @import of "' + uri + '" as resource is missing.');
    } else if (!isAllowed && inlinerContext.afterContent) {
      inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as resource is not allowed and after other content.');
    } else if (inlinerContext.afterContent) {
      inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as after other content.');
    } else if (!isAllowed) {
      inlinerContext.warnings.push('Skipping local @import of "' + uri + '" as resource is not allowed.');
      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
    } else {
      importedStyles = isLoaded ? inlinerContext.externalContext.sourcesContent[normalizedPath] : fs.readFileSync(absoluteUri, "utf-8");
      inlinerContext.inlinedStylesheets.push(absoluteUri);
      inlinerContext.inline = inlinerContext.externalContext.options.inline;
      inlinerContext.externalContext.source = normalizedPath;
      inlinerContext.externalContext.sourcesContent[normalizedPath] = importedStyles;
      inlinerContext.externalContext.stats.originalSize += importedStyles.length;
      return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
        importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      });
    }
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  };
  var wrapInMedia = function(tokens, mediaQuery, metadata) {
    if (mediaQuery) {
      return [[Token.NESTED_BLOCK, [[Token.NESTED_BLOCK_SCOPE, "@media " + mediaQuery, metadata]], tokens]];
    } else {
      return tokens;
    }
  };
  var fs = (()=>({}));
  var path = (init_path(), __toCommonJS(exports_path));
  var applySourceMaps = require_apply_source_maps();
  var extractImportUrlAndMedia = require_extract_import_url_and_media();
  var isAllowedResource = require_is_allowed_resource();
  var loadOriginalSources = require_load_original_sources();
  var normalizePath = require_normalize_path();
  var rebase = require_rebase2();
  var rebaseLocalMap = require_rebase_local_map();
  var rebaseRemoteMap = require_rebase_remote_map();
  var restoreImport = require_restore_import();
  var tokenize = require_tokenize();
  var Token = require_token();
  var Marker = require_marker();
  var hasProtocol = require_has_protocol();
  var isImport = require_is_import();
  var isRemoteResource = require_is_remote_resource();
  var UNKNOWN_URI = "uri:unknown";
  module.exports = readSources;
});

// node_modules/clean-css/lib/writer/simple.js
var require_simple = __commonJS((exports, module) => {
  var store = function(serializeContext, token) {
    var value = typeof token == "string" ? token : token[1];
    var wrap2 = serializeContext.wrap;
    wrap2(serializeContext, value);
    track(serializeContext, value);
    serializeContext.output.push(value);
  };
  var wrap = function(serializeContext, value) {
    if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
      track(serializeContext, serializeContext.format.breakWith);
      serializeContext.output.push(serializeContext.format.breakWith);
    }
  };
  var track = function(serializeContext, value) {
    var parts = value.split("\n");
    serializeContext.line += parts.length - 1;
    serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;
  };
  var serializeStyles = function(tokens, context) {
    var serializeContext = {
      column: 0,
      format: context.options.format,
      indentBy: 0,
      indentWith: "",
      line: 1,
      output: [],
      spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
      store,
      wrap: context.options.format.wrapAt ? wrap : function() {
      }
    };
    all2(serializeContext, tokens);
    return {
      styles: serializeContext.output.join("")
    };
  };
  var all2 = require_helpers().all;
  module.exports = serializeStyles;
});

// node_modules/clean-css/lib/writer/source-maps.js
var require_source_maps = __commonJS((exports, module) => {
  var store = function(serializeContext, element) {
    var fromString = typeof element == "string";
    var value = fromString ? element : element[1];
    var mappings = fromString ? null : element[2];
    var wrap2 = serializeContext.wrap;
    wrap2(serializeContext, value);
    track(serializeContext, value, mappings);
    serializeContext.output.push(value);
  };
  var wrap = function(serializeContext, value) {
    if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
      track(serializeContext, serializeContext.format.breakWith, false);
      serializeContext.output.push(serializeContext.format.breakWith);
    }
  };
  var track = function(serializeContext, value, mappings) {
    var parts = value.split("\n");
    if (mappings) {
      trackAllMappings(serializeContext, mappings);
    }
    serializeContext.line += parts.length - 1;
    serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;
  };
  var trackAllMappings = function(serializeContext, mappings) {
    for (var i = 0, l2 = mappings.length;i < l2; i++) {
      trackMapping(serializeContext, mappings[i]);
    }
  };
  var trackMapping = function(serializeContext, mapping) {
    var line = mapping[0];
    var column = mapping[1];
    var originalSource = mapping[2];
    var source = originalSource;
    var storedSource = source || UNKNOWN_SOURCE;
    if (isWindows && source && !isRemoteResource(source)) {
      storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);
    }
    serializeContext.outputMap.addMapping({
      generated: {
        line: serializeContext.line,
        column: serializeContext.column
      },
      source: storedSource,
      original: {
        line,
        column
      }
    });
    if (serializeContext.inlineSources && originalSource in serializeContext.sourcesContent) {
      serializeContext.outputMap.setSourceContent(storedSource, serializeContext.sourcesContent[originalSource]);
    }
  };
  var serializeStylesAndSourceMap = function(tokens, context) {
    var serializeContext = {
      column: 0,
      format: context.options.format,
      indentBy: 0,
      indentWith: "",
      inlineSources: context.options.sourceMapInlineSources,
      line: 1,
      output: [],
      outputMap: new SourceMapGenerator,
      sourcesContent: context.sourcesContent,
      spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
      store,
      wrap: context.options.format.wrapAt ? wrap : function() {
      }
    };
    all2(serializeContext, tokens);
    return {
      sourceMap: serializeContext.outputMap,
      styles: serializeContext.output.join("")
    };
  };
  var SourceMapGenerator = require_source_map().SourceMapGenerator;
  var all2 = require_helpers().all;
  var isRemoteResource = require_is_remote_resource();
  var isWindows = process.platform == "win32";
  var NIX_SEPARATOR_PATTERN = /\//g;
  var UNKNOWN_SOURCE = "$stdin";
  var WINDOWS_SEPARATOR = "\\";
  module.exports = serializeStylesAndSourceMap;
});

// node_modules/clean-css/lib/clean.js
var require_clean = __commonJS((exports, module) => {
  var minify2 = function(input, options, maybeSourceMap, maybeCallback) {
    var sourceMap = typeof maybeSourceMap != "function" ? maybeSourceMap : null;
    var callback = typeof maybeCallback == "function" ? maybeCallback : typeof maybeSourceMap == "function" ? maybeSourceMap : null;
    var context = {
      stats: {
        efficiency: 0,
        minifiedSize: 0,
        originalSize: 0,
        startedAt: Date.now(),
        timeSpent: 0
      },
      cache: {
        specificity: {}
      },
      errors: [],
      inlinedStylesheets: [],
      inputSourceMapTracker: inputSourceMapTracker(),
      localOnly: !callback,
      options,
      source: null,
      sourcesContent: {},
      validator: validator(options.compatibility),
      warnings: []
    };
    if (sourceMap) {
      context.inputSourceMapTracker.track(undefined, sourceMap);
    }
    return runner(context.localOnly)(function() {
      return readSources(input, context, function(tokens) {
        var serialize = context.options.sourceMap ? serializeStylesAndSourceMap : serializeStyles;
        var optimizedTokens = optimize(tokens, context);
        var optimizedStyles = serialize(optimizedTokens, context);
        var output = withMetadata(optimizedStyles, context);
        return callback ? callback(context.errors.length > 0 ? context.errors : null, output) : output;
      });
    });
  };
  var runner = function(localOnly) {
    return localOnly ? function(callback) {
      return callback();
    } : process.nextTick;
  };
  var optimize = function(tokens, context) {
    var optimized;
    optimized = level0Optimize(tokens, context);
    optimized = OptimizationLevel.One in context.options.level ? level1Optimize(tokens, context) : tokens;
    optimized = OptimizationLevel.Two in context.options.level ? level2Optimize(tokens, context, true) : optimized;
    return optimized;
  };
  var withMetadata = function(output, context) {
    output.stats = calculateStatsFrom(output.styles, context);
    output.errors = context.errors;
    output.inlinedStylesheets = context.inlinedStylesheets;
    output.warnings = context.warnings;
    return output;
  };
  var calculateStatsFrom = function(styles, context) {
    var finishedAt = Date.now();
    var timeSpent = finishedAt - context.stats.startedAt;
    delete context.stats.startedAt;
    context.stats.timeSpent = timeSpent;
    context.stats.efficiency = 1 - styles.length / context.stats.originalSize;
    context.stats.minifiedSize = styles.length;
    return context.stats;
  };
  var level0Optimize = require_optimize();
  var level1Optimize = require_optimize2();
  var level2Optimize = require_optimize4();
  var validator = require_validator();
  var compatibilityFrom = require_compatibility();
  var fetchFrom = require_fetch();
  var formatFrom = require_format().formatFrom;
  var inlineFrom = require_inline();
  var inlineRequestFrom = require_inline_request();
  var inlineTimeoutFrom = require_inline_timeout();
  var OptimizationLevel = require_optimization_level().OptimizationLevel;
  var optimizationLevelFrom = require_optimization_level().optimizationLevelFrom;
  var rebaseFrom = require_rebase();
  var rebaseToFrom = require_rebase_to();
  var inputSourceMapTracker = require_input_source_map_tracker();
  var readSources = require_read_sources();
  var serializeStyles = require_simple();
  var serializeStylesAndSourceMap = require_source_maps();
  var CleanCSS = module.exports = function CleanCSS(options) {
    options = options || {};
    this.options = {
      compatibility: compatibilityFrom(options.compatibility),
      fetch: fetchFrom(options.fetch),
      format: formatFrom(options.format),
      inline: inlineFrom(options.inline),
      inlineRequest: inlineRequestFrom(options.inlineRequest),
      inlineTimeout: inlineTimeoutFrom(options.inlineTimeout),
      level: optimizationLevelFrom(options.level),
      rebase: rebaseFrom(options.rebase),
      rebaseTo: rebaseToFrom(options.rebaseTo),
      returnPromise: !!options.returnPromise,
      sourceMap: !!options.sourceMap,
      sourceMapInlineSources: !!options.sourceMapInlineSources
    };
  };
  CleanCSS.process = function(input, opts) {
    var cleanCss;
    var optsTo = opts.to;
    delete opts.to;
    cleanCss = new CleanCSS(Object.assign({ returnPromise: true, rebaseTo: optsTo }, opts));
    return cleanCss.minify(input).then(function(output) {
      return { css: output.styles };
    });
  };
  CleanCSS.prototype.minify = function(input, maybeSourceMap, maybeCallback) {
    var options = this.options;
    if (options.returnPromise) {
      return new Promise(function(resolve, reject) {
        minify2(input, options, maybeSourceMap, function(errors, output) {
          return errors ? reject(errors) : resolve(output);
        });
      });
    } else {
      return minify2(input, options, maybeSourceMap, maybeCallback);
    }
  };
});

// node_modules/he/he.js
var require_he = __commonJS((exports, module) => {
  /*! https://mths.be/he v1.2.0 by @mathias | MIT license */
  (function(root) {
    var freeExports = typeof exports == "object" && exports;
    var freeModule = typeof module == "object" && module && exports == freeExports && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
      root = freeGlobal;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var regexAsciiWhitelist = /[\x01-\x7F]/g;
    var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
    var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
    var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "\t": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", _: "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "\'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", undefined: null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", $: "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\uD835\uDCB6": "ascr", "\uD835\uDD52": "aopf", "\uD835\uDD1E": "afr", "\uD835\uDD38": "Aopf", "\uD835\uDD04": "Afr", "\uD835\uDC9C": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\uD835\uDCB7": "bscr", "\uD835\uDD53": "bopf", "\uD835\uDD1F": "bfr", "\uD835\uDD39": "Bopf", "\u212C": "Bscr", "\uD835\uDD05": "Bfr", "\uD835\uDD20": "cfr", "\uD835\uDCB8": "cscr", "\uD835\uDD54": "copf", "\u212D": "Cfr", "\uD835\uDC9E": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\uD835\uDD21": "dfr", "\u2146": "dd", "\uD835\uDD55": "dopf", "\uD835\uDCB9": "dscr", "\uD835\uDC9F": "Dscr", "\uD835\uDD07": "Dfr", "\u2145": "DD", "\uD835\uDD3B": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\uD835\uDD22": "efr", "\uD835\uDD56": "eopf", "\u2130": "Escr", "\uD835\uDD08": "Efr", "\uD835\uDD3C": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\uD835\uDD23": "ffr", "\uD835\uDD57": "fopf", "\uD835\uDCBB": "fscr", "\uD835\uDD09": "Ffr", "\uD835\uDD3D": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", fj: "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\uD835\uDD58": "gopf", "\uD835\uDD24": "gfr", "\uD835\uDCA2": "Gscr", "\uD835\uDD3E": "Gopf", "\uD835\uDD0A": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\uD835\uDD25": "hfr", "\u210E": "planckh", "\uD835\uDCBD": "hscr", "\uD835\uDD59": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\uD835\uDD5A": "iopf", "\uD835\uDD26": "ifr", "\uD835\uDCBE": "iscr", "\u2148": "ii", "\uD835\uDD40": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\uD835\uDCBF": "jscr", "\uD835\uDD5B": "jopf", "\uD835\uDD27": "jfr", "\uD835\uDCA5": "Jscr", "\uD835\uDD0D": "Jfr", "\uD835\uDD41": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\uD835\uDD5C": "kopf", "\uD835\uDCC0": "kscr", "\uD835\uDD28": "kfr", "\uD835\uDCA6": "Kscr", "\uD835\uDD42": "Kopf", "\uD835\uDD0E": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\uD835\uDD29": "lfr", "\uD835\uDCC1": "lscr", "\u2113": "ell", "\uD835\uDD5D": "lopf", "\u2112": "Lscr", "\uD835\uDD0F": "Lfr", "\uD835\uDD43": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\uD835\uDD2A": "mfr", "\uD835\uDD5E": "mopf", "\uD835\uDCC2": "mscr", "\uD835\uDD10": "Mfr", "\uD835\uDD44": "Mopf", "\u2133": "Mscr", "\uD835\uDD2B": "nfr", "\uD835\uDD5F": "nopf", "\uD835\uDCC3": "nscr", "\u2115": "Nopf", "\uD835\uDCA9": "Nscr", "\uD835\uDD11": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\uD835\uDD60": "oopf", "\uD835\uDD2C": "ofr", "\u2134": "oscr", "\uD835\uDCAA": "Oscr", "\uD835\uDD12": "Ofr", "\uD835\uDD46": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\uD835\uDD2D": "pfr", "\uD835\uDCC5": "pscr", "\uD835\uDD61": "popf", "\u2119": "Popf", "\uD835\uDD13": "Pfr", "\uD835\uDCAB": "Pscr", "\uD835\uDD62": "qopf", "\uD835\uDD2E": "qfr", "\uD835\uDCC6": "qscr", "\uD835\uDCAC": "Qscr", "\uD835\uDD14": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\uD835\uDD2F": "rfr", "\uD835\uDD63": "ropf", "\uD835\uDCC7": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\uD835\uDD64": "sopf", "\uD835\uDCC8": "sscr", "\uD835\uDD30": "sfr", "\uD835\uDD4A": "Sopf", "\uD835\uDD16": "Sfr", "\uD835\uDCAE": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\uD835\uDD31": "tfr", "\uD835\uDCC9": "tscr", "\uD835\uDD65": "topf", "\uD835\uDCAF": "Tscr", "\uD835\uDD17": "Tfr", "\uD835\uDD4B": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\uD835\uDCCA": "uscr", "\uD835\uDD66": "uopf", "\uD835\uDD32": "ufr", "\uD835\uDD4C": "Uopf", "\uD835\uDD18": "Ufr", "\uD835\uDCB0": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\uD835\uDD33": "vfr", "\uD835\uDD67": "vopf", "\uD835\uDCCB": "vscr", "\uD835\uDD19": "Vfr", "\uD835\uDD4D": "Vopf", "\uD835\uDCB1": "Vscr", "\uD835\uDD68": "wopf", "\uD835\uDCCC": "wscr", "\uD835\uDD34": "wfr", "\uD835\uDCB2": "Wscr", "\uD835\uDD4E": "Wopf", "\uD835\uDD1A": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\uD835\uDD35": "xfr", "\uD835\uDCCD": "xscr", "\uD835\uDD69": "xopf", "\uD835\uDD4F": "Xopf", "\uD835\uDD1B": "Xfr", "\uD835\uDCB3": "Xscr", "\uD835\uDD36": "yfr", "\uD835\uDCCE": "yscr", "\uD835\uDD6A": "yopf", "\uD835\uDCB4": "Yscr", "\uD835\uDD1C": "Yfr", "\uD835\uDD50": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\uD835\uDCCF": "zscr", "\uD835\uDD37": "zfr", "\uD835\uDD6B": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\uD835\uDCB5": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
    var regexEscape = /["&'<>`]/g;
    var escapeMap = {
      '"': "&quot;",
      "&": "&amp;",
      "\'": "&#x27;",
      "<": "&lt;",
      ">": "&gt;",
      "`": "&#x60;"
    };
    var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
    var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
    var decodeMap = { aacute: "\xE1", Aacute: "\xC1", abreve: "\u0103", Abreve: "\u0102", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", acirc: "\xE2", Acirc: "\xC2", acute: "\xB4", acy: "\u0430", Acy: "\u0410", aelig: "\xE6", AElig: "\xC6", af: "\u2061", afr: "\uD835\uDD1E", Afr: "\uD835\uDD04", agrave: "\xE0", Agrave: "\xC0", alefsym: "\u2135", aleph: "\u2135", alpha: "\u03B1", Alpha: "\u0391", amacr: "\u0101", Amacr: "\u0100", amalg: "\u2A3F", amp: "&", AMP: "&", and: "\u2227", And: "\u2A53", andand: "\u2A55", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsd: "\u2221", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", aogon: "\u0105", Aogon: "\u0104", aopf: "\uD835\uDD52", Aopf: "\uD835\uDD38", ap: "\u2248", apacir: "\u2A6F", ape: "\u224A", apE: "\u2A70", apid: "\u224B", apos: "\'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", aring: "\xE5", Aring: "\xC5", ascr: "\uD835\uDCB6", Ascr: "\uD835\uDC9C", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", atilde: "\xE3", Atilde: "\xC3", auml: "\xE4", Auml: "\xC4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", bcy: "\u0431", Bcy: "\u0411", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", beta: "\u03B2", Beta: "\u0392", beth: "\u2136", between: "\u226C", bfr: "\uD835\uDD1F", Bfr: "\uD835\uDD05", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bnot: "\u2310", bNot: "\u2AED", bopf: "\uD835\uDD53", Bopf: "\uD835\uDD39", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxhD: "\u2565", boxHd: "\u2564", boxHD: "\u2566", boxhu: "\u2534", boxhU: "\u2568", boxHu: "\u2567", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\uD835\uDCB7", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsol: "\\", bsolb: "\u29C5", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpe: "\u224F", bumpE: "\u2AAE", bumpeq: "\u224F", Bumpeq: "\u224E", cacute: "\u0107", Cacute: "\u0106", cap: "\u2229", Cap: "\u22D2", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", ccaron: "\u010D", Ccaron: "\u010C", ccedil: "\xE7", Ccedil: "\xC7", ccirc: "\u0109", Ccirc: "\u0108", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", cdot: "\u010B", Cdot: "\u010A", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\uD835\uDD20", Cfr: "\u212D", chcy: "\u0447", CHcy: "\u0427", check: "\u2713", checkmark: "\u2713", chi: "\u03C7", Chi: "\u03A7", cir: "\u25CB", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cire: "\u2257", cirE: "\u29C3", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", colone: "\u2254", Colone: "\u2A74", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\uD835\uDD54", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", cscr: "\uD835\uDCB8", Cscr: "\uD835\uDC9E", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cup: "\u222A", Cup: "\u22D3", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", dArr: "\u21D3", Darr: "\u21A1", dash: "\u2010", dashv: "\u22A3", Dashv: "\u2AE4", dbkarow: "\u290F", dblac: "\u02DD", dcaron: "\u010F", Dcaron: "\u010E", dcy: "\u0434", Dcy: "\u0414", dd: "\u2146", DD: "\u2145", ddagger: "\u2021", ddarr: "\u21CA", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", delta: "\u03B4", Delta: "\u0394", demptyv: "\u29B1", dfisht: "\u297F", dfr: "\uD835\uDD21", Dfr: "\uD835\uDD07", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", djcy: "\u0452", DJcy: "\u0402", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", dopf: "\uD835\uDD55", Dopf: "\uD835\uDD3B", dot: "\u02D9", Dot: "\xA8", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", downarrow: "\u2193", Downarrow: "\u21D3", DownArrow: "\u2193", DownArrowBar: "\u2913", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVector: "\u21BD", DownLeftVectorBar: "\u2956", DownRightTeeVector: "\u295F", DownRightVector: "\u21C1", DownRightVectorBar: "\u2957", DownTee: "\u22A4", DownTeeArrow: "\u21A7", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", dscr: "\uD835\uDCB9", Dscr: "\uD835\uDC9F", dscy: "\u0455", DScy: "\u0405", dsol: "\u29F6", dstrok: "\u0111", Dstrok: "\u0110", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", dzcy: "\u045F", DZcy: "\u040F", dzigrarr: "\u27FF", eacute: "\xE9", Eacute: "\xC9", easter: "\u2A6E", ecaron: "\u011B", Ecaron: "\u011A", ecir: "\u2256", ecirc: "\xEA", Ecirc: "\xCA", ecolon: "\u2255", ecy: "\u044D", Ecy: "\u042D", eDDot: "\u2A77", edot: "\u0117", eDot: "\u2251", Edot: "\u0116", ee: "\u2147", efDot: "\u2252", efr: "\uD835\uDD22", Efr: "\uD835\uDD08", eg: "\u2A9A", egrave: "\xE8", Egrave: "\xC8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", emacr: "\u0113", Emacr: "\u0112", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp: "\u2003", emsp13: "\u2004", emsp14: "\u2005", eng: "\u014B", ENG: "\u014A", ensp: "\u2002", eogon: "\u0119", Eogon: "\u0118", eopf: "\uD835\uDD56", Eopf: "\uD835\uDD3C", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", epsilon: "\u03B5", Epsilon: "\u0395", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", esim: "\u2242", Esim: "\u2A73", eta: "\u03B7", Eta: "\u0397", eth: "\xF0", ETH: "\xD0", euml: "\xEB", Euml: "\xCB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", fcy: "\u0444", Fcy: "\u0424", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", ffr: "\uD835\uDD23", Ffr: "\uD835\uDD09", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", fopf: "\uD835\uDD57", Fopf: "\uD835\uDD3D", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\uD835\uDCBB", Fscr: "\u2131", gacute: "\u01F5", gamma: "\u03B3", Gamma: "\u0393", gammad: "\u03DD", Gammad: "\u03DC", gap: "\u2A86", gbreve: "\u011F", Gbreve: "\u011E", Gcedil: "\u0122", gcirc: "\u011D", Gcirc: "\u011C", gcy: "\u0433", Gcy: "\u0413", gdot: "\u0121", Gdot: "\u0120", ge: "\u2265", gE: "\u2267", gel: "\u22DB", gEl: "\u2A8C", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", ges: "\u2A7E", gescc: "\u2AA9", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", gfr: "\uD835\uDD24", Gfr: "\uD835\uDD0A", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", gjcy: "\u0453", GJcy: "\u0403", gl: "\u2277", gla: "\u2AA5", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", gopf: "\uD835\uDD58", Gopf: "\uD835\uDD3E", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", gscr: "\u210A", Gscr: "\uD835\uDCA2", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gt: ">", Gt: "\u226B", GT: ">", gtcc: "\u2AA7", gtcir: "\u2A7A", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", hardcy: "\u044A", HARDcy: "\u042A", harr: "\u2194", hArr: "\u21D4", harrcir: "\u2948", harrw: "\u21AD", Hat: "^", hbar: "\u210F", hcirc: "\u0125", Hcirc: "\u0124", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\uD835\uDD25", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\uD835\uDD59", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\uD835\uDCBD", Hscr: "\u210B", hslash: "\u210F", hstrok: "\u0127", Hstrok: "\u0126", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", iacute: "\xED", Iacute: "\xCD", ic: "\u2063", icirc: "\xEE", Icirc: "\xCE", icy: "\u0438", Icy: "\u0418", Idot: "\u0130", iecy: "\u0435", IEcy: "\u0415", iexcl: "\xA1", iff: "\u21D4", ifr: "\uD835\uDD26", Ifr: "\u2111", igrave: "\xEC", Igrave: "\xCC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", ijlig: "\u0133", IJlig: "\u0132", Im: "\u2111", imacr: "\u012B", Imacr: "\u012A", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", in: "\u2208", incare: "\u2105", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", int: "\u222B", Int: "\u222C", intcal: "\u22BA", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", iocy: "\u0451", IOcy: "\u0401", iogon: "\u012F", Iogon: "\u012E", iopf: "\uD835\uDD5A", Iopf: "\uD835\uDD40", iota: "\u03B9", Iota: "\u0399", iprod: "\u2A3C", iquest: "\xBF", iscr: "\uD835\uDCBE", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", itilde: "\u0129", Itilde: "\u0128", iukcy: "\u0456", Iukcy: "\u0406", iuml: "\xEF", Iuml: "\xCF", jcirc: "\u0135", Jcirc: "\u0134", jcy: "\u0439", Jcy: "\u0419", jfr: "\uD835\uDD27", Jfr: "\uD835\uDD0D", jmath: "\u0237", jopf: "\uD835\uDD5B", Jopf: "\uD835\uDD41", jscr: "\uD835\uDCBF", Jscr: "\uD835\uDCA5", jsercy: "\u0458", Jsercy: "\u0408", jukcy: "\u0454", Jukcy: "\u0404", kappa: "\u03BA", Kappa: "\u039A", kappav: "\u03F0", kcedil: "\u0137", Kcedil: "\u0136", kcy: "\u043A", Kcy: "\u041A", kfr: "\uD835\uDD28", Kfr: "\uD835\uDD0E", kgreen: "\u0138", khcy: "\u0445", KHcy: "\u0425", kjcy: "\u045C", KJcy: "\u040C", kopf: "\uD835\uDD5C", Kopf: "\uD835\uDD42", kscr: "\uD835\uDCC0", Kscr: "\uD835\uDCA6", lAarr: "\u21DA", lacute: "\u013A", Lacute: "\u0139", laemptyv: "\u29B4", lagran: "\u2112", lambda: "\u03BB", Lambda: "\u039B", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larr: "\u2190", lArr: "\u21D0", Larr: "\u219E", larrb: "\u21E4", larrbfs: "\u291F", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", lat: "\u2AAB", latail: "\u2919", lAtail: "\u291B", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", lcaron: "\u013E", Lcaron: "\u013D", lcedil: "\u013C", Lcedil: "\u013B", lceil: "\u2308", lcub: "{", lcy: "\u043B", Lcy: "\u041B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", leftarrow: "\u2190", Leftarrow: "\u21D0", LeftArrow: "\u2190", LeftArrowBar: "\u21E4", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVector: "\u21C3", LeftDownVectorBar: "\u2959", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", Leftrightarrow: "\u21D4", LeftRightArrow: "\u2194", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTee: "\u22A3", LeftTeeArrow: "\u21A4", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangle: "\u22B2", LeftTriangleBar: "\u29CF", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVector: "\u21BF", LeftUpVectorBar: "\u2958", LeftVector: "\u21BC", LeftVectorBar: "\u2952", leg: "\u22DA", lEg: "\u2A8B", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", les: "\u2A7D", lescc: "\u2AA8", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", lfr: "\uD835\uDD29", Lfr: "\uD835\uDD0F", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", ljcy: "\u0459", LJcy: "\u0409", ll: "\u226A", Ll: "\u22D8", llarr: "\u21C7", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", lmidot: "\u0140", Lmidot: "\u013F", lmoust: "\u23B0", lmoustache: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", Longleftarrow: "\u27F8", LongLeftArrow: "\u27F5", longleftrightarrow: "\u27F7", Longleftrightarrow: "\u27FA", LongLeftRightArrow: "\u27F7", longmapsto: "\u27FC", longrightarrow: "\u27F6", Longrightarrow: "\u27F9", LongRightArrow: "\u27F6", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", lopf: "\uD835\uDD5D", Lopf: "\uD835\uDD43", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\uD835\uDCC1", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", lstrok: "\u0142", Lstrok: "\u0141", lt: "<", Lt: "\u226A", LT: "<", ltcc: "\u2AA6", ltcir: "\u2A79", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", map: "\u21A6", Map: "\u2905", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", mcy: "\u043C", Mcy: "\u041C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", mfr: "\uD835\uDD2A", Mfr: "\uD835\uDD10", mho: "\u2127", micro: "\xB5", mid: "\u2223", midast: "*", midcir: "\u2AF0", middot: "\xB7", minus: "\u2212", minusb: "\u229F", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", mopf: "\uD835\uDD5E", Mopf: "\uD835\uDD44", mp: "\u2213", mscr: "\uD835\uDCC2", Mscr: "\u2133", mstpos: "\u223E", mu: "\u03BC", Mu: "\u039C", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", nacute: "\u0144", Nacute: "\u0143", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natur: "\u266E", natural: "\u266E", naturals: "\u2115", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", ncaron: "\u0148", Ncaron: "\u0147", ncedil: "\u0146", Ncedil: "\u0145", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", ncy: "\u043D", Ncy: "\u041D", ndash: "\u2013", ne: "\u2260", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", nfr: "\uD835\uDD2B", Nfr: "\uD835\uDD11", nge: "\u2271", ngE: "\u2267\u0338", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", ngt: "\u226F", nGt: "\u226B\u20D2", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", njcy: "\u045A", NJcy: "\u040A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nle: "\u2270", nlE: "\u2266\u0338", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nlt: "\u226E", nLt: "\u226A\u20D2", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\uD835\uDD5F", Nopf: "\u2115", not: "\xAC", Not: "\u2AEC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangle: "\u22EA", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangle: "\u22EB", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", npar: "\u2226", nparallel: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", npre: "\u2AAF\u0338", nprec: "\u2280", npreceq: "\u2AAF\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrc: "\u2933\u0338", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", nscr: "\uD835\uDCC3", Nscr: "\uD835\uDCA9", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsube: "\u2288", nsubE: "\u2AC5\u0338", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupe: "\u2289", nsupE: "\u2AC6\u0338", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", ntilde: "\xF1", Ntilde: "\xD1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", nu: "\u03BD", Nu: "\u039D", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", oacute: "\xF3", Oacute: "\xD3", oast: "\u229B", ocir: "\u229A", ocirc: "\xF4", Ocirc: "\xD4", ocy: "\u043E", Ocy: "\u041E", odash: "\u229D", odblac: "\u0151", Odblac: "\u0150", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", oelig: "\u0153", OElig: "\u0152", ofcir: "\u29BF", ofr: "\uD835\uDD2C", Ofr: "\uD835\uDD12", ogon: "\u02DB", ograve: "\xF2", Ograve: "\xD2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", omacr: "\u014D", Omacr: "\u014C", omega: "\u03C9", Omega: "\u03A9", omicron: "\u03BF", Omicron: "\u039F", omid: "\u29B6", ominus: "\u2296", oopf: "\uD835\uDD60", Oopf: "\uD835\uDD46", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", or: "\u2228", Or: "\u2A54", orarr: "\u21BB", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", oscr: "\u2134", Oscr: "\uD835\uDCAA", oslash: "\xF8", Oslash: "\xD8", osol: "\u2298", otilde: "\xF5", Otilde: "\xD5", otimes: "\u2297", Otimes: "\u2A37", otimesas: "\u2A36", ouml: "\xF6", Ouml: "\xD6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", par: "\u2225", para: "\xB6", parallel: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", pcy: "\u043F", Pcy: "\u041F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", pfr: "\uD835\uDD2D", Pfr: "\uD835\uDD13", phi: "\u03C6", Phi: "\u03A6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", pi: "\u03C0", Pi: "\u03A0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plus: "+", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\uD835\uDD61", Popf: "\u2119", pound: "\xA3", pr: "\u227A", Pr: "\u2ABB", prap: "\u2AB7", prcue: "\u227C", pre: "\u2AAF", prE: "\u2AB3", prec: "\u227A", precapprox: "\u2AB7", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportion: "\u2237", Proportional: "\u221D", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", pscr: "\uD835\uDCC5", Pscr: "\uD835\uDCAB", psi: "\u03C8", Psi: "\u03A8", puncsp: "\u2008", qfr: "\uD835\uDD2E", Qfr: "\uD835\uDD14", qint: "\u2A0C", qopf: "\uD835\uDD62", Qopf: "\u211A", qprime: "\u2057", qscr: "\uD835\uDCC6", Qscr: "\uD835\uDCAC", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", racute: "\u0155", Racute: "\u0154", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarr: "\u2192", rArr: "\u21D2", Rarr: "\u21A0", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", rarrtl: "\u21A3", Rarrtl: "\u2916", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", rcaron: "\u0159", Rcaron: "\u0158", rcedil: "\u0157", Rcedil: "\u0156", rceil: "\u2309", rcub: "}", rcy: "\u0440", Rcy: "\u0420", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", Re: "\u211C", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\uD835\uDD2F", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", rho: "\u03C1", Rho: "\u03A1", rhov: "\u03F1", RightAngleBracket: "\u27E9", rightarrow: "\u2192", Rightarrow: "\u21D2", RightArrow: "\u2192", RightArrowBar: "\u21E5", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVector: "\u21C2", RightDownVectorBar: "\u2955", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTee: "\u22A2", RightTeeArrow: "\u21A6", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangle: "\u22B3", RightTriangleBar: "\u29D0", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVector: "\u21BE", RightUpVectorBar: "\u2954", RightVector: "\u21C0", RightVectorBar: "\u2953", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoust: "\u23B1", rmoustache: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\uD835\uDD63", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\uD835\uDCC7", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", sacute: "\u015B", Sacute: "\u015A", sbquo: "\u201A", sc: "\u227B", Sc: "\u2ABC", scap: "\u2AB8", scaron: "\u0161", Scaron: "\u0160", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", scedil: "\u015F", Scedil: "\u015E", scirc: "\u015D", Scirc: "\u015C", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", scy: "\u0441", Scy: "\u0421", sdot: "\u22C5", sdotb: "\u22A1", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", sfr: "\uD835\uDD30", Sfr: "\uD835\uDD16", sfrown: "\u2322", sharp: "\u266F", shchcy: "\u0449", SHCHcy: "\u0429", shcy: "\u0448", SHcy: "\u0428", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", sigma: "\u03C3", Sigma: "\u03A3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", softcy: "\u044C", SOFTcy: "\u042C", sol: "/", solb: "\u29C4", solbar: "\u233F", sopf: "\uD835\uDD64", Sopf: "\uD835\uDD4A", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", squ: "\u25A1", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squf: "\u25AA", srarr: "\u2192", sscr: "\uD835\uDCC8", Sscr: "\uD835\uDCAE", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", star: "\u2606", Star: "\u22C6", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", sube: "\u2286", subE: "\u2AC5", subedot: "\u2AC3", submult: "\u2AC1", subne: "\u228A", subnE: "\u2ACB", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succ: "\u227B", succapprox: "\u2AB8", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup: "\u2283", Sup: "\u22D1", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", supdot: "\u2ABE", supdsub: "\u2AD8", supe: "\u2287", supE: "\u2AC6", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supne: "\u228B", supnE: "\u2ACC", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "\t", target: "\u2316", tau: "\u03C4", Tau: "\u03A4", tbrk: "\u23B4", tcaron: "\u0165", Tcaron: "\u0164", tcedil: "\u0163", Tcedil: "\u0162", tcy: "\u0442", Tcy: "\u0422", tdot: "\u20DB", telrec: "\u2315", tfr: "\uD835\uDD31", Tfr: "\uD835\uDD17", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", theta: "\u03B8", Theta: "\u0398", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", thinsp: "\u2009", ThinSpace: "\u2009", thkap: "\u2248", thksim: "\u223C", thorn: "\xFE", THORN: "\xDE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", times: "\xD7", timesb: "\u22A0", timesbar: "\u2A31", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", top: "\u22A4", topbot: "\u2336", topcir: "\u2AF1", topf: "\uD835\uDD65", Topf: "\uD835\uDD4B", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", tscr: "\uD835\uDCC9", Tscr: "\uD835\uDCAF", tscy: "\u0446", TScy: "\u0426", tshcy: "\u045B", TSHcy: "\u040B", tstrok: "\u0167", Tstrok: "\u0166", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", uacute: "\xFA", Uacute: "\xDA", uarr: "\u2191", uArr: "\u21D1", Uarr: "\u219F", Uarrocir: "\u2949", ubrcy: "\u045E", Ubrcy: "\u040E", ubreve: "\u016D", Ubreve: "\u016C", ucirc: "\xFB", Ucirc: "\xDB", ucy: "\u0443", Ucy: "\u0423", udarr: "\u21C5", udblac: "\u0171", Udblac: "\u0170", udhar: "\u296E", ufisht: "\u297E", ufr: "\uD835\uDD32", Ufr: "\uD835\uDD18", ugrave: "\xF9", Ugrave: "\xD9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", umacr: "\u016B", Umacr: "\u016A", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", uogon: "\u0173", Uogon: "\u0172", uopf: "\uD835\uDD66", Uopf: "\uD835\uDD4C", uparrow: "\u2191", Uparrow: "\u21D1", UpArrow: "\u2191", UpArrowBar: "\u2912", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", Updownarrow: "\u21D5", UpDownArrow: "\u2195", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", upsilon: "\u03C5", Upsilon: "\u03A5", UpTee: "\u22A5", UpTeeArrow: "\u21A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", uring: "\u016F", Uring: "\u016E", urtri: "\u25F9", uscr: "\uD835\uDCCA", Uscr: "\uD835\uDCB0", utdot: "\u22F0", utilde: "\u0169", Utilde: "\u0168", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", uuml: "\xFC", Uuml: "\xDC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", vcy: "\u0432", Vcy: "\u0412", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", vee: "\u2228", Vee: "\u22C1", veebar: "\u22BB", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", vfr: "\uD835\uDD33", Vfr: "\uD835\uDD19", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", vopf: "\uD835\uDD67", Vopf: "\uD835\uDD4D", vprop: "\u221D", vrtri: "\u22B3", vscr: "\uD835\uDCCB", Vscr: "\uD835\uDCB1", vsubne: "\u228A\uFE00", vsubnE: "\u2ACB\uFE00", vsupne: "\u228B\uFE00", vsupnE: "\u2ACC\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", wcirc: "\u0175", Wcirc: "\u0174", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", wfr: "\uD835\uDD34", Wfr: "\uD835\uDD1A", wopf: "\uD835\uDD68", Wopf: "\uD835\uDD4E", wp: "\u2118", wr: "\u2240", wreath: "\u2240", wscr: "\uD835\uDCCC", Wscr: "\uD835\uDCB2", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", xfr: "\uD835\uDD35", Xfr: "\uD835\uDD1B", xharr: "\u27F7", xhArr: "\u27FA", xi: "\u03BE", Xi: "\u039E", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", xopf: "\uD835\uDD69", Xopf: "\uD835\uDD4F", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", xscr: "\uD835\uDCCD", Xscr: "\uD835\uDCB3", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", yacute: "\xFD", Yacute: "\xDD", yacy: "\u044F", YAcy: "\u042F", ycirc: "\u0177", Ycirc: "\u0176", ycy: "\u044B", Ycy: "\u042B", yen: "\xA5", yfr: "\uD835\uDD36", Yfr: "\uD835\uDD1C", yicy: "\u0457", YIcy: "\u0407", yopf: "\uD835\uDD6A", Yopf: "\uD835\uDD50", yscr: "\uD835\uDCCE", Yscr: "\uD835\uDCB4", yucy: "\u044E", YUcy: "\u042E", yuml: "\xFF", Yuml: "\u0178", zacute: "\u017A", Zacute: "\u0179", zcaron: "\u017E", Zcaron: "\u017D", zcy: "\u0437", Zcy: "\u0417", zdot: "\u017C", Zdot: "\u017B", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", zeta: "\u03B6", Zeta: "\u0396", zfr: "\uD835\uDD37", Zfr: "\u2128", zhcy: "\u0436", ZHcy: "\u0416", zigrarr: "\u21DD", zopf: "\uD835\uDD6B", Zopf: "\u2124", zscr: "\uD835\uDCCF", Zscr: "\uD835\uDCB5", zwj: "\u200D", zwnj: "\u200C" };
    var decodeMapLegacy = { aacute: "\xE1", Aacute: "\xC1", acirc: "\xE2", Acirc: "\xC2", acute: "\xB4", aelig: "\xE6", AElig: "\xC6", agrave: "\xE0", Agrave: "\xC0", amp: "&", AMP: "&", aring: "\xE5", Aring: "\xC5", atilde: "\xE3", Atilde: "\xC3", auml: "\xE4", Auml: "\xC4", brvbar: "\xA6", ccedil: "\xE7", Ccedil: "\xC7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", eacute: "\xE9", Eacute: "\xC9", ecirc: "\xEA", Ecirc: "\xCA", egrave: "\xE8", Egrave: "\xC8", eth: "\xF0", ETH: "\xD0", euml: "\xEB", Euml: "\xCB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", iacute: "\xED", Iacute: "\xCD", icirc: "\xEE", Icirc: "\xCE", iexcl: "\xA1", igrave: "\xEC", Igrave: "\xCC", iquest: "\xBF", iuml: "\xEF", Iuml: "\xCF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", ntilde: "\xF1", Ntilde: "\xD1", oacute: "\xF3", Oacute: "\xD3", ocirc: "\xF4", Ocirc: "\xD4", ograve: "\xF2", Ograve: "\xD2", ordf: "\xAA", ordm: "\xBA", oslash: "\xF8", Oslash: "\xD8", otilde: "\xF5", Otilde: "\xD5", ouml: "\xF6", Ouml: "\xD6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", thorn: "\xFE", THORN: "\xDE", times: "\xD7", uacute: "\xFA", Uacute: "\xDA", ucirc: "\xFB", Ucirc: "\xDB", ugrave: "\xF9", Ugrave: "\xD9", uml: "\xA8", uuml: "\xFC", Uuml: "\xDC", yacute: "\xFD", Yacute: "\xDD", yen: "\xA5", yuml: "\xFF" };
    var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
    var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65000, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
    var stringFromCharCode = String.fromCharCode;
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var has = function(object2, propertyName) {
      return hasOwnProperty.call(object2, propertyName);
    };
    var contains = function(array, value) {
      var index = -1;
      var length = array.length;
      while (++index < length) {
        if (array[index] == value) {
          return true;
        }
      }
      return false;
    };
    var merge = function(options, defaults2) {
      if (!options) {
        return defaults2;
      }
      var result = {};
      var key2;
      for (key2 in defaults2) {
        result[key2] = has(options, key2) ? options[key2] : defaults2[key2];
      }
      return result;
    };
    var codePointToSymbol = function(codePoint, strict) {
      var output = "";
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        if (strict) {
          parseError("character reference outside the permissible Unicode range");
        }
        return "\uFFFD";
      }
      if (has(decodeMapNumeric, codePoint)) {
        if (strict) {
          parseError("disallowed character reference");
        }
        return decodeMapNumeric[codePoint];
      }
      if (strict && contains(invalidReferenceCodePoints, codePoint)) {
        parseError("disallowed character reference");
      }
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += stringFromCharCode(codePoint);
      return output;
    };
    var hexEscape = function(codePoint) {
      return "&#x" + codePoint.toString(16).toUpperCase() + ";";
    };
    var decEscape = function(codePoint) {
      return "&#" + codePoint + ";";
    };
    var parseError = function(message) {
      throw Error("Parse error: " + message);
    };
    var encode = function(string, options) {
      options = merge(options, encode.options);
      var strict = options.strict;
      if (strict && regexInvalidRawCodePoint.test(string)) {
        parseError("forbidden code point");
      }
      var encodeEverything = options.encodeEverything;
      var useNamedReferences = options.useNamedReferences;
      var allowUnsafeSymbols = options.allowUnsafeSymbols;
      var escapeCodePoint = options.decimal ? decEscape : hexEscape;
      var escapeBmpSymbol = function(symbol) {
        return escapeCodePoint(symbol.charCodeAt(0));
      };
      if (encodeEverything) {
        string = string.replace(regexAsciiWhitelist, function(symbol) {
          if (useNamedReferences && has(encodeMap, symbol)) {
            return "&" + encodeMap[symbol] + ";";
          }
          return escapeBmpSymbol(symbol);
        });
        if (useNamedReferences) {
          string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
        }
        if (useNamedReferences) {
          string = string.replace(regexEncodeNonAscii, function(string2) {
            return "&" + encodeMap[string2] + ";";
          });
        }
      } else if (useNamedReferences) {
        if (!allowUnsafeSymbols) {
          string = string.replace(regexEscape, function(string2) {
            return "&" + encodeMap[string2] + ";";
          });
        }
        string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
        string = string.replace(regexEncodeNonAscii, function(string2) {
          return "&" + encodeMap[string2] + ";";
        });
      } else if (!allowUnsafeSymbols) {
        string = string.replace(regexEscape, escapeBmpSymbol);
      }
      return string.replace(regexAstralSymbols, function($0) {
        var high = $0.charCodeAt(0);
        var low = $0.charCodeAt(1);
        var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
        return escapeCodePoint(codePoint);
      }).replace(regexBmpWhitelist, escapeBmpSymbol);
    };
    encode.options = {
      allowUnsafeSymbols: false,
      encodeEverything: false,
      strict: false,
      useNamedReferences: false,
      decimal: false
    };
    var decode = function(html, options) {
      options = merge(options, decode.options);
      var strict = options.strict;
      if (strict && regexInvalidEntity.test(html)) {
        parseError("malformed character reference");
      }
      return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
        var codePoint;
        var semicolon;
        var decDigits;
        var hexDigits;
        var reference;
        var next;
        if ($1) {
          reference = $1;
          return decodeMap[reference];
        }
        if ($2) {
          reference = $2;
          next = $3;
          if (next && options.isAttributeValue) {
            if (strict && next == "=") {
              parseError("`&` did not start a character reference");
            }
            return $0;
          } else {
            if (strict) {
              parseError("named character reference was not terminated by a semicolon");
            }
            return decodeMapLegacy[reference] + (next || "");
          }
        }
        if ($4) {
          decDigits = $4;
          semicolon = $5;
          if (strict && !semicolon) {
            parseError("character reference was not terminated by a semicolon");
          }
          codePoint = parseInt(decDigits, 10);
          return codePointToSymbol(codePoint, strict);
        }
        if ($6) {
          hexDigits = $6;
          semicolon = $7;
          if (strict && !semicolon) {
            parseError("character reference was not terminated by a semicolon");
          }
          codePoint = parseInt(hexDigits, 16);
          return codePointToSymbol(codePoint, strict);
        }
        if (strict) {
          parseError("named character reference was not terminated by a semicolon");
        }
        return $0;
      });
    };
    decode.options = {
      isAttributeValue: false,
      strict: false
    };
    var escape2 = function(string) {
      return string.replace(regexEscape, function($0) {
        return escapeMap[$0];
      });
    };
    var he = {
      version: "1.2.0",
      encode,
      decode,
      escape: escape2,
      unescape: decode
    };
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
      define(function() {
        return he;
      });
    } else if (freeExports && !freeExports.nodeType) {
      if (freeModule) {
        freeModule.exports = he;
      } else {
        for (var key in he) {
          has(he, key) && (freeExports[key] = he[key]);
        }
      }
    } else {
      root.he = he;
    }
  })(exports);
});

// node_modules/html-minifier/src/utils.js
var require_utils = __commonJS((exports) => {
  var createMap = function(values, ignoreCase) {
    var map = {};
    values.forEach(function(value) {
      map[value] = 1;
    });
    return ignoreCase ? function(value) {
      return map[value.toLowerCase()] === 1;
    } : function(value) {
      return map[value] === 1;
    };
  };
  exports.createMap = createMap;
  exports.createMapFromString = function(values, ignoreCase) {
    return createMap(values.split(/,/), ignoreCase);
  };
});

// node_modules/html-minifier/src/htmlparser.js
var require_htmlparser = __commonJS((exports) => {
  var makeMap = function(values) {
    return createMapFromString(values, true);
  };
  var attrForHandler = function(handler) {
    var pattern = singleAttrIdentifier.source + "(?:\\s*(" + joinSingleAttrAssigns(handler) + ")[ \\t\\n\\f\\r]*(?:" + singleAttrValues.join("|") + "))?";
    if (handler.customAttrSurround) {
      var attrClauses = [];
      for (var i = handler.customAttrSurround.length - 1;i >= 0; i--) {
        attrClauses[i] = "(?:(" + handler.customAttrSurround[i][0].source + ")\\s*" + pattern + "\\s*(" + handler.customAttrSurround[i][1].source + "))";
      }
      attrClauses.push("(?:" + pattern + ")");
      pattern = "(?:" + attrClauses.join("|") + ")";
    }
    return new RegExp("^\\s*" + pattern);
  };
  var joinSingleAttrAssigns = function(handler) {
    return singleAttrAssigns.concat(handler.customAttrAssign || []).map(function(assign) {
      return "(?:" + assign.source + ")";
    }).join("|");
  };
  var HTMLParser = function(html, handler) {
    var stack = [], lastTag;
    var attribute = attrForHandler(handler);
    var last, prevTag, nextTag;
    while (html) {
      last = html;
      if (!lastTag || !special(lastTag)) {
        var textEnd = html.indexOf("<");
        if (textEnd === 0) {
          if (/^<!--/.test(html)) {
            var commentEnd = html.indexOf("-->");
            if (commentEnd >= 0) {
              if (handler.comment) {
                handler.comment(html.substring(4, commentEnd));
              }
              html = html.substring(commentEnd + 3);
              prevTag = "";
              continue;
            }
          }
          if (/^<!\[/.test(html)) {
            var conditionalEnd = html.indexOf("]>");
            if (conditionalEnd >= 0) {
              if (handler.comment) {
                handler.comment(html.substring(2, conditionalEnd + 1), true);
              }
              html = html.substring(conditionalEnd + 2);
              prevTag = "";
              continue;
            }
          }
          var doctypeMatch = html.match(doctype);
          if (doctypeMatch) {
            if (handler.doctype) {
              handler.doctype(doctypeMatch[0]);
            }
            html = html.substring(doctypeMatch[0].length);
            prevTag = "";
            continue;
          }
          var endTagMatch = html.match(endTag);
          if (endTagMatch) {
            html = html.substring(endTagMatch[0].length);
            endTagMatch[0].replace(endTag, parseEndTag);
            prevTag = "/" + endTagMatch[1].toLowerCase();
            continue;
          }
          var startTagMatch = parseStartTag(html);
          if (startTagMatch) {
            html = startTagMatch.rest;
            handleStartTag(startTagMatch);
            prevTag = startTagMatch.tagName.toLowerCase();
            continue;
          }
          if (handler.continueOnParseError) {
            textEnd = html.indexOf("<", 1);
          }
        }
        var text;
        if (textEnd >= 0) {
          text = html.substring(0, textEnd);
          html = html.substring(textEnd);
        } else {
          text = html;
          html = "";
        }
        var nextTagMatch = parseStartTag(html);
        if (nextTagMatch) {
          nextTag = nextTagMatch.tagName;
        } else {
          nextTagMatch = html.match(endTag);
          if (nextTagMatch) {
            nextTag = "/" + nextTagMatch[1];
          } else {
            nextTag = "";
          }
        }
        if (handler.chars) {
          handler.chars(text, prevTag, nextTag);
        }
        prevTag = "";
      } else {
        var stackedTag = lastTag.toLowerCase();
        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp("([\\s\\S]*?)</" + stackedTag + "[^>]*>", "i"));
        html = html.replace(reStackedTag, function(all2, text2) {
          if (stackedTag !== "script" && stackedTag !== "style" && stackedTag !== "noscript") {
            text2 = text2.replace(/<!--([\s\S]*?)-->/g, "$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g, "$1");
          }
          if (handler.chars) {
            handler.chars(text2);
          }
          return "";
        });
        parseEndTag("</" + stackedTag + ">", stackedTag);
      }
      if (html === last) {
        throw new Error("Parse Error: " + html);
      }
    }
    if (!handler.partialMarkup) {
      parseEndTag();
    }
    function parseStartTag(input) {
      var start = input.match(startTagOpen);
      if (start) {
        var match = {
          tagName: start[1],
          attrs: []
        };
        input = input.slice(start[0].length);
        var end, attr;
        while (!(end = input.match(startTagClose)) && (attr = input.match(attribute))) {
          input = input.slice(attr[0].length);
          match.attrs.push(attr);
        }
        if (end) {
          match.unarySlash = end[1];
          match.rest = input.slice(end[0].length);
          return match;
        }
      }
    }
    function closeIfFound(tagName) {
      if (findTag(tagName) >= 0) {
        parseEndTag("", tagName);
        return true;
      }
    }
    function handleStartTag(match) {
      var tagName = match.tagName;
      var unarySlash = match.unarySlash;
      if (handler.html5) {
        if (lastTag === "p" && nonPhrasing(tagName)) {
          parseEndTag("", lastTag);
        } else if (tagName === "tbody") {
          closeIfFound("thead");
        } else if (tagName === "tfoot") {
          if (!closeIfFound("tbody")) {
            closeIfFound("thead");
          }
        }
        if (tagName === "col" && findTag("colgroup") < 0) {
          lastTag = "colgroup";
          stack.push({ tag: lastTag, attrs: [] });
          if (handler.start) {
            handler.start(lastTag, [], false, "");
          }
        }
      }
      if (!handler.html5 && !inline(tagName)) {
        while (lastTag && inline(lastTag)) {
          parseEndTag("", lastTag);
        }
      }
      if (closeSelf(tagName) && lastTag === tagName) {
        parseEndTag("", tagName);
      }
      var unary = empty(tagName) || tagName === "html" && lastTag === "head" || !!unarySlash;
      var attrs = match.attrs.map(function(args) {
        var name, value, customOpen, customClose, customAssign, quote;
        var ncp = 7;
        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
          if (args[3] === "") {
            delete args[3];
          }
          if (args[4] === "") {
            delete args[4];
          }
          if (args[5] === "") {
            delete args[5];
          }
        }
        function populate(index) {
          customAssign = args[index];
          value = args[index + 1];
          if (typeof value !== "undefined") {
            return '"';
          }
          value = args[index + 2];
          if (typeof value !== "undefined") {
            return "\'";
          }
          value = args[index + 3];
          if (typeof value === "undefined" && fillAttrs(name)) {
            value = name;
          }
          return "";
        }
        var j2 = 1;
        if (handler.customAttrSurround) {
          for (var i = 0, l2 = handler.customAttrSurround.length;i < l2; i++, j2 += ncp) {
            name = args[j2 + 1];
            if (name) {
              quote = populate(j2 + 2);
              customOpen = args[j2];
              customClose = args[j2 + 6];
              break;
            }
          }
        }
        if (!name && (name = args[j2])) {
          quote = populate(j2 + 1);
        }
        return {
          name,
          value,
          customAssign: customAssign || "=",
          customOpen: customOpen || "",
          customClose: customClose || "",
          quote: quote || ""
        };
      });
      if (!unary) {
        stack.push({ tag: tagName, attrs });
        lastTag = tagName;
        unarySlash = "";
      }
      if (handler.start) {
        handler.start(tagName, attrs, unary, unarySlash);
      }
    }
    function findTag(tagName) {
      var pos;
      var needle = tagName.toLowerCase();
      for (pos = stack.length - 1;pos >= 0; pos--) {
        if (stack[pos].tag.toLowerCase() === needle) {
          break;
        }
      }
      return pos;
    }
    function parseEndTag(tag, tagName) {
      var pos;
      if (tagName) {
        pos = findTag(tagName);
      } else {
        pos = 0;
      }
      if (pos >= 0) {
        for (var i = stack.length - 1;i >= pos; i--) {
          if (handler.end) {
            handler.end(stack[i].tag, stack[i].attrs, i > pos || !tag);
          }
        }
        stack.length = pos;
        lastTag = pos && stack[pos - 1].tag;
      } else if (tagName.toLowerCase() === "br") {
        if (handler.start) {
          handler.start(tagName, [], true, "");
        }
      } else if (tagName.toLowerCase() === "p") {
        if (handler.start) {
          handler.start(tagName, [], false, "", true);
        }
        if (handler.end) {
          handler.end(tagName, []);
        }
      }
    }
  };
  /*!
   * HTML Parser By John Resig (ejohn.org)
   * Modified by Juriy "kangax" Zaytsev
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   */
  var createMapFromString = require_utils().createMapFromString;
  var singleAttrIdentifier = /([^\s"'<>/=]+)/;
  var singleAttrAssigns = [/=/];
  var singleAttrValues = [
    /"([^"]*)"+/.source,
    /'([^']*)'+/.source,
    /([^ \t\n\f\r"'`=<>]+)/.source
  ];
  var qnameCapture = function() {
    var combiningChar = "\\u0300-\\u0345\\u0360\\u0361\\u0483-\\u0486\\u0591-\\u05A1\\u05A3-\\u05B9\\u05BB-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u064B-\\u0652\\u0670\\u06D6-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0901-\\u0903\\u093C\\u093E-\\u094D\\u0951-\\u0954\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A02\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A70\\u0A71\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B43\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B82\\u0B83\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C82\\u0C83\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D43\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86-\\u0F8B\\u0F90-\\u0F95\\u0F97\\u0F99-\\u0FAD\\u0FB1-\\u0FB7\\u0FB9\\u20D0-\\u20DC\\u20E1\\u302A-\\u302F\\u3099\\u309A";
    var digit = "0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29";
    var extender = "\\xB7\\u02D0\\u02D1\\u0387\\u0640\\u0E46\\u0EC6\\u3005\\u3031-\\u3035\\u309D\\u309E\\u30FC-\\u30FE";
    var letter = "A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u0131\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4\\u01F5\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481\\u0490-\\u04C4\\u04C7\\u04C8\\u04CB\\u04CC\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8\\u04F9\\u0531-\\u0556\\u0559\\u0561-\\u0586\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5\\u06E6\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B36-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CDE\\u0CE0\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60\\u0D61\\u0E01-\\u0E2E\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100\\u1102\\u1103\\u1105-\\u1107\\u1109\\u110B\\u110C\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E\\u1150\\u1154\\u1155\\u1159\\u115F-\\u1161\\u1163\\u1165\\u1167\\u1169\\u116D\\u116E\\u1172\\u1173\\u1175\\u119E\\u11A8\\u11AB\\u11AE\\u11AF\\u11B7\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A\\u212B\\u212E\\u2180-\\u2182\\u3007\\u3021-\\u3029\\u3041-\\u3094\\u30A1-\\u30FA\\u3105-\\u312C\\u4E00-\\u9FA5\\uAC00-\\uD7A3";
    var ncname = "[" + letter + "_][" + letter + digit + "\\.\\-_" + combiningChar + extender + "]*";
    return "((?:" + ncname + "\\:)?" + ncname + ")";
  }();
  var startTagOpen = new RegExp("^<" + qnameCapture);
  var startTagClose = /^\s*(\/?)>/;
  var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
  var doctype = /^<!DOCTYPE\s?[^>]+>/i;
  var IS_REGEX_CAPTURING_BROKEN = false;
  "x".replace(/x(.)?/g, function(m4, g2) {
    IS_REGEX_CAPTURING_BROKEN = g2 === "";
  });
  var empty = makeMap("area,base,basefont,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr");
  var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,noscript,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,svg,textarea,tt,u,var");
  var closeSelf = makeMap("colgroup,dd,dt,li,option,p,td,tfoot,th,thead,tr,source");
  var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
  var special = makeMap("script,style");
  var nonPhrasing = makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,ol,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track,ul");
  var reCache = {};
  exports.HTMLParser = HTMLParser;
  exports.HTMLtoXML = function(html) {
    var results = "";
    new HTMLParser(html, {
      start: function(tag, attrs, unary) {
        results += "<" + tag;
        for (var i = 0, len = attrs.length;i < len; i++) {
          results += " " + attrs[i].name + '="' + (attrs[i].value || "").replace(/"/g, "&#34;") + '"';
        }
        results += (unary ? "/" : "") + ">";
      },
      end: function(tag) {
        results += "</" + tag + ">";
      },
      chars: function(text) {
        results += text;
      },
      comment: function(text) {
        results += "<!--" + text + "-->";
      },
      ignore: function(text) {
        results += text;
      }
    });
    return results;
  };
  exports.HTMLtoDOM = function(html, doc) {
    var one = {
      html: true,
      head: true,
      body: true,
      title: true
    };
    var structure = {
      link: "head",
      base: "head"
    };
    if (doc) {
      doc = doc.ownerDocument || doc.getOwnerDocument && doc.getOwnerDocument() || doc;
    } else if (typeof DOMDocument !== "undefined") {
      doc = new DOMDocument;
    } else if (typeof document !== "undefined" && document.implementation && document.implementation.createDocument) {
      doc = document.implementation.createDocument("", "", null);
    } else if (typeof ActiveX !== "undefined") {
      doc = new ActiveXObject("Msxml.DOMDocument");
    }
    var elems = [], documentElement = doc.documentElement || doc.getDocumentElement && doc.getDocumentElement();
    if (!documentElement && doc.createElement) {
      (function() {
        var html2 = doc.createElement("html");
        var head = doc.createElement("head");
        head.appendChild(doc.createElement("title"));
        html2.appendChild(head);
        html2.appendChild(doc.createElement("body"));
        doc.appendChild(html2);
      })();
    }
    if (doc.getElementsByTagName) {
      for (var i in one) {
        one[i] = doc.getElementsByTagName(i)[0];
      }
    }
    var curParentNode = one.body;
    new HTMLParser(html, {
      start: function(tagName, attrs, unary) {
        if (one[tagName]) {
          curParentNode = one[tagName];
          return;
        }
        var elem = doc.createElement(tagName);
        for (var attr in attrs) {
          elem.setAttribute(attrs[attr].name, attrs[attr].value);
        }
        if (structure[tagName] && typeof one[structure[tagName]] !== "boolean") {
          one[structure[tagName]].appendChild(elem);
        } else if (curParentNode && curParentNode.appendChild) {
          curParentNode.appendChild(elem);
        }
        if (!unary) {
          elems.push(elem);
          curParentNode = elem;
        }
      },
      end: function() {
        elems.length -= 1;
        curParentNode = elems[elems.length - 1];
      },
      chars: function(text) {
        curParentNode.appendChild(doc.createTextNode(text));
      },
      comment: function() {
      },
      ignore: function() {
      }
    });
    return doc;
  };
});

// node_modules/relateurl/lib/constants.js
var require_constants = __commonJS((exports, module) => {
  module.exports = {
    ABSOLUTE: "absolute",
    PATH_RELATIVE: "pathRelative",
    ROOT_RELATIVE: "rootRelative",
    SHORTEST: "shortest"
  };
});

// node_modules/relateurl/lib/format.js
var require_format2 = __commonJS((exports, module) => {
  var formatAuth = function(urlObj, options) {
    if (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE)) {
      return urlObj.auth + "@";
    }
    return "";
  };
  var formatHash = function(urlObj, options) {
    return urlObj.hash ? urlObj.hash : "";
  };
  var formatHost = function(urlObj, options) {
    if (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output === constants.ABSOLUTE)) {
      return urlObj.host.full;
    }
    return "";
  };
  var formatPath = function(urlObj, options) {
    var str = "";
    var absolutePath = urlObj.path.absolute.string;
    var relativePath = urlObj.path.relative.string;
    var resource = showResource(urlObj, options);
    if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE) {
      str = absolutePath;
    } else if (relativePath.length <= absolutePath.length && options.output === constants.SHORTEST || options.output === constants.PATH_RELATIVE) {
      str = relativePath;
      if (str === "") {
        var query = showQuery(urlObj, options) && !!getQuery(urlObj, options);
        if (urlObj.extra.relation.maximumPath && !resource) {
          str = "./";
        } else if (urlObj.extra.relation.overridesQuery && !resource && !query) {
          str = "./";
        }
      }
    } else {
      str = absolutePath;
    }
    if (str === "/" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output === constants.ABSOLUTE)) {
      str = "";
    }
    return str;
  };
  var formatPort = function(urlObj, options) {
    if (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost) {
      return ":" + urlObj.port;
    }
    return "";
  };
  var formatQuery = function(urlObj, options) {
    return showQuery(urlObj, options) ? getQuery(urlObj, options) : "";
  };
  var formatResource = function(urlObj, options) {
    return showResource(urlObj, options) ? urlObj.resource : "";
  };
  var formatScheme = function(urlObj, options) {
    var str = "";
    if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE) {
      if (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output === constants.ABSOLUTE) {
        str += urlObj.scheme + "://";
      } else {
        str += "//";
      }
    }
    return str;
  };
  var formatUrl = function(urlObj, options) {
    var url = "";
    url += formatScheme(urlObj, options);
    url += formatAuth(urlObj, options);
    url += formatHost(urlObj, options);
    url += formatPort(urlObj, options);
    url += formatPath(urlObj, options);
    url += formatResource(urlObj, options);
    url += formatQuery(urlObj, options);
    url += formatHash(urlObj, options);
    return url;
  };
  var getQuery = function(urlObj, options) {
    var stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;
    return urlObj.query.string[stripQuery ? "stripped" : "full"];
  };
  var showQuery = function(urlObj, options) {
    return !urlObj.extra.relation.minimumQuery || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE;
  };
  var showResource = function(urlObj, options) {
    var removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;
    var removeMatchingResource = urlObj.extra.relation.minimumResource && options.output !== constants.ABSOLUTE && options.output !== constants.ROOT_RELATIVE;
    return !!urlObj.resource && !removeMatchingResource && !removeIndex;
  };
  var constants = require_constants();
  module.exports = formatUrl;
});

// node_modules/relateurl/lib/util/object.js
var require_object = __commonJS((exports, module) => {
  var clone = function(obj) {
    if (obj instanceof Object) {
      var clonedObj = obj instanceof Array ? [] : {};
      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          clonedObj[i] = clone(obj[i]);
        }
      }
      return clonedObj;
    }
    return obj;
  };
  var isPlainObject = function(obj) {
    return !!obj && typeof obj === "object" && obj.constructor === Object;
  };
  var shallowMerge = function(target, source) {
    if (target instanceof Object && source instanceof Object) {
      for (var i in source) {
        if (source.hasOwnProperty(i)) {
          target[i] = source[i];
        }
      }
    }
    return target;
  };
  module.exports = {
    clone,
    isPlainObject,
    shallowMerge
  };
});

// node_modules/relateurl/lib/options.js
var require_options = __commonJS((exports, module) => {
  var getOptions = function(options, defaults2) {
    if (objUtils.isPlainObject(options)) {
      var newOptions = {};
      for (var i in defaults2) {
        if (defaults2.hasOwnProperty(i)) {
          if (options[i] !== undefined) {
            newOptions[i] = mergeOption(options[i], defaults2[i]);
          } else {
            newOptions[i] = defaults2[i];
          }
        }
      }
      return newOptions;
    } else {
      return defaults2;
    }
  };
  var mergeOption = function(newValues, defaultValues) {
    if (defaultValues instanceof Object && newValues instanceof Object) {
      if (defaultValues instanceof Array && newValues instanceof Array) {
        return defaultValues.concat(newValues);
      } else {
        return objUtils.shallowMerge(newValues, defaultValues);
      }
    }
    return newValues;
  };
  var objUtils = require_object();
  module.exports = getOptions;
});

// node_modules/relateurl/lib/parse/hrefInfo.js
var require_hrefInfo = __commonJS((exports, module) => {
  var hrefInfo = function(urlObj) {
    var minimumPathOnly = !urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port;
    var minimumResourceOnly = minimumPathOnly && !urlObj.path.absolute.string;
    var minimumQueryOnly = minimumResourceOnly && !urlObj.resource;
    var minimumHashOnly = minimumQueryOnly && !urlObj.query.string.full.length;
    var empty = minimumHashOnly && !urlObj.hash;
    urlObj.extra.hrefInfo.minimumPathOnly = minimumPathOnly;
    urlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;
    urlObj.extra.hrefInfo.minimumQueryOnly = minimumQueryOnly;
    urlObj.extra.hrefInfo.minimumHashOnly = minimumHashOnly;
    urlObj.extra.hrefInfo.empty = empty;
  };
  module.exports = hrefInfo;
});

// node_modules/relateurl/lib/parse/host.js
var require_host = __commonJS((exports, module) => {
  var parseHost = function(urlObj, options) {
    if (options.ignore_www) {
      var host = urlObj.host.full;
      if (host) {
        var stripped = host;
        if (host.indexOf("www.") === 0) {
          stripped = host.substr(4);
        }
        urlObj.host.stripped = stripped;
      }
    }
  };
  module.exports = parseHost;
});

// node_modules/relateurl/lib/parse/path.js
var require_path = __commonJS((exports, module) => {
  var isDirectoryIndex = function(resource, options) {
    var verdict = false;
    options.directoryIndexes.every(function(index) {
      if (index === resource) {
        verdict = true;
        return false;
      }
      return true;
    });
    return verdict;
  };
  var parsePath = function(urlObj, options) {
    var path = urlObj.path.absolute.string;
    if (path) {
      var lastSlash = path.lastIndexOf("/");
      if (lastSlash > -1) {
        if (++lastSlash < path.length) {
          var resource = path.substr(lastSlash);
          if (resource !== "." && resource !== "..") {
            urlObj.resource = resource;
            path = path.substr(0, lastSlash);
          } else {
            path += "/";
          }
        }
        urlObj.path.absolute.string = path;
        urlObj.path.absolute.array = splitPath(path);
      } else if (path === "." || path === "..") {
        path += "/";
        urlObj.path.absolute.string = path;
        urlObj.path.absolute.array = splitPath(path);
      } else {
        urlObj.resource = path;
        urlObj.path.absolute.string = null;
      }
      urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);
    }
  };
  var splitPath = function(path) {
    if (path !== "/") {
      var cleaned = [];
      path.split("/").forEach(function(dir) {
        if (dir !== "") {
          cleaned.push(dir);
        }
      });
      return cleaned;
    } else {
      return [];
    }
  };
  module.exports = parsePath;
});

// node_modules/relateurl/lib/parse/port.js
var require_port = __commonJS((exports, module) => {
  var parsePort = function(urlObj, options) {
    var defaultPort = -1;
    for (var i in options.defaultPorts) {
      if (i === urlObj.scheme && options.defaultPorts.hasOwnProperty(i)) {
        defaultPort = options.defaultPorts[i];
        break;
      }
    }
    if (defaultPort > -1) {
      defaultPort = defaultPort.toString();
      if (urlObj.port === null) {
        urlObj.port = defaultPort;
      }
      urlObj.extra.portIsDefault = urlObj.port === defaultPort;
    }
  };
  module.exports = parsePort;
});

// node_modules/relateurl/lib/parse/query.js
var require_query = __commonJS((exports, module) => {
  var parseQuery = function(urlObj, options) {
    urlObj.query.string.full = stringify(urlObj.query.object, false);
    if (options.removeEmptyQueries) {
      urlObj.query.string.stripped = stringify(urlObj.query.object, true);
    }
  };
  var stringify = function(queryObj, removeEmptyQueries) {
    var count = 0;
    var str = "";
    for (var i in queryObj) {
      if (i !== "" && hasOwnProperty.call(queryObj, i) === true) {
        var value = queryObj[i];
        if (value !== "" || !removeEmptyQueries) {
          str += ++count === 1 ? "?" : "&";
          i = encodeURIComponent(i);
          if (value !== "") {
            str += i + "=" + encodeURIComponent(value).replace(/%20/g, "+");
          } else {
            str += i;
          }
        }
      }
    }
    return str;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = parseQuery;
});

// node_modules/relateurl/lib/parse/urlstring.js
var require_urlstring = __commonJS((exports, module) => {
  var clean = function(urlObj) {
    var scheme = urlObj.protocol;
    if (scheme) {
      if (scheme.indexOf(":") === scheme.length - 1) {
        scheme = scheme.substr(0, scheme.length - 1);
      }
    }
    urlObj.host = {
      full: urlObj.hostname,
      stripped: null
    };
    urlObj.path = {
      absolute: {
        array: null,
        string: urlObj.pathname
      },
      relative: {
        array: null,
        string: null
      }
    };
    urlObj.query = {
      object: urlObj.query,
      string: {
        full: null,
        stripped: null
      }
    };
    urlObj.extra = {
      hrefInfo: {
        minimumPathOnly: null,
        minimumResourceOnly: null,
        minimumQueryOnly: null,
        minimumHashOnly: null,
        empty: null,
        separatorOnlyQuery: urlObj.search === "?"
      },
      portIsDefault: null,
      relation: {
        maximumScheme: null,
        maximumAuth: null,
        maximumHost: null,
        maximumPort: null,
        maximumPath: null,
        maximumResource: null,
        maximumQuery: null,
        maximumHash: null,
        minimumScheme: null,
        minimumAuth: null,
        minimumHost: null,
        minimumPort: null,
        minimumPath: null,
        minimumResource: null,
        minimumQuery: null,
        minimumHash: null,
        overridesQuery: null
      },
      resourceIsIndex: null,
      slashes: urlObj.slashes
    };
    urlObj.resource = null;
    urlObj.scheme = scheme;
    delete urlObj.hostname;
    delete urlObj.pathname;
    delete urlObj.protocol;
    delete urlObj.search;
    delete urlObj.slashes;
    return urlObj;
  };
  var validScheme = function(url, options) {
    var valid = true;
    options.rejectedSchemes.every(function(rejectedScheme) {
      valid = !(url.indexOf(rejectedScheme + ":") === 0);
      return valid;
    });
    return valid;
  };
  var parseUrlString = function(url, options) {
    if (validScheme(url, options)) {
      return clean(_parseUrl(url, true, options.slashesDenoteHost));
    } else {
      return { href: url, valid: false };
    }
  };
  var _parseUrl = (init_url(), __toCommonJS(exports_url)).parse;
  module.exports = parseUrlString;
});

// node_modules/relateurl/lib/util/path.js
var require_path2 = __commonJS((exports, module) => {
  var joinPath = function(pathArray) {
    if (pathArray.length > 0) {
      return pathArray.join("/") + "/";
    } else {
      return "";
    }
  };
  var resolveDotSegments = function(pathArray) {
    var pathAbsolute = [];
    pathArray.forEach(function(dir) {
      if (dir !== "..") {
        if (dir !== ".") {
          pathAbsolute.push(dir);
        }
      } else {
        if (pathAbsolute.length > 0) {
          pathAbsolute.splice(pathAbsolute.length - 1, 1);
        }
      }
    });
    return pathAbsolute;
  };
  module.exports = {
    join: joinPath,
    resolveDotSegments
  };
});

// node_modules/relateurl/lib/parse/index.js
var require_parse = __commonJS((exports, module) => {
  var parseFromUrl = function(url, options, fallback) {
    if (url) {
      var urlObj = parseUrl(url, options);
      var pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);
      urlObj.path.absolute.array = pathArray;
      urlObj.path.absolute.string = "/" + pathUtils.join(pathArray);
      return urlObj;
    } else {
      return fallback;
    }
  };
  var parseUrl = function(url, options) {
    var urlObj = parseUrlString(url, options);
    if (urlObj.valid === false)
      return urlObj;
    parseHost(urlObj, options);
    parsePort(urlObj, options);
    parsePath(urlObj, options);
    parseQuery(urlObj, options);
    hrefInfo(urlObj);
    return urlObj;
  };
  var hrefInfo = require_hrefInfo();
  var parseHost = require_host();
  var parsePath = require_path();
  var parsePort = require_port();
  var parseQuery = require_query();
  var parseUrlString = require_urlstring();
  var pathUtils = require_path2();
  module.exports = {
    from: parseFromUrl,
    to: parseUrl
  };
});

// node_modules/relateurl/lib/relate/findRelation.js
var require_findRelation = __commonJS((exports, module) => {
  var findRelation_upToPath = function(urlObj, siteUrlObj, options) {
    var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;
    var minimumScheme = urlObj.scheme === siteUrlObj.scheme || !urlObj.scheme;
    var minimumAuth = minimumScheme && (urlObj.auth === siteUrlObj.auth || options.removeAuth || pathOnly);
    var www = options.ignore_www ? "stripped" : "full";
    var minimumHost = minimumAuth && (urlObj.host[www] === siteUrlObj.host[www] || pathOnly);
    var minimumPort = minimumHost && (urlObj.port === siteUrlObj.port || pathOnly);
    urlObj.extra.relation.minimumScheme = minimumScheme;
    urlObj.extra.relation.minimumAuth = minimumAuth;
    urlObj.extra.relation.minimumHost = minimumHost;
    urlObj.extra.relation.minimumPort = minimumPort;
    urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;
    urlObj.extra.relation.maximumAuth = !minimumScheme || minimumScheme && !minimumHost;
    urlObj.extra.relation.maximumHost = !minimumScheme || minimumScheme && !minimumPort;
  };
  var findRelation_pathOn = function(urlObj, siteUrlObj, options) {
    var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;
    var hashOnly = urlObj.extra.hrefInfo.minimumHashOnly;
    var empty = urlObj.extra.hrefInfo.empty;
    var minimumPort = urlObj.extra.relation.minimumPort;
    var minimumScheme = urlObj.extra.relation.minimumScheme;
    var minimumPath = minimumPort && urlObj.path.absolute.string === siteUrlObj.path.absolute.string;
    var matchingResource = urlObj.resource === siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex || options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource;
    var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);
    var query = options.removeEmptyQueries ? "stripped" : "full";
    var urlQuery = urlObj.query.string[query];
    var siteUrlQuery = siteUrlObj.query.string[query];
    var minimumQuery = minimumResource && !!urlQuery && urlQuery === siteUrlQuery || (hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery;
    var minimumHash = minimumQuery && urlObj.hash === siteUrlObj.hash;
    urlObj.extra.relation.minimumPath = minimumPath;
    urlObj.extra.relation.minimumResource = minimumResource;
    urlObj.extra.relation.minimumQuery = minimumQuery;
    urlObj.extra.relation.minimumHash = minimumHash;
    urlObj.extra.relation.maximumPort = !minimumScheme || minimumScheme && !minimumPath;
    urlObj.extra.relation.maximumPath = !minimumScheme || minimumScheme && !minimumResource;
    urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;
    urlObj.extra.relation.maximumQuery = !minimumScheme || minimumScheme && !minimumHash;
    urlObj.extra.relation.maximumHash = !minimumScheme || minimumScheme && !minimumHash;
    urlObj.extra.relation.overridesQuery = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;
  };
  module.exports = {
    pathOn: findRelation_pathOn,
    upToPath: findRelation_upToPath
  };
});

// node_modules/relateurl/lib/relate/absolutize.js
var require_absolutize = __commonJS((exports, module) => {
  var absolutize = function(urlObj, siteUrlObj, options) {
    findRelation.upToPath(urlObj, siteUrlObj, options);
    if (urlObj.extra.relation.minimumScheme)
      urlObj.scheme = siteUrlObj.scheme;
    if (urlObj.extra.relation.minimumAuth)
      urlObj.auth = siteUrlObj.auth;
    if (urlObj.extra.relation.minimumHost)
      urlObj.host = objUtils.clone(siteUrlObj.host);
    if (urlObj.extra.relation.minimumPort)
      copyPort(urlObj, siteUrlObj);
    if (urlObj.extra.relation.minimumScheme)
      copyPath(urlObj, siteUrlObj);
    findRelation.pathOn(urlObj, siteUrlObj, options);
    if (urlObj.extra.relation.minimumResource)
      copyResource(urlObj, siteUrlObj);
    if (urlObj.extra.relation.minimumQuery)
      urlObj.query = objUtils.clone(siteUrlObj.query);
    if (urlObj.extra.relation.minimumHash)
      urlObj.hash = siteUrlObj.hash;
  };
  var copyPath = function(urlObj, siteUrlObj) {
    if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly) {
      var pathArray = urlObj.path.absolute.array;
      var pathString = "/";
      if (pathArray) {
        if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf("/") !== 0) {
          pathArray = siteUrlObj.path.absolute.array.concat(pathArray);
        }
        pathArray = pathUtils.resolveDotSegments(pathArray);
        pathString += pathUtils.join(pathArray);
      } else {
        pathArray = [];
      }
      urlObj.path.absolute.array = pathArray;
      urlObj.path.absolute.string = pathString;
    } else {
      urlObj.path = objUtils.clone(siteUrlObj.path);
    }
  };
  var copyPort = function(urlObj, siteUrlObj) {
    urlObj.port = siteUrlObj.port;
    urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;
  };
  var copyResource = function(urlObj, siteUrlObj) {
    urlObj.resource = siteUrlObj.resource;
    urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;
  };
  var findRelation = require_findRelation();
  var objUtils = require_object();
  var pathUtils = require_path2();
  module.exports = absolutize;
});

// node_modules/relateurl/lib/relate/relativize.js
var require_relativize = __commonJS((exports, module) => {
  var relatePath = function(absolutePath, siteAbsolutePath) {
    var relativePath = [];
    var related = true;
    var parentIndex = -1;
    siteAbsolutePath.forEach(function(siteAbsoluteDir, i) {
      if (related) {
        if (absolutePath[i] !== siteAbsoluteDir) {
          related = false;
        } else {
          parentIndex = i;
        }
      }
      if (!related) {
        relativePath.push("..");
      }
    });
    absolutePath.forEach(function(dir, i) {
      if (i > parentIndex) {
        relativePath.push(dir);
      }
    });
    return relativePath;
  };
  var relativize = function(urlObj, siteUrlObj, options) {
    if (urlObj.extra.relation.minimumScheme) {
      var pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);
      urlObj.path.relative.array = pathArray;
      urlObj.path.relative.string = pathUtils.join(pathArray);
    }
  };
  var pathUtils = require_path2();
  module.exports = relativize;
});

// node_modules/relateurl/lib/relate/index.js
var require_relate = __commonJS((exports, module) => {
  var relateUrl = function(siteUrlObj, urlObj, options) {
    absolutize(urlObj, siteUrlObj, options);
    relativize(urlObj, siteUrlObj, options);
    return urlObj;
  };
  var absolutize = require_absolutize();
  var relativize = require_relativize();
  module.exports = relateUrl;
});

// node_modules/relateurl/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var RelateUrl = function(from, options) {
    this.options = getOptions(options, {
      defaultPorts: { ftp: 21, http: 80, https: 443 },
      directoryIndexes: ["index.html"],
      ignore_www: false,
      output: RelateUrl.SHORTEST,
      rejectedSchemes: ["data", "javascript", "mailto"],
      removeAuth: false,
      removeDirectoryIndexes: true,
      removeEmptyQueries: false,
      removeRootTrailingSlash: true,
      schemeRelative: true,
      site: undefined,
      slashesDenoteHost: true
    });
    this.from = parseUrl.from(from, this.options, null);
  };
  var constants = require_constants();
  var formatUrl = require_format2();
  var getOptions = require_options();
  var objUtils = require_object();
  var parseUrl = require_parse();
  var relateUrl = require_relate();
  RelateUrl.prototype.relate = function(from, to2, options) {
    if (objUtils.isPlainObject(to2)) {
      options = to2;
      to2 = from;
      from = null;
    } else if (!to2) {
      to2 = from;
      from = null;
    }
    options = getOptions(options, this.options);
    from = from || options.site;
    from = parseUrl.from(from, options, this.from);
    if (!from || !from.href) {
      throw new Error("from value not defined.");
    } else if (from.extra.hrefInfo.minimumPathOnly) {
      throw new Error("from value supplied is not absolute: " + from.href);
    }
    to2 = parseUrl.to(to2, options);
    if (to2.valid === false)
      return to2.href;
    to2 = relateUrl(from, to2, options);
    to2 = formatUrl(to2, options);
    return to2;
  };
  RelateUrl.relate = function(from, to2, options) {
    return new RelateUrl().relate(from, to2, options);
  };
  objUtils.shallowMerge(RelateUrl, constants);
  module.exports = RelateUrl;
});

// node_modules/html-minifier/src/tokenchain.js
var require_tokenchain = __commonJS((exports, module) => {
  var Sorter = function() {
  };
  var TokenChain = function() {
  };
  Sorter.prototype.sort = function(tokens, fromIndex) {
    fromIndex = fromIndex || 0;
    for (var i = 0, len = this.keys.length;i < len; i++) {
      var key = this.keys[i];
      var token = key.slice(1);
      var index = tokens.indexOf(token, fromIndex);
      if (index !== -1) {
        do {
          if (index !== fromIndex) {
            tokens.splice(index, 1);
            tokens.splice(fromIndex, 0, token);
          }
          fromIndex++;
        } while ((index = tokens.indexOf(token, fromIndex)) !== -1);
        return this[key].sort(tokens, fromIndex);
      }
    }
    return tokens;
  };
  TokenChain.prototype = {
    add: function(tokens) {
      var self = this;
      tokens.forEach(function(token) {
        var key = "$" + token;
        if (!self[key]) {
          self[key] = [];
          self[key].processed = 0;
        }
        self[key].push(tokens);
      });
    },
    createSorter: function() {
      var self = this;
      var sorter = new Sorter;
      sorter.keys = Object.keys(self).sort(function(j2, k3) {
        var m4 = self[j2].length;
        var n = self[k3].length;
        return m4 < n ? 1 : m4 > n ? -1 : j2 < k3 ? -1 : j2 > k3 ? 1 : 0;
      }).filter(function(key) {
        if (self[key].processed < self[key].length) {
          var token = key.slice(1);
          var chain = new TokenChain;
          self[key].forEach(function(tokens) {
            var index;
            while ((index = tokens.indexOf(token)) !== -1) {
              tokens.splice(index, 1);
            }
            tokens.forEach(function(token2) {
              self["$" + token2].processed++;
            });
            chain.add(tokens.slice(0));
          });
          sorter[key] = chain.createSorter();
          return true;
        }
        return false;
      });
      return sorter;
    }
  };
  module.exports = TokenChain;
});

// node_modules/uglify-js/lib/utils.js
var exports_utils = {};
var configure_error_stack2, DefaultsError, Dictionary2, HOP2, List2;
var init_utils = __esm(() => {
  configure_error_stack2 = function(fn) {
    Object.defineProperty(fn.prototype, "stack", {
      get: function() {
        var err = new Error(this.message);
        err.name = this.name;
        try {
          throw err;
        } catch (e) {
          return e.stack;
        }
      }
    });
  };
  DefaultsError = function(msg, defs) {
    this.message = msg;
    this.defs = defs;
  };
  Dictionary2 = function() {
    this.values = Object.create(null);
  };
  HOP2 = function(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  };
  DefaultsError.prototype = Object.create(Error.prototype);
  DefaultsError.prototype.constructor = DefaultsError;
  DefaultsError.prototype.name = "DefaultsError";
  configure_error_stack2(DefaultsError);
  List2 = function() {
    function List3(a2, f2) {
      var ret = [];
      for (var i = 0;i < a2.length; i++) {
        var val = f2(a2[i], i);
        if (val === skip)
          continue;
        if (val instanceof Splice) {
          ret.push.apply(ret, val.v);
        } else {
          ret.push(val);
        }
      }
      return ret;
    }
    List3.is_op = function(val) {
      return val === skip || val instanceof Splice;
    };
    List3.splice = function(val) {
      return new Splice(val);
    };
    var skip = List3.skip = {};
    function Splice(val) {
      this.v = val;
    }
    return List3;
  }();
  Dictionary2.prototype = {
    set: function(key, val) {
      if (key == "__proto__") {
        this.proto_value = val;
      } else {
        this.values[key] = val;
      }
      return this;
    },
    add: function(key, val) {
      var list = this.get(key);
      if (list) {
        list.push(val);
      } else {
        this.set(key, [val]);
      }
      return this;
    },
    get: function(key) {
      return key == "__proto__" ? this.proto_value : this.values[key];
    },
    del: function(key) {
      if (key == "__proto__") {
        delete this.proto_value;
      } else {
        delete this.values[key];
      }
      return this;
    },
    has: function(key) {
      return key == "__proto__" ? "proto_value" in this : (key in this.values);
    },
    all: function(predicate) {
      for (var i in this.values)
        if (!predicate(this.values[i], i))
          return false;
      if ("proto_value" in this && !predicate(this.proto_value, "__proto__"))
        return false;
      return true;
    },
    each: function(f2) {
      for (var i in this.values)
        f2(this.values[i], i);
      if ("proto_value" in this)
        f2(this.proto_value, "__proto__");
    },
    size: function() {
      return Object.keys(this.values).length + ("proto_value" in this);
    },
    map: function(f2) {
      var ret = [];
      for (var i in this.values)
        ret.push(f2(this.values[i], i));
      if ("proto_value" in this)
        ret.push(f2(this.proto_value, "__proto__"));
      return ret;
    },
    clone: function() {
      var ret = new Dictionary2;
      this.each(function(value, i) {
        ret.set(i, value);
      });
      return ret;
    },
    toObject: function() {
      var obj = {};
      this.each(function(value, i) {
        obj["$" + i] = value;
      });
      return obj;
    }
  };
  Dictionary2.fromObject = function(obj) {
    var dict = new Dictionary2;
    for (var i in obj)
      if (HOP2(obj, i))
        dict.set(i.slice(1), obj[i]);
    return dict;
  };
});

// node_modules/uglify-js/lib/ast.js
var require_ast = __commonJS((exports) => {
  var DEFNODE = function(type, props, methods, base) {
    if (typeof base === "undefined")
      base = AST_Node2;
    props = props ? props.split(/\s+/) : [];
    var self_props = props;
    if (base && base.PROPS)
      props = props.concat(base.PROPS);
    var code = [
      "return function AST_",
      type,
      "(props){",
      "this._bits=0;",
      "if(props){"
    ];
    props.forEach(function(prop) {
      code.push("this.", prop, "=props.", prop, ";");
    });
    code.push("}");
    var proto = Object.create(base && base.prototype);
    if (methods.initialize || proto.initialize)
      code.push("this.initialize();");
    code.push("};");
    var ctor = new Function(code.join(""))();
    ctor.prototype = proto;
    ctor.prototype.CTOR = ctor;
    ctor.prototype.TYPE = ctor.TYPE = type;
    if (base) {
      ctor.BASE = base;
      base.SUBCLASSES.push(ctor);
    }
    ctor.DEFMETHOD = function(name2, method) {
      this.prototype[name2] = method;
    };
    ctor.PROPS = props;
    ctor.SELF_PROPS = self_props;
    ctor.SUBCLASSES = [];
    for (var name in methods)
      if (HOP(methods, name)) {
        if (/^\$/.test(name)) {
          ctor[name.substr(1)] = methods[name];
        } else {
          ctor.DEFMETHOD(name, methods[name]);
        }
      }
    if (typeof exports !== "undefined")
      exports["AST_" + type] = ctor;
    return ctor;
  };
  var all_equals = function(k3, l2) {
    return k3.length == l2.length && all(k3, function(m4, i) {
      return m4.equals(l2[i]);
    });
  };
  var list_equals = function(s2, t) {
    return s2.length == t.length && all(s2, function(u2, i) {
      return u2 == t[i];
    });
  };
  var prop_equals = function(u2, v) {
    if (u2 === v)
      return true;
    if (u2 == null)
      return v == null;
    return u2 instanceof AST_Node2 && v instanceof AST_Node2 && u2.equals(v);
  };
  var is_statement2 = function(node) {
    return node instanceof AST_Statement2 && !(node instanceof AST_ClassExpression2) && !(node instanceof AST_LambdaExpression2);
  };
  var validate_expression = function(value, prop, multiple, allow_spread, allow_hole) {
    multiple = multiple ? "contain" : "be";
    if (!(value instanceof AST_Node2))
      throw new Error(prop + " must " + multiple + " AST_Node");
    if (value instanceof AST_DefaultValue2)
      throw new Error(prop + " cannot " + multiple + " AST_DefaultValue");
    if (value instanceof AST_Destructured2)
      throw new Error(prop + " cannot " + multiple + " AST_Destructured");
    if (value instanceof AST_Hole2 && !allow_hole)
      throw new Error(prop + " cannot " + multiple + " AST_Hole");
    if (value instanceof AST_Spread2 && !allow_spread)
      throw new Error(prop + " cannot " + multiple + " AST_Spread");
    if (is_statement2(value))
      throw new Error(prop + " cannot " + multiple + " AST_Statement");
    if (value instanceof AST_SymbolDeclaration2) {
      throw new Error(prop + " cannot " + multiple + " AST_SymbolDeclaration");
    }
  };
  var must_be_expression = function(node, prop) {
    validate_expression(node[prop], prop);
  };
  var walk_body2 = function(node, visitor) {
    node.body.forEach(function(node2) {
      node2.walk(visitor);
    });
  };
  var is_arrow2 = function(node) {
    return node instanceof AST_Arrow2 || node instanceof AST_AsyncArrow2;
  };
  var must_be_expressions = function(node, prop, allow_spread, allow_hole) {
    node[prop].forEach(function(node2) {
      validate_expression(node2, prop, true, allow_spread, allow_hole);
    });
  };
  var validate_destructured = function(node, check, allow_default) {
    if (node instanceof AST_DefaultValue2 && allow_default)
      return validate_destructured(node.name, check);
    if (node instanceof AST_Destructured2) {
      if (node.rest != null)
        validate_destructured(node.rest, check);
      if (node instanceof AST_DestructuredArray2)
        return node.elements.forEach(function(node2) {
          if (!(node2 instanceof AST_Hole2))
            validate_destructured(node2, check, true);
        });
      if (node instanceof AST_DestructuredObject2)
        return node.properties.forEach(function(prop) {
          validate_destructured(prop.value, check, true);
        });
    }
    check(node);
  };
  var TreeWalker2 = function(callback) {
    this.callback = callback;
    this.directives = Object.create(null);
    this.stack = [];
  };
  var AST_Token2 = DEFNODE("Token", "type value line col pos endline endcol endpos nlb comments_before comments_after file raw", {}, null);
  var AST_Node2 = DEFNODE("Node", "start end", {
    _clone: function(deep) {
      if (deep) {
        var self = this.clone();
        return self.transform(new TreeTransformer(function(node) {
          if (node !== self) {
            return node.clone(true);
          }
        }));
      }
      return new this.CTOR(this);
    },
    clone: function(deep) {
      return this._clone(deep);
    },
    $documentation: "Base class of all AST nodes",
    $propdoc: {
      start: "[AST_Token] The first token of this node",
      end: "[AST_Token] The last token of this node"
    },
    equals: function(node) {
      return this.TYPE == node.TYPE && this._equals(node);
    },
    walk: function(visitor) {
      visitor.visit(this);
    },
    _validate: function() {
      if (this.TYPE == "Node")
        throw new Error("should not instantiate AST_Node");
    },
    validate: function() {
      var ctor = this.CTOR;
      do {
        ctor.prototype._validate.call(this);
      } while (ctor = ctor.BASE);
    },
    validate_ast: function() {
      var marker = {};
      this.walk(new TreeWalker2(function(node) {
        if (node.validate_visited === marker) {
          throw new Error(string_template("cannot reuse AST_{TYPE} from [{start}]", node));
        }
        node.validate_visited = marker;
      }));
    }
  }, null);
  DEF_BITPROPS(AST_Node2, [
    "_optimized",
    "_squeezed",
    "call_only",
    "collapse_scanning",
    "defined",
    "evaluating",
    "falsy",
    "in_arg",
    "in_bool",
    "is_undefined",
    "inlined",
    "length_read",
    "nested",
    "new",
    "optional",
    "private",
    "pure",
    "redundant",
    "single_use",
    "static",
    "terminal",
    "truthy",
    "uses_eval",
    "uses_with"
  ]);
  (AST_Node2.log_function = function(fn, verbose) {
    if (typeof fn != "function") {
      AST_Node2.info = AST_Node2.warn = noop;
      return;
    }
    var printed = Object.create(null);
    AST_Node2.info = verbose ? function(text, props) {
      log("INFO: " + string_template(text, props));
    } : noop;
    AST_Node2.warn = function(text, props) {
      log("WARN: " + string_template(text, props));
    };
    function log(msg) {
      if (printed[msg])
        return;
      printed[msg] = true;
      fn(msg);
    }
  })();
  var restore_transforms = [];
  AST_Node2.enable_validation = function() {
    AST_Node2.disable_validation();
    (function validate_transform(ctor) {
      ctor.SUBCLASSES.forEach(validate_transform);
      if (!HOP(ctor.prototype, "transform"))
        return;
      var transform = ctor.prototype.transform;
      ctor.prototype.transform = function(tw, in_list) {
        var node = transform.call(this, tw, in_list);
        if (node instanceof AST_Node2) {
          node.validate();
        } else if (!(node === null || in_list && List.is_op(node))) {
          throw new Error("invalid transformed value: " + node);
        }
        return node;
      };
      restore_transforms.push(function() {
        ctor.prototype.transform = transform;
      });
    })(this);
  };
  AST_Node2.disable_validation = function() {
    var restore;
    while (restore = restore_transforms.pop())
      restore();
  };
  var AST_Statement2 = DEFNODE("Statement", null, {
    $documentation: "Base class of all statements",
    _validate: function() {
      if (this.TYPE == "Statement")
        throw new Error("should not instantiate AST_Statement");
    }
  });
  var AST_Debugger2 = DEFNODE("Debugger", null, {
    $documentation: "Represents a debugger statement",
    _equals: return_true
  }, AST_Statement2);
  var AST_Directive2 = DEFNODE("Directive", "quote value", {
    $documentation: "Represents a directive, like \"use strict\";",
    $propdoc: {
      quote: "[string?] the original quote character",
      value: "[string] The value of this directive as a plain string (it's not an AST_String!)"
    },
    _equals: function(node) {
      return this.value == node.value;
    },
    _validate: function() {
      if (this.quote != null) {
        if (typeof this.quote != "string")
          throw new Error("quote must be string");
        if (!/^["']$/.test(this.quote))
          throw new Error("invalid quote: " + this.quote);
      }
      if (typeof this.value != "string")
        throw new Error("value must be string");
    }
  }, AST_Statement2);
  var AST_EmptyStatement2 = DEFNODE("EmptyStatement", null, {
    $documentation: "The empty statement (empty block or simply a semicolon)",
    _equals: return_true
  }, AST_Statement2);
  var AST_SimpleStatement2 = DEFNODE("SimpleStatement", "body", {
    $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",
    $propdoc: {
      body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"
    },
    _equals: function(node) {
      return this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "body");
    }
  }, AST_Statement2);
  var AST_BlockScope2 = DEFNODE("BlockScope", "_var_names enclosed functions make_def parent_scope variables", {
    $documentation: "Base class for all statements introducing a lexical scope",
    $propdoc: {
      enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any inner scopes",
      functions: "[Dictionary/S] like `variables`, but only lists function declarations",
      parent_scope: "[AST_Scope?/S] link to the parent scope",
      variables: "[Dictionary/S] a map of name ---> SymbolDef for all variables/functions defined in this scope"
    },
    clone: function(deep) {
      var node = this._clone(deep);
      if (this.enclosed)
        node.enclosed = this.enclosed.slice();
      if (this.functions)
        node.functions = this.functions.clone();
      if (this.variables)
        node.variables = this.variables.clone();
      return node;
    },
    pinned: function() {
      return this.resolve().pinned();
    },
    resolve: function() {
      return this.parent_scope.resolve();
    },
    _validate: function() {
      if (this.TYPE == "BlockScope")
        throw new Error("should not instantiate AST_BlockScope");
      if (this.parent_scope == null)
        return;
      if (!(this.parent_scope instanceof AST_BlockScope2))
        throw new Error("parent_scope must be AST_BlockScope");
      if (!(this.resolve() instanceof AST_Scope2))
        throw new Error("must be contained within AST_Scope");
    }
  }, AST_Statement2);
  var AST_Block2 = DEFNODE("Block", "body", {
    $documentation: "A body of statements (usually braced)",
    $propdoc: {
      body: "[AST_Statement*] an array of statements"
    },
    _equals: function(node) {
      return all_equals(this.body, node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        walk_body2(node, visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "Block")
        throw new Error("should not instantiate AST_Block");
      this.body.forEach(function(node) {
        if (!is_statement2(node))
          throw new Error("body must contain AST_Statement");
      });
    }
  }, AST_BlockScope2);
  var AST_BlockStatement2 = DEFNODE("BlockStatement", null, {
    $documentation: "A block statement"
  }, AST_Block2);
  var AST_StatementWithBody2 = DEFNODE("StatementWithBody", "body", {
    $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",
    $propdoc: {
      body: "[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement"
    },
    _validate: function() {
      if (this.TYPE == "StatementWithBody")
        throw new Error("should not instantiate AST_StatementWithBody");
      if (!is_statement2(this.body))
        throw new Error("body must be AST_Statement");
    }
  }, AST_BlockScope2);
  var AST_LabeledStatement2 = DEFNODE("LabeledStatement", "label", {
    $documentation: "Statement with a label",
    $propdoc: {
      label: "[AST_Label] a label definition"
    },
    _equals: function(node) {
      return this.label.equals(node.label) && this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.label.walk(visitor);
        node.body.walk(visitor);
      });
    },
    clone: function(deep) {
      var node = this._clone(deep);
      if (deep) {
        var label = node.label;
        var def = this.label;
        node.walk(new TreeWalker2(function(node2) {
          if (node2 instanceof AST_LoopControl2) {
            if (!node2.label || node2.label.thedef !== def)
              return;
            node2.label.thedef = label;
            label.references.push(node2);
            return true;
          }
          if (node2 instanceof AST_Scope2)
            return true;
        }));
      }
      return node;
    },
    _validate: function() {
      if (!(this.label instanceof AST_Label2))
        throw new Error("label must be AST_Label");
    }
  }, AST_StatementWithBody2);
  var AST_IterationStatement2 = DEFNODE("IterationStatement", null, {
    $documentation: "Internal class.  All loops inherit from it.",
    _validate: function() {
      if (this.TYPE == "IterationStatement")
        throw new Error("should not instantiate AST_IterationStatement");
    }
  }, AST_StatementWithBody2);
  var AST_DWLoop2 = DEFNODE("DWLoop", "condition", {
    $documentation: "Base class for do/while statements",
    $propdoc: {
      condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"
    },
    _equals: function(node) {
      return this.body.equals(node.body) && this.condition.equals(node.condition);
    },
    _validate: function() {
      if (this.TYPE == "DWLoop")
        throw new Error("should not instantiate AST_DWLoop");
      must_be_expression(this, "condition");
    }
  }, AST_IterationStatement2);
  var AST_Do2 = DEFNODE("Do", null, {
    $documentation: "A `do` statement",
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.body.walk(visitor);
        node.condition.walk(visitor);
      });
    }
  }, AST_DWLoop2);
  var AST_While2 = DEFNODE("While", null, {
    $documentation: "A `while` statement",
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.condition.walk(visitor);
        node.body.walk(visitor);
      });
    }
  }, AST_DWLoop2);
  var AST_For2 = DEFNODE("For", "init condition step", {
    $documentation: "A `for` statement",
    $propdoc: {
      init: "[AST_Node?] the `for` initialization code, or null if empty",
      condition: "[AST_Node?] the `for` termination clause, or null if empty",
      step: "[AST_Node?] the `for` update clause, or null if empty"
    },
    _equals: function(node) {
      return prop_equals(this.init, node.init) && prop_equals(this.condition, node.condition) && prop_equals(this.step, node.step) && this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.init)
          node.init.walk(visitor);
        if (node.condition)
          node.condition.walk(visitor);
        if (node.step)
          node.step.walk(visitor);
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      if (this.init != null) {
        if (!(this.init instanceof AST_Node2))
          throw new Error("init must be AST_Node");
        if (is_statement2(this.init) && !(this.init instanceof AST_Definitions2)) {
          throw new Error("init cannot be AST_Statement");
        }
      }
      if (this.condition != null)
        must_be_expression(this, "condition");
      if (this.step != null)
        must_be_expression(this, "step");
    }
  }, AST_IterationStatement2);
  var AST_ForEnumeration2 = DEFNODE("ForEnumeration", "init object", {
    $documentation: "Base class for enumeration loops, i.e. `for ... in`, `for ... of` & `for await ... of`",
    $propdoc: {
      init: "[AST_Node] the assignment target during iteration",
      object: "[AST_Node] the object to iterate over"
    },
    _equals: function(node) {
      return this.init.equals(node.init) && this.object.equals(node.object) && this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.init.walk(visitor);
        node.object.walk(visitor);
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "ForEnumeration")
        throw new Error("should not instantiate AST_ForEnumeration");
      if (this.init instanceof AST_Definitions2) {
        if (this.init.definitions.length != 1)
          throw new Error("init must have single declaration");
      } else {
        validate_destructured(this.init, function(node) {
          if (!(node instanceof AST_PropAccess2 || node instanceof AST_SymbolRef2)) {
            throw new Error("init must be assignable: " + node.TYPE);
          }
        });
      }
      must_be_expression(this, "object");
    }
  }, AST_IterationStatement2);
  var AST_ForIn2 = DEFNODE("ForIn", null, {
    $documentation: "A `for ... in` statement"
  }, AST_ForEnumeration2);
  var AST_ForOf2 = DEFNODE("ForOf", null, {
    $documentation: "A `for ... of` statement"
  }, AST_ForEnumeration2);
  var AST_ForAwaitOf2 = DEFNODE("ForAwaitOf", null, {
    $documentation: "A `for await ... of` statement"
  }, AST_ForOf2);
  var AST_With2 = DEFNODE("With", "expression", {
    $documentation: "A `with` statement",
    $propdoc: {
      expression: "[AST_Node] the `with` expression"
    },
    _equals: function(node) {
      return this.expression.equals(node.expression) && this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
    }
  }, AST_StatementWithBody2);
  var AST_Scope2 = DEFNODE("Scope", "fn_defs may_call_this uses_eval uses_with", {
    $documentation: "Base class for all statements introducing a lambda scope",
    $propdoc: {
      uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",
      uses_with: "[boolean/S] tells whether this scope uses the `with` statement"
    },
    pinned: function() {
      return this.uses_eval || this.uses_with;
    },
    resolve: return_this,
    _validate: function() {
      if (this.TYPE == "Scope")
        throw new Error("should not instantiate AST_Scope");
    }
  }, AST_Block2);
  var AST_Toplevel2 = DEFNODE("Toplevel", "globals", {
    $documentation: "The toplevel scope",
    $propdoc: {
      globals: "[Dictionary/S] a map of name ---> SymbolDef for all undeclared names"
    },
    wrap: function(name) {
      var body = this.body;
      return parse([
        "(function(exports){'$ORIG';})(typeof ",
        name,
        "=='undefined'?(",
        name,
        "={}):",
        name,
        ");"
      ].join(""), {
        filename: "wrap=" + JSON.stringify(name)
      }).transform(new TreeTransformer(function(node) {
        if (node instanceof AST_Directive2 && node.value == "$ORIG") {
          return List.splice(body);
        }
      }));
    },
    enclose: function(args_values) {
      if (typeof args_values != "string")
        args_values = "";
      var index = args_values.indexOf(":");
      if (index < 0)
        index = args_values.length;
      var body = this.body;
      return parse([
        "(function(",
        args_values.slice(0, index),
        '){"$ORIG"})(',
        args_values.slice(index + 1),
        ")"
      ].join(""), {
        filename: "enclose=" + JSON.stringify(args_values)
      }).transform(new TreeTransformer(function(node) {
        if (node instanceof AST_Directive2 && node.value == "$ORIG") {
          return List.splice(body);
        }
      }));
    }
  }, AST_Scope2);
  var AST_ClassInitBlock2 = DEFNODE("ClassInitBlock", null, {
    $documentation: "Value for `class` static initialization blocks"
  }, AST_Scope2);
  var AST_Lambda2 = DEFNODE("Lambda", "argnames length_read rest safe_ids uses_arguments", {
    $documentation: "Base class for functions",
    $propdoc: {
      argnames: "[(AST_DefaultValue|AST_Destructured|AST_SymbolFunarg)*] array of function arguments and/or destructured literals",
      length_read: "[boolean/S] whether length property of this function is accessed",
      rest: "[(AST_Destructured|AST_SymbolFunarg)?] rest parameter, or null if absent",
      uses_arguments: "[boolean|number/S] whether this function accesses the arguments array"
    },
    each_argname: function(visit) {
      var tw = new TreeWalker2(function(node) {
        if (node instanceof AST_DefaultValue2) {
          node.name.walk(tw);
          return true;
        }
        if (node instanceof AST_DestructuredKeyVal2) {
          node.value.walk(tw);
          return true;
        }
        if (node instanceof AST_SymbolFunarg2)
          visit(node);
      });
      this.argnames.forEach(function(argname) {
        argname.walk(tw);
      });
      if (this.rest)
        this.rest.walk(tw);
    },
    _equals: function(node) {
      return prop_equals(this.rest, node.rest) && prop_equals(this.name, node.name) && prop_equals(this.value, node.value) && all_equals(this.argnames, node.argnames) && all_equals(this.body, node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.name)
          node.name.walk(visitor);
        node.argnames.forEach(function(argname) {
          argname.walk(visitor);
        });
        if (node.rest)
          node.rest.walk(visitor);
        walk_body2(node, visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "Lambda")
        throw new Error("should not instantiate AST_Lambda");
      this.argnames.forEach(function(node) {
        validate_destructured(node, function(node2) {
          if (!(node2 instanceof AST_SymbolFunarg2))
            throw new Error("argnames must be AST_SymbolFunarg[]");
        }, true);
      });
      if (this.rest != null)
        validate_destructured(this.rest, function(node) {
          if (!(node instanceof AST_SymbolFunarg2))
            throw new Error("rest must be AST_SymbolFunarg");
        });
    }
  }, AST_Scope2);
  var AST_Accessor2 = DEFNODE("Accessor", null, {
    $documentation: "A getter/setter function",
    _validate: function() {
      if (this.name != null)
        throw new Error("name must be null");
    }
  }, AST_Lambda2);
  var AST_LambdaExpression2 = DEFNODE("LambdaExpression", "inlined", {
    $documentation: "Base class for function expressions",
    $propdoc: {
      inlined: "[boolean/S] whether this function has been inlined"
    },
    _validate: function() {
      if (this.TYPE == "LambdaExpression")
        throw new Error("should not instantiate AST_LambdaExpression");
    }
  }, AST_Lambda2);
  var AST_Arrow2 = DEFNODE("Arrow", "value", {
    $documentation: "An arrow function expression",
    $propdoc: {
      value: "[AST_Node?] simple return expression, or null if using function body."
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.argnames.forEach(function(argname) {
          argname.walk(visitor);
        });
        if (node.rest)
          node.rest.walk(visitor);
        if (node.value) {
          node.value.walk(visitor);
        } else {
          walk_body2(node, visitor);
        }
      });
    },
    _validate: function() {
      if (this.name != null)
        throw new Error("name must be null");
      if (this.uses_arguments)
        throw new Error("uses_arguments must be false");
      if (this.value != null) {
        must_be_expression(this, "value");
        if (this.body.length)
          throw new Error("body must be empty if value exists");
      }
    }
  }, AST_LambdaExpression2);
  var AST_AsyncArrow2 = DEFNODE("AsyncArrow", "value", {
    $documentation: "An asynchronous arrow function expression",
    $propdoc: {
      value: "[AST_Node?] simple return expression, or null if using function body."
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.argnames.forEach(function(argname) {
          argname.walk(visitor);
        });
        if (node.rest)
          node.rest.walk(visitor);
        if (node.value) {
          node.value.walk(visitor);
        } else {
          walk_body2(node, visitor);
        }
      });
    },
    _validate: function() {
      if (this.name != null)
        throw new Error("name must be null");
      if (this.uses_arguments)
        throw new Error("uses_arguments must be false");
      if (this.value != null) {
        must_be_expression(this, "value");
        if (this.body.length)
          throw new Error("body must be empty if value exists");
      }
    }
  }, AST_LambdaExpression2);
  var AST_AsyncFunction2 = DEFNODE("AsyncFunction", "name", {
    $documentation: "An asynchronous function expression",
    $propdoc: {
      name: "[AST_SymbolLambda?] the name of this function, or null if not specified"
    },
    _validate: function() {
      if (this.name != null) {
        if (!(this.name instanceof AST_SymbolLambda2))
          throw new Error("name must be AST_SymbolLambda");
      }
    }
  }, AST_LambdaExpression2);
  var AST_AsyncGeneratorFunction2 = DEFNODE("AsyncGeneratorFunction", "name", {
    $documentation: "An asynchronous generator function expression",
    $propdoc: {
      name: "[AST_SymbolLambda?] the name of this function, or null if not specified"
    },
    _validate: function() {
      if (this.name != null) {
        if (!(this.name instanceof AST_SymbolLambda2))
          throw new Error("name must be AST_SymbolLambda");
      }
    }
  }, AST_LambdaExpression2);
  var AST_Function2 = DEFNODE("Function", "name", {
    $documentation: "A function expression",
    $propdoc: {
      name: "[AST_SymbolLambda?] the name of this function, or null if not specified"
    },
    _validate: function() {
      if (this.name != null) {
        if (!(this.name instanceof AST_SymbolLambda2))
          throw new Error("name must be AST_SymbolLambda");
      }
    }
  }, AST_LambdaExpression2);
  var AST_GeneratorFunction2 = DEFNODE("GeneratorFunction", "name", {
    $documentation: "A generator function expression",
    $propdoc: {
      name: "[AST_SymbolLambda?] the name of this function, or null if not specified"
    },
    _validate: function() {
      if (this.name != null) {
        if (!(this.name instanceof AST_SymbolLambda2))
          throw new Error("name must be AST_SymbolLambda");
      }
    }
  }, AST_LambdaExpression2);
  var AST_LambdaDefinition2 = DEFNODE("LambdaDefinition", "inlined name", {
    $documentation: "Base class for function definitions",
    $propdoc: {
      inlined: "[boolean/S] whether this function has been inlined",
      name: "[AST_SymbolDefun] the name of this function"
    },
    _validate: function() {
      if (this.TYPE == "LambdaDefinition")
        throw new Error("should not instantiate AST_LambdaDefinition");
      if (!(this.name instanceof AST_SymbolDefun2))
        throw new Error("name must be AST_SymbolDefun");
    }
  }, AST_Lambda2);
  var AST_AsyncDefun2 = DEFNODE("AsyncDefun", null, {
    $documentation: "An asynchronous function definition"
  }, AST_LambdaDefinition2);
  var AST_AsyncGeneratorDefun2 = DEFNODE("AsyncGeneratorDefun", null, {
    $documentation: "An asynchronous generator function definition"
  }, AST_LambdaDefinition2);
  var AST_Defun2 = DEFNODE("Defun", null, {
    $documentation: "A function definition"
  }, AST_LambdaDefinition2);
  var AST_GeneratorDefun2 = DEFNODE("GeneratorDefun", null, {
    $documentation: "A generator function definition"
  }, AST_LambdaDefinition2);
  var AST_Class2 = DEFNODE("Class", "extends name properties", {
    $documentation: "Base class for class literals",
    $propdoc: {
      extends: "[AST_Node?] the super class, or null if not specified",
      properties: "[AST_ClassProperty*] array of class properties"
    },
    _equals: function(node) {
      return prop_equals(this.name, node.name) && prop_equals(this.extends, node.extends) && all_equals(this.properties, node.properties);
    },
    resolve: function(def_class) {
      return def_class ? this : this.parent_scope.resolve();
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.name)
          node.name.walk(visitor);
        if (node.extends)
          node.extends.walk(visitor);
        node.properties.forEach(function(prop) {
          prop.walk(visitor);
        });
      });
    },
    _validate: function() {
      if (this.TYPE == "Class")
        throw new Error("should not instantiate AST_Class");
      if (this.extends != null)
        must_be_expression(this, "extends");
      this.properties.forEach(function(node) {
        if (!(node instanceof AST_ClassProperty2))
          throw new Error("properties must contain AST_ClassProperty");
      });
    }
  }, AST_BlockScope2);
  var AST_DefClass2 = DEFNODE("DefClass", null, {
    $documentation: "A class definition",
    $propdoc: {
      name: "[AST_SymbolDefClass] the name of this class"
    },
    _validate: function() {
      if (!(this.name instanceof AST_SymbolDefClass2))
        throw new Error("name must be AST_SymbolDefClass");
    }
  }, AST_Class2);
  var AST_ClassExpression2 = DEFNODE("ClassExpression", null, {
    $documentation: "A class expression",
    $propdoc: {
      name: "[AST_SymbolClass?] the name of this class, or null if not specified"
    },
    _validate: function() {
      if (this.name != null) {
        if (!(this.name instanceof AST_SymbolClass2))
          throw new Error("name must be AST_SymbolClass");
      }
    }
  }, AST_Class2);
  var AST_ClassProperty2 = DEFNODE("ClassProperty", "key private static value", {
    $documentation: "Base class for `class` properties",
    $propdoc: {
      key: "[string|AST_Node?] property name (AST_Node for computed property, null for initialization block)",
      private: "[boolean] whether this is a private property",
      static: "[boolean] whether this is a static property",
      value: "[AST_Node?] property value (AST_Accessor for getters/setters, AST_LambdaExpression for methods, null if not specified for fields)"
    },
    _equals: function(node) {
      return !this.private == !node.private && !this.static == !node.static && prop_equals(this.key, node.key) && prop_equals(this.value, node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.key instanceof AST_Node2)
          node.key.walk(visitor);
        if (node.value)
          node.value.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "ClassProperty")
        throw new Error("should not instantiate AST_ClassProperty");
      if (this instanceof AST_ClassInit2) {
        if (this.key != null)
          throw new Error("key must be null");
      } else if (typeof this.key != "string") {
        if (!(this.key instanceof AST_Node2))
          throw new Error("key must be string or AST_Node");
        must_be_expression(this, "key");
      }
      if (this.value != null) {
        if (!(this.value instanceof AST_Node2))
          throw new Error("value must be AST_Node");
      }
    }
  });
  var AST_ClassField2 = DEFNODE("ClassField", null, {
    $documentation: "A `class` field",
    _validate: function() {
      if (this.value != null)
        must_be_expression(this, "value");
    }
  }, AST_ClassProperty2);
  var AST_ClassGetter2 = DEFNODE("ClassGetter", null, {
    $documentation: "A `class` getter",
    _validate: function() {
      if (!(this.value instanceof AST_Accessor2))
        throw new Error("value must be AST_Accessor");
    }
  }, AST_ClassProperty2);
  var AST_ClassSetter2 = DEFNODE("ClassSetter", null, {
    $documentation: "A `class` setter",
    _validate: function() {
      if (!(this.value instanceof AST_Accessor2))
        throw new Error("value must be AST_Accessor");
    }
  }, AST_ClassProperty2);
  var AST_ClassMethod2 = DEFNODE("ClassMethod", null, {
    $documentation: "A `class` method",
    _validate: function() {
      if (!(this.value instanceof AST_LambdaExpression2))
        throw new Error("value must be AST_LambdaExpression");
      if (is_arrow2(this.value))
        throw new Error("value cannot be AST_Arrow or AST_AsyncArrow");
      if (this.value.name != null)
        throw new Error("name of class method's lambda must be null");
    }
  }, AST_ClassProperty2);
  var AST_ClassInit2 = DEFNODE("ClassInit", null, {
    $documentation: "A `class` static initialization block",
    _validate: function() {
      if (!this.static)
        throw new Error("static must be true");
      if (!(this.value instanceof AST_ClassInitBlock2))
        throw new Error("value must be AST_ClassInitBlock");
    },
    initialize: function() {
      this.static = true;
    }
  }, AST_ClassProperty2);
  var AST_Jump2 = DEFNODE("Jump", null, {
    $documentation: "Base class for \u201Cjumps\u201D (for now that's `return`, `throw`, `break` and `continue`)",
    _validate: function() {
      if (this.TYPE == "Jump")
        throw new Error("should not instantiate AST_Jump");
    }
  }, AST_Statement2);
  var AST_Exit2 = DEFNODE("Exit", "value", {
    $documentation: "Base class for \u201Cexits\u201D (`return` and `throw`)",
    $propdoc: {
      value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"
    },
    _equals: function(node) {
      return prop_equals(this.value, node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.value)
          node.value.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "Exit")
        throw new Error("should not instantiate AST_Exit");
    }
  }, AST_Jump2);
  var AST_Return2 = DEFNODE("Return", null, {
    $documentation: "A `return` statement",
    _validate: function() {
      if (this.value != null)
        must_be_expression(this, "value");
    }
  }, AST_Exit2);
  var AST_Throw2 = DEFNODE("Throw", null, {
    $documentation: "A `throw` statement",
    _validate: function() {
      must_be_expression(this, "value");
    }
  }, AST_Exit2);
  var AST_LoopControl2 = DEFNODE("LoopControl", "label", {
    $documentation: "Base class for loop control statements (`break` and `continue`)",
    $propdoc: {
      label: "[AST_LabelRef?] the label, or null if none"
    },
    _equals: function(node) {
      return prop_equals(this.label, node.label);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.label)
          node.label.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "LoopControl")
        throw new Error("should not instantiate AST_LoopControl");
      if (this.label != null) {
        if (!(this.label instanceof AST_LabelRef2))
          throw new Error("label must be AST_LabelRef");
      }
    }
  }, AST_Jump2);
  var AST_Break2 = DEFNODE("Break", null, {
    $documentation: "A `break` statement"
  }, AST_LoopControl2);
  var AST_Continue2 = DEFNODE("Continue", null, {
    $documentation: "A `continue` statement"
  }, AST_LoopControl2);
  var AST_If2 = DEFNODE("If", "condition alternative", {
    $documentation: "A `if` statement",
    $propdoc: {
      condition: "[AST_Node] the `if` condition",
      alternative: "[AST_Statement?] the `else` part, or null if not present"
    },
    _equals: function(node) {
      return this.body.equals(node.body) && this.condition.equals(node.condition) && prop_equals(this.alternative, node.alternative);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.condition.walk(visitor);
        node.body.walk(visitor);
        if (node.alternative)
          node.alternative.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "condition");
      if (this.alternative != null) {
        if (!is_statement2(this.alternative))
          throw new Error("alternative must be AST_Statement");
      }
    }
  }, AST_StatementWithBody2);
  var AST_Switch2 = DEFNODE("Switch", "expression", {
    $documentation: "A `switch` statement",
    $propdoc: {
      expression: "[AST_Node] the `switch` \u201Cdiscriminant\u201D"
    },
    _equals: function(node) {
      return this.expression.equals(node.expression) && all_equals(this.body, node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
        walk_body2(node, visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
      this.body.forEach(function(node) {
        if (!(node instanceof AST_SwitchBranch2))
          throw new Error("body must be AST_SwitchBranch[]");
      });
    }
  }, AST_Block2);
  var AST_SwitchBranch2 = DEFNODE("SwitchBranch", null, {
    $documentation: "Base class for `switch` branches",
    _validate: function() {
      if (this.TYPE == "SwitchBranch")
        throw new Error("should not instantiate AST_SwitchBranch");
    }
  }, AST_Block2);
  var AST_Default2 = DEFNODE("Default", null, {
    $documentation: "A `default` switch branch"
  }, AST_SwitchBranch2);
  var AST_Case2 = DEFNODE("Case", "expression", {
    $documentation: "A `case` switch branch",
    $propdoc: {
      expression: "[AST_Node] the `case` expression"
    },
    _equals: function(node) {
      return this.expression.equals(node.expression) && all_equals(this.body, node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
        walk_body2(node, visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
    }
  }, AST_SwitchBranch2);
  var AST_Try2 = DEFNODE("Try", "bcatch bfinally", {
    $documentation: "A `try` statement",
    $propdoc: {
      bcatch: "[AST_Catch?] the catch block, or null if not present",
      bfinally: "[AST_Finally?] the finally block, or null if not present"
    },
    _equals: function(node) {
      return all_equals(this.body, node.body) && prop_equals(this.bcatch, node.bcatch) && prop_equals(this.bfinally, node.bfinally);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        walk_body2(node, visitor);
        if (node.bcatch)
          node.bcatch.walk(visitor);
        if (node.bfinally)
          node.bfinally.walk(visitor);
      });
    },
    _validate: function() {
      if (this.bcatch != null) {
        if (!(this.bcatch instanceof AST_Catch2))
          throw new Error("bcatch must be AST_Catch");
      }
      if (this.bfinally != null) {
        if (!(this.bfinally instanceof AST_Finally2))
          throw new Error("bfinally must be AST_Finally");
      }
    }
  }, AST_Block2);
  var AST_Catch2 = DEFNODE("Catch", "argname", {
    $documentation: "A `catch` node; only makes sense as part of a `try` statement",
    $propdoc: {
      argname: "[(AST_Destructured|AST_SymbolCatch)?] symbol for the exception, or null if not present"
    },
    _equals: function(node) {
      return prop_equals(this.argname, node.argname) && all_equals(this.body, node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.argname)
          node.argname.walk(visitor);
        walk_body2(node, visitor);
      });
    },
    _validate: function() {
      if (this.argname != null)
        validate_destructured(this.argname, function(node) {
          if (!(node instanceof AST_SymbolCatch2))
            throw new Error("argname must be AST_SymbolCatch");
        });
    }
  }, AST_Block2);
  var AST_Finally2 = DEFNODE("Finally", null, {
    $documentation: "A `finally` node; only makes sense as part of a `try` statement"
  }, AST_Block2);
  var AST_Definitions2 = DEFNODE("Definitions", "definitions", {
    $documentation: "Base class for `var` nodes (variable declarations/initializations)",
    $propdoc: {
      definitions: "[AST_VarDef*] array of variable definitions"
    },
    _equals: function(node) {
      return all_equals(this.definitions, node.definitions);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.definitions.forEach(function(defn) {
          defn.walk(visitor);
        });
      });
    },
    _validate: function() {
      if (this.TYPE == "Definitions")
        throw new Error("should not instantiate AST_Definitions");
      if (this.definitions.length < 1)
        throw new Error("must have at least one definition");
    }
  }, AST_Statement2);
  var AST_Const2 = DEFNODE("Const", null, {
    $documentation: "A `const` statement",
    _validate: function() {
      this.definitions.forEach(function(node) {
        if (!(node instanceof AST_VarDef2))
          throw new Error("definitions must be AST_VarDef[]");
        validate_destructured(node.name, function(node2) {
          if (!(node2 instanceof AST_SymbolConst2))
            throw new Error("name must be AST_SymbolConst");
        });
      });
    }
  }, AST_Definitions2);
  var AST_Let2 = DEFNODE("Let", null, {
    $documentation: "A `let` statement",
    _validate: function() {
      this.definitions.forEach(function(node) {
        if (!(node instanceof AST_VarDef2))
          throw new Error("definitions must be AST_VarDef[]");
        validate_destructured(node.name, function(node2) {
          if (!(node2 instanceof AST_SymbolLet2))
            throw new Error("name must be AST_SymbolLet");
        });
      });
    }
  }, AST_Definitions2);
  var AST_Var2 = DEFNODE("Var", null, {
    $documentation: "A `var` statement",
    _validate: function() {
      this.definitions.forEach(function(node) {
        if (!(node instanceof AST_VarDef2))
          throw new Error("definitions must be AST_VarDef[]");
        validate_destructured(node.name, function(node2) {
          if (!(node2 instanceof AST_SymbolVar2))
            throw new Error("name must be AST_SymbolVar");
        });
      });
    }
  }, AST_Definitions2);
  var AST_VarDef2 = DEFNODE("VarDef", "name value", {
    $documentation: "A variable declaration; only appears in a AST_Definitions node",
    $propdoc: {
      name: "[AST_Destructured|AST_SymbolVar] name of the variable",
      value: "[AST_Node?] initializer, or null of there's no initializer"
    },
    _equals: function(node) {
      return this.name.equals(node.name) && prop_equals(this.value, node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.name.walk(visitor);
        if (node.value)
          node.value.walk(visitor);
      });
    },
    _validate: function() {
      if (this.value != null)
        must_be_expression(this, "value");
    }
  });
  var AST_ExportDeclaration2 = DEFNODE("ExportDeclaration", "body", {
    $documentation: "An `export` statement",
    $propdoc: {
      body: "[AST_DefClass|AST_Definitions|AST_LambdaDefinition] the statement to export"
    },
    _equals: function(node) {
      return this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      if (!(this.body instanceof AST_DefClass2 || this.body instanceof AST_Definitions2 || this.body instanceof AST_LambdaDefinition2)) {
        throw new Error("body must be AST_DefClass, AST_Definitions or AST_LambdaDefinition");
      }
    }
  }, AST_Statement2);
  var AST_ExportDefault2 = DEFNODE("ExportDefault", "body", {
    $documentation: "An `export default` statement",
    $propdoc: {
      body: "[AST_Node] the default export"
    },
    _equals: function(node) {
      return this.body.equals(node.body);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.body.walk(visitor);
      });
    },
    _validate: function() {
      if (!(this.body instanceof AST_DefClass2 || this.body instanceof AST_LambdaDefinition2)) {
        must_be_expression(this, "body");
      }
    }
  }, AST_Statement2);
  var AST_ExportForeign2 = DEFNODE("ExportForeign", "aliases keys path", {
    $documentation: "An `export ... from '...'` statement",
    $propdoc: {
      aliases: "[AST_String*] array of aliases to export",
      keys: "[AST_String*] array of keys to import",
      path: "[AST_String] the path to import module"
    },
    _equals: function(node) {
      return this.path.equals(node.path) && all_equals(this.aliases, node.aliases) && all_equals(this.keys, node.keys);
    },
    _validate: function() {
      if (this.aliases.length != this.keys.length) {
        throw new Error("aliases:key length mismatch: " + this.aliases.length + " != " + this.keys.length);
      }
      this.aliases.forEach(function(name) {
        if (!(name instanceof AST_String2))
          throw new Error("aliases must contain AST_String");
      });
      this.keys.forEach(function(name) {
        if (!(name instanceof AST_String2))
          throw new Error("keys must contain AST_String");
      });
      if (!(this.path instanceof AST_String2))
        throw new Error("path must be AST_String");
    }
  }, AST_Statement2);
  var AST_ExportReferences2 = DEFNODE("ExportReferences", "properties", {
    $documentation: "An `export { ... }` statement",
    $propdoc: {
      properties: "[AST_SymbolExport*] array of aliases to export"
    },
    _equals: function(node) {
      return all_equals(this.properties, node.properties);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.properties.forEach(function(prop) {
          prop.walk(visitor);
        });
      });
    },
    _validate: function() {
      this.properties.forEach(function(prop) {
        if (!(prop instanceof AST_SymbolExport2))
          throw new Error("properties must contain AST_SymbolExport");
      });
    }
  }, AST_Statement2);
  var AST_Import2 = DEFNODE("Import", "all default path properties", {
    $documentation: "An `import` statement",
    $propdoc: {
      all: "[AST_SymbolImport?] the imported namespace, or null if not specified",
      default: "[AST_SymbolImport?] the alias for default `export`, or null if not specified",
      path: "[AST_String] the path to import module",
      properties: "[(AST_SymbolImport*)?] array of aliases, or null if not specified"
    },
    _equals: function(node) {
      return this.path.equals(node.path) && prop_equals(this.all, node.all) && prop_equals(this.default, node.default) && !this.properties == !node.properties && (!this.properties || all_equals(this.properties, node.properties));
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.all)
          node.all.walk(visitor);
        if (node.default)
          node.default.walk(visitor);
        if (node.properties)
          node.properties.forEach(function(prop) {
            prop.walk(visitor);
          });
      });
    },
    _validate: function() {
      if (this.all != null) {
        if (!(this.all instanceof AST_SymbolImport2))
          throw new Error("all must be AST_SymbolImport");
        if (this.properties != null)
          throw new Error("cannot import both * and {} in the same statement");
      }
      if (this.default != null) {
        if (!(this.default instanceof AST_SymbolImport2))
          throw new Error("default must be AST_SymbolImport");
        if (this.default.key.value !== "")
          throw new Error("invalid default key: " + this.default.key.value);
      }
      if (!(this.path instanceof AST_String2))
        throw new Error("path must be AST_String");
      if (this.properties != null)
        this.properties.forEach(function(node) {
          if (!(node instanceof AST_SymbolImport2))
            throw new Error("properties must contain AST_SymbolImport");
        });
    }
  }, AST_Statement2);
  var AST_DefaultValue2 = DEFNODE("DefaultValue", "name value", {
    $documentation: "A default value declaration",
    $propdoc: {
      name: "[AST_Destructured|AST_SymbolDeclaration] name of the variable",
      value: "[AST_Node] value to assign if variable is `undefined`"
    },
    _equals: function(node) {
      return this.name.equals(node.name) && this.value.equals(node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.name.walk(visitor);
        node.value.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "value");
    }
  });
  var AST_Call2 = DEFNODE("Call", "args expression optional pure terminal", {
    $documentation: "A function call expression",
    $propdoc: {
      args: "[AST_Node*] array of arguments",
      expression: "[AST_Node] expression to invoke as function",
      optional: "[boolean] whether the expression is optional chaining",
      pure: "[boolean/S] marker for side-effect-free call expression",
      terminal: "[boolean] whether the chain has ended"
    },
    _equals: function(node) {
      return !this.optional == !node.optional && this.expression.equals(node.expression) && all_equals(this.args, node.args);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
        node.args.forEach(function(arg) {
          arg.walk(visitor);
        });
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
      must_be_expressions(this, "args", true);
    }
  });
  var AST_New2 = DEFNODE("New", null, {
    $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties",
    _validate: function() {
      if (this.optional)
        throw new Error("optional must be false");
      if (this.terminal)
        throw new Error("terminal must be false");
    }
  }, AST_Call2);
  var AST_Sequence2 = DEFNODE("Sequence", "expressions", {
    $documentation: "A sequence expression (comma-separated expressions)",
    $propdoc: {
      expressions: "[AST_Node*] array of expressions (at least two)"
    },
    _equals: function(node) {
      return all_equals(this.expressions, node.expressions);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expressions.forEach(function(expr) {
          expr.walk(visitor);
        });
      });
    },
    _validate: function() {
      if (this.expressions.length < 2)
        throw new Error("expressions must contain multiple elements");
      must_be_expressions(this, "expressions");
    }
  });
  var AST_PropAccess2 = DEFNODE("PropAccess", "expression optional property terminal", {
    $documentation: "Base class for property access expressions, i.e. `a.foo` or `a[\"foo\"]`",
    $propdoc: {
      expression: "[AST_Node] the \u201Ccontainer\u201D expression",
      optional: "[boolean] whether the expression is optional chaining",
      property: "[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node",
      terminal: "[boolean] whether the chain has ended"
    },
    _equals: function(node) {
      return !this.optional == !node.optional && prop_equals(this.property, node.property) && this.expression.equals(node.expression);
    },
    get_property: function() {
      var p2 = this.property;
      if (p2 instanceof AST_Constant2)
        return p2.value;
      if (p2 instanceof AST_UnaryPrefix2 && p2.operator == "void" && p2.expression instanceof AST_Constant2)
        return;
      return p2;
    },
    _validate: function() {
      if (this.TYPE == "PropAccess")
        throw new Error("should not instantiate AST_PropAccess");
      must_be_expression(this, "expression");
    }
  });
  var AST_Dot2 = DEFNODE("Dot", "quoted", {
    $documentation: "A dotted property access expression",
    $propdoc: {
      quoted: "[boolean] whether property is transformed from a quoted string"
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
      });
    },
    _validate: function() {
      if (typeof this.property != "string")
        throw new Error("property must be string");
    }
  }, AST_PropAccess2);
  var AST_Sub2 = DEFNODE("Sub", null, {
    $documentation: "Index-style property access, i.e. `a[\"foo\"]`",
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
        node.property.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "property");
    }
  }, AST_PropAccess2);
  var AST_Spread2 = DEFNODE("Spread", "expression", {
    $documentation: "Spread expression in array/object literals or function calls",
    $propdoc: {
      expression: "[AST_Node] expression to be expanded"
    },
    _equals: function(node) {
      return this.expression.equals(node.expression);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
    }
  });
  var AST_Unary2 = DEFNODE("Unary", "operator expression", {
    $documentation: "Base class for unary expressions",
    $propdoc: {
      operator: "[string] the operator",
      expression: "[AST_Node] expression that this unary operator applies to"
    },
    _equals: function(node) {
      return this.operator == node.operator && this.expression.equals(node.expression);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "Unary")
        throw new Error("should not instantiate AST_Unary");
      if (typeof this.operator != "string")
        throw new Error("operator must be string");
      must_be_expression(this, "expression");
    }
  });
  var AST_UnaryPrefix2 = DEFNODE("UnaryPrefix", null, {
    $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"
  }, AST_Unary2);
  var AST_UnaryPostfix2 = DEFNODE("UnaryPostfix", null, {
    $documentation: "Unary postfix expression, i.e. `i++`"
  }, AST_Unary2);
  var AST_Binary2 = DEFNODE("Binary", "operator left right", {
    $documentation: "Binary expression, i.e. `a + b`",
    $propdoc: {
      left: "[AST_Node] left-hand side expression",
      operator: "[string] the operator",
      right: "[AST_Node] right-hand side expression"
    },
    _equals: function(node) {
      return this.operator == node.operator && this.left.equals(node.left) && this.right.equals(node.right);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.left.walk(visitor);
        node.right.walk(visitor);
      });
    },
    _validate: function() {
      if (!(this instanceof AST_Assign2))
        must_be_expression(this, "left");
      if (typeof this.operator != "string")
        throw new Error("operator must be string");
      must_be_expression(this, "right");
    }
  });
  var AST_Conditional2 = DEFNODE("Conditional", "condition consequent alternative", {
    $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",
    $propdoc: {
      condition: "[AST_Node]",
      consequent: "[AST_Node]",
      alternative: "[AST_Node]"
    },
    _equals: function(node) {
      return this.condition.equals(node.condition) && this.consequent.equals(node.consequent) && this.alternative.equals(node.alternative);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.condition.walk(visitor);
        node.consequent.walk(visitor);
        node.alternative.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "condition");
      must_be_expression(this, "consequent");
      must_be_expression(this, "alternative");
    }
  });
  var AST_Assign2 = DEFNODE("Assign", null, {
    $documentation: "An assignment expression \u2014 `a = b + 5`",
    _validate: function() {
      if (this.operator.indexOf("=") < 0)
        throw new Error('operator must contain "="');
      if (this.left instanceof AST_Destructured2) {
        if (this.operator != "=")
          throw new Error("invalid destructuring operator: " + this.operator);
        validate_destructured(this.left, function(node) {
          if (!(node instanceof AST_PropAccess2 || node instanceof AST_SymbolRef2)) {
            throw new Error("left must be assignable: " + node.TYPE);
          }
        });
      } else if (!(this.left instanceof AST_Infinity2 || this.left instanceof AST_NaN2 || this.left instanceof AST_PropAccess2 && !this.left.optional || this.left instanceof AST_SymbolRef2 || this.left instanceof AST_Undefined2)) {
        throw new Error("left must be assignable");
      }
    }
  }, AST_Binary2);
  var AST_Await2 = DEFNODE("Await", "expression", {
    $documentation: "An await expression",
    $propdoc: {
      expression: "[AST_Node] expression with Promise to resolve on"
    },
    _equals: function(node) {
      return this.expression.equals(node.expression);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.expression.walk(visitor);
      });
    },
    _validate: function() {
      must_be_expression(this, "expression");
    }
  });
  var AST_Yield2 = DEFNODE("Yield", "expression nested", {
    $documentation: "A yield expression",
    $propdoc: {
      expression: "[AST_Node?] return value for iterator, or null if undefined",
      nested: "[boolean] whether to iterate over expression as generator"
    },
    _equals: function(node) {
      return !this.nested == !node.nested && prop_equals(this.expression, node.expression);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.expression)
          node.expression.walk(visitor);
      });
    },
    _validate: function() {
      if (this.expression != null) {
        must_be_expression(this, "expression");
      } else if (this.nested) {
        throw new Error("yield* must contain expression");
      }
    }
  });
  var AST_Array2 = DEFNODE("Array", "elements", {
    $documentation: "An array literal",
    $propdoc: {
      elements: "[AST_Node*] array of elements"
    },
    _equals: function(node) {
      return all_equals(this.elements, node.elements);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.elements.forEach(function(element) {
          element.walk(visitor);
        });
      });
    },
    _validate: function() {
      must_be_expressions(this, "elements", true, true);
    }
  });
  var AST_Destructured2 = DEFNODE("Destructured", "rest", {
    $documentation: "Base class for destructured literal",
    $propdoc: {
      rest: "[(AST_Destructured|AST_SymbolDeclaration|AST_SymbolRef)?] rest parameter, or null if absent"
    },
    _validate: function() {
      if (this.TYPE == "Destructured")
        throw new Error("should not instantiate AST_Destructured");
    }
  });
  var AST_DestructuredArray2 = DEFNODE("DestructuredArray", "elements", {
    $documentation: "A destructured array literal",
    $propdoc: {
      elements: "[(AST_DefaultValue|AST_Destructured|AST_SymbolDeclaration|AST_SymbolRef)*] array of elements"
    },
    _equals: function(node) {
      return prop_equals(this.rest, node.rest) && all_equals(this.elements, node.elements);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.elements.forEach(function(element) {
          element.walk(visitor);
        });
        if (node.rest)
          node.rest.walk(visitor);
      });
    }
  }, AST_Destructured2);
  var AST_DestructuredKeyVal2 = DEFNODE("DestructuredKeyVal", "key value", {
    $documentation: "A key: value destructured property",
    $propdoc: {
      key: "[string|AST_Node] property name.  For computed property this is an AST_Node.",
      value: "[AST_DefaultValue|AST_Destructured|AST_SymbolDeclaration|AST_SymbolRef] property value"
    },
    _equals: function(node) {
      return prop_equals(this.key, node.key) && this.value.equals(node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.key instanceof AST_Node2)
          node.key.walk(visitor);
        node.value.walk(visitor);
      });
    },
    _validate: function() {
      if (typeof this.key != "string") {
        if (!(this.key instanceof AST_Node2))
          throw new Error("key must be string or AST_Node");
        must_be_expression(this, "key");
      }
      if (!(this.value instanceof AST_Node2))
        throw new Error("value must be AST_Node");
    }
  });
  var AST_DestructuredObject2 = DEFNODE("DestructuredObject", "properties", {
    $documentation: "A destructured object literal",
    $propdoc: {
      properties: "[AST_DestructuredKeyVal*] array of properties"
    },
    _equals: function(node) {
      return prop_equals(this.rest, node.rest) && all_equals(this.properties, node.properties);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.properties.forEach(function(prop) {
          prop.walk(visitor);
        });
        if (node.rest)
          node.rest.walk(visitor);
      });
    },
    _validate: function() {
      this.properties.forEach(function(node) {
        if (!(node instanceof AST_DestructuredKeyVal2))
          throw new Error("properties must be AST_DestructuredKeyVal[]");
      });
    }
  }, AST_Destructured2);
  var AST_Object2 = DEFNODE("Object", "properties", {
    $documentation: "An object literal",
    $propdoc: {
      properties: "[(AST_ObjectProperty|AST_Spread)*] array of properties"
    },
    _equals: function(node) {
      return all_equals(this.properties, node.properties);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        node.properties.forEach(function(prop) {
          prop.walk(visitor);
        });
      });
    },
    _validate: function() {
      this.properties.forEach(function(node) {
        if (!(node instanceof AST_ObjectProperty2 || node instanceof AST_Spread2)) {
          throw new Error("properties must contain AST_ObjectProperty and/or AST_Spread only");
        }
      });
    }
  });
  var AST_ObjectProperty2 = DEFNODE("ObjectProperty", "key value", {
    $documentation: "Base class for literal object properties",
    $propdoc: {
      key: "[string|AST_Node] property name.  For computed property this is an AST_Node.",
      value: "[AST_Node] property value.  For getters and setters this is an AST_Accessor."
    },
    _equals: function(node) {
      return prop_equals(this.key, node.key) && this.value.equals(node.value);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.key instanceof AST_Node2)
          node.key.walk(visitor);
        node.value.walk(visitor);
      });
    },
    _validate: function() {
      if (this.TYPE == "ObjectProperty")
        throw new Error("should not instantiate AST_ObjectProperty");
      if (typeof this.key != "string") {
        if (!(this.key instanceof AST_Node2))
          throw new Error("key must be string or AST_Node");
        must_be_expression(this, "key");
      }
      if (!(this.value instanceof AST_Node2))
        throw new Error("value must be AST_Node");
    }
  });
  var AST_ObjectKeyVal2 = DEFNODE("ObjectKeyVal", null, {
    $documentation: "A key: value object property",
    _validate: function() {
      must_be_expression(this, "value");
    }
  }, AST_ObjectProperty2);
  var AST_ObjectMethod2 = DEFNODE("ObjectMethod", null, {
    $documentation: "A key(){} object property",
    _validate: function() {
      if (!(this.value instanceof AST_LambdaExpression2))
        throw new Error("value must be AST_LambdaExpression");
      if (is_arrow2(this.value))
        throw new Error("value cannot be AST_Arrow or AST_AsyncArrow");
      if (this.value.name != null)
        throw new Error("name of object method's lambda must be null");
    }
  }, AST_ObjectKeyVal2);
  var AST_ObjectSetter2 = DEFNODE("ObjectSetter", null, {
    $documentation: "An object setter property",
    _validate: function() {
      if (!(this.value instanceof AST_Accessor2))
        throw new Error("value must be AST_Accessor");
    }
  }, AST_ObjectProperty2);
  var AST_ObjectGetter2 = DEFNODE("ObjectGetter", null, {
    $documentation: "An object getter property",
    _validate: function() {
      if (!(this.value instanceof AST_Accessor2))
        throw new Error("value must be AST_Accessor");
    }
  }, AST_ObjectProperty2);
  var AST_Symbol2 = DEFNODE("Symbol", "scope name thedef", {
    $documentation: "Base class for all symbols",
    $propdoc: {
      name: "[string] name of this symbol",
      scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",
      thedef: "[SymbolDef/S] the definition of this symbol"
    },
    _equals: function(node) {
      return this.thedef ? this.thedef === node.thedef : this.name == node.name;
    },
    _validate: function() {
      if (this.TYPE == "Symbol")
        throw new Error("should not instantiate AST_Symbol");
      if (typeof this.name != "string")
        throw new Error("name must be string");
    }
  });
  var AST_SymbolDeclaration2 = DEFNODE("SymbolDeclaration", "init", {
    $documentation: "A declaration symbol (symbol in var, function name or argument, symbol in catch)"
  }, AST_Symbol2);
  var AST_SymbolConst2 = DEFNODE("SymbolConst", null, {
    $documentation: "Symbol defining a constant"
  }, AST_SymbolDeclaration2);
  var AST_SymbolImport2 = DEFNODE("SymbolImport", "key", {
    $documentation: "Symbol defined by an `import` statement",
    $propdoc: {
      key: "[AST_String] the original `export` name"
    },
    _equals: function(node) {
      return this.name == node.name && this.key.equals(node.key);
    },
    _validate: function() {
      if (!(this.key instanceof AST_String2))
        throw new Error("key must be AST_String");
    }
  }, AST_SymbolConst2);
  var AST_SymbolLet2 = DEFNODE("SymbolLet", null, {
    $documentation: "Symbol defining a lexical-scoped variable"
  }, AST_SymbolDeclaration2);
  var AST_SymbolVar2 = DEFNODE("SymbolVar", null, {
    $documentation: "Symbol defining a variable"
  }, AST_SymbolDeclaration2);
  var AST_SymbolFunarg2 = DEFNODE("SymbolFunarg", "unused", {
    $documentation: "Symbol naming a function argument"
  }, AST_SymbolVar2);
  var AST_SymbolDefun2 = DEFNODE("SymbolDefun", null, {
    $documentation: "Symbol defining a function"
  }, AST_SymbolDeclaration2);
  var AST_SymbolLambda2 = DEFNODE("SymbolLambda", null, {
    $documentation: "Symbol naming a function expression"
  }, AST_SymbolDeclaration2);
  var AST_SymbolDefClass2 = DEFNODE("SymbolDefClass", null, {
    $documentation: "Symbol defining a class"
  }, AST_SymbolConst2);
  var AST_SymbolClass2 = DEFNODE("SymbolClass", null, {
    $documentation: "Symbol naming a class expression"
  }, AST_SymbolConst2);
  var AST_SymbolCatch2 = DEFNODE("SymbolCatch", null, {
    $documentation: "Symbol naming the exception in catch"
  }, AST_SymbolDeclaration2);
  var AST_Label2 = DEFNODE("Label", "references", {
    $documentation: "Symbol naming a label (declaration)",
    $propdoc: {
      references: "[AST_LoopControl*] a list of nodes referring to this label"
    },
    initialize: function() {
      this.references = [];
      this.thedef = this;
    }
  }, AST_Symbol2);
  var AST_SymbolRef2 = DEFNODE("SymbolRef", "fixed in_arg redef", {
    $documentation: "Reference to some symbol (not definition/declaration)"
  }, AST_Symbol2);
  var AST_SymbolExport2 = DEFNODE("SymbolExport", "alias", {
    $documentation: "Reference in an `export` statement",
    $propdoc: {
      alias: "[AST_String] the `export` alias"
    },
    _equals: function(node) {
      return this.name == node.name && this.alias.equals(node.alias);
    },
    _validate: function() {
      if (!(this.alias instanceof AST_String2))
        throw new Error("alias must be AST_String");
    }
  }, AST_SymbolRef2);
  var AST_LabelRef2 = DEFNODE("LabelRef", null, {
    $documentation: "Reference to a label symbol"
  }, AST_Symbol2);
  var AST_ObjectIdentity2 = DEFNODE("ObjectIdentity", null, {
    $documentation: "Base class for `super` & `this`",
    _equals: return_true,
    _validate: function() {
      if (this.TYPE == "ObjectIdentity")
        throw new Error("should not instantiate AST_ObjectIdentity");
    }
  }, AST_Symbol2);
  var AST_Super2 = DEFNODE("Super", null, {
    $documentation: "The `super` symbol",
    _validate: function() {
      if (this.name !== "super")
        throw new Error('name must be "super"');
    }
  }, AST_ObjectIdentity2);
  var AST_This2 = DEFNODE("This", null, {
    $documentation: "The `this` symbol",
    _validate: function() {
      if (this.TYPE == "This" && this.name !== "this")
        throw new Error('name must be "this"');
    }
  }, AST_ObjectIdentity2);
  var AST_NewTarget2 = DEFNODE("NewTarget", null, {
    $documentation: "The `new.target` symbol",
    initialize: function() {
      this.name = "new.target";
    },
    _validate: function() {
      if (this.name !== "new.target")
        throw new Error('name must be "new.target": ' + this.name);
    }
  }, AST_This2);
  var AST_Template2 = DEFNODE("Template", "expressions strings tag", {
    $documentation: "A template literal, i.e. tag`str1${expr1}...strN${exprN}strN+1`",
    $propdoc: {
      expressions: "[AST_Node*] the placeholder expressions",
      strings: "[string*] the raw text segments",
      tag: "[AST_Node?] tag function, or null if absent"
    },
    _equals: function(node) {
      return prop_equals(this.tag, node.tag) && list_equals(this.strings, node.strings) && all_equals(this.expressions, node.expressions);
    },
    walk: function(visitor) {
      var node = this;
      visitor.visit(node, function() {
        if (node.tag)
          node.tag.walk(visitor);
        node.expressions.forEach(function(expr) {
          expr.walk(visitor);
        });
      });
    },
    _validate: function() {
      if (this.expressions.length + 1 != this.strings.length) {
        throw new Error("malformed template with " + this.expressions.length + " placeholder(s) but " + this.strings.length + " text segment(s)");
      }
      must_be_expressions(this, "expressions");
      this.strings.forEach(function(string) {
        if (typeof string != "string")
          throw new Error("strings must contain string");
      });
      if (this.tag != null)
        must_be_expression(this, "tag");
    }
  });
  var AST_Constant2 = DEFNODE("Constant", null, {
    $documentation: "Base class for all constants",
    _equals: function(node) {
      return this.value === node.value;
    },
    _validate: function() {
      if (this.TYPE == "Constant")
        throw new Error("should not instantiate AST_Constant");
    }
  });
  var AST_String2 = DEFNODE("String", "quote value", {
    $documentation: "A string literal",
    $propdoc: {
      quote: "[string?] the original quote character",
      value: "[string] the contents of this string"
    },
    _validate: function() {
      if (this.quote != null) {
        if (typeof this.quote != "string")
          throw new Error("quote must be string");
        if (!/^["']$/.test(this.quote))
          throw new Error("invalid quote: " + this.quote);
      }
      if (typeof this.value != "string")
        throw new Error("value must be string");
    }
  }, AST_Constant2);
  var AST_Number2 = DEFNODE("Number", "value", {
    $documentation: "A number literal",
    $propdoc: {
      value: "[number] the numeric value"
    },
    _validate: function() {
      if (typeof this.value != "number")
        throw new Error("value must be number");
      if (!isFinite(this.value))
        throw new Error("value must be finite");
      if (this.value < 0)
        throw new Error("value cannot be negative");
    }
  }, AST_Constant2);
  var AST_BigInt2 = DEFNODE("BigInt", "value", {
    $documentation: "A BigInt literal",
    $propdoc: {
      value: "[string] the numeric representation"
    },
    _validate: function() {
      if (typeof this.value != "string")
        throw new Error("value must be string");
      if (this.value[0] == "-")
        throw new Error("value cannot be negative");
    }
  }, AST_Constant2);
  var AST_RegExp2 = DEFNODE("RegExp", "value", {
    $documentation: "A regexp literal",
    $propdoc: {
      value: "[RegExp] the actual regexp"
    },
    _equals: function(node) {
      return "" + this.value == "" + node.value;
    },
    _validate: function() {
      if (!(this.value instanceof RegExp))
        throw new Error("value must be RegExp");
    }
  }, AST_Constant2);
  var AST_Atom2 = DEFNODE("Atom", null, {
    $documentation: "Base class for atoms",
    _equals: return_true,
    _validate: function() {
      if (this.TYPE == "Atom")
        throw new Error("should not instantiate AST_Atom");
    }
  }, AST_Constant2);
  var AST_Null2 = DEFNODE("Null", null, {
    $documentation: "The `null` atom",
    value: null
  }, AST_Atom2);
  var AST_NaN2 = DEFNODE("NaN", null, {
    $documentation: "The impossible value",
    value: 0 / 0
  }, AST_Atom2);
  var AST_Undefined2 = DEFNODE("Undefined", null, {
    $documentation: "The `undefined` value",
    value: function() {
    }()
  }, AST_Atom2);
  var AST_Hole2 = DEFNODE("Hole", null, {
    $documentation: "A hole in an array",
    value: function() {
    }()
  }, AST_Atom2);
  var AST_Infinity2 = DEFNODE("Infinity", null, {
    $documentation: "The `Infinity` value",
    value: 1 / 0
  }, AST_Atom2);
  var AST_Boolean2 = DEFNODE("Boolean", null, {
    $documentation: "Base class for booleans",
    _validate: function() {
      if (this.TYPE == "Boolean")
        throw new Error("should not instantiate AST_Boolean");
    }
  }, AST_Atom2);
  var AST_False2 = DEFNODE("False", null, {
    $documentation: "The `false` atom",
    value: false
  }, AST_Boolean2);
  var AST_True2 = DEFNODE("True", null, {
    $documentation: "The `true` atom",
    value: true
  }, AST_Boolean2);
  TreeWalker2.prototype = {
    visit: function(node, descend) {
      this.push(node);
      var done = this.callback(node, descend || noop);
      if (!done && descend)
        descend();
      this.pop();
    },
    parent: function(n) {
      return this.stack[this.stack.length - 2 - (n || 0)];
    },
    push: function(node) {
      var value;
      if (node instanceof AST_Class2) {
        this.directives = Object.create(this.directives);
        value = "use strict";
      } else if (node instanceof AST_Directive2) {
        value = node.value;
      } else if (node instanceof AST_Lambda2) {
        this.directives = Object.create(this.directives);
      }
      if (value && !this.directives[value])
        this.directives[value] = node;
      this.stack.push(node);
    },
    pop: function() {
      var node = this.stack.pop();
      if (node instanceof AST_Class2 || node instanceof AST_Lambda2) {
        this.directives = Object.getPrototypeOf(this.directives);
      }
    },
    self: function() {
      return this.stack[this.stack.length - 1];
    },
    find_parent: function(type) {
      var stack = this.stack;
      for (var i = stack.length - 1;--i >= 0; ) {
        var x2 = stack[i];
        if (x2 instanceof type)
          return x2;
      }
    },
    has_directive: function(type) {
      var dir = this.directives[type];
      if (dir)
        return dir;
      var node = this.stack[this.stack.length - 1];
      if (node instanceof AST_Scope2) {
        for (var i = 0;i < node.body.length; ++i) {
          var st2 = node.body[i];
          if (!(st2 instanceof AST_Directive2))
            break;
          if (st2.value == type)
            return st2;
        }
      }
    },
    loopcontrol_target: function(node) {
      var stack = this.stack;
      if (node.label)
        for (var i = stack.length;--i >= 0; ) {
          var x2 = stack[i];
          if (x2 instanceof AST_LabeledStatement2 && x2.label.name == node.label.name)
            return x2.body;
        }
      else
        for (var i = stack.length;--i >= 0; ) {
          var x2 = stack[i];
          if (x2 instanceof AST_IterationStatement2 || node instanceof AST_Break2 && x2 instanceof AST_Switch2)
            return x2;
        }
    },
    in_boolean_context: function() {
      for (var drop = true, level = 0, parent, self = this.self();parent = this.parent(level++); self = parent) {
        if (parent instanceof AST_Binary2)
          switch (parent.operator) {
            case "&&":
            case "||":
              if (parent.left === self)
                drop = false;
              continue;
            default:
              return false;
          }
        if (parent instanceof AST_Conditional2) {
          if (parent.condition === self)
            return true;
          continue;
        }
        if (parent instanceof AST_DWLoop2)
          return parent.condition === self;
        if (parent instanceof AST_For2)
          return parent.condition === self;
        if (parent instanceof AST_If2)
          return parent.condition === self;
        if (parent instanceof AST_Return2) {
          if (parent.in_bool)
            return true;
          while (parent = this.parent(level++)) {
            if (parent instanceof AST_Lambda2) {
              if (parent.name)
                return false;
              parent = this.parent(level++);
              if (parent.TYPE != "Call")
                return false;
              break;
            }
          }
        }
        if (parent instanceof AST_Sequence2) {
          if (parent.tail_node() === self)
            continue;
          return drop ? "d" : true;
        }
        if (parent instanceof AST_SimpleStatement2)
          return drop ? "d" : true;
        if (parent instanceof AST_UnaryPrefix2)
          return parent.operator == "!";
        return false;
      }
    }
  };
});

// node_modules/uglify-js/lib/transform.js
var exports_transform = {};
var TreeTransformer2;
var init_transform = __esm(() => {
  TreeTransformer2 = function(before, after) {
    TreeWalker.call(this);
    this.before = before;
    this.after = after;
  };
  TreeTransformer2.prototype = new TreeWalker;
  (function(DEF) {
    function do_list(list, tw) {
      return List(list, function(node) {
        return node.transform(tw, true);
      });
    }
    DEF(AST_Node, noop);
    DEF(AST_LabeledStatement, function(self, tw) {
      self.label = self.label.transform(tw);
      self.body = self.body.transform(tw);
    });
    DEF(AST_SimpleStatement, function(self, tw) {
      self.body = self.body.transform(tw);
    });
    DEF(AST_Block, function(self, tw) {
      self.body = do_list(self.body, tw);
    });
    DEF(AST_Do, function(self, tw) {
      self.body = self.body.transform(tw);
      self.condition = self.condition.transform(tw);
    });
    DEF(AST_While, function(self, tw) {
      self.condition = self.condition.transform(tw);
      self.body = self.body.transform(tw);
    });
    DEF(AST_For, function(self, tw) {
      if (self.init)
        self.init = self.init.transform(tw);
      if (self.condition)
        self.condition = self.condition.transform(tw);
      if (self.step)
        self.step = self.step.transform(tw);
      self.body = self.body.transform(tw);
    });
    DEF(AST_ForEnumeration, function(self, tw) {
      self.init = self.init.transform(tw);
      self.object = self.object.transform(tw);
      self.body = self.body.transform(tw);
    });
    DEF(AST_With, function(self, tw) {
      self.expression = self.expression.transform(tw);
      self.body = self.body.transform(tw);
    });
    DEF(AST_Exit, function(self, tw) {
      if (self.value)
        self.value = self.value.transform(tw);
    });
    DEF(AST_LoopControl, function(self, tw) {
      if (self.label)
        self.label = self.label.transform(tw);
    });
    DEF(AST_If, function(self, tw) {
      self.condition = self.condition.transform(tw);
      self.body = self.body.transform(tw);
      if (self.alternative)
        self.alternative = self.alternative.transform(tw);
    });
    DEF(AST_Switch, function(self, tw) {
      self.expression = self.expression.transform(tw);
      self.body = do_list(self.body, tw);
    });
    DEF(AST_Case, function(self, tw) {
      self.expression = self.expression.transform(tw);
      self.body = do_list(self.body, tw);
    });
    DEF(AST_Try, function(self, tw) {
      self.body = do_list(self.body, tw);
      if (self.bcatch)
        self.bcatch = self.bcatch.transform(tw);
      if (self.bfinally)
        self.bfinally = self.bfinally.transform(tw);
    });
    DEF(AST_Catch, function(self, tw) {
      if (self.argname)
        self.argname = self.argname.transform(tw);
      self.body = do_list(self.body, tw);
    });
    DEF(AST_Definitions, function(self, tw) {
      self.definitions = do_list(self.definitions, tw);
    });
    DEF(AST_VarDef, function(self, tw) {
      self.name = self.name.transform(tw);
      if (self.value)
        self.value = self.value.transform(tw);
    });
    DEF(AST_DefaultValue, function(self, tw) {
      self.name = self.name.transform(tw);
      self.value = self.value.transform(tw);
    });
    DEF(AST_Lambda, function(self, tw) {
      if (self.name)
        self.name = self.name.transform(tw);
      self.argnames = do_list(self.argnames, tw);
      if (self.rest)
        self.rest = self.rest.transform(tw);
      self.body = do_list(self.body, tw);
    });
    function transform_arrow(self, tw) {
      self.argnames = do_list(self.argnames, tw);
      if (self.rest)
        self.rest = self.rest.transform(tw);
      if (self.value) {
        self.value = self.value.transform(tw);
      } else {
        self.body = do_list(self.body, tw);
      }
    }
    DEF(AST_Arrow, transform_arrow);
    DEF(AST_AsyncArrow, transform_arrow);
    DEF(AST_Class, function(self, tw) {
      if (self.name)
        self.name = self.name.transform(tw);
      if (self.extends)
        self.extends = self.extends.transform(tw);
      self.properties = do_list(self.properties, tw);
    });
    DEF(AST_ClassProperty, function(self, tw) {
      if (self.key instanceof AST_Node)
        self.key = self.key.transform(tw);
      if (self.value)
        self.value = self.value.transform(tw);
    });
    DEF(AST_Call, function(self, tw) {
      self.expression = self.expression.transform(tw);
      self.args = do_list(self.args, tw);
    });
    DEF(AST_Sequence, function(self, tw) {
      self.expressions = do_list(self.expressions, tw);
    });
    DEF(AST_Await, function(self, tw) {
      self.expression = self.expression.transform(tw);
    });
    DEF(AST_Yield, function(self, tw) {
      if (self.expression)
        self.expression = self.expression.transform(tw);
    });
    DEF(AST_Dot, function(self, tw) {
      self.expression = self.expression.transform(tw);
    });
    DEF(AST_Sub, function(self, tw) {
      self.expression = self.expression.transform(tw);
      self.property = self.property.transform(tw);
    });
    DEF(AST_Spread, function(self, tw) {
      self.expression = self.expression.transform(tw);
    });
    DEF(AST_Unary, function(self, tw) {
      self.expression = self.expression.transform(tw);
    });
    DEF(AST_Binary, function(self, tw) {
      self.left = self.left.transform(tw);
      self.right = self.right.transform(tw);
    });
    DEF(AST_Conditional, function(self, tw) {
      self.condition = self.condition.transform(tw);
      self.consequent = self.consequent.transform(tw);
      self.alternative = self.alternative.transform(tw);
    });
    DEF(AST_Array, function(self, tw) {
      self.elements = do_list(self.elements, tw);
    });
    DEF(AST_DestructuredArray, function(self, tw) {
      self.elements = do_list(self.elements, tw);
      if (self.rest)
        self.rest = self.rest.transform(tw);
    });
    DEF(AST_DestructuredKeyVal, function(self, tw) {
      if (self.key instanceof AST_Node)
        self.key = self.key.transform(tw);
      self.value = self.value.transform(tw);
    });
    DEF(AST_DestructuredObject, function(self, tw) {
      self.properties = do_list(self.properties, tw);
      if (self.rest)
        self.rest = self.rest.transform(tw);
    });
    DEF(AST_Object, function(self, tw) {
      self.properties = do_list(self.properties, tw);
    });
    DEF(AST_ObjectProperty, function(self, tw) {
      if (self.key instanceof AST_Node)
        self.key = self.key.transform(tw);
      self.value = self.value.transform(tw);
    });
    DEF(AST_ExportDeclaration, function(self, tw) {
      self.body = self.body.transform(tw);
    });
    DEF(AST_ExportDefault, function(self, tw) {
      self.body = self.body.transform(tw);
    });
    DEF(AST_ExportReferences, function(self, tw) {
      self.properties = do_list(self.properties, tw);
    });
    DEF(AST_Import, function(self, tw) {
      if (self.all)
        self.all = self.all.transform(tw);
      if (self.default)
        self.default = self.default.transform(tw);
      if (self.properties)
        self.properties = do_list(self.properties, tw);
    });
    DEF(AST_Template, function(self, tw) {
      if (self.tag)
        self.tag = self.tag.transform(tw);
      self.expressions = do_list(self.expressions, tw);
    });
  })(function(node, descend) {
    node.DEFMETHOD("transform", function(tw, in_list) {
      var x2, y3;
      tw.push(this);
      if (tw.before)
        x2 = tw.before(this, descend, in_list);
      if (typeof x2 === "undefined") {
        x2 = this;
        descend(x2, tw);
        if (tw.after) {
          y3 = tw.after(x2, in_list);
          if (typeof y3 !== "undefined")
            x2 = y3;
        }
      }
      tw.pop();
      return x2;
    });
  });
});

// node_modules/uglify-js/lib/parse.js
var exports_parse = {};
var JS_Parse_Error2, KEYWORDS, KEYWORDS_ATOM, RESERVED_WORDS2, KEYWORDS_BEFORE_EXPRESSION, OPERATORS, NEWLINE_CHARS, OPERATOR_CHARS, PUNC_OPENERS, PUNC_SEPARATORS, PUNC_CLOSERS, PUNC_AFTER_EXPRESSION, PUNC_BEFORE_EXPRESSION, PUNC_CHARS, WHITESPACE_CHARS, NON_IDENTIFIER_CHARS, UNARY_PREFIX, UNARY_POSTFIX2, ASSIGNMENT, PRECEDENCE2, ATOMIC_START_TOKEN;
var init_parse = __esm(() => {
  JS_Parse_Error2 = function(message, filename, line, col, pos) {
    this.message = message;
    this.filename = filename;
    this.line = line;
    this.col = col;
    this.pos = pos;
  };
  KEYWORDS = "break case catch class const continue debugger default delete do else extends finally for function if in instanceof new return switch throw try typeof var void while with";
  KEYWORDS_ATOM = "false null true";
  RESERVED_WORDS2 = [
    "abstract async await boolean byte char double enum export final float goto implements import int interface let long native package private protected public short static super synchronized this throws transient volatile yield",
    KEYWORDS_ATOM,
    KEYWORDS
  ].join(" ");
  KEYWORDS_BEFORE_EXPRESSION = "return new delete throw else case";
  KEYWORDS = makePredicate(KEYWORDS);
  RESERVED_WORDS2 = makePredicate(RESERVED_WORDS2);
  KEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);
  KEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);
  OPERATORS = makePredicate([
    "in",
    "instanceof",
    "typeof",
    "new",
    "void",
    "delete",
    "++",
    "--",
    "+",
    "-",
    "!",
    "~",
    "&",
    "|",
    "^",
    "*",
    "/",
    "%",
    "**",
    ">>",
    "<<",
    ">>>",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "===",
    "!=",
    "!==",
    "?",
    "=",
    "+=",
    "-=",
    "/=",
    "*=",
    "%=",
    "**=",
    ">>=",
    "<<=",
    ">>>=",
    "&=",
    "|=",
    "^=",
    "&&",
    "||",
    "??",
    "&&=",
    "||=",
    "??="
  ]);
  NEWLINE_CHARS = `
\r\u2028\u2029`;
  OPERATOR_CHARS = "+-*&%=<>!?|~^";
  PUNC_OPENERS = "[{(";
  PUNC_SEPARATORS = ",;:";
  PUNC_CLOSERS = ")}]";
  PUNC_AFTER_EXPRESSION = PUNC_SEPARATORS + PUNC_CLOSERS;
  PUNC_BEFORE_EXPRESSION = PUNC_OPENERS + PUNC_SEPARATORS;
  PUNC_CHARS = PUNC_BEFORE_EXPRESSION + "`" + PUNC_CLOSERS;
  WHITESPACE_CHARS = NEWLINE_CHARS + " \xA0\t\f\v\u200B\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF";
  NON_IDENTIFIER_CHARS = makePredicate(characters("./'\"#" + OPERATOR_CHARS + PUNC_CHARS + WHITESPACE_CHARS));
  NEWLINE_CHARS = makePredicate(characters(NEWLINE_CHARS));
  OPERATOR_CHARS = makePredicate(characters(OPERATOR_CHARS));
  PUNC_AFTER_EXPRESSION = makePredicate(characters(PUNC_AFTER_EXPRESSION));
  PUNC_BEFORE_EXPRESSION = makePredicate(characters(PUNC_BEFORE_EXPRESSION));
  PUNC_CHARS = makePredicate(characters(PUNC_CHARS));
  WHITESPACE_CHARS = makePredicate(characters(WHITESPACE_CHARS));
  JS_Parse_Error2.prototype = Object.create(Error.prototype);
  JS_Parse_Error2.prototype.constructor = JS_Parse_Error2;
  JS_Parse_Error2.prototype.name = "SyntaxError";
  configure_error_stack(JS_Parse_Error2);
  UNARY_PREFIX = makePredicate("typeof void delete -- ++ ! ~ - +");
  UNARY_POSTFIX2 = makePredicate("-- ++");
  ASSIGNMENT = makePredicate("= += -= /= *= %= **= >>= <<= >>>= &= |= ^= &&= ||= ??=");
  PRECEDENCE2 = function(a2, ret) {
    for (var i = 0;i < a2.length; ) {
      var b5 = a2[i++];
      for (var j2 = 0;j2 < b5.length; j2++) {
        ret[b5[j2]] = i;
      }
    }
    return ret;
  }([
    ["??"],
    ["||"],
    ["&&"],
    ["|"],
    ["^"],
    ["&"],
    ["==", "===", "!=", "!=="],
    ["<", ">", "<=", ">=", "in", "instanceof"],
    [">>", "<<", ">>>"],
    ["+", "-"],
    ["*", "/", "%"],
    ["**"]
  ], {});
  ATOMIC_START_TOKEN = makePredicate("atom bigint num regexp string");
});

// node_modules/uglify-js/lib/scope.js
var exports_scope = {};
var SymbolDef, is_funarg2, is_lhs2, init_block_vars, init_scope_vars, names_in_use, next_mangled_name, _default_mangler_options, unary_side_effects2, base542;
var init_scope = __esm(() => {
  SymbolDef = function(id, scope, orig, init) {
    this._bits = 0;
    this.defun = undefined;
    this.eliminated = 0;
    this.id = id;
    this.init = init;
    this.mangled_name = null;
    this.name = orig.name;
    this.orig = [orig];
    this.references = [];
    this.replaced = 0;
    this.safe_ids = undefined;
    this.scope = scope;
  };
  is_funarg2 = function(def) {
    return def.orig[0] instanceof AST_SymbolFunarg || def.orig[1] instanceof AST_SymbolFunarg;
  };
  is_lhs2 = function(node, parent) {
    if (parent instanceof AST_Assign)
      return parent.left === node && node;
    if (parent instanceof AST_DefaultValue)
      return parent.name === node && node;
    if (parent instanceof AST_Destructured)
      return node;
    if (parent instanceof AST_DestructuredKeyVal)
      return node;
    if (parent instanceof AST_ForEnumeration)
      return parent.init === node && node;
    if (parent instanceof AST_Unary)
      return unary_side_effects2[parent.operator] && parent.expression;
  };
  init_block_vars = function(scope, parent) {
    scope.enclosed = [];
    scope.parent_scope = parent;
    scope.functions = new Dictionary;
    scope.variables = new Dictionary;
    if (parent)
      scope.make_def = parent.make_def;
  };
  init_scope_vars = function(scope, parent) {
    init_block_vars(scope, parent);
    scope.uses_eval = false;
    scope.uses_with = false;
  };
  names_in_use = function(scope, options) {
    var names = scope.names_in_use;
    if (!names) {
      scope.cname = -1;
      scope.cname_holes = [];
      scope.names_in_use = names = new Dictionary;
      var cache = options.cache && options.cache.props;
      scope.enclosed.forEach(function(def) {
        if (def.unmangleable(options))
          names.set(def.name, true);
        if (def.global && cache && cache.has(def.name)) {
          names.set(cache.get(def.name), true);
        }
      });
    }
    return names;
  };
  next_mangled_name = function(def, options) {
    var scope = def.scope;
    var in_use = names_in_use(scope, options);
    var holes = scope.cname_holes;
    var names = new Dictionary;
    var scopes = [scope];
    def.forEach(function(sym) {
      var scope2 = sym.scope;
      do {
        if (member(scope2, scopes))
          break;
        names_in_use(scope2, options).each(function(marker, name2) {
          names.set(name2, marker);
        });
        scopes.push(scope2);
      } while (scope2 = scope2.parent_scope);
    });
    var name;
    for (var i = 0;i < holes.length; i++) {
      name = base542(holes[i]);
      if (names.has(name))
        continue;
      holes.splice(i, 1);
      in_use.set(name, true);
      return name;
    }
    while (true) {
      name = base542(++scope.cname);
      if (in_use.has(name) || RESERVED_WORDS[name] || options.reserved.has[name])
        continue;
      if (!names.has(name))
        break;
      holes.push(scope.cname);
    }
    in_use.set(name, true);
    return name;
  };
  _default_mangler_options = function(options) {
    options = defaults(options, {
      eval: false,
      ie: false,
      keep_fargs: false,
      keep_fnames: false,
      reserved: [],
      toplevel: false,
      v8: false,
      webkit: false
    });
    if (!Array.isArray(options.reserved))
      options.reserved = [];
    push_uniq(options.reserved, "arguments");
    options.reserved.has = makePredicate(options.reserved);
    return options;
  };
  SymbolDef.prototype = {
    forEach: function(fn) {
      this.orig.forEach(fn);
      this.references.forEach(fn);
    },
    mangle: function(options) {
      if (this.mangled_name)
        return;
      var cache = this.global && options.cache && options.cache.props;
      if (cache && cache.has(this.name)) {
        this.mangled_name = cache.get(this.name);
      } else if (this.unmangleable(options)) {
        names_in_use(this.scope, options).set(this.name, true);
      } else {
        var def = this.redefined();
        if (def) {
          this.mangled_name = def.mangled_name || def.name;
        } else {
          this.mangled_name = next_mangled_name(this, options);
        }
        if (cache)
          cache.set(this.name, this.mangled_name);
      }
    },
    redefined: function() {
      var self = this;
      var scope = self.defun;
      if (!scope)
        return;
      var name = self.name;
      var def = scope.variables.get(name) || scope instanceof AST_Toplevel && scope.globals.get(name) || self.orig[0] instanceof AST_SymbolConst && find_if(function(def2) {
        return def2.name == name;
      }, scope.enclosed);
      if (def && def !== self)
        return def.redefined() || def;
    },
    unmangleable: function(options) {
      if (this.exported)
        return true;
      if (this.undeclared)
        return true;
      if (!options.eval && this.scope.pinned())
        return true;
      if (options.keep_fargs && is_funarg2(this))
        return true;
      if (options.keep_fnames) {
        var sym = this.orig[0];
        if (sym instanceof AST_SymbolClass)
          return true;
        if (sym instanceof AST_SymbolDefClass)
          return true;
        if (sym instanceof AST_SymbolDefun)
          return true;
        if (sym instanceof AST_SymbolLambda)
          return true;
      }
      if (!options.toplevel && this.global)
        return true;
      return false;
    }
  };
  DEF_BITPROPS(SymbolDef, [
    "const_redefs",
    "cross_loop",
    "direct_access",
    "exported",
    "global",
    "undeclared"
  ]);
  unary_side_effects2 = makePredicate("delete ++ --");
  AST_Toplevel.DEFMETHOD("figure_out_scope", function(options) {
    options = defaults(options, {
      cache: null,
      ie: false
    });
    var self = this;
    var defun = null;
    var exported = false;
    var next_def_id = 0;
    var scope = self.parent_scope = null;
    var tw = new TreeWalker(function(node, descend) {
      if (node instanceof AST_DefClass) {
        var save_exported = exported;
        exported = tw.parent() instanceof AST_ExportDeclaration;
        node.name.walk(tw);
        exported = save_exported;
        walk_scope(function() {
          if (node.extends)
            node.extends.walk(tw);
          node.properties.forEach(function(prop) {
            prop.walk(tw);
          });
        });
        return true;
      }
      if (node instanceof AST_Definitions) {
        var save_exported = exported;
        exported = tw.parent() instanceof AST_ExportDeclaration;
        descend();
        exported = save_exported;
        return true;
      }
      if (node instanceof AST_LambdaDefinition) {
        var save_exported = exported;
        exported = tw.parent() instanceof AST_ExportDeclaration;
        node.name.walk(tw);
        exported = save_exported;
        walk_scope(function() {
          node.argnames.forEach(function(argname) {
            argname.walk(tw);
          });
          if (node.rest)
            node.rest.walk(tw);
          walk_body(node, tw);
        });
        return true;
      }
      if (node instanceof AST_SwitchBranch) {
        node.init_vars(scope);
        descend();
        return true;
      }
      if (node instanceof AST_Try) {
        walk_scope(function() {
          walk_body(node, tw);
        });
        if (node.bcatch)
          node.bcatch.walk(tw);
        if (node.bfinally)
          node.bfinally.walk(tw);
        return true;
      }
      if (node instanceof AST_With) {
        var s2 = scope;
        do {
          s2 = s2.resolve();
          if (s2.uses_with)
            break;
          s2.uses_with = true;
        } while (s2 = s2.parent_scope);
        walk_scope(descend);
        return true;
      }
      if (node instanceof AST_BlockScope) {
        walk_scope(descend);
        return true;
      }
      if (node instanceof AST_Symbol) {
        node.scope = scope;
      }
      if (node instanceof AST_Label) {
        node.thedef = node;
        node.references = [];
      }
      if (node instanceof AST_SymbolCatch) {
        scope.def_variable(node).defun = defun;
      } else if (node instanceof AST_SymbolConst) {
        var def = scope.def_variable(node);
        def.defun = defun;
        if (exported)
          def.exported = true;
      } else if (node instanceof AST_SymbolDefun) {
        var def = defun.def_function(node, tw.parent());
        if (exported)
          def.exported = true;
      } else if (node instanceof AST_SymbolFunarg) {
        defun.def_variable(node);
      } else if (node instanceof AST_SymbolLambda) {
        var def = defun.def_function(node, node.name == "arguments" ? undefined : defun);
        if (options.ie && node.name != "arguments")
          def.defun = defun.parent_scope.resolve();
      } else if (node instanceof AST_SymbolLet) {
        var def = scope.def_variable(node);
        if (exported)
          def.exported = true;
      } else if (node instanceof AST_SymbolVar) {
        var def = defun.def_variable(node, node instanceof AST_SymbolImport ? undefined : null);
        if (exported)
          def.exported = true;
      }
      function walk_scope(descend2) {
        node.init_vars(scope);
        var save_defun = defun;
        var save_scope = scope;
        if (node instanceof AST_Scope)
          defun = node;
        scope = node;
        descend2();
        scope = save_scope;
        defun = save_defun;
      }
    });
    self.make_def = function(orig, init) {
      return new SymbolDef(++next_def_id, this, orig, init);
    };
    self.walk(tw);
    self.globals = new Dictionary;
    var in_arg = [];
    var tw = new TreeWalker(function(node) {
      if (node instanceof AST_Catch) {
        if (!(node.argname instanceof AST_Destructured))
          return;
        in_arg.push(node);
        node.argname.walk(tw);
        in_arg.pop();
        walk_body(node, tw);
        return true;
      }
      if (node instanceof AST_Lambda) {
        in_arg.push(node);
        if (node.name)
          node.name.walk(tw);
        node.argnames.forEach(function(argname) {
          argname.walk(tw);
        });
        if (node.rest)
          node.rest.walk(tw);
        in_arg.pop();
        walk_lambda(node, tw);
        return true;
      }
      if (node instanceof AST_LoopControl) {
        if (node.label)
          node.label.thedef.references.push(node);
        return true;
      }
      if (node instanceof AST_SymbolDeclaration) {
        var def = node.definition();
        def.preinit = def.references.length;
        if (node instanceof AST_SymbolCatch) {
          var redef = def.redefined();
          if (redef)
            for (var s2 = node.scope;s2; s2 = s2.parent_scope) {
              if (!push_uniq(s2.enclosed, redef))
                break;
              if (s2 === redef.scope)
                break;
            }
        } else if (node instanceof AST_SymbolConst) {
          var redef = def.redefined();
          if (redef)
            redef.const_redefs = true;
        } else if (def.scope !== node.scope && (node instanceof AST_SymbolDefun || node instanceof AST_SymbolFunarg || node instanceof AST_SymbolVar)) {
          node.mark_enclosed(options);
          var redef = node.scope.find_variable(node.name);
          if (node.thedef !== redef) {
            node.thedef = redef;
            redef.orig.push(node);
            node.mark_enclosed(options);
          }
        }
        if (node.name != "arguments")
          return true;
        var parent = node instanceof AST_SymbolVar && tw.parent();
        if (parent instanceof AST_VarDef && !parent.value)
          return true;
        var sym = node.scope.resolve().find_variable("arguments");
        if (sym && is_arguments(sym))
          sym.scope.uses_arguments = 3;
        return true;
      }
      if (node instanceof AST_SymbolRef) {
        var name = node.name;
        var sym = node.scope.find_variable(name);
        for (var i = in_arg.length;i > 0 && sym; ) {
          i = in_arg.lastIndexOf(sym.scope, i - 1);
          if (i < 0)
            break;
          var decl = sym.orig[0];
          if (decl instanceof AST_SymbolCatch || decl instanceof AST_SymbolFunarg || decl instanceof AST_SymbolLambda) {
            node.in_arg = true;
            break;
          }
          sym = sym.scope.parent_scope.find_variable(name);
        }
        if (!sym) {
          sym = self.def_global(node);
        } else if (name == "arguments" && is_arguments(sym)) {
          var parent = tw.parent();
          if (is_lhs2(node, parent)) {
            sym.scope.uses_arguments = 3;
          } else if (sym.scope.uses_arguments < 2 && !(parent instanceof AST_PropAccess && parent.expression === node)) {
            sym.scope.uses_arguments = 2;
          } else if (!sym.scope.uses_arguments) {
            sym.scope.uses_arguments = true;
          }
        }
        if (name == "eval") {
          var parent = tw.parent();
          if (parent.TYPE == "Call" && parent.expression === node) {
            var s2 = node.scope;
            do {
              s2 = s2.resolve();
              if (s2.uses_eval)
                break;
              s2.uses_eval = true;
            } while (s2 = s2.parent_scope);
          } else if (sym.undeclared) {
            self.uses_eval = true;
          }
        }
        if (sym.init instanceof AST_LambdaDefinition && sym.scope !== sym.init.name.scope) {
          var scope2 = node.scope;
          do {
            if (scope2 === sym.init.name.scope)
              break;
          } while (scope2 = scope2.parent_scope);
          if (!scope2)
            sym.init = undefined;
        }
        node.thedef = sym;
        node.reference(options);
        return true;
      }
    });
    self.walk(tw);
    if (options.ie)
      self.walk(new TreeWalker(function(node) {
        if (node instanceof AST_SymbolCatch) {
          var def = node.thedef;
          var scope2 = def.defun;
          if (def.name != "arguments" && scope2.name instanceof AST_SymbolLambda && scope2.name.name == def.name) {
            scope2 = scope2.parent_scope.resolve();
          }
          redefine(node, scope2);
          return true;
        }
        if (node instanceof AST_SymbolLambda) {
          var def = node.thedef;
          if (!redefine(node, node.scope.parent_scope.resolve())) {
            def.defun = undefined;
          } else if (typeof node.thedef.init !== "undefined") {
            node.thedef.init = false;
          } else if (def.init) {
            node.thedef.init = def.init;
          }
          return true;
        }
      }));
    function is_arguments(sym) {
      return sym.orig[0] instanceof AST_SymbolFunarg && !(sym.orig[1] instanceof AST_SymbolFunarg || sym.orig[2] instanceof AST_SymbolFunarg) && !is_arrow(sym.scope);
    }
    function redefine(node, scope2) {
      var name = node.name;
      var old_def = node.thedef;
      if (!all(old_def.orig, function(sym) {
        return !(sym instanceof AST_SymbolConst || sym instanceof AST_SymbolLet);
      }))
        return false;
      var new_def = scope2.find_variable(name);
      if (new_def) {
        var redef = new_def.redefined();
        if (redef)
          new_def = redef;
      } else {
        new_def = self.globals.get(name);
      }
      if (new_def) {
        new_def.orig.push(node);
      } else {
        new_def = scope2.def_variable(node);
      }
      if (new_def.undeclared)
        self.variables.set(name, new_def);
      if (name == "arguments" && is_arguments(old_def) && node instanceof AST_SymbolLambda)
        return true;
      old_def.defun = new_def.scope;
      old_def.forEach(function(node2) {
        node2.redef = old_def;
        node2.thedef = new_def;
        node2.reference(options);
      });
      return true;
    }
  });
  AST_Toplevel.DEFMETHOD("def_global", function(node) {
    var globals = this.globals, name = node.name;
    if (globals.has(name)) {
      return globals.get(name);
    } else {
      var g2 = this.make_def(node);
      g2.undeclared = true;
      g2.global = true;
      globals.set(name, g2);
      return g2;
    }
  });
  AST_BlockScope.DEFMETHOD("init_vars", function(parent_scope) {
    init_block_vars(this, parent_scope);
  });
  AST_Scope.DEFMETHOD("init_vars", function(parent_scope) {
    init_scope_vars(this, parent_scope);
  });
  AST_Arrow.DEFMETHOD("init_vars", function(parent_scope) {
    init_scope_vars(this, parent_scope);
    return this;
  });
  AST_AsyncArrow.DEFMETHOD("init_vars", function(parent_scope) {
    init_scope_vars(this, parent_scope);
  });
  AST_Lambda.DEFMETHOD("init_vars", function(parent_scope) {
    init_scope_vars(this, parent_scope);
    this.uses_arguments = false;
    this.def_variable(new AST_SymbolFunarg({
      name: "arguments",
      scope: this,
      start: this.start,
      end: this.end
    }));
    return this;
  });
  AST_Symbol.DEFMETHOD("mark_enclosed", function(options) {
    var def = this.definition();
    for (var s2 = this.scope;s2; s2 = s2.parent_scope) {
      if (!push_uniq(s2.enclosed, def))
        break;
      if (!options) {
        s2._var_names = undefined;
      } else {
        if (options.keep_fargs && s2 instanceof AST_Lambda)
          s2.each_argname(function(arg) {
            push_uniq(def.scope.enclosed, arg.definition());
          });
        if (options.keep_fnames)
          s2.functions.each(function(d2) {
            push_uniq(def.scope.enclosed, d2);
          });
      }
      if (s2 === def.scope)
        break;
    }
  });
  AST_Symbol.DEFMETHOD("reference", function(options) {
    this.definition().references.push(this);
    this.mark_enclosed(options);
  });
  AST_BlockScope.DEFMETHOD("find_variable", function(name) {
    return this.variables.get(name) || this.parent_scope && this.parent_scope.find_variable(name);
  });
  AST_BlockScope.DEFMETHOD("def_function", function(symbol, init) {
    var def = this.def_variable(symbol, init);
    if (!def.init || def.init instanceof AST_LambdaDefinition)
      def.init = init;
    this.functions.set(symbol.name, def);
    return def;
  });
  AST_BlockScope.DEFMETHOD("def_variable", function(symbol, init) {
    var def = this.variables.get(symbol.name);
    if (def) {
      def.orig.push(symbol);
      if (def.init instanceof AST_LambdaExpression)
        def.init = init;
    } else {
      def = this.make_def(symbol, init);
      this.variables.set(symbol.name, def);
      def.global = !this.parent_scope;
    }
    return symbol.thedef = def;
  });
  AST_Symbol.DEFMETHOD("unmangleable", function(options) {
    var def = this.definition();
    return !def || def.unmangleable(options);
  });
  AST_Label.DEFMETHOD("unmangleable", return_false);
  AST_Symbol.DEFMETHOD("definition", function() {
    return this.thedef;
  });
  AST_Toplevel.DEFMETHOD("mangle_names", function(options) {
    options = _default_mangler_options(options);
    if (options.cache && options.cache.props) {
      var mangled_names = names_in_use(this, options);
      options.cache.props.each(function(mangled_name) {
        mangled_names.set(mangled_name, true);
      });
    }
    var cutoff = 36;
    var lname = -1;
    var redefined = [];
    var tw = new TreeWalker(function(node, descend) {
      var save_nesting;
      if (node instanceof AST_BlockScope) {
        if (node instanceof AST_LabeledStatement)
          save_nesting = lname;
        if (options.webkit && node instanceof AST_IterationStatement && node.init instanceof AST_Let) {
          node.init.definitions.forEach(function(defn) {
            defn.name.match_symbol(function(sym2) {
              if (!(sym2 instanceof AST_SymbolLet))
                return;
              var def = sym2.definition();
              var scope = sym2.scope.parent_scope;
              var redef = scope.def_variable(sym2);
              sym2.thedef = def;
              scope.to_mangle.push(redef);
              def.redefined = function() {
                return redef;
              };
            });
          }, true);
        }
        var to_mangle = node.to_mangle = [];
        node.variables.each(function(def) {
          if (!defer_redef(def))
            to_mangle.push(def);
        });
        descend();
        if (options.cache && node instanceof AST_Toplevel) {
          node.globals.each(mangle);
        }
        if (node instanceof AST_Defun && tw.has_directive("use asm")) {
          var sym = new AST_SymbolRef(node.name);
          sym.scope = node;
          sym.reference(options);
        }
        if (to_mangle.length > cutoff) {
          var indices = to_mangle.map(function(def, index) {
            return index;
          }).sort(function(i, j2) {
            return to_mangle[j2].references.length - to_mangle[i].references.length || i - j2;
          });
          to_mangle = indices.slice(0, cutoff).sort(function(i, j2) {
            return i - j2;
          }).map(function(index) {
            return to_mangle[index];
          }).concat(indices.slice(cutoff).sort(function(i, j2) {
            return i - j2;
          }).map(function(index) {
            return to_mangle[index];
          }));
        }
        to_mangle.forEach(mangle);
        if (node instanceof AST_LabeledStatement && !(options.v8 && in_label(tw)))
          lname = save_nesting;
        return true;
      }
      if (node instanceof AST_Label) {
        var name;
        do {
          name = base542(++lname);
        } while (RESERVED_WORDS[name]);
        node.mangled_name = name;
        return true;
      }
    });
    this.walk(tw);
    redefined.forEach(mangle);
    function mangle(def) {
      if (options.reserved.has[def.name])
        return;
      def.mangle(options);
    }
    function defer_redef(def) {
      var sym = def.orig[0];
      var redef = def.redefined();
      if (!redef) {
        if (!(sym instanceof AST_SymbolConst))
          return false;
        var scope = def.scope.resolve();
        if (def.scope === scope)
          return false;
        if (def.scope.parent_scope.find_variable(sym.name))
          return false;
        redef = scope.def_variable(sym);
        scope.to_mangle.push(redef);
      }
      redefined.push(def);
      def.references.forEach(reference);
      if (sym instanceof AST_SymbolCatch || sym instanceof AST_SymbolConst) {
        reference(sym);
        def.redefined = function() {
          return redef;
        };
      }
      return true;
      function reference(sym2) {
        sym2.thedef = redef;
        sym2.reference(options);
        sym2.thedef = def;
      }
    }
    function in_label(tw2) {
      var level = 0, parent;
      while (parent = tw2.parent(level++)) {
        if (parent instanceof AST_Block)
          return parent instanceof AST_Toplevel && !options.toplevel;
        if (parent instanceof AST_LabeledStatement)
          return true;
      }
    }
  });
  AST_Toplevel.DEFMETHOD("find_colliding_names", function(options) {
    var cache = options.cache && options.cache.props;
    var avoid = Object.create(RESERVED_WORDS);
    options.reserved.forEach(to_avoid);
    this.globals.each(add_def);
    this.walk(new TreeWalker(function(node) {
      if (node instanceof AST_BlockScope)
        node.variables.each(add_def);
    }));
    return avoid;
    function to_avoid(name) {
      avoid[name] = true;
    }
    function add_def(def) {
      var name = def.name;
      if (def.global && cache && cache.has(name))
        name = cache.get(name);
      else if (!def.unmangleable(options))
        return;
      to_avoid(name);
    }
  });
  AST_Toplevel.DEFMETHOD("expand_names", function(options) {
    base542.reset();
    base542.sort();
    options = _default_mangler_options(options);
    var avoid = this.find_colliding_names(options);
    var cname = 0;
    this.globals.each(rename);
    this.walk(new TreeWalker(function(node) {
      if (node instanceof AST_BlockScope)
        node.variables.each(rename);
    }));
    function next_name() {
      var name;
      do {
        name = base542(cname++);
      } while (avoid[name]);
      return name;
    }
    function rename(def) {
      if (def.global && options.cache)
        return;
      if (def.unmangleable(options))
        return;
      if (options.reserved.has[def.name])
        return;
      var redef = def.redefined();
      var name = redef ? redef.rename || redef.name : next_name();
      def.rename = name;
      def.forEach(function(sym) {
        if (sym.definition() === def)
          sym.name = name;
      });
    }
  });
  AST_Node.DEFMETHOD("tail_node", return_this);
  AST_Sequence.DEFMETHOD("tail_node", function() {
    return this.expressions[this.expressions.length - 1];
  });
  AST_Toplevel.DEFMETHOD("compute_char_frequency", function(options) {
    options = _default_mangler_options(options);
    base542.reset();
    var fn = AST_Symbol.prototype.add_source_map;
    try {
      AST_Symbol.prototype.add_source_map = function() {
        if (!this.unmangleable(options))
          base542.consider(this.name, -1);
      };
      if (options.properties) {
        AST_Dot.prototype.add_source_map = function() {
          base542.consider(this.property, -1);
        };
        AST_Sub.prototype.add_source_map = function() {
          skip_string(this.property);
        };
      }
      base542.consider(this.print_to_string(), 1);
    } finally {
      AST_Symbol.prototype.add_source_map = fn;
      delete AST_Dot.prototype.add_source_map;
      delete AST_Sub.prototype.add_source_map;
    }
    base542.sort();
    function skip_string(node) {
      if (node instanceof AST_String) {
        base542.consider(node.value, -1);
      } else if (node instanceof AST_Conditional) {
        skip_string(node.consequent);
        skip_string(node.alternative);
      } else if (node instanceof AST_Sequence) {
        skip_string(node.tail_node());
      }
    }
  });
  base542 = function() {
    var freq = Object.create(null);
    function init(chars2) {
      var array = [];
      for (var i = 0;i < chars2.length; i++) {
        var ch = chars2[i];
        array.push(ch);
        freq[ch] = -0.01 * i;
      }
      return array;
    }
    var digits = init("0123456789");
    var leading = init("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_");
    var chars, frequency;
    function reset() {
      chars = null;
      frequency = Object.create(freq);
    }
    base543.consider = function(str, delta) {
      for (var i = str.length;--i >= 0; ) {
        frequency[str[i]] += delta;
      }
    };
    function compare(a2, b5) {
      return frequency[b5] - frequency[a2];
    }
    base543.sort = function() {
      chars = leading.sort(compare).concat(digits).sort(compare);
    };
    base543.reset = reset;
    reset();
    function base543(num) {
      var ret = leading[num % 54];
      for (num = Math.floor(num / 54);--num >= 0; num >>= 6) {
        ret += chars[num & 63];
      }
      return ret;
    }
    return base543;
  }();
});

// node_modules/uglify-js/lib/compress.js
var exports_compress = {};
var Compressor2;
var init_compress = __esm(() => {
  Compressor2 = function(options, false_by_default) {
    if (!(this instanceof Compressor2))
      return new Compressor2(options, false_by_default);
    TreeTransformer.call(this, this.before, this.after);
    this.options = defaults(options, {
      annotations: !false_by_default,
      arguments: !false_by_default,
      arrows: !false_by_default,
      assignments: !false_by_default,
      awaits: !false_by_default,
      booleans: !false_by_default,
      collapse_vars: !false_by_default,
      comparisons: !false_by_default,
      conditionals: !false_by_default,
      dead_code: !false_by_default,
      default_values: !false_by_default,
      directives: !false_by_default,
      drop_console: false,
      drop_debugger: !false_by_default,
      evaluate: !false_by_default,
      expression: false,
      functions: !false_by_default,
      global_defs: false,
      hoist_exports: !false_by_default,
      hoist_funs: false,
      hoist_props: !false_by_default,
      hoist_vars: false,
      ie: false,
      if_return: !false_by_default,
      imports: !false_by_default,
      inline: !false_by_default,
      join_vars: !false_by_default,
      keep_fargs: false_by_default,
      keep_fnames: false,
      keep_infinity: false,
      loops: !false_by_default,
      merge_vars: !false_by_default,
      module: false,
      negate_iife: !false_by_default,
      objects: !false_by_default,
      optional_chains: !false_by_default,
      passes: 1,
      properties: !false_by_default,
      pure_funcs: null,
      pure_getters: !false_by_default && "strict",
      reduce_funcs: !false_by_default,
      reduce_vars: !false_by_default,
      rests: !false_by_default,
      sequences: !false_by_default,
      side_effects: !false_by_default,
      spreads: !false_by_default,
      strings: !false_by_default,
      switches: !false_by_default,
      templates: !false_by_default,
      top_retain: null,
      toplevel: !!(options && (options["module"] || options["top_retain"])),
      typeofs: !false_by_default,
      unsafe: false,
      unsafe_comps: false,
      unsafe_Function: false,
      unsafe_math: false,
      unsafe_proto: false,
      unsafe_regexp: false,
      unsafe_undefined: false,
      unused: !false_by_default,
      varify: !false_by_default,
      webkit: false,
      yields: !false_by_default
    }, true);
    var evaluate = this.options["evaluate"];
    this.eval_threshold = /eager/.test(evaluate) ? 1 / 0 : +evaluate;
    var global_defs = this.options["global_defs"];
    if (typeof global_defs == "object")
      for (var key in global_defs) {
        if (/^@/.test(key) && HOP(global_defs, key)) {
          global_defs[key.slice(1)] = parse(global_defs[key], { expression: true });
        }
      }
    if (this.options["inline"] === true)
      this.options["inline"] = 4;
    this.drop_fargs = this.options["keep_fargs"] ? return_false : function(lambda, parent) {
      if (lambda.length_read)
        return false;
      var name = lambda.name;
      if (!name)
        return parent && parent.TYPE == "Call" && parent.expression === lambda;
      if (name.fixed_value() !== lambda)
        return false;
      var def = name.definition();
      if (def.direct_access)
        return false;
      var escaped = def.escaped;
      return escaped && escaped.depth != 1;
    };
    if (this.options["module"])
      this.directives["use strict"] = true;
    var pure_funcs = this.options["pure_funcs"];
    if (typeof pure_funcs == "function") {
      this.pure_funcs = pure_funcs;
    } else if (typeof pure_funcs == "string") {
      this.pure_funcs = function(node) {
        var expr;
        if (node instanceof AST_Call) {
          expr = node.expression;
        } else if (node instanceof AST_Template) {
          expr = node.tag;
        }
        return !(expr && pure_funcs === expr.print_to_string());
      };
    } else if (Array.isArray(pure_funcs)) {
      this.pure_funcs = function(node) {
        var expr;
        if (node instanceof AST_Call) {
          expr = node.expression;
        } else if (node instanceof AST_Template) {
          expr = node.tag;
        }
        return !(expr && member(expr.print_to_string(), pure_funcs));
      };
    } else {
      this.pure_funcs = return_true;
    }
    var sequences = this.options["sequences"];
    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;
    var top_retain = this.options["top_retain"];
    if (top_retain instanceof RegExp) {
      this.top_retain = function(def) {
        return top_retain.test(def.name);
      };
    } else if (typeof top_retain == "function") {
      this.top_retain = top_retain;
    } else if (top_retain) {
      if (typeof top_retain == "string") {
        top_retain = top_retain.split(/,/);
      }
      this.top_retain = function(def) {
        return member(def.name, top_retain);
      };
    }
    var toplevel = this.options["toplevel"];
    this.toplevel = typeof toplevel == "string" ? {
      funcs: /funcs/.test(toplevel),
      vars: /vars/.test(toplevel)
    } : {
      funcs: toplevel,
      vars: toplevel
    };
  };
  Compressor2.prototype = new TreeTransformer(function(node, descend, in_list) {
    if (node._squeezed)
      return node;
    var is_scope = node instanceof AST_Scope;
    if (is_scope) {
      if (this.option("arrows") && is_arrow(node) && node.value) {
        node.body = [node.first_statement()];
        node.value = null;
      }
      node.hoist_properties(this);
      node.hoist_declarations(this);
      node.process_returns(this);
    }
    descend(node, this);
    descend(node, this);
    var opt = node.optimize(this);
    if (is_scope && opt === node && !this.has_directive("use asm") && !opt.pinned()) {
      opt.drop_unused(this);
      if (opt.merge_variables(this))
        opt.drop_unused(this);
      descend(opt, this);
    }
    if (opt === node)
      opt._squeezed = true;
    return opt;
  });
  Compressor2.prototype.option = function(key) {
    return this.options[key];
  };
  Compressor2.prototype.exposed = function(def) {
    if (def.exported)
      return true;
    if (def.undeclared)
      return true;
    if (!(def.global || def.scope.resolve() instanceof AST_Toplevel))
      return false;
    var toplevel = this.toplevel;
    return !all(def.orig, function(sym) {
      return toplevel[sym instanceof AST_SymbolDefun ? "funcs" : "vars"];
    });
  };
  Compressor2.prototype.compress = function(node) {
    node = node.resolve_defines(this);
    node.hoist_exports(this);
    if (this.option("expression"))
      node.process_expression(true);
    var merge_vars = this.options.merge_vars;
    var passes = +this.options.passes || 1;
    var min_count = 1 / 0;
    var stopping = false;
    var mangle = { ie: this.option("ie") };
    for (var pass = 0;pass < passes; pass++) {
      node.figure_out_scope(mangle);
      if (pass > 0 || this.option("reduce_vars"))
        node.reset_opt_flags(this);
      this.options.merge_vars = merge_vars && (stopping || pass == passes - 1);
      node = node.transform(this);
      if (passes > 1) {
        var count = 0;
        node.walk(new TreeWalker(function() {
          count++;
        }));
        AST_Node.info("pass {pass}: last_count: {min_count}, count: {count}", {
          pass,
          min_count,
          count
        });
        if (count < min_count) {
          min_count = count;
          stopping = false;
        } else if (stopping) {
          break;
        } else {
          stopping = true;
        }
      }
    }
    if (this.option("expression"))
      node.process_expression(false);
    return node;
  };
  (function(OPT) {
    OPT(AST_Node, function(self, compressor) {
      return self;
    });
    AST_Toplevel.DEFMETHOD("hoist_exports", function(compressor) {
      if (!compressor.option("hoist_exports"))
        return;
      var body = this.body, props = [];
      for (var i = 0;i < body.length; i++) {
        var stat = body[i];
        if (stat instanceof AST_ExportDeclaration) {
          body[i] = stat = stat.body;
          if (stat instanceof AST_Definitions) {
            stat.definitions.forEach(function(defn) {
              defn.name.match_symbol(export_symbol, true);
            });
          } else {
            export_symbol(stat.name);
          }
        } else if (stat instanceof AST_ExportReferences) {
          body.splice(i--, 1);
          [].push.apply(props, stat.properties);
        }
      }
      if (props.length)
        body.push(make_node(AST_ExportReferences, this, { properties: props }));
      function export_symbol(sym) {
        if (!(sym instanceof AST_SymbolDeclaration))
          return;
        var node = make_node(AST_SymbolExport, sym);
        node.alias = make_node(AST_String, node, { value: node.name });
        props.push(node);
      }
    });
    AST_Scope.DEFMETHOD("process_expression", function(insert, transform) {
      var self = this;
      var tt2 = new TreeTransformer(function(node) {
        if (insert) {
          if (node instanceof AST_Directive)
            node = make_node(AST_SimpleStatement, node, {
              body: make_node(AST_String, node)
            });
          if (node instanceof AST_SimpleStatement) {
            return transform ? transform(node) : make_node(AST_Return, node, { value: node.body });
          }
        } else if (node instanceof AST_Return) {
          if (transform)
            return transform(node);
          var value = node.value;
          if (value instanceof AST_String)
            return make_node(AST_Directive, value);
          return make_node(AST_SimpleStatement, node, {
            body: value || make_node(AST_UnaryPrefix, node, {
              operator: "void",
              expression: make_node(AST_Number, node, { value: 0 })
            })
          });
        }
        if (node instanceof AST_Block) {
          if (node instanceof AST_Lambda) {
            if (node !== self)
              return node;
          } else if (insert === "awaits" && node instanceof AST_Try) {
            if (node.bfinally)
              return node;
          }
          for (var index = node.body.length;--index >= 0; ) {
            var stat = node.body[index];
            if (!is_declaration(stat, true)) {
              node.body[index] = stat.transform(tt2);
              break;
            }
          }
        } else if (node instanceof AST_If) {
          node.body = node.body.transform(tt2);
          if (node.alternative)
            node.alternative = node.alternative.transform(tt2);
        } else if (node instanceof AST_With) {
          node.body = node.body.transform(tt2);
        }
        return node;
      });
      self.transform(tt2);
    });
    AST_Toplevel.DEFMETHOD("unwrap_expression", function() {
      var self = this;
      switch (self.body.length) {
        case 0:
          return make_node(AST_UnaryPrefix, self, {
            operator: "void",
            expression: make_node(AST_Number, self, { value: 0 })
          });
        case 1:
          var stat = self.body[0];
          if (stat instanceof AST_Directive)
            return make_node(AST_String, stat);
          if (stat instanceof AST_SimpleStatement)
            return stat.body;
        default:
          return make_node(AST_Call, self, {
            expression: make_node(AST_Function, self, {
              argnames: [],
              body: self.body
            }).init_vars(self),
            args: []
          });
      }
    });
    AST_Node.DEFMETHOD("wrap_expression", function() {
      var self = this;
      if (!is_statement(self))
        self = make_node(AST_SimpleStatement, self, { body: self });
      if (!(self instanceof AST_Toplevel))
        self = make_node(AST_Toplevel, self, { body: [self] });
      return self;
    });
    function read_property(obj, node) {
      var key = node.get_property();
      if (key instanceof AST_Node)
        return;
      var value;
      if (obj instanceof AST_Array) {
        var elements = obj.elements;
        if (key == "length")
          return make_node_from_constant(elements.length, obj);
        if (typeof key == "number" && key in elements)
          value = elements[key];
      } else if (obj instanceof AST_Lambda) {
        if (key == "length") {
          obj.length_read = true;
          return make_node_from_constant(obj.argnames.length, obj);
        }
      } else if (obj instanceof AST_Object) {
        key = "" + key;
        var props = obj.properties;
        for (var i = props.length;--i >= 0; ) {
          var prop = props[i];
          if (!can_hoist_property(prop))
            return;
          if (!value && props[i].key === key)
            value = props[i].value;
        }
      }
      return value instanceof AST_SymbolRef && value.fixed_value() || value;
    }
    function is_read_only_fn(value, name) {
      if (value instanceof AST_Boolean)
        return native_fns.Boolean[name];
      if (value instanceof AST_Number)
        return native_fns.Number[name];
      if (value instanceof AST_String)
        return native_fns.String[name];
      if (name == "valueOf")
        return false;
      if (value instanceof AST_Array)
        return native_fns.Array[name];
      if (value instanceof AST_Lambda)
        return native_fns.Function[name];
      if (value instanceof AST_Object)
        return native_fns.Object[name];
      if (value instanceof AST_RegExp)
        return native_fns.RegExp[name] && !value.value.global;
    }
    function is_modified(compressor, tw, node, value, level, immutable, recursive) {
      var parent = tw.parent(level);
      if (compressor.option("unsafe") && parent instanceof AST_Dot && is_read_only_fn(value, parent.property)) {
        return;
      }
      var lhs = is_lhs(node, parent);
      if (lhs)
        return lhs;
      if (level == 0 && value && value.is_constant())
        return;
      if (parent instanceof AST_Array)
        return is_modified(compressor, tw, parent, parent, level + 1);
      if (parent instanceof AST_Assign)
        switch (parent.operator) {
          case "=":
            return is_modified(compressor, tw, parent, value, level + 1, immutable, recursive);
          case "&&=":
          case "||=":
          case "??=":
            return is_modified(compressor, tw, parent, parent, level + 1);
          default:
            return;
        }
      if (parent instanceof AST_Binary) {
        if (!lazy_op[parent.operator])
          return;
        return is_modified(compressor, tw, parent, parent, level + 1);
      }
      if (parent instanceof AST_Call) {
        return !immutable && parent.expression === node && !parent.is_expr_pure(compressor) && (!(value instanceof AST_LambdaExpression) || !(parent instanceof AST_New) && value.contains_this());
      }
      if (parent instanceof AST_Conditional) {
        if (parent.condition === node)
          return;
        return is_modified(compressor, tw, parent, parent, level + 1);
      }
      if (parent instanceof AST_ForEnumeration)
        return parent.init === node;
      if (parent instanceof AST_ObjectKeyVal) {
        if (parent.value !== node)
          return;
        var obj = tw.parent(level + 1);
        return is_modified(compressor, tw, obj, obj, level + 2);
      }
      if (parent instanceof AST_PropAccess) {
        if (parent.expression !== node)
          return;
        var prop = read_property(value, parent);
        return (!immutable || recursive) && is_modified(compressor, tw, parent, prop, level + 1);
      }
      if (parent instanceof AST_Sequence) {
        if (parent.tail_node() !== node)
          return;
        return is_modified(compressor, tw, parent, value, level + 1, immutable, recursive);
      }
    }
    function is_lambda(node) {
      return node instanceof AST_Class || node instanceof AST_Lambda;
    }
    function safe_for_extends(node) {
      return node instanceof AST_Class || node instanceof AST_Defun || node instanceof AST_Function;
    }
    function is_arguments(def) {
      return def.name == "arguments" && def.scope.uses_arguments;
    }
    function cross_scope(def, sym) {
      do {
        if (def === sym)
          return false;
        if (sym instanceof AST_Scope)
          return true;
      } while (sym = sym.parent_scope);
    }
    function can_drop_symbol(ref, compressor, keep_lambda) {
      var def = ref.redef || ref.definition();
      if (ref.in_arg && is_funarg(def))
        return false;
      return all(def.orig, function(sym) {
        if (sym instanceof AST_SymbolConst || sym instanceof AST_SymbolLet) {
          if (sym instanceof AST_SymbolImport)
            return true;
          return compressor && can_varify(compressor, sym);
        }
        return !(keep_lambda && sym instanceof AST_SymbolLambda);
      });
    }
    function has_escaped(d2, scope, node, parent) {
      if (parent instanceof AST_Assign)
        return parent.operator == "=" && parent.right === node;
      if (parent instanceof AST_Call)
        return parent.expression !== node || parent instanceof AST_New;
      if (parent instanceof AST_ClassField)
        return parent.value === node && !parent.static;
      if (parent instanceof AST_Exit)
        return parent.value === node && scope.resolve() !== d2.scope.resolve();
      if (parent instanceof AST_VarDef)
        return parent.value === node;
    }
    function make_ref(ref, fixed) {
      var node = make_node(AST_SymbolRef, ref);
      node.fixed = fixed || make_node(AST_Undefined, ref);
      return node;
    }
    function replace_ref(resolve, fixed) {
      return function(node) {
        var ref = resolve(node);
        var node = make_ref(ref, fixed);
        var def = ref.definition();
        def.references.push(node);
        def.replaced++;
        return node;
      };
    }
    var RE_POSITIVE_INTEGER = /^(0|[1-9][0-9]*)$/;
    (function(def) {
      def(AST_Node, noop);
      function reset_def(tw, compressor, def2) {
        def2.assignments = 0;
        def2.bool_return = 0;
        def2.drop_return = 0;
        def2.cross_loop = false;
        def2.direct_access = false;
        def2.escaped = [];
        def2.fixed = !def2.const_redefs && !def2.scope.pinned() && !compressor.exposed(def2) && !(def2.init instanceof AST_LambdaExpression && def2.init !== def2.scope) && def2.init;
        def2.reassigned = 0;
        def2.recursive_refs = 0;
        def2.references = [];
        def2.single_use = undefined;
      }
      function reset_block_variables(tw, compressor, scope) {
        scope.variables.each(function(def2) {
          reset_def(tw, compressor, def2);
        });
      }
      function reset_variables(tw, compressor, scope) {
        scope.fn_defs = [];
        scope.variables.each(function(def2) {
          reset_def(tw, compressor, def2);
          var init = def2.init;
          if (init instanceof AST_LambdaDefinition) {
            scope.fn_defs.push(init);
            init.safe_ids = null;
          }
          if (def2.fixed === null) {
            def2.safe_ids = tw.safe_ids;
            mark(tw, def2);
          } else if (def2.fixed) {
            tw.loop_ids[def2.id] = tw.in_loop;
            mark(tw, def2);
          }
        });
        scope.may_call_this = function() {
          scope.may_call_this = scope.contains_this() ? return_true : return_false;
        };
        if (scope.uses_arguments)
          scope.each_argname(function(node) {
            node.definition().last_ref = false;
          });
        if (compressor.option("ie"))
          scope.variables.each(function(def2) {
            var d2 = def2.orig[0].definition();
            if (d2 !== def2)
              d2.fixed = false;
          });
      }
      function safe_to_visit(tw, fn) {
        var marker = fn.safe_ids;
        return marker === undefined || marker === tw.safe_ids;
      }
      function walk_fn_def(tw, fn) {
        var was_scanning = tw.fn_scanning;
        tw.fn_scanning = fn;
        fn.walk(tw);
        tw.fn_scanning = was_scanning;
      }
      function revisit_fn_def(tw, fn) {
        fn.enclosed.forEach(function(d2) {
          if (fn.variables.get(d2.name) === d2)
            return;
          if (safe_to_read(tw, d2))
            return;
          d2.single_use = false;
          var fixed = d2.fixed;
          if (typeof fixed == "function")
            fixed = fixed();
          if (fixed instanceof AST_Lambda && fixed.safe_ids !== undefined)
            return;
          d2.fixed = false;
        });
      }
      function mark_fn_def(tw, def2, fn) {
        var marker = fn.safe_ids;
        if (marker === undefined)
          return;
        if (marker === false)
          return;
        if (fn.parent_scope.resolve().may_call_this === return_true) {
          if (member(fn, tw.fn_visited))
            revisit_fn_def(tw, fn);
        } else if (marker) {
          var visited = member(fn, tw.fn_visited);
          if (marker === tw.safe_ids) {
            if (!visited)
              walk_fn_def(tw, fn);
          } else if (visited) {
            revisit_fn_def(tw, fn);
          } else {
            fn.safe_ids = false;
          }
        } else if (tw.fn_scanning && tw.fn_scanning !== def2.scope.resolve()) {
          fn.safe_ids = false;
        } else {
          fn.safe_ids = tw.safe_ids;
          walk_fn_def(tw, fn);
        }
      }
      function pop_scope(tw, scope) {
        var fn_defs = scope.fn_defs;
        var tangled = scope.may_call_this === return_true ? fn_defs : fn_defs.filter(function(fn) {
          if (fn.safe_ids === false)
            return true;
          fn.safe_ids = tw.safe_ids;
          walk_fn_def(tw, fn);
          return false;
        });
        pop(tw);
        tangled.forEach(function(fn) {
          fn.safe_ids = tw.safe_ids;
          walk_fn_def(tw, fn);
        });
        fn_defs.forEach(function(fn) {
          fn.safe_ids = undefined;
        });
        scope.fn_defs = undefined;
        scope.may_call_this = undefined;
      }
      function push(tw, sequential) {
        var safe_ids = Object.create(tw.safe_ids);
        if (!sequential)
          safe_ids.seq = {};
        tw.safe_ids = safe_ids;
      }
      function pop(tw) {
        tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);
      }
      function mark(tw, def2) {
        tw.safe_ids[def2.id] = {};
      }
      function push_ref(def2, ref) {
        def2.references.push(ref);
        if (def2.last_ref !== false)
          def2.last_ref = ref;
      }
      function safe_to_read(tw, def2) {
        if (def2.single_use == "m")
          return false;
        var safe = tw.safe_ids[def2.id];
        if (safe) {
          var in_order = HOP(tw.safe_ids, def2.id);
          if (!in_order) {
            var seq = tw.safe_ids.seq;
            if (!safe.read) {
              safe.read = seq;
            } else if (safe.read !== seq) {
              safe.read = true;
            }
          }
          if (def2.fixed == null) {
            if (is_arguments(def2))
              return false;
            if (def2.global && def2.name == "arguments")
              return false;
            tw.loop_ids[def2.id] = null;
            def2.fixed = make_node(AST_Undefined, def2.orig[0]);
            if (in_order)
              def2.safe_ids = undefined;
            return true;
          }
          return !safe.assign || safe.assign === tw.safe_ids;
        }
        return def2.fixed instanceof AST_LambdaDefinition;
      }
      function safe_to_assign(tw, def2, declare) {
        if (!declare) {
          if (is_funarg(def2) && def2.scope.uses_arguments && !tw.has_directive("use strict"))
            return false;
          if (!all(def2.orig, function(sym) {
            return !(sym instanceof AST_SymbolConst);
          }))
            return false;
        }
        if (def2.fixed === undefined)
          return declare || all(def2.orig, function(sym) {
            return !(sym instanceof AST_SymbolLet);
          });
        if (def2.fixed === false || def2.fixed === 0)
          return false;
        var safe = tw.safe_ids[def2.id];
        if (def2.safe_ids) {
          def2.safe_ids[def2.id] = false;
          def2.safe_ids = undefined;
          return def2.fixed === null || HOP(tw.safe_ids, def2.id) && !safe.read;
        }
        if (!HOP(tw.safe_ids, def2.id)) {
          if (!safe)
            return false;
          if (safe.read || tw.in_loop) {
            var scope = tw.find_parent(AST_BlockScope);
            if (scope instanceof AST_Class)
              return false;
            if (def2.scope.resolve() !== scope.resolve())
              return false;
          }
          safe.assign = safe.assign && safe.assign !== tw.safe_ids ? true : tw.safe_ids;
        }
        if (def2.fixed != null && safe.read) {
          if (safe.read !== tw.safe_ids.seq)
            return false;
          if (tw.loop_ids[def2.id] !== tw.in_loop)
            return false;
        }
        return safe_to_read(tw, def2) && all(def2.orig, function(sym) {
          return !(sym instanceof AST_SymbolLambda);
        });
      }
      function ref_once(compressor, def2) {
        return compressor.option("unused") && !def2.scope.pinned() && def2.single_use !== false && def2.references.length - def2.recursive_refs == 1 && !(is_funarg(def2) && def2.scope.uses_arguments);
      }
      function is_immutable(value) {
        if (!value)
          return false;
        if (value instanceof AST_Assign) {
          var op = value.operator;
          return op == "=" ? is_immutable(value.right) : !lazy_op[op.slice(0, -1)];
        }
        if (value instanceof AST_Sequence)
          return is_immutable(value.tail_node());
        return value.is_constant() || is_lambda(value) || value instanceof AST_ObjectIdentity;
      }
      function value_in_use(node, parent) {
        if (parent instanceof AST_Array)
          return true;
        if (parent instanceof AST_Binary)
          return lazy_op[parent.operator];
        if (parent instanceof AST_Conditional)
          return parent.condition !== node;
        if (parent instanceof AST_Sequence)
          return parent.tail_node() === node;
        if (parent instanceof AST_Spread)
          return true;
      }
      function mark_escaped(tw, d2, scope, node, value, level, depth) {
        var parent = tw.parent(level);
        if (value && value.is_constant())
          return;
        if (has_escaped(d2, scope, node, parent)) {
          d2.escaped.push(parent);
          if (depth > 1 && !(value && value.is_constant_expression(scope)))
            depth = 1;
          if (!d2.escaped.depth || d2.escaped.depth > depth)
            d2.escaped.depth = depth;
          if (d2.scope.resolve() !== scope.resolve())
            d2.escaped.cross_scope = true;
          if (d2.fixed)
            d2.fixed.escaped = d2.escaped;
          return;
        } else if (value_in_use(node, parent)) {
          mark_escaped(tw, d2, scope, parent, parent, level + 1, depth);
        } else if (parent instanceof AST_ObjectKeyVal && parent.value === node) {
          var obj = tw.parent(level + 1);
          mark_escaped(tw, d2, scope, obj, obj, level + 2, depth);
        } else if (parent instanceof AST_PropAccess && parent.expression === node) {
          value = read_property(value, parent);
          mark_escaped(tw, d2, scope, parent, value, level + 1, depth + 1);
          if (value)
            return;
        }
        if (level > 0)
          return;
        if (parent instanceof AST_Call && parent.expression === node)
          return;
        if (parent instanceof AST_Sequence && parent.tail_node() !== node)
          return;
        if (parent instanceof AST_SimpleStatement)
          return;
        if (parent instanceof AST_Unary && !unary_side_effects[parent.operator])
          return;
        d2.direct_access = true;
        if (d2.fixed)
          d2.fixed.direct_access = true;
      }
      function mark_assignment_to_arguments(node) {
        if (!(node instanceof AST_Sub))
          return;
        var expr = node.expression;
        if (!(expr instanceof AST_SymbolRef))
          return;
        var def2 = expr.definition();
        if (!is_arguments(def2))
          return;
        var key = node.property;
        if (key.is_constant())
          key = key.value;
        if (!(key instanceof AST_Node) && !RE_POSITIVE_INTEGER.test(key))
          return;
        def2.reassigned++;
        (key instanceof AST_Node ? def2.scope.argnames : [def2.scope.argnames[key]]).forEach(function(argname) {
          if (argname instanceof AST_SymbolFunarg)
            argname.definition().fixed = false;
        });
      }
      function make_fixed(save, fn) {
        var prev_save, prev_value;
        return function() {
          var current = save();
          if (prev_save !== current) {
            prev_save = current;
            prev_value = fn(current);
          }
          return prev_value;
        };
      }
      function make_fixed_default(compressor, node, save) {
        var prev_save, prev_seq;
        return function() {
          if (prev_seq === node)
            return node;
          var current = save();
          var ev = fuzzy_eval(compressor, current, true);
          if (ev instanceof AST_Node) {
            prev_seq = node;
          } else if (prev_save !== current) {
            prev_save = current;
            prev_seq = ev === undefined ? make_sequence(node, [current, node.value]) : current;
          }
          return prev_seq;
        };
      }
      function scan_declaration(tw, compressor, lhs, fixed, visit) {
        var scanner = new TreeWalker(function(node) {
          if (node instanceof AST_DefaultValue) {
            reset_flags(node);
            push(tw, true);
            node.value.walk(tw);
            pop(tw);
            var save = fixed;
            if (save)
              fixed = make_fixed_default(compressor, node, save);
            node.name.walk(scanner);
            fixed = save;
            return true;
          }
          if (node instanceof AST_DestructuredArray) {
            reset_flags(node);
            var save = fixed;
            node.elements.forEach(function(node2, index) {
              if (node2 instanceof AST_Hole)
                return reset_flags(node2);
              if (save)
                fixed = make_fixed(save, function(value) {
                  return make_node(AST_Sub, node2, {
                    expression: value,
                    property: make_node(AST_Number, node2, { value: index })
                  });
                });
              node2.walk(scanner);
            });
            if (node.rest) {
              var fixed_node;
              if (save)
                fixed = compressor.option("rests") && make_fixed(save, function(value) {
                  if (!(value instanceof AST_Array))
                    return node;
                  for (var i = 0, len = node.elements.length;i < len; i++) {
                    if (value.elements[i] instanceof AST_Spread)
                      return node;
                  }
                  if (!fixed_node)
                    fixed_node = make_node(AST_Array, node, {});
                  fixed_node.elements = value.elements.slice(len);
                  return fixed_node;
                });
              node.rest.walk(scanner);
            }
            fixed = save;
            return true;
          }
          if (node instanceof AST_DestructuredObject) {
            reset_flags(node);
            var save = fixed;
            node.properties.forEach(function(node2) {
              reset_flags(node2);
              if (node2.key instanceof AST_Node) {
                push(tw);
                node2.key.walk(tw);
                pop(tw);
              }
              if (save)
                fixed = make_fixed(save, function(value) {
                  var key = node2.key;
                  var type = AST_Sub;
                  if (typeof key == "string") {
                    if (is_identifier_string(key)) {
                      type = AST_Dot;
                    } else {
                      key = make_node_from_constant(key, node2);
                    }
                  }
                  return make_node(type, node2, {
                    expression: value,
                    property: key
                  });
                });
              node2.value.walk(scanner);
            });
            if (node.rest) {
              fixed = false;
              node.rest.walk(scanner);
            }
            fixed = save;
            return true;
          }
          visit(node, fixed, function() {
            var save_len = tw.stack.length;
            for (var i = 0, len = scanner.stack.length - 1;i < len; i++) {
              tw.stack.push(scanner.stack[i]);
            }
            node.walk(tw);
            tw.stack.length = save_len;
          });
          return true;
        });
        lhs.walk(scanner);
      }
      function reduce_iife(tw, descend, compressor) {
        var fn = this;
        fn.inlined = false;
        var iife = tw.parent();
        var sequential = !is_async(fn) && !is_generator(fn);
        var hit = !sequential;
        var aborts2 = false;
        fn.walk(new TreeWalker(function(node) {
          if (hit)
            return aborts2 = true;
          if (node instanceof AST_Return)
            return hit = true;
          if (node instanceof AST_Scope && node !== fn)
            return true;
        }));
        if (aborts2)
          push(tw, sequential);
        reset_variables(tw, compressor, fn);
        var safe = !fn.uses_arguments || tw.has_directive("use strict");
        fn.argnames.forEach(function(argname, i) {
          var value = iife.args[i];
          scan_declaration(tw, compressor, argname, function() {
            var j2 = fn.argnames.indexOf(argname);
            var arg = j2 < 0 ? value : iife.args[j2];
            if (arg instanceof AST_Sequence && arg.expressions.length < 2)
              arg = arg.expressions[0];
            return arg || make_node(AST_Undefined, iife);
          }, visit);
        });
        var rest = fn.rest, fixed_node;
        if (rest)
          scan_declaration(tw, compressor, rest, compressor.option("rests") && function() {
            if (fn.rest !== rest)
              return rest;
            if (!fixed_node)
              fixed_node = make_node(AST_Array, fn, {});
            fixed_node.elements = iife.args.slice(fn.argnames.length);
            return fixed_node;
          }, visit);
        walk_lambda(fn, tw);
        var safe_ids = tw.safe_ids;
        pop_scope(tw, fn);
        if (!aborts2)
          tw.safe_ids = safe_ids;
        return true;
        function visit(node, fixed) {
          var d2 = node.definition();
          if (fixed && safe && d2.fixed === undefined) {
            mark(tw, d2);
            tw.loop_ids[d2.id] = tw.in_loop;
            d2.fixed = fixed;
            d2.fixed.assigns = [node];
          } else {
            d2.fixed = false;
          }
        }
      }
      def(AST_Assign, function(tw, descend, compressor) {
        var node = this;
        var left = node.left;
        var right = node.right;
        var ld = left instanceof AST_SymbolRef && left.definition();
        var scan = ld || left instanceof AST_Destructured;
        switch (node.operator) {
          case "=":
            if (left.equals(right) && !left.has_side_effects(compressor)) {
              right.walk(tw);
              walk_prop(left);
              node.redundant = true;
              return true;
            }
            if (ld && right instanceof AST_LambdaExpression) {
              walk_assign();
              right.parent_scope.resolve().fn_defs.push(right);
              right.safe_ids = null;
              if (!ld.fixed || !node.write_only)
                mark_fn_def(tw, ld, right);
              return true;
            }
            if (scan) {
              right.walk(tw);
              walk_assign();
              return true;
            }
            mark_assignment_to_arguments(left);
            return;
          case "&&=":
          case "||=":
          case "??=":
            var lazy = true;
          default:
            if (!scan) {
              mark_assignment_to_arguments(left);
              return walk_lazy();
            }
            ld.assignments++;
            var fixed = ld.fixed;
            if (is_modified(compressor, tw, node, node, 0)) {
              ld.fixed = false;
              return walk_lazy();
            }
            var safe = safe_to_read(tw, ld);
            if (lazy)
              push(tw, true);
            right.walk(tw);
            if (lazy)
              pop(tw);
            if (safe && !left.in_arg && safe_to_assign(tw, ld)) {
              push_ref(ld, left);
              mark(tw, ld);
              if (ld.single_use)
                ld.single_use = false;
              left.fixed = ld.fixed = function() {
                return make_node(AST_Binary, node, {
                  operator: node.operator.slice(0, -1),
                  left: make_ref(left, fixed),
                  right: node.right
                });
              };
              left.fixed.assigns = !fixed || !fixed.assigns ? [ld.orig[0]] : fixed.assigns.slice();
              left.fixed.assigns.push(node);
              left.fixed.to_binary = replace_ref(function(node2) {
                return node2.left;
              }, fixed);
            } else {
              left.walk(tw);
              ld.fixed = false;
            }
            return true;
        }
        function walk_prop(lhs) {
          reset_flags(lhs);
          if (lhs instanceof AST_Dot) {
            walk_prop(lhs.expression);
          } else if (lhs instanceof AST_Sub) {
            walk_prop(lhs.expression);
            lhs.property.walk(tw);
          } else if (lhs instanceof AST_SymbolRef) {
            var d2 = lhs.definition();
            push_ref(d2, lhs);
            if (d2.fixed) {
              lhs.fixed = d2.fixed;
              if (lhs.fixed.assigns) {
                lhs.fixed.assigns.push(node);
              } else {
                lhs.fixed.assigns = [node];
              }
            }
          } else {
            lhs.walk(tw);
          }
        }
        function walk_assign() {
          var recursive = ld && recursive_ref(tw, ld);
          var modified = is_modified(compressor, tw, node, right, 0, is_immutable(right), recursive);
          scan_declaration(tw, compressor, left, function() {
            return node.right;
          }, function(sym, fixed2, walk) {
            if (!(sym instanceof AST_SymbolRef)) {
              mark_assignment_to_arguments(sym);
              walk();
              return;
            }
            var d2 = sym.definition();
            d2.assignments++;
            if (!fixed2 || sym.in_arg || !safe_to_assign(tw, d2)) {
              walk();
              d2.fixed = false;
            } else {
              push_ref(d2, sym);
              mark(tw, d2);
              if (left instanceof AST_Destructured || d2.orig.length == 1 && d2.orig[0] instanceof AST_SymbolDefun) {
                d2.single_use = false;
              }
              tw.loop_ids[d2.id] = tw.in_loop;
              d2.fixed = modified ? 0 : fixed2;
              sym.fixed = fixed2;
              sym.fixed.assigns = [node];
              mark_escaped(tw, d2, sym.scope, node, right, 0, 1);
            }
          });
        }
        function walk_lazy() {
          if (!lazy)
            return;
          left.walk(tw);
          push(tw, true);
          right.walk(tw);
          pop(tw);
          return true;
        }
      });
      def(AST_Binary, function(tw) {
        if (!lazy_op[this.operator])
          return;
        this.left.walk(tw);
        push(tw, true);
        this.right.walk(tw);
        pop(tw);
        return true;
      });
      def(AST_BlockScope, function(tw, descend, compressor) {
        reset_block_variables(tw, compressor, this);
      });
      def(AST_Call, function(tw, descend) {
        var node = this;
        var exp = node.expression;
        if (exp instanceof AST_LambdaExpression) {
          var iife = is_iife_single(node);
          node.args.forEach(function(arg) {
            arg.walk(tw);
            if (arg instanceof AST_Spread)
              iife = false;
          });
          if (iife)
            exp.reduce_vars = reduce_iife;
          exp.walk(tw);
          if (iife)
            delete exp.reduce_vars;
          return true;
        }
        if (node.TYPE == "Call")
          switch (tw.in_boolean_context()) {
            case "d":
              var drop = true;
            case true:
              mark_refs(exp, drop);
          }
        exp.walk(tw);
        var optional = node.optional;
        if (optional)
          push(tw, true);
        node.args.forEach(function(arg) {
          arg.walk(tw);
        });
        if (optional)
          pop(tw);
        var fixed = exp instanceof AST_SymbolRef && exp.fixed_value();
        if (fixed instanceof AST_Lambda) {
          mark_fn_def(tw, exp.definition(), fixed);
        } else {
          tw.find_parent(AST_Scope).may_call_this();
        }
        return true;
        function mark_refs(node2, drop2) {
          if (node2 instanceof AST_Assign) {
            if (node2.operator != "=")
              return;
            mark_refs(node2.left, drop2);
            mark_refs(node2.right, drop2);
          } else if (node2 instanceof AST_Binary) {
            if (!lazy_op[node2.operator])
              return;
            mark_refs(node2.left, drop2);
            mark_refs(node2.right, drop2);
          } else if (node2 instanceof AST_Conditional) {
            mark_refs(node2.consequent, drop2);
            mark_refs(node2.alternative, drop2);
          } else if (node2 instanceof AST_SymbolRef) {
            var def2 = node2.definition();
            def2.bool_return++;
            if (drop2)
              def2.drop_return++;
          }
        }
      });
      def(AST_Class, function(tw, descend, compressor) {
        var node = this;
        reset_block_variables(tw, compressor, node);
        if (node.extends)
          node.extends.walk(tw);
        var props = node.properties.filter(function(prop) {
          reset_flags(prop);
          if (prop.key instanceof AST_Node) {
            tw.push(prop);
            prop.key.walk(tw);
            tw.pop();
          }
          return prop.value;
        });
        if (node.name) {
          var d2 = node.name.definition();
          var parent = tw.parent();
          if (parent instanceof AST_ExportDeclaration || parent instanceof AST_ExportDefault)
            d2.single_use = false;
          if (safe_to_assign(tw, d2, true)) {
            mark(tw, d2);
            tw.loop_ids[d2.id] = tw.in_loop;
            d2.fixed = function() {
              return node;
            };
            d2.fixed.assigns = [node];
            if (!is_safe_lexical(d2))
              d2.single_use = false;
          } else {
            d2.fixed = false;
          }
        }
        props.forEach(function(prop) {
          tw.push(prop);
          if (!prop.static || is_static_field_or_init(prop) && prop.value.contains_this()) {
            push(tw);
            prop.value.walk(tw);
            pop(tw);
          } else {
            prop.value.walk(tw);
          }
          tw.pop();
        });
        return true;
      });
      def(AST_ClassInitBlock, function(tw, descend, compressor) {
        var node = this;
        push(tw, true);
        reset_variables(tw, compressor, node);
        descend();
        pop_scope(tw, node);
        return true;
      });
      def(AST_Conditional, function(tw) {
        this.condition.walk(tw);
        push(tw, true);
        this.consequent.walk(tw);
        pop(tw);
        push(tw, true);
        this.alternative.walk(tw);
        pop(tw);
        return true;
      });
      def(AST_DefaultValue, function(tw) {
        push(tw, true);
        this.value.walk(tw);
        pop(tw);
        this.name.walk(tw);
        return true;
      });
      def(AST_Do, function(tw) {
        var save_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        this.body.walk(tw);
        if (has_loop_control(this, tw.parent())) {
          pop(tw);
          push(tw);
        }
        this.condition.walk(tw);
        pop(tw);
        tw.in_loop = save_loop;
        return true;
      });
      def(AST_For, function(tw, descend, compressor) {
        var node = this;
        reset_block_variables(tw, compressor, node);
        if (node.init)
          node.init.walk(tw);
        var save_loop = tw.in_loop;
        tw.in_loop = node;
        push(tw);
        if (node.condition)
          node.condition.walk(tw);
        node.body.walk(tw);
        if (node.step) {
          if (has_loop_control(node, tw.parent())) {
            pop(tw);
            push(tw);
          }
          node.step.walk(tw);
        }
        pop(tw);
        tw.in_loop = save_loop;
        return true;
      });
      def(AST_ForEnumeration, function(tw, descend, compressor) {
        var node = this;
        reset_block_variables(tw, compressor, node);
        node.object.walk(tw);
        var save_loop = tw.in_loop;
        tw.in_loop = node;
        push(tw);
        var init = node.init;
        if (init instanceof AST_Definitions) {
          init.definitions[0].name.mark_symbol(function(node2) {
            if (node2 instanceof AST_SymbolDeclaration) {
              var def2 = node2.definition();
              def2.assignments++;
              def2.fixed = false;
            }
          }, tw);
        } else if (init instanceof AST_Destructured || init instanceof AST_SymbolRef) {
          init.mark_symbol(function(node2) {
            if (node2 instanceof AST_SymbolRef) {
              var def2 = node2.definition();
              push_ref(def2, node2);
              def2.assignments++;
              if (!node2.is_immutable())
                def2.fixed = false;
            }
          }, tw);
        } else {
          init.walk(tw);
        }
        node.body.walk(tw);
        pop(tw);
        tw.in_loop = save_loop;
        return true;
      });
      def(AST_If, function(tw) {
        this.condition.walk(tw);
        push(tw, true);
        this.body.walk(tw);
        pop(tw);
        if (this.alternative) {
          push(tw, true);
          this.alternative.walk(tw);
          pop(tw);
        }
        return true;
      });
      def(AST_LabeledStatement, function(tw) {
        push(tw, true);
        this.body.walk(tw);
        pop(tw);
        return true;
      });
      def(AST_Lambda, function(tw, descend, compressor) {
        var fn = this;
        if (!safe_to_visit(tw, fn))
          return true;
        if (!push_uniq(tw.fn_visited, fn))
          return true;
        fn.inlined = false;
        push(tw);
        reset_variables(tw, compressor, fn);
        descend();
        pop_scope(tw, fn);
        if (fn.name)
          mark_escaped(tw, fn.name.definition(), fn, fn.name, fn, 0, 1);
        return true;
      });
      def(AST_LambdaDefinition, function(tw, descend, compressor) {
        var fn = this;
        var def2 = fn.name.definition();
        var parent = tw.parent();
        if (parent instanceof AST_ExportDeclaration || parent instanceof AST_ExportDefault)
          def2.single_use = false;
        if (!safe_to_visit(tw, fn))
          return true;
        if (!push_uniq(tw.fn_visited, fn))
          return true;
        fn.inlined = false;
        push(tw);
        reset_variables(tw, compressor, fn);
        descend();
        pop_scope(tw, fn);
        return true;
      });
      def(AST_Sub, function(tw) {
        if (!this.optional)
          return;
        this.expression.walk(tw);
        push(tw, true);
        this.property.walk(tw);
        pop(tw);
        return true;
      });
      def(AST_Switch, function(tw, descend, compressor) {
        var node = this;
        reset_block_variables(tw, compressor, node);
        node.expression.walk(tw);
        var first = true;
        node.body.forEach(function(branch) {
          if (branch instanceof AST_Default)
            return;
          branch.expression.walk(tw);
          if (first) {
            first = false;
            push(tw, true);
          }
        });
        if (!first)
          pop(tw);
        walk_body(node, tw);
        return true;
      });
      def(AST_SwitchBranch, function(tw) {
        push(tw, true);
        walk_body(this, tw);
        pop(tw);
        return true;
      });
      def(AST_SymbolCatch, function() {
        this.definition().fixed = false;
      });
      def(AST_SymbolImport, function() {
        this.definition().fixed = false;
      });
      def(AST_SymbolRef, function(tw, descend, compressor) {
        var ref = this;
        var d2 = ref.definition();
        var fixed = d2.fixed || d2.last_ref && d2.last_ref.fixed;
        push_ref(d2, ref);
        if (d2.references.length == 1 && !d2.fixed && d2.orig[0] instanceof AST_SymbolDefun) {
          tw.loop_ids[d2.id] = tw.in_loop;
        }
        var recursive = recursive_ref(tw, d2);
        if (recursive)
          recursive.enclosed.forEach(function(def2) {
            if (d2 === def2)
              return;
            if (def2.scope.resolve() === recursive)
              return;
            var assigns = def2.fixed && def2.fixed.assigns;
            if (!assigns)
              return;
            if (assigns[assigns.length - 1] instanceof AST_VarDef)
              return;
            var safe = tw.safe_ids[def2.id];
            if (!safe)
              return;
            safe.assign = true;
          });
        if (d2.single_use == "m" && d2.fixed) {
          d2.fixed = 0;
          d2.single_use = false;
        }
        switch (d2.fixed) {
          case 0:
            if (!safe_to_read(tw, d2))
              d2.fixed = false;
          case false:
            var redef = d2.redefined();
            if (redef && cross_scope(d2.scope, ref.scope))
              redef.single_use = false;
            break;
          case undefined:
            d2.fixed = false;
            break;
          default:
            if (!safe_to_read(tw, d2)) {
              d2.fixed = false;
              break;
            }
            if (ref.in_arg && d2.orig[0] instanceof AST_SymbolLambda)
              ref.fixed = d2.scope;
            var value = ref.fixed_value();
            if (recursive) {
              d2.recursive_refs++;
            } else if (value && ref_once(compressor, d2)) {
              d2.in_loop = tw.loop_ids[d2.id] !== tw.in_loop;
              d2.single_use = is_lambda(value) && !value.pinned() && (!d2.in_loop || tw.parent() instanceof AST_Call) || !d2.in_loop && d2.scope === ref.scope.resolve() && value.is_constant_expression();
            } else {
              d2.single_use = false;
            }
            if (is_modified(compressor, tw, ref, value, 0, is_immutable(value), recursive)) {
              if (d2.single_use) {
                d2.single_use = "m";
              } else {
                d2.fixed = 0;
              }
            }
            if (d2.fixed && tw.loop_ids[d2.id] !== tw.in_loop)
              d2.cross_loop = true;
            mark_escaped(tw, d2, ref.scope, ref, value, 0, 1);
            break;
        }
        if (!ref.fixed)
          ref.fixed = d2.fixed === 0 ? fixed : d2.fixed;
        var parent;
        if (value instanceof AST_Lambda && !((parent = tw.parent()) instanceof AST_Call && parent.expression === ref)) {
          mark_fn_def(tw, d2, value);
        }
      });
      def(AST_Template, function(tw, descend) {
        var node = this;
        var tag = node.tag;
        if (!tag)
          return;
        if (tag instanceof AST_LambdaExpression) {
          node.expressions.forEach(function(exp) {
            exp.walk(tw);
          });
          tag.walk(tw);
          return true;
        }
        tag.walk(tw);
        node.expressions.forEach(function(exp) {
          exp.walk(tw);
        });
        var fixed = tag instanceof AST_SymbolRef && tag.fixed_value();
        if (fixed instanceof AST_Lambda) {
          mark_fn_def(tw, tag.definition(), fixed);
        } else {
          tw.find_parent(AST_Scope).may_call_this();
        }
        return true;
      });
      def(AST_Toplevel, function(tw, descend, compressor) {
        var node = this;
        node.globals.each(function(def2) {
          reset_def(tw, compressor, def2);
        });
        push(tw, true);
        reset_variables(tw, compressor, node);
        descend();
        pop_scope(tw, node);
        return true;
      });
      def(AST_Try, function(tw, descend, compressor) {
        var node = this;
        reset_block_variables(tw, compressor, node);
        push(tw, true);
        walk_body(node, tw);
        pop(tw);
        if (node.bcatch) {
          push(tw, true);
          node.bcatch.walk(tw);
          pop(tw);
        }
        if (node.bfinally)
          node.bfinally.walk(tw);
        return true;
      });
      def(AST_Unary, function(tw, descend) {
        var node = this;
        if (!UNARY_POSTFIX[node.operator])
          return;
        var exp = node.expression;
        if (!(exp instanceof AST_SymbolRef)) {
          mark_assignment_to_arguments(exp);
          return;
        }
        var d2 = exp.definition();
        d2.assignments++;
        var fixed = d2.fixed;
        if (safe_to_read(tw, d2) && !exp.in_arg && safe_to_assign(tw, d2)) {
          push_ref(d2, exp);
          mark(tw, d2);
          if (d2.single_use)
            d2.single_use = false;
          d2.fixed = function() {
            return make_node(AST_Binary, node, {
              operator: node.operator.slice(0, -1),
              left: make_node(AST_UnaryPrefix, node, {
                operator: "+",
                expression: make_ref(exp, fixed)
              }),
              right: make_node(AST_Number, node, { value: 1 })
            });
          };
          d2.fixed.assigns = fixed && fixed.assigns ? fixed.assigns.slice() : [];
          d2.fixed.assigns.push(node);
          if (node instanceof AST_UnaryPrefix) {
            exp.fixed = d2.fixed;
          } else {
            exp.fixed = function() {
              return make_node(AST_UnaryPrefix, node, {
                operator: "+",
                expression: make_ref(exp, fixed)
              });
            };
            exp.fixed.assigns = fixed && fixed.assigns;
            exp.fixed.to_prefix = replace_ref(function(node2) {
              return node2.expression;
            }, d2.fixed);
          }
        } else {
          exp.walk(tw);
          d2.fixed = false;
        }
        return true;
      });
      def(AST_VarDef, function(tw, descend, compressor) {
        var node = this;
        var value = node.value;
        if (value instanceof AST_LambdaExpression && node.name instanceof AST_SymbolDeclaration) {
          walk_defn();
          value.parent_scope.resolve().fn_defs.push(value);
          value.safe_ids = null;
          var ld = node.name.definition();
          if (!ld.fixed)
            mark_fn_def(tw, ld, value);
        } else if (value) {
          value.walk(tw);
          walk_defn();
        } else if (tw.parent() instanceof AST_Let) {
          walk_defn();
        }
        return true;
        function walk_defn() {
          scan_declaration(tw, compressor, node.name, function() {
            return node.value || make_node(AST_Undefined, node);
          }, function(name, fixed) {
            var d2 = name.definition();
            if (fixed && safe_to_assign(tw, d2, true)) {
              mark(tw, d2);
              tw.loop_ids[d2.id] = tw.in_loop;
              d2.fixed = fixed;
              d2.fixed.assigns = [node];
              if (name instanceof AST_SymbolConst && d2.redefined() || !(can_drop_symbol(name) || is_safe_lexical(d2))) {
                d2.single_use = false;
              }
            } else {
              d2.fixed = false;
            }
          });
        }
      });
      def(AST_While, function(tw, descend) {
        var save_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        descend();
        pop(tw);
        tw.in_loop = save_loop;
        return true;
      });
    })(function(node, func) {
      node.DEFMETHOD("reduce_vars", func);
    });
    function reset_flags(node) {
      node._squeezed = false;
      node._optimized = false;
      if (node instanceof AST_BlockScope)
        node._var_names = undefined;
      if (node instanceof AST_SymbolRef)
        node.fixed = undefined;
    }
    AST_Toplevel.DEFMETHOD("reset_opt_flags", function(compressor) {
      var tw = new TreeWalker(compressor.option("reduce_vars") ? function(node, descend) {
        reset_flags(node);
        return node.reduce_vars(tw, descend, compressor);
      } : reset_flags);
      tw.fn_scanning = null;
      tw.fn_visited = [];
      tw.in_loop = null;
      tw.loop_ids = Object.create(null);
      tw.safe_ids = Object.create(null);
      tw.safe_ids.seq = {};
      this.walk(tw);
    });
    AST_Symbol.DEFMETHOD("fixed_value", function(ref_only) {
      var def = this.definition();
      var fixed = def.fixed;
      if (fixed) {
        if (this.fixed)
          fixed = this.fixed;
        return (fixed instanceof AST_Node ? fixed : fixed()).tail_node();
      }
      fixed = fixed === 0 && this.fixed;
      if (!fixed)
        return fixed;
      var value = (fixed instanceof AST_Node ? fixed : fixed()).tail_node();
      if (ref_only && def.escaped.depth != 1 && is_object(value, true))
        return value;
      if (value.is_constant())
        return value;
    });
    AST_SymbolRef.DEFMETHOD("is_immutable", function() {
      var def = this.redef || this.definition();
      if (!(def.orig[0] instanceof AST_SymbolLambda))
        return false;
      if (def.orig.length == 1)
        return true;
      if (!this.in_arg)
        return false;
      return !(def.orig[1] instanceof AST_SymbolFunarg);
    });
    AST_Node.DEFMETHOD("convert_symbol", noop);
    function convert_destructured(type, process2) {
      return this.transform(new TreeTransformer(function(node, descend) {
        if (node instanceof AST_DefaultValue) {
          node = node.clone();
          node.name = node.name.transform(this);
          return node;
        }
        if (node instanceof AST_Destructured) {
          node = node.clone();
          descend(node, this);
          return node;
        }
        if (node instanceof AST_DestructuredKeyVal) {
          node = node.clone();
          node.value = node.value.transform(this);
          return node;
        }
        return node.convert_symbol(type, process2);
      }));
    }
    AST_DefaultValue.DEFMETHOD("convert_symbol", convert_destructured);
    AST_Destructured.DEFMETHOD("convert_symbol", convert_destructured);
    function convert_symbol(type, process2) {
      var node = make_node(type, this);
      return process2(node, this) || node;
    }
    AST_SymbolDeclaration.DEFMETHOD("convert_symbol", convert_symbol);
    AST_SymbolRef.DEFMETHOD("convert_symbol", convert_symbol);
    function process_to_assign(ref) {
      var def = ref.definition();
      def.assignments++;
      def.references.push(ref);
    }
    function mark_destructured(process2, tw) {
      var marker = new TreeWalker(function(node) {
        if (node instanceof AST_DefaultValue) {
          node.value.walk(tw);
          node.name.walk(marker);
          return true;
        }
        if (node instanceof AST_DestructuredKeyVal) {
          if (node.key instanceof AST_Node)
            node.key.walk(tw);
          node.value.walk(marker);
          return true;
        }
        return process2(node);
      });
      this.walk(marker);
    }
    AST_DefaultValue.DEFMETHOD("mark_symbol", mark_destructured);
    AST_Destructured.DEFMETHOD("mark_symbol", mark_destructured);
    function mark_symbol(process2) {
      return process2(this);
    }
    AST_SymbolDeclaration.DEFMETHOD("mark_symbol", mark_symbol);
    AST_SymbolRef.DEFMETHOD("mark_symbol", mark_symbol);
    AST_Node.DEFMETHOD("match_symbol", function(predicate) {
      return predicate(this);
    });
    function match_destructured(predicate, ignore_side_effects) {
      var found = false;
      var tw = new TreeWalker(function(node) {
        if (found)
          return true;
        if (node instanceof AST_DefaultValue) {
          if (!ignore_side_effects)
            return found = true;
          node.name.walk(tw);
          return true;
        }
        if (node instanceof AST_DestructuredKeyVal) {
          if (!ignore_side_effects && node.key instanceof AST_Node)
            return found = true;
          node.value.walk(tw);
          return true;
        }
        if (predicate(node))
          return found = true;
      });
      this.walk(tw);
      return found;
    }
    AST_DefaultValue.DEFMETHOD("match_symbol", match_destructured);
    AST_Destructured.DEFMETHOD("match_symbol", match_destructured);
    function in_async_generator(scope) {
      return scope instanceof AST_AsyncGeneratorDefun || scope instanceof AST_AsyncGeneratorFunction;
    }
    function find_scope(compressor) {
      var level = 0, node = compressor.self();
      do {
        if (node.variables)
          return node;
      } while (node = compressor.parent(level++));
    }
    function find_try(compressor, level, node, scope, may_throw, sync) {
      for (var parent;parent = compressor.parent(level++); node = parent) {
        if (parent === scope)
          return false;
        if (sync && parent instanceof AST_Lambda) {
          if (parent.name || is_async(parent) || is_generator(parent))
            return true;
        } else if (parent instanceof AST_Try) {
          if (parent.bfinally && parent.bfinally !== node)
            return true;
          if (may_throw && parent.bcatch && parent.bcatch !== node)
            return true;
        }
      }
      return false;
    }
    var identifier_atom = makePredicate("Infinity NaN undefined");
    function is_lhs_read_only(lhs, compressor) {
      if (lhs instanceof AST_Atom)
        return true;
      if (lhs instanceof AST_ObjectIdentity)
        return true;
      if (lhs instanceof AST_PropAccess) {
        if (lhs.property === "__proto__")
          return true;
        lhs = lhs.expression;
        if (lhs instanceof AST_SymbolRef) {
          if (lhs.is_immutable())
            return false;
          lhs = lhs.fixed_value();
        }
        if (!lhs)
          return true;
        if (lhs.tail_node().is_constant())
          return true;
        return is_lhs_read_only(lhs, compressor);
      }
      if (lhs instanceof AST_SymbolRef) {
        if (lhs.is_immutable())
          return true;
        var def = lhs.definition();
        return compressor.exposed(def) && identifier_atom[def.name];
      }
      return false;
    }
    function make_node(ctor, orig, props) {
      if (props) {
        props.start = orig.start;
        props.end = orig.end;
      } else {
        props = orig;
      }
      return new ctor(props);
    }
    function make_sequence(orig, expressions) {
      if (expressions.length == 1)
        return expressions[0];
      return make_node(AST_Sequence, orig, { expressions: expressions.reduce(merge_sequence, []) });
    }
    function make_node_from_constant(val, orig) {
      switch (typeof val) {
        case "string":
          return make_node(AST_String, orig, { value: val });
        case "number":
          if (isNaN(val))
            return make_node(AST_NaN, orig);
          if (isFinite(val)) {
            return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {
              operator: "-",
              expression: make_node(AST_Number, orig, { value: -val })
            }) : make_node(AST_Number, orig, { value: val });
          }
          return val < 0 ? make_node(AST_UnaryPrefix, orig, {
            operator: "-",
            expression: make_node(AST_Infinity, orig)
          }) : make_node(AST_Infinity, orig);
        case "boolean":
          return make_node(val ? AST_True : AST_False, orig);
        case "undefined":
          return make_node(AST_Undefined, orig);
        default:
          if (val === null) {
            return make_node(AST_Null, orig);
          }
          if (val instanceof RegExp) {
            return make_node(AST_RegExp, orig, { value: val });
          }
          throw new Error(string_template("Can't handle constant of type: {type}", { type: typeof val }));
      }
    }
    function needs_unbinding(val) {
      return val instanceof AST_PropAccess || is_undeclared_ref(val) && val.name == "eval";
    }
    function maintain_this_binding(parent, orig, val) {
      var wrap = false;
      if (parent.TYPE == "Call") {
        wrap = parent.expression === orig && needs_unbinding(val);
      } else if (parent instanceof AST_Template) {
        wrap = parent.tag === orig && needs_unbinding(val);
      } else if (parent instanceof AST_UnaryPrefix) {
        wrap = parent.operator == "delete" || parent.operator == "typeof" && is_undeclared_ref(val);
      }
      return wrap ? make_sequence(orig, [make_node(AST_Number, orig, { value: 0 }), val]) : val;
    }
    function merge_expression(base, target) {
      var fixed_by_id = new Dictionary;
      base.walk(new TreeWalker(function(node) {
        if (!(node instanceof AST_SymbolRef))
          return;
        var def = node.definition();
        var fixed = node.fixed;
        if (!fixed || !fixed_by_id.has(def.id)) {
          fixed_by_id.set(def.id, fixed);
        } else if (fixed_by_id.get(def.id) !== fixed) {
          fixed_by_id.set(def.id, false);
        }
      }));
      if (fixed_by_id.size() > 0)
        target.walk(new TreeWalker(function(node) {
          if (!(node instanceof AST_SymbolRef))
            return;
          var def = node.definition();
          var fixed = node.fixed;
          if (!fixed || !fixed_by_id.has(def.id))
            return;
          if (fixed_by_id.get(def.id) !== fixed)
            node.fixed = false;
        }));
      return target;
    }
    function merge_sequence(array, node) {
      if (node instanceof AST_Sequence) {
        [].push.apply(array, node.expressions);
      } else {
        array.push(node);
      }
      return array;
    }
    function is_lexical_definition(stat) {
      return stat instanceof AST_Const || stat instanceof AST_DefClass || stat instanceof AST_Let;
    }
    function safe_to_trim(stat) {
      if (stat instanceof AST_LambdaDefinition) {
        var def = stat.name.definition();
        var scope = stat.name.scope;
        return def.scope === scope || all(def.references, function(ref) {
          var s2 = ref.scope;
          do {
            if (s2 === scope)
              return true;
          } while (s2 = s2.parent_scope);
        });
      }
      return !is_lexical_definition(stat);
    }
    function as_statement_array(thing) {
      if (thing === null)
        return [];
      if (thing instanceof AST_BlockStatement)
        return all(thing.body, safe_to_trim) ? thing.body : [thing];
      if (thing instanceof AST_EmptyStatement)
        return [];
      if (is_statement(thing))
        return [thing];
      throw new Error("Can't convert thing to statement array");
    }
    function is_empty(thing) {
      if (thing === null)
        return true;
      if (thing instanceof AST_EmptyStatement)
        return true;
      if (thing instanceof AST_BlockStatement)
        return thing.body.length == 0;
      return false;
    }
    function has_declarations_only(block) {
      return all(block.body, function(stat) {
        return is_empty(stat) || stat instanceof AST_Defun || stat instanceof AST_Var && declarations_only(stat);
      });
    }
    function loop_body(x2) {
      if (x2 instanceof AST_IterationStatement) {
        return x2.body instanceof AST_BlockStatement ? x2.body : x2;
      }
      return x2;
    }
    function is_iife_call(node) {
      if (node.TYPE != "Call")
        return false;
      do {
        node = node.expression;
      } while (node instanceof AST_PropAccess);
      return node instanceof AST_LambdaExpression ? !is_arrow(node) : is_iife_call(node);
    }
    function is_iife_single(call) {
      var exp = call.expression;
      if (exp.name)
        return false;
      if (!(call instanceof AST_New))
        return true;
      var found = false;
      exp.walk(new TreeWalker(function(node) {
        if (found)
          return true;
        if (node instanceof AST_NewTarget)
          return found = true;
        if (node instanceof AST_Scope && node !== exp)
          return true;
      }));
      return !found;
    }
    function is_undeclared_ref(node) {
      return node instanceof AST_SymbolRef && node.definition().undeclared;
    }
    var global_names = makePredicate("Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Map Math Number parseFloat parseInt RangeError ReferenceError RegExp Object Set setInterval setTimeout String SyntaxError TypeError unescape URIError WeakMap WeakSet");
    AST_SymbolRef.DEFMETHOD("is_declared", function(compressor) {
      return this.defined || !this.definition().undeclared || compressor.option("unsafe") && global_names[this.name];
    });
    function is_static_field_or_init(prop) {
      return prop.static && prop.value && (prop instanceof AST_ClassField || prop instanceof AST_ClassInit);
    }
    function declarations_only(node) {
      return all(node.definitions, function(var_def) {
        return !var_def.value;
      });
    }
    function is_declaration(stat, lexical) {
      if (stat instanceof AST_DefClass)
        return lexical && !stat.extends && all(stat.properties, function(prop) {
          if (prop.key instanceof AST_Node)
            return false;
          return !is_static_field_or_init(prop);
        });
      if (stat instanceof AST_Definitions)
        return (lexical || stat instanceof AST_Var) && declarations_only(stat);
      if (stat instanceof AST_ExportDeclaration)
        return is_declaration(stat.body, lexical);
      if (stat instanceof AST_ExportDefault)
        return is_declaration(stat.body, lexical);
      return stat instanceof AST_LambdaDefinition;
    }
    function is_last_statement(body, stat) {
      var index = body.lastIndexOf(stat);
      if (index < 0)
        return false;
      while (++index < body.length) {
        if (!is_declaration(body[index], true))
          return false;
      }
      return true;
    }
    function patch_for_init(node, in_list) {
      var block;
      if (node.init instanceof AST_BlockStatement) {
        block = node.init;
        node.init = block.body.pop();
        block.body.push(node);
      }
      if (node.init instanceof AST_Defun) {
        if (!block)
          block = make_node(AST_BlockStatement, node, { body: [node] });
        block.body.splice(-1, 0, node.init);
        node.init = null;
      } else if (node.init instanceof AST_SimpleStatement) {
        node.init = node.init.body;
      } else if (is_empty(node.init)) {
        node.init = null;
      }
      if (!block)
        return;
      return in_list ? List.splice(block.body) : block;
    }
    function tighten_body(statements, compressor) {
      var in_lambda = last_of(compressor, function(node) {
        return node instanceof AST_Lambda;
      });
      var block_scope, iife_in_try, in_iife_single, in_loop, in_try, scope;
      find_loop_scope_try();
      var changed, last_changed, max_iter = 10;
      do {
        last_changed = changed;
        changed = 0;
        if (eliminate_spurious_blocks(statements))
          changed = 1;
        if (!changed && last_changed == 1)
          break;
        if (compressor.option("dead_code")) {
          if (eliminate_dead_code(statements, compressor))
            changed = 2;
          if (!changed && last_changed == 2)
            break;
        }
        if (compressor.option("if_return")) {
          if (handle_if_return(statements, compressor))
            changed = 3;
          if (!changed && last_changed == 3)
            break;
        }
        if (compressor.option("awaits") && compressor.option("side_effects")) {
          if (trim_awaits(statements, compressor))
            changed = 4;
          if (!changed && last_changed == 4)
            break;
        }
        if (compressor.option("inline") >= 4) {
          if (inline_iife(statements, compressor))
            changed = 5;
          if (!changed && last_changed == 5)
            break;
        }
        if (compressor.sequences_limit > 0) {
          if (sequencesize(statements, compressor))
            changed = 6;
          if (!changed && last_changed == 6)
            break;
          if (sequencesize_2(statements, compressor))
            changed = 7;
          if (!changed && last_changed == 7)
            break;
        }
        if (compressor.option("join_vars")) {
          if (join_consecutive_vars(statements))
            changed = 8;
          if (!changed && last_changed == 8)
            break;
        }
        if (compressor.option("collapse_vars")) {
          if (collapse(statements, compressor))
            changed = 9;
        }
      } while (changed && max_iter-- > 0);
      return statements;
      function last_of(compressor2, predicate) {
        var block = compressor2.self(), level = 0, stat;
        do {
          if (block instanceof AST_Catch) {
            block = compressor2.parent(level++);
          } else if (block instanceof AST_LabeledStatement) {
            block = block.body;
          } else if (block instanceof AST_SwitchBranch) {
            var branches = compressor2.parent(level);
            if (branches.body[branches.body.length - 1] === block || has_break(block.body)) {
              level++;
              block = branches;
            }
          }
          do {
            stat = block;
            if (predicate(stat))
              return stat;
            block = compressor2.parent(level++);
          } while (block instanceof AST_If);
        } while (stat && (block instanceof AST_BlockStatement || block instanceof AST_Catch || block instanceof AST_Scope || block instanceof AST_SwitchBranch || block instanceof AST_Try) && is_last_statement(block.body, stat));
        function has_break(stats) {
          for (var i = stats.length;--i >= 0; ) {
            if (stats[i] instanceof AST_Break)
              return true;
          }
          return false;
        }
      }
      function find_loop_scope_try() {
        var node = compressor.self(), level = 0;
        do {
          if (!block_scope && node.variables)
            block_scope = node;
          if (node instanceof AST_Catch) {
            if (compressor.parent(level).bfinally) {
              if (!in_try)
                in_try = {};
              in_try.bfinally = true;
            }
            level++;
          } else if (node instanceof AST_Finally) {
            level++;
          } else if (node instanceof AST_IterationStatement) {
            in_loop = true;
          } else if (node instanceof AST_Scope) {
            scope = node;
            break;
          } else if (node instanceof AST_Try) {
            if (!in_try)
              in_try = {};
            if (node.bcatch)
              in_try.bcatch = true;
            if (node.bfinally)
              in_try.bfinally = true;
          }
        } while (node = compressor.parent(level++));
      }
      function collapse(statements2, compressor2) {
        if (scope.pinned())
          return;
        var args;
        var assignments = new Dictionary;
        var candidates = [];
        var changed2 = false;
        var declare_only = new Dictionary;
        var force_single;
        var stat_index = statements2.length;
        var scanner = new TreeTransformer(function(node, descend) {
          if (abort)
            return node;
          if (!hit) {
            if (node !== hit_stack[hit_index])
              return node;
            hit_index++;
            if (hit_index < hit_stack.length)
              return handle_custom_scan_order(node, scanner);
            hit = true;
            stop_after = (value_def ? find_stop_value : find_stop)(node, 0);
            if (stop_after === node)
              abort = true;
            return node;
          }
          var parent = scanner.parent();
          if (!stop_if_hit && in_conditional(node, parent)) {
            stop_if_hit = parent;
          }
          if (compound && scan_lhs && can_replace && !stop_if_hit && node instanceof AST_Assign && node.operator != "=" && node.left.equals(lhs)) {
            replaced++;
            changed2 = true;
            AST_Node.info("Cascading {this} [{start}]", node);
            can_replace = false;
            lvalues = get_lvalues(lhs);
            node.right.transform(scanner);
            clear_write_only(candidate);
            var folded;
            if (abort) {
              folded = candidate;
            } else {
              abort = true;
              folded = make_node(AST_Binary, candidate, {
                operator: compound,
                left: lhs.fixed && lhs.definition().fixed ? lhs.fixed.to_binary(candidate) : lhs,
                right: rvalue
              });
            }
            return make_node(AST_Assign, node, {
              operator: "=",
              left: node.left,
              right: make_node(AST_Binary, node, {
                operator: node.operator.slice(0, -1),
                left: folded,
                right: node.right
              })
            });
          }
          if (should_stop(node, parent)) {
            abort = true;
            return node;
          }
          if (node.single_use)
            return node;
          var hit_rhs;
          if (!(node instanceof AST_SymbolDeclaration) && (scan_lhs && lhs.equals(node) || scan_rhs && (hit_rhs = scan_rhs(node, this)))) {
            if (!can_replace || stop_if_hit && (hit_rhs || !lhs_local || !replace_all)) {
              if (!hit_rhs && !value_def)
                abort = true;
              return node;
            }
            if (is_lhs(node, parent)) {
              if (value_def && !hit_rhs)
                assign_used = true;
              return node;
            }
            if (!hit_rhs && verify_ref && node.fixed !== lhs.fixed) {
              abort = true;
              return node;
            }
            if (value_def) {
              if (stop_if_hit && assign_pos == 0)
                assign_pos = remaining - replaced;
              if (!hit_rhs)
                replaced++;
              return node;
            }
            replaced++;
            changed2 = abort = true;
            AST_Node.info("Collapsing {this} [{start}]", node);
            if (candidate.TYPE == "Binary") {
              update_symbols(candidate, node);
              return make_node(AST_Assign, candidate, {
                operator: "=",
                left: candidate.right.left,
                right: candidate.operator == "&&" ? make_node(AST_Conditional, candidate, {
                  condition: candidate.left,
                  consequent: candidate.right.right,
                  alternative: node
                }) : make_node(AST_Conditional, candidate, {
                  condition: candidate.left,
                  consequent: node,
                  alternative: candidate.right.right
                })
              });
            }
            if (candidate instanceof AST_UnaryPostfix)
              return make_node(AST_UnaryPrefix, candidate, {
                operator: candidate.operator,
                expression: lhs.fixed && lhs.definition().fixed ? lhs.fixed.to_prefix(candidate) : lhs
              });
            if (candidate instanceof AST_UnaryPrefix) {
              clear_write_only(candidate);
              return candidate;
            }
            update_symbols(rvalue, node);
            if (candidate instanceof AST_VarDef) {
              var def2 = candidate.name.definition();
              if (def2.references.length - def2.replaced == 1 && !compressor2.exposed(def2)) {
                def2.replaced++;
                return maintain_this_binding(parent, node, rvalue);
              }
              return make_node(AST_Assign, candidate, {
                operator: "=",
                left: node,
                right: rvalue
              });
            }
            clear_write_only(rvalue);
            var assign = candidate.clone();
            assign.right = rvalue;
            return assign;
          }
          if (should_stop_ref(node, parent)) {
            abort = true;
            return node;
          }
          if (is_last_node(node, parent) || may_throw(node)) {
            stop_after = node;
            if (node instanceof AST_Scope)
              abort = true;
          }
          if (node instanceof AST_Accessor) {
            var replace = can_replace;
            can_replace = false;
            descend(node, scanner);
            can_replace = replace;
            return signal_abort(node);
          }
          if (node instanceof AST_Destructured) {
            var replace = can_replace;
            can_replace = false;
            descend(node, scanner);
            can_replace = replace;
            return signal_abort(node);
          }
          if (node instanceof AST_DefaultValue) {
            node.name = node.name.transform(scanner);
            var replace = can_replace;
            can_replace = false;
            node.value = node.value.transform(scanner);
            can_replace = replace;
            return signal_abort(node);
          }
          if (node instanceof AST_BlockScope && !(node instanceof AST_Scope) && !(node.variables && node.variables.all(function(def3) {
            return !enclosed.has(def3.name) && !lvalues.has(def3.name);
          }))) {
            var replace = can_replace;
            can_replace = false;
            if (!handle_custom_scan_order(node, scanner))
              descend(node, scanner);
            can_replace = replace;
            return signal_abort(node);
          }
          if (handle_custom_scan_order(node, scanner))
            return signal_abort(node);
        }, signal_abort);
        var multi_replacer = new TreeTransformer(function(node) {
          if (abort)
            return node;
          if (!hit) {
            if (node !== hit_stack[hit_index])
              return node;
            hit_index++;
            switch (hit_stack.length - hit_index) {
              case 0:
                hit = true;
                if (assign_used)
                  return node;
                if (node !== candidate)
                  return node;
                if (node instanceof AST_VarDef)
                  return node;
                def.replaced++;
                var parent = multi_replacer.parent();
                if (parent instanceof AST_Sequence && parent.tail_node() !== node) {
                  value_def.replaced++;
                  if (rvalue === rhs_value)
                    return List.skip;
                  return make_sequence(rhs_value, rhs_value.expressions.slice(0, -1));
                }
                return rvalue;
              case 1:
                if (!assign_used && node.body === candidate) {
                  hit = true;
                  def.replaced++;
                  value_def.replaced++;
                  return null;
                }
              default:
                return handle_custom_scan_order(node, multi_replacer);
            }
          }
          if (node instanceof AST_SymbolRef && node.definition() === def) {
            if (is_lhs(node, multi_replacer.parent()))
              return node;
            if (!--replaced)
              abort = true;
            AST_Node.info("Replacing {this} [{start}]", node);
            var ref = rvalue.clone();
            ref.scope = node.scope;
            ref.reference();
            if (replaced == assign_pos) {
              abort = true;
              return make_node(AST_Assign, candidate, {
                operator: "=",
                left: node,
                right: ref
              });
            }
            def.replaced++;
            return ref;
          }
          if (node instanceof AST_Default || node instanceof AST_Scope)
            return node;
        }, function(node) {
          return patch_sequence(node, multi_replacer);
        });
        while (--stat_index >= 0) {
          if (stat_index == 0 && compressor2.option("unused"))
            extract_args();
          var hit_stack = [];
          extract_candidates(statements2[stat_index]);
          while (candidates.length > 0) {
            hit_stack = candidates.pop();
            var hit_index = 0;
            var candidate = hit_stack[hit_stack.length - 1];
            var assign_pos = -1;
            var assign_used = false;
            var verify_ref = false;
            var remaining;
            var value_def = null;
            var stop_after = null;
            var stop_if_hit = null;
            var lhs = get_lhs(candidate);
            var side_effects = lhs && lhs.has_side_effects(compressor2);
            var scan_lhs = lhs && (!side_effects || lhs instanceof AST_SymbolRef) && !is_lhs_read_only(lhs, compressor2);
            var scan_rhs = foldable(candidate);
            if (!scan_lhs && !scan_rhs)
              continue;
            var compound = candidate instanceof AST_Assign && candidate.operator.slice(0, -1);
            var funarg = candidate.name instanceof AST_SymbolFunarg;
            var may_throw = return_false;
            if (candidate.may_throw(compressor2)) {
              if (funarg && is_async(scope))
                continue;
              may_throw = in_try ? function(node) {
                return node.has_side_effects(compressor2);
              } : side_effects_external;
            }
            var read_toplevel = false;
            var modify_toplevel = false;
            var enclosed = new Dictionary;
            var well_defined = true;
            var lvalues = get_lvalues(candidate);
            var lhs_local = is_lhs_local(lhs);
            var rhs_value = get_rvalue(candidate);
            var rvalue = rhs_value;
            if (!side_effects) {
              if (!compound && rvalue instanceof AST_Sequence)
                rvalue = rvalue.tail_node();
              side_effects = value_has_side_effects();
            }
            var check_destructured = in_try || !lhs_local ? function(node) {
              return node instanceof AST_Destructured;
            } : return_false;
            var replace_all = replace_all_symbols(candidate);
            var hit = funarg;
            var abort = false;
            var replaced = 0;
            var can_replace = !args || !hit;
            if (!can_replace) {
              for (var j2 = candidate.arg_index + 1;!abort && j2 < args.length; j2++) {
                if (args[j2])
                  args[j2].transform(scanner);
              }
              can_replace = true;
            }
            for (var i = stat_index;!abort && i < statements2.length; i++) {
              statements2[i].transform(scanner);
            }
            if (value_def) {
              if (!replaced || remaining > replaced + assign_used) {
                candidates.push(hit_stack);
                force_single = true;
                continue;
              }
              if (replaced == assign_pos)
                assign_used = true;
              var def = lhs.definition();
              abort = false;
              hit_index = 0;
              hit = funarg;
              for (var i = stat_index;!abort && i < statements2.length; i++) {
                if (!statements2[i].transform(multi_replacer))
                  statements2.splice(i--, 1);
              }
              replaced = candidate instanceof AST_VarDef && candidate === hit_stack[hit_stack.length - 1] && def.references.length == def.replaced && !compressor2.exposed(def);
              value_def.last_ref = false;
              value_def.single_use = false;
              changed2 = true;
            }
            if (replaced)
              remove_candidate(candidate);
          }
        }
        return changed2;
        function signal_abort(node) {
          if (abort)
            return node;
          if (stop_after === node)
            abort = true;
          if (stop_if_hit === node)
            stop_if_hit = null;
          return node;
        }
        function handle_custom_scan_order(node, tt2) {
          if (!(node instanceof AST_BlockScope))
            return;
          if (node instanceof AST_Scope)
            return node;
          if (node instanceof AST_Class) {
            if (node.name)
              node.name = node.name.transform(tt2);
            if (!abort && node.extends)
              node.extends = node.extends.transform(tt2);
            var fields = [], stats = [];
            for (var i2 = 0;!abort && i2 < node.properties.length; i2++) {
              var prop = node.properties[i2];
              if (prop.key instanceof AST_Node)
                prop.key = prop.key.transform(tt2);
              if (!prop.static)
                continue;
              if (prop instanceof AST_ClassField) {
                if (prop.value)
                  fields.push(prop);
              } else if (prop instanceof AST_ClassInit) {
                [].push.apply(stats, prop.value.body);
              }
            }
            for (var i2 = 0;!abort && i2 < stats.length; i2++) {
              stats[i2].transform(tt2);
            }
            for (var i2 = 0;!abort && i2 < fields.length; i2++) {
              var prop = fields[i2];
              prop.value = prop.value.transform(tt2);
            }
            return node;
          }
          if (node instanceof AST_ForEnumeration) {
            node.object = node.object.transform(tt2);
            abort = true;
            return node;
          }
          if (node instanceof AST_Switch) {
            node.expression = node.expression.transform(tt2);
            for (var i2 = 0;!abort && i2 < node.body.length; i2++) {
              var branch = node.body[i2];
              if (branch instanceof AST_Case) {
                if (!hit) {
                  if (branch !== hit_stack[hit_index])
                    continue;
                  hit_index++;
                }
                branch.expression = branch.expression.transform(tt2);
                if (!replace_all)
                  break;
                scan_rhs = false;
              }
            }
            abort = true;
            return node;
          }
        }
        function is_direct_assignment(node, parent) {
          if (parent instanceof AST_Assign)
            return parent.operator == "=" && parent.left === node;
          if (parent instanceof AST_DefaultValue)
            return parent.name === node;
          if (parent instanceof AST_DestructuredArray)
            return true;
          if (parent instanceof AST_DestructuredKeyVal)
            return parent.value === node;
        }
        function should_stop(node, parent) {
          if (node === rvalue)
            return true;
          if (parent instanceof AST_For) {
            if (node !== parent.init)
              return true;
          }
          if (node instanceof AST_Assign) {
            return node.operator != "=" && lhs.equals(node.left);
          }
          if (node instanceof AST_Call) {
            if (!(lhs instanceof AST_PropAccess))
              return false;
            if (!lhs.equals(node.expression))
              return false;
            return !(rvalue instanceof AST_LambdaExpression && !rvalue.contains_this());
          }
          if (node instanceof AST_Class)
            return !compressor2.has_directive("use strict");
          if (node instanceof AST_Debugger)
            return true;
          if (node instanceof AST_Defun)
            return funarg && lhs.name === node.name.name;
          if (node instanceof AST_DestructuredKeyVal)
            return node.key instanceof AST_Node;
          if (node instanceof AST_DWLoop)
            return true;
          if (node instanceof AST_LoopControl)
            return true;
          if (node instanceof AST_Try)
            return true;
          if (node instanceof AST_With)
            return true;
          return false;
        }
        function should_stop_ref(node, parent) {
          if (!(node instanceof AST_SymbolRef))
            return false;
          if (node.is_declared(compressor2)) {
            if (node.fixed_value())
              return false;
            if (can_drop_symbol(node)) {
              return !(parent instanceof AST_PropAccess && parent.expression === node) && is_arguments(node.definition());
            }
          } else if (is_direct_assignment(node, parent)) {
            return false;
          }
          if (!replace_all)
            return true;
          scan_rhs = false;
          return false;
        }
        function in_conditional(node, parent) {
          if (parent instanceof AST_Assign)
            return parent.left !== node && lazy_op[parent.operator.slice(0, -1)];
          if (parent instanceof AST_Binary)
            return parent.left !== node && lazy_op[parent.operator];
          if (parent instanceof AST_Call)
            return parent.optional && parent.expression !== node;
          if (parent instanceof AST_Case)
            return parent.expression !== node;
          if (parent instanceof AST_Conditional)
            return parent.condition !== node;
          if (parent instanceof AST_If)
            return parent.condition !== node;
          if (parent instanceof AST_Sub)
            return parent.optional && parent.expression !== node;
        }
        function is_last_node(node, parent) {
          if (node instanceof AST_Await)
            return true;
          if (node.TYPE == "Binary")
            return !can_drop_op(node.operator, node.right, compressor2);
          if (node instanceof AST_Call) {
            var def2, fn = node.expression;
            if (fn instanceof AST_SymbolRef) {
              def2 = fn.definition();
              fn = fn.fixed_value();
            }
            if (!(fn instanceof AST_Lambda))
              return !node.is_expr_pure(compressor2);
            if (def2 && recursive_ref(compressor2, def2, fn))
              return true;
            if (fn.collapse_scanning)
              return false;
            fn.collapse_scanning = true;
            var replace = can_replace;
            can_replace = false;
            var after = stop_after;
            var if_hit = stop_if_hit;
            for (var i2 = 0;!abort && i2 < fn.argnames.length; i2++) {
              if (arg_may_throw(reject, fn.argnames[i2], node.args[i2]))
                abort = true;
            }
            if (!abort) {
              if (fn.rest && arg_may_throw(reject, fn.rest, make_node(AST_Array, node, {
                elements: node.args.slice(i2)
              }))) {
                abort = true;
              } else if (is_arrow(fn) && fn.value) {
                fn.value.transform(scanner);
              } else
                for (var i2 = 0;!abort && i2 < fn.body.length; i2++) {
                  var stat = fn.body[i2];
                  if (stat instanceof AST_Return) {
                    if (stat.value)
                      stat.value.transform(scanner);
                    break;
                  }
                  stat.transform(scanner);
                }
            }
            stop_if_hit = if_hit;
            stop_after = after;
            can_replace = replace;
            fn.collapse_scanning = false;
            if (!abort)
              return false;
            abort = false;
            return true;
          }
          if (node instanceof AST_Class) {
            if (!in_try)
              return false;
            var base = node.extends;
            if (!base)
              return false;
            if (base instanceof AST_SymbolRef)
              base = base.fixed_value();
            return !safe_for_extends(base);
          }
          if (node instanceof AST_Exit) {
            if (in_try) {
              if (in_try.bfinally)
                return true;
              if (in_try.bcatch && node instanceof AST_Throw)
                return true;
            }
            return side_effects || lhs instanceof AST_PropAccess || may_modify(lhs);
          }
          if (node instanceof AST_Function) {
            return compressor2.option("ie") && node.name && lvalues.has(node.name.name);
          }
          if (node instanceof AST_ObjectIdentity)
            return symbol_in_lvalues(node, parent);
          if (node instanceof AST_PropAccess) {
            if (side_effects)
              return true;
            var exp = node.expression;
            if (exp instanceof AST_SymbolRef && is_arguments(exp.definition()))
              return true;
            if (compressor2.option("unsafe")) {
              if (is_undeclared_ref(exp) && global_names[exp.name])
                return false;
              if (is_static_fn(exp))
                return false;
            }
            if (!well_defined)
              return true;
            if (value_def)
              return false;
            if (!in_try && lhs_local)
              return false;
            if (node.optional)
              return false;
            return exp.may_throw_on_access(compressor2);
          }
          if (node instanceof AST_Spread)
            return true;
          if (node instanceof AST_SymbolRef) {
            if (symbol_in_lvalues(node, parent))
              return !is_direct_assignment(node, parent);
            if (side_effects && may_modify(node))
              return true;
            var def2 = node.definition();
            return (in_try || def2.scope.resolve() !== scope) && !can_drop_symbol(node);
          }
          if (node instanceof AST_Template)
            return !node.is_expr_pure(compressor2);
          if (node instanceof AST_VarDef) {
            if (check_destructured(node.name))
              return true;
            return (node.value || parent instanceof AST_Let) && node.name.match_symbol(function(node2) {
              return node2 instanceof AST_SymbolDeclaration && (lvalues.has(node2.name) || side_effects && may_modify(node2));
            }, true);
          }
          if (node instanceof AST_Yield)
            return true;
          var sym = is_lhs(node.left, node);
          if (!sym)
            return false;
          if (sym instanceof AST_PropAccess)
            return true;
          if (check_destructured(sym))
            return true;
          return sym.match_symbol(function(node2) {
            return node2 instanceof AST_SymbolRef && (lvalues.has(node2.name) || read_toplevel && compressor2.exposed(node2.definition()));
          }, true);
          function reject(node2) {
            node2.transform(scanner);
            return abort;
          }
        }
        function arg_may_throw(reject, node, value) {
          if (node instanceof AST_DefaultValue) {
            return reject(node.value) || arg_may_throw(reject, node.name, node.value) || !is_undefined(value) && arg_may_throw(reject, node.name, value);
          }
          if (!value)
            return !(node instanceof AST_Symbol);
          if (node instanceof AST_Destructured) {
            if (node.rest && arg_may_throw(reject, node.rest))
              return true;
            if (node instanceof AST_DestructuredArray) {
              if (value instanceof AST_Array)
                return !all(node.elements, function(element, index) {
                  return !arg_may_throw(reject, element, value[index]);
                });
              if (!value.is_string(compressor2))
                return true;
              return !all(node.elements, function(element) {
                return !arg_may_throw(reject, element);
              });
            }
            if (node instanceof AST_DestructuredObject) {
              if (value.may_throw_on_access(compressor2))
                return true;
              return !all(node.properties, function(prop) {
                if (prop.key instanceof AST_Node && reject(prop.key))
                  return false;
                return !arg_may_throw(reject, prop.value);
              });
            }
          }
        }
        function extract_args() {
          if (in_iife_single === false)
            return;
          var iife = compressor2.parent(), fn = compressor2.self();
          if (in_iife_single === undefined) {
            if (!(fn instanceof AST_LambdaExpression) || is_generator(fn) || fn.uses_arguments || fn.pinned() || !(iife instanceof AST_Call) || iife.expression !== fn || !all(iife.args, function(arg2) {
              return !(arg2 instanceof AST_Spread);
            })) {
              in_iife_single = false;
              return;
            }
            if (!is_iife_single(iife))
              return;
            in_iife_single = true;
          }
          var fn_strict = fn.in_strict_mode(compressor2) && !fn.parent_scope.resolve(true).in_strict_mode(compressor2);
          var has_await;
          if (is_async(fn)) {
            has_await = function(node) {
              return node instanceof AST_Symbol && node.name == "await";
            };
            iife_in_try = true;
          } else {
            has_await = function(node) {
              return node instanceof AST_Await && !tw.find_parent(AST_Scope);
            };
            if (iife_in_try === undefined)
              iife_in_try = find_try(compressor2, 1, iife, null, true, true);
          }
          var arg_scope = null;
          var tw = new TreeWalker(function(node, descend) {
            if (!arg)
              return true;
            if (has_await(node) || node instanceof AST_Yield) {
              arg = null;
              return true;
            }
            if (node instanceof AST_ObjectIdentity) {
              if (fn_strict || !arg_scope)
                arg = null;
              return true;
            }
            if (node instanceof AST_SymbolRef) {
              var def2;
              if (node.in_arg && !is_safe_lexical(node.definition()) || (def2 = fn.variables.get(node.name)) && def2 !== node.definition()) {
                arg = null;
              }
              return true;
            }
            if (node instanceof AST_Scope && !is_arrow(node)) {
              var save_scope = arg_scope;
              arg_scope = node;
              descend();
              arg_scope = save_scope;
              return true;
            }
          });
          args = iife.args.slice();
          var len = args.length;
          var names = new Dictionary;
          for (var i2 = fn.argnames.length;--i2 >= 0; ) {
            var sym = fn.argnames[i2];
            var arg = args[i2];
            var value = null;
            if (sym instanceof AST_DefaultValue) {
              value = sym.value;
              sym = sym.name;
              args[len + i2] = value;
            }
            if (sym instanceof AST_Destructured) {
              if (iife_in_try && arg_may_throw(function(node) {
                return node.has_side_effects(compressor2);
              }, sym, arg)) {
                candidates.length = 0;
                break;
              }
              args[len + i2] = fn.argnames[i2];
              continue;
            }
            if (names.has(sym.name))
              continue;
            names.set(sym.name, true);
            if (value)
              arg = is_undefined(arg) ? value : null;
            if (!arg && !value) {
              arg = make_node(AST_Undefined, sym).transform(compressor2);
            } else if (arg instanceof AST_Lambda && arg.pinned()) {
              arg = null;
            } else if (arg) {
              arg.walk(tw);
            }
            if (!arg)
              continue;
            var candidate2 = make_node(AST_VarDef, sym, {
              name: sym,
              value: arg
            });
            candidate2.name_index = i2;
            candidate2.arg_index = value ? len + i2 : i2;
            candidates.unshift([candidate2]);
          }
          if (fn.rest)
            args.push(fn.rest);
        }
        function extract_candidates(expr, unused) {
          hit_stack.push(expr);
          if (expr instanceof AST_Array) {
            expr.elements.forEach(function(node) {
              extract_candidates(node, unused);
            });
          } else if (expr instanceof AST_Assign) {
            var lhs2 = expr.left;
            if (!(lhs2 instanceof AST_Destructured))
              candidates.push(hit_stack.slice());
            extract_candidates(lhs2);
            extract_candidates(expr.right);
            if (lhs2 instanceof AST_SymbolRef && expr.operator == "=") {
              assignments.set(lhs2.name, (assignments.get(lhs2.name) || 0) + 1);
            }
          } else if (expr instanceof AST_Await) {
            extract_candidates(expr.expression, unused);
          } else if (expr instanceof AST_Binary) {
            var lazy = lazy_op[expr.operator];
            if (unused && lazy && expr.operator != "??" && expr.right instanceof AST_Assign && expr.right.operator == "=" && !(expr.right.left instanceof AST_Destructured)) {
              candidates.push(hit_stack.slice());
            }
            extract_candidates(expr.left, !lazy && unused);
            extract_candidates(expr.right, unused);
          } else if (expr instanceof AST_Call) {
            extract_candidates(expr.expression);
            expr.args.forEach(extract_candidates);
          } else if (expr instanceof AST_Case) {
            extract_candidates(expr.expression);
          } else if (expr instanceof AST_Conditional) {
            extract_candidates(expr.condition);
            extract_candidates(expr.consequent, unused);
            extract_candidates(expr.alternative, unused);
          } else if (expr instanceof AST_Definitions) {
            expr.definitions.forEach(extract_candidates);
          } else if (expr instanceof AST_Dot) {
            extract_candidates(expr.expression);
          } else if (expr instanceof AST_DWLoop) {
            extract_candidates(expr.condition);
            if (!(expr.body instanceof AST_Block)) {
              extract_candidates(expr.body);
            }
          } else if (expr instanceof AST_Exit) {
            if (expr.value)
              extract_candidates(expr.value);
          } else if (expr instanceof AST_For) {
            if (expr.init)
              extract_candidates(expr.init, true);
            if (expr.condition)
              extract_candidates(expr.condition);
            if (expr.step)
              extract_candidates(expr.step, true);
            if (!(expr.body instanceof AST_Block)) {
              extract_candidates(expr.body);
            }
          } else if (expr instanceof AST_ForEnumeration) {
            extract_candidates(expr.object);
            if (!(expr.body instanceof AST_Block)) {
              extract_candidates(expr.body);
            }
          } else if (expr instanceof AST_If) {
            extract_candidates(expr.condition);
            if (!(expr.body instanceof AST_Block)) {
              extract_candidates(expr.body);
            }
            if (expr.alternative && !(expr.alternative instanceof AST_Block)) {
              extract_candidates(expr.alternative);
            }
          } else if (expr instanceof AST_Object) {
            expr.properties.forEach(function(prop) {
              hit_stack.push(prop);
              if (prop.key instanceof AST_Node)
                extract_candidates(prop.key);
              if (prop instanceof AST_ObjectKeyVal)
                extract_candidates(prop.value, unused);
              hit_stack.pop();
            });
          } else if (expr instanceof AST_Sequence) {
            var end = expr.expressions.length - (unused ? 0 : 1);
            expr.expressions.forEach(function(node, index) {
              extract_candidates(node, index < end);
            });
          } else if (expr instanceof AST_SimpleStatement) {
            extract_candidates(expr.body, true);
          } else if (expr instanceof AST_Spread) {
            extract_candidates(expr.expression);
          } else if (expr instanceof AST_Sub) {
            extract_candidates(expr.expression);
            extract_candidates(expr.property);
          } else if (expr instanceof AST_Switch) {
            extract_candidates(expr.expression);
            expr.body.forEach(extract_candidates);
          } else if (expr instanceof AST_Unary) {
            if (UNARY_POSTFIX[expr.operator]) {
              candidates.push(hit_stack.slice());
            } else {
              extract_candidates(expr.expression);
            }
          } else if (expr instanceof AST_VarDef) {
            if (expr.name instanceof AST_SymbolVar) {
              if (expr.value) {
                var def2 = expr.name.definition();
                if (def2.references.length > def2.replaced) {
                  candidates.push(hit_stack.slice());
                }
              } else {
                declare_only.set(expr.name.name, (declare_only.get(expr.name.name) || 0) + 1);
              }
            }
            if (expr.value)
              extract_candidates(expr.value);
          } else if (expr instanceof AST_Yield) {
            if (expr.expression)
              extract_candidates(expr.expression);
          }
          hit_stack.pop();
        }
        function find_stop(node, level) {
          var parent = scanner.parent(level);
          if (parent instanceof AST_Array)
            return node;
          if (parent instanceof AST_Assign)
            return node;
          if (parent instanceof AST_Await)
            return node;
          if (parent instanceof AST_Binary)
            return node;
          if (parent instanceof AST_Call)
            return node;
          if (parent instanceof AST_Case)
            return node;
          if (parent instanceof AST_Conditional)
            return node;
          if (parent instanceof AST_Definitions)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Exit)
            return node;
          if (parent instanceof AST_If)
            return node;
          if (parent instanceof AST_IterationStatement)
            return node;
          if (parent instanceof AST_ObjectProperty)
            return node;
          if (parent instanceof AST_PropAccess)
            return node;
          if (parent instanceof AST_Sequence) {
            return (parent.tail_node() === node ? find_stop : find_stop_unused)(parent, level + 1);
          }
          if (parent instanceof AST_SimpleStatement)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Spread)
            return node;
          if (parent instanceof AST_Switch)
            return node;
          if (parent instanceof AST_Unary)
            return node;
          if (parent instanceof AST_VarDef)
            return node;
          if (parent instanceof AST_Yield)
            return node;
          return null;
        }
        function find_stop_logical(parent, op, level) {
          var node;
          do {
            node = parent;
            parent = scanner.parent(++level);
          } while (parent instanceof AST_Assign && parent.operator.slice(0, -1) == op || parent instanceof AST_Binary && parent.operator == op);
          return node;
        }
        function find_stop_expr(expr, cont, node, parent, level) {
          var replace = can_replace;
          can_replace = false;
          var after = stop_after;
          var if_hit = stop_if_hit;
          var stack = scanner.stack;
          scanner.stack = [parent];
          expr.transform(scanner);
          scanner.stack = stack;
          stop_if_hit = if_hit;
          stop_after = after;
          can_replace = replace;
          if (abort) {
            abort = false;
            return node;
          }
          return cont(parent, level + 1);
        }
        function find_stop_value(node, level) {
          var parent = scanner.parent(level);
          if (parent instanceof AST_Array)
            return find_stop_value(parent, level + 1);
          if (parent instanceof AST_Assign) {
            if (may_throw(parent))
              return node;
            if (parent.left.match_symbol(function(ref) {
              return ref instanceof AST_SymbolRef && (lhs.name == ref.name || value_def.name == ref.name);
            }))
              return node;
            var op;
            if (parent.left === node || !lazy_op[op = parent.operator.slice(0, -1)]) {
              return find_stop_value(parent, level + 1);
            }
            return find_stop_logical(parent, op, level);
          }
          if (parent instanceof AST_Await)
            return find_stop_value(parent, level + 1);
          if (parent instanceof AST_Binary) {
            var op;
            if (parent.left === node || !lazy_op[op = parent.operator]) {
              return find_stop_value(parent, level + 1);
            }
            return find_stop_logical(parent, op, level);
          }
          if (parent instanceof AST_Call)
            return parent;
          if (parent instanceof AST_Case) {
            if (parent.expression !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_Conditional) {
            if (parent.condition !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_Definitions)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Do)
            return node;
          if (parent instanceof AST_Exit)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_For) {
            if (parent.init !== node && parent.condition !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_ForEnumeration) {
            if (parent.init !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_If) {
            if (parent.condition !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_ObjectProperty) {
            var obj = scanner.parent(level + 1);
            return all(obj.properties, function(prop) {
              return prop instanceof AST_ObjectKeyVal;
            }) ? find_stop_value(obj, level + 2) : obj;
          }
          if (parent instanceof AST_PropAccess) {
            var exp = parent.expression;
            return exp === node ? find_stop_value(parent, level + 1) : node;
          }
          if (parent instanceof AST_Sequence) {
            return (parent.tail_node() === node ? find_stop_value : find_stop_unused)(parent, level + 1);
          }
          if (parent instanceof AST_SimpleStatement)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Spread)
            return find_stop_value(parent, level + 1);
          if (parent instanceof AST_Switch) {
            if (parent.expression !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_Unary) {
            if (parent.operator == "delete")
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_VarDef)
            return parent.name.match_symbol(function(sym) {
              return sym instanceof AST_SymbolDeclaration && (lhs.name == sym.name || value_def.name == sym.name);
            }) ? node : find_stop_value(parent, level + 1);
          if (parent instanceof AST_While) {
            if (parent.condition !== node)
              return node;
            return find_stop_value(parent, level + 1);
          }
          if (parent instanceof AST_Yield)
            return find_stop_value(parent, level + 1);
          return null;
        }
        function find_stop_unused(node, level) {
          var parent = scanner.parent(level);
          if (is_last_node(node, parent))
            return node;
          if (in_conditional(node, parent))
            return node;
          if (parent instanceof AST_Array)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Assign)
            return check_assignment(parent.left);
          if (parent instanceof AST_Await)
            return node;
          if (parent instanceof AST_Binary)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Call)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Case)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Conditional)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Definitions)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Exit)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_If)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_IterationStatement)
            return node;
          if (parent instanceof AST_ObjectProperty) {
            var obj = scanner.parent(level + 1);
            return all(obj.properties, function(prop) {
              return prop instanceof AST_ObjectKeyVal;
            }) ? find_stop_unused(obj, level + 2) : obj;
          }
          if (parent instanceof AST_PropAccess) {
            var exp = parent.expression;
            if (exp === node)
              return find_stop_unused(parent, level + 1);
            return find_stop_expr(exp, find_stop_unused, node, parent, level);
          }
          if (parent instanceof AST_Sequence)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_SimpleStatement)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Spread)
            return node;
          if (parent instanceof AST_Switch)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_Unary)
            return find_stop_unused(parent, level + 1);
          if (parent instanceof AST_VarDef)
            return check_assignment(parent.name);
          if (parent instanceof AST_Yield)
            return node;
          return null;
          function check_assignment(lhs2) {
            if (may_throw(parent))
              return node;
            if (lhs2 !== node && lhs2 instanceof AST_Destructured) {
              return find_stop_expr(lhs2, find_stop_unused, node, parent, level);
            }
            return find_stop_unused(parent, level + 1);
          }
        }
        function mangleable_var(rhs) {
          if (force_single) {
            force_single = false;
            return;
          }
          if (remaining < 1)
            return;
          rhs = rhs.tail_node();
          var value = rhs instanceof AST_Assign && rhs.operator == "=" ? rhs.left : rhs;
          if (!(value instanceof AST_SymbolRef))
            return;
          var def2 = value.definition();
          if (def2.undeclared)
            return;
          if (is_arguments(def2))
            return;
          if (value !== rhs) {
            if (is_lhs_read_only(value, compressor2))
              return;
            var referenced = def2.references.length - def2.replaced;
            if (referenced < 2)
              return;
            var expr = candidate.clone();
            expr[expr instanceof AST_Assign ? "right" : "value"] = value;
            if (candidate.name_index >= 0) {
              expr.name_index = candidate.name_index;
              expr.arg_index = candidate.arg_index;
            }
            candidate = expr;
          }
          return value_def = def2;
        }
        function remaining_refs(def2) {
          return def2.references.length - def2.replaced - (assignments.get(def2.name) || 0);
        }
        function get_lhs(expr) {
          if (expr instanceof AST_Assign) {
            var lhs2 = expr.left;
            if (!(lhs2 instanceof AST_SymbolRef))
              return lhs2;
            var def2 = lhs2.definition();
            if (scope.uses_arguments && is_funarg(def2))
              return lhs2;
            if (compressor2.exposed(def2))
              return lhs2;
            remaining = remaining_refs(def2);
            if (def2.fixed && lhs2.fixed) {
              var matches = def2.references.filter(function(ref) {
                return ref.fixed === lhs2.fixed;
              }).length - 1;
              if (matches < remaining) {
                remaining = matches;
                assign_pos = 0;
                verify_ref = true;
              }
            }
            if (expr.operator == "=")
              mangleable_var(expr.right);
            return lhs2;
          }
          if (expr instanceof AST_Binary)
            return expr.right.left;
          if (expr instanceof AST_Unary)
            return expr.expression;
          if (expr instanceof AST_VarDef) {
            var lhs2 = expr.name;
            var def2 = lhs2.definition();
            if (def2.const_redefs)
              return;
            if (!member(lhs2, def2.orig))
              return;
            if (scope.uses_arguments && is_funarg(def2))
              return;
            var declared = def2.orig.length - def2.eliminated - (declare_only.get(def2.name) || 0);
            remaining = remaining_refs(def2);
            if (def2.fixed)
              remaining = Math.min(remaining, def2.references.filter(function(ref) {
                if (!ref.fixed)
                  return true;
                if (!ref.fixed.assigns)
                  return true;
                var assign = ref.fixed.assigns[0];
                return assign === lhs2 || get_rvalue(assign) === expr.value;
              }).length);
            if (declared > 1 && !(lhs2 instanceof AST_SymbolFunarg)) {
              mangleable_var(expr.value);
              return make_node(AST_SymbolRef, lhs2);
            }
            if (mangleable_var(expr.value) || remaining == 1 && !compressor2.exposed(def2)) {
              return make_node(AST_SymbolRef, lhs2);
            }
            return;
          }
        }
        function get_rvalue(expr) {
          if (expr instanceof AST_Assign)
            return expr.right;
          if (expr instanceof AST_Binary) {
            var node = expr.clone();
            node.right = expr.right.right;
            return node;
          }
          if (expr instanceof AST_VarDef)
            return expr.value;
        }
        function invariant(expr) {
          if (expr instanceof AST_Array)
            return false;
          if (expr instanceof AST_Binary && lazy_op[expr.operator]) {
            return invariant(expr.left) && invariant(expr.right);
          }
          if (expr instanceof AST_Call)
            return false;
          if (expr instanceof AST_Conditional) {
            return invariant(expr.consequent) && invariant(expr.alternative);
          }
          if (expr instanceof AST_Object)
            return false;
          return !expr.has_side_effects(compressor2);
        }
        function foldable(expr) {
          if (expr instanceof AST_Assign && expr.right.single_use)
            return;
          var lhs_ids = Object.create(null);
          var marker = new TreeWalker(function(node) {
            if (node instanceof AST_SymbolRef)
              lhs_ids[node.definition().id] = true;
          });
          while (expr instanceof AST_Assign && expr.operator == "=") {
            expr.left.walk(marker);
            expr = expr.right;
          }
          if (expr instanceof AST_ObjectIdentity)
            return rhs_exact_match;
          if (expr instanceof AST_SymbolRef) {
            var value = expr.evaluate(compressor2);
            if (value === expr)
              return rhs_exact_match;
            return rhs_fuzzy_match(value, rhs_exact_match);
          }
          if (expr.is_truthy())
            return rhs_fuzzy_match(true, return_false);
          if (expr.is_constant()) {
            var ev = expr.evaluate(compressor2);
            if (!(ev instanceof AST_Node))
              return rhs_fuzzy_match(ev, rhs_exact_match);
          }
          if (!(lhs instanceof AST_SymbolRef))
            return false;
          if (!invariant(expr))
            return false;
          var circular;
          expr.walk(new TreeWalker(function(node) {
            if (circular)
              return true;
            if (node instanceof AST_SymbolRef && lhs_ids[node.definition().id])
              circular = true;
          }));
          return !circular && rhs_exact_match;
          function rhs_exact_match(node) {
            return expr.equals(node);
          }
        }
        function rhs_fuzzy_match(value, fallback) {
          return function(node, tw) {
            if (tw.in_boolean_context()) {
              if (value && node.is_truthy() && !node.has_side_effects(compressor2)) {
                return true;
              }
              if (node.is_constant()) {
                var ev = node.evaluate(compressor2);
                if (!(ev instanceof AST_Node))
                  return !ev == !value;
              }
            }
            return fallback(node);
          };
        }
        function clear_write_only(assign) {
          while (assign.write_only) {
            assign.write_only = false;
            if (!(assign instanceof AST_Assign))
              break;
            assign = assign.right;
          }
        }
        function update_symbols(value, node) {
          var scope2 = node.scope || find_scope(scanner) || block_scope;
          value.walk(new TreeWalker(function(node2) {
            if (node2 instanceof AST_BlockScope)
              return true;
            if (node2 instanceof AST_Symbol)
              node2.scope = scope2;
          }));
        }
        function may_be_global(node) {
          if (node instanceof AST_SymbolRef) {
            node = node.fixed_value();
            if (!node)
              return true;
          }
          if (node instanceof AST_Assign)
            return node.operator == "=" && may_be_global(node.right);
          return node instanceof AST_PropAccess || node instanceof AST_ObjectIdentity;
        }
        function get_lvalues(expr) {
          var lvalues2 = new Dictionary;
          if (expr instanceof AST_VarDef) {
            if (!expr.name.definition().fixed)
              well_defined = false;
            lvalues2.add(expr.name.name, lhs);
          }
          var find_arguments = scope.uses_arguments && !compressor2.has_directive("use strict");
          var scan_toplevel = scope instanceof AST_Toplevel;
          var tw = new TreeWalker(function(node) {
            var value;
            if (node instanceof AST_SymbolRef) {
              value = node.fixed_value();
              if (!value) {
                value = node;
                var def2 = node.definition();
                var escaped = node.fixed && node.fixed.escaped || def2.escaped;
                if (!def2.undeclared && (def2.assignments || !escaped || escaped.cross_scope) && (has_escaped(def2, node.scope, node, tw.parent()) || !same_scope(def2))) {
                  well_defined = false;
                }
              }
            } else if (node instanceof AST_ObjectIdentity) {
              value = node;
            }
            if (value) {
              lvalues2.add(node.name, is_modified(compressor2, tw, node, value, 0));
            } else if (node instanceof AST_Lambda) {
              for (var level = 0, parent, child = node;parent = tw.parent(level++); child = parent) {
                if (parent instanceof AST_Assign) {
                  if (parent.left === child)
                    break;
                  if (parent.operator == "=")
                    continue;
                  if (lazy_op[parent.operator.slice(0, -1)])
                    continue;
                  break;
                }
                if (parent instanceof AST_Binary) {
                  if (lazy_op[parent.operator])
                    continue;
                  break;
                }
                if (parent instanceof AST_Call)
                  return;
                if (parent instanceof AST_Scope)
                  return;
                if (parent instanceof AST_Sequence) {
                  if (parent.tail_node() === child)
                    continue;
                  break;
                }
                if (parent instanceof AST_Template) {
                  if (parent.tag)
                    return;
                  break;
                }
              }
              node.enclosed.forEach(function(def3) {
                if (def3.scope !== node)
                  enclosed.set(def3.name, true);
              });
              return true;
            } else if (find_arguments && node instanceof AST_Sub) {
              scope.each_argname(function(argname) {
                if (!compressor2.option("reduce_vars") || argname.definition().assignments) {
                  if (!argname.definition().fixed)
                    well_defined = false;
                  lvalues2.add(argname.name, true);
                }
              });
              find_arguments = false;
            }
            if (!scan_toplevel)
              return;
            if (node.TYPE == "Call") {
              if (modify_toplevel)
                return;
              var exp = node.expression;
              if (exp instanceof AST_PropAccess)
                return;
              if (exp instanceof AST_LambdaExpression && !exp.contains_this())
                return;
              modify_toplevel = true;
            } else if (node instanceof AST_PropAccess && may_be_global(node.expression)) {
              if (node === lhs && !(expr instanceof AST_Unary)) {
                modify_toplevel = true;
              } else {
                read_toplevel = true;
              }
            }
          });
          expr.walk(tw);
          return lvalues2;
        }
        function remove_candidate(expr) {
          var value = rvalue === rhs_value ? null : make_sequence(rhs_value, rhs_value.expressions.slice(0, -1));
          var index = expr.name_index;
          if (index >= 0) {
            var args2, argname = scope.argnames[index];
            if (argname instanceof AST_DefaultValue) {
              scope.argnames[index] = argname = argname.clone();
              argname.value = value || make_node(AST_Number, argname, { value: 0 });
            } else if ((args2 = compressor2.parent().args)[index]) {
              scope.argnames[index] = argname.clone();
              args2[index] = value || make_node(AST_Number, args2[index], { value: 0 });
            }
            return;
          }
          var end = hit_stack.length - 1;
          var last = hit_stack[end];
          if (last instanceof AST_VarDef || hit_stack[end - 1].body === last)
            end--;
          var tt2 = new TreeTransformer(function(node, descend, in_list) {
            if (hit)
              return node;
            if (node !== hit_stack[hit_index])
              return node;
            hit_index++;
            if (hit_index <= end)
              return handle_custom_scan_order(node, tt2);
            hit = true;
            if (node instanceof AST_Definitions) {
              declare_only.set(last.name.name, (declare_only.get(last.name.name) || 0) + 1);
              if (value_def)
                value_def.replaced++;
              var defns = node.definitions;
              var index2 = defns.indexOf(last);
              var defn = last.clone();
              defn.value = null;
              if (!value) {
                node.definitions[index2] = defn;
                return node;
              }
              var body = [make_node(AST_SimpleStatement, value, { body: value })];
              if (index2 > 0) {
                var head = node.clone();
                head.definitions = defns.slice(0, index2);
                body.unshift(head);
                node = node.clone();
                node.definitions = defns.slice(index2);
              }
              body.push(node);
              node.definitions[0] = defn;
              return in_list ? List.splice(body) : make_node(AST_BlockStatement, node, { body });
            }
            if (!value)
              return in_list ? List.skip : null;
            return is_statement(node) ? make_node(AST_SimpleStatement, value, { body: value }) : value;
          }, function(node, in_list) {
            if (node instanceof AST_For)
              return patch_for_init(node, in_list);
            return patch_sequence(node, tt2);
          });
          abort = false;
          hit = false;
          hit_index = 0;
          if (!(statements2[stat_index] = statements2[stat_index].transform(tt2)))
            statements2.splice(stat_index, 1);
        }
        function patch_sequence(node, tt2) {
          if (node instanceof AST_Sequence)
            switch (node.expressions.length) {
              case 0:
                return null;
              case 1:
                return maintain_this_binding(tt2.parent(), node, node.expressions[0]);
            }
        }
        function is_lhs_local(lhs2) {
          var sym = root_expr(lhs2);
          if (!(sym instanceof AST_SymbolRef))
            return false;
          if (sym.definition().scope.resolve() !== scope)
            return false;
          if (!in_loop)
            return true;
          if (compound)
            return false;
          if (candidate instanceof AST_Unary)
            return false;
          var lvalue = lvalues.get(sym.name);
          return !lvalue || lvalue[0] === lhs2;
        }
        function value_has_side_effects() {
          if (candidate instanceof AST_Unary)
            return false;
          return rvalue.has_side_effects(compressor2);
        }
        function replace_all_symbols(expr) {
          if (expr instanceof AST_Unary)
            return false;
          if (side_effects)
            return false;
          if (value_def)
            return true;
          if (!(lhs instanceof AST_SymbolRef))
            return false;
          var referenced;
          if (expr instanceof AST_VarDef) {
            referenced = 1;
          } else if (expr.operator == "=") {
            referenced = 2;
          } else {
            return false;
          }
          var def2 = lhs.definition();
          if (def2.references.length - def2.replaced == referenced)
            return true;
          if (!def2.fixed)
            return false;
          if (!lhs.fixed)
            return false;
          var assigns = lhs.fixed.assigns;
          var matched = 0;
          if (!all(def2.references, function(ref, index) {
            var fixed = ref.fixed;
            if (!fixed)
              return false;
            if (fixed.to_binary || fixed.to_prefix)
              return false;
            if (fixed === lhs.fixed) {
              matched++;
              return true;
            }
            return assigns && fixed.assigns && assigns[0] !== fixed.assigns[0];
          }))
            return false;
          if (matched != referenced)
            return false;
          verify_ref = true;
          return true;
        }
        function symbol_in_lvalues(sym, parent) {
          var lvalue = lvalues.get(sym.name);
          if (!lvalue || all(lvalue, function(lhs2) {
            return !lhs2;
          }))
            return;
          if (lvalue[0] !== lhs)
            return true;
          scan_rhs = false;
        }
        function may_modify(sym) {
          var def2 = sym.definition();
          if (def2.orig.length == 1 && def2.orig[0] instanceof AST_SymbolDefun)
            return false;
          if (def2.scope.resolve() !== scope)
            return true;
          if (modify_toplevel && compressor2.exposed(def2))
            return true;
          return !all(def2.references, function(ref) {
            return ref.scope.resolve(true) === scope;
          });
        }
        function side_effects_external(node, lhs2) {
          if (node instanceof AST_Assign)
            return side_effects_external(node.left, true);
          if (node instanceof AST_Unary)
            return side_effects_external(node.expression, true);
          if (node instanceof AST_VarDef)
            return node.value && side_effects_external(node.value);
          if (lhs2) {
            if (node instanceof AST_Dot)
              return side_effects_external(node.expression, true);
            if (node instanceof AST_Sub)
              return side_effects_external(node.expression, true);
            if (node instanceof AST_SymbolRef)
              return node.definition().scope.resolve() !== scope;
          }
          return false;
        }
      }
      function eliminate_spurious_blocks(statements2) {
        var changed2 = false, seen_dirs = [];
        for (var i = 0;i < statements2.length; ) {
          var stat = statements2[i];
          if (stat instanceof AST_BlockStatement) {
            if (all(stat.body, safe_to_trim)) {
              changed2 = true;
              eliminate_spurious_blocks(stat.body);
              [].splice.apply(statements2, [i, 1].concat(stat.body));
              i += stat.body.length;
              continue;
            }
          }
          if (stat instanceof AST_Directive) {
            if (member(stat.value, seen_dirs)) {
              changed2 = true;
              statements2.splice(i, 1);
              continue;
            }
            seen_dirs.push(stat.value);
          }
          if (stat instanceof AST_EmptyStatement) {
            changed2 = true;
            statements2.splice(i, 1);
            continue;
          }
          i++;
        }
        return changed2;
      }
      function handle_if_return(statements2, compressor2) {
        var changed2 = false;
        var parent = compressor2.parent();
        var self = compressor2.self();
        var declare_only, jump, merge_jump;
        var in_iife = in_lambda && parent && parent.TYPE == "Call" && parent.expression === self;
        var chain_if_returns = in_lambda && compressor2.option("conditionals") && compressor2.option("sequences");
        var drop_return_void = !(in_try && in_try.bfinally && in_async_generator(scope));
        var multiple_if_returns = has_multiple_if_returns(statements2);
        for (var i = statements2.length;--i >= 0; ) {
          var stat = statements2[i];
          var j2 = next_index(i);
          var next = statements2[j2];
          if (in_lambda && declare_only && !next && stat instanceof AST_Return && drop_return_void && !(self instanceof AST_SwitchBranch)) {
            var body = stat.value;
            if (!body) {
              changed2 = true;
              statements2.splice(i, 1);
              continue;
            }
            var tail = body.tail_node();
            if (is_undefined(tail)) {
              changed2 = true;
              if (body instanceof AST_UnaryPrefix) {
                body = body.expression;
              } else if (tail instanceof AST_UnaryPrefix) {
                body = body.clone();
                body.expressions[body.expressions.length - 1] = tail.expression;
              }
              statements2[i] = make_node(AST_SimpleStatement, stat, { body });
              continue;
            }
          }
          if (stat instanceof AST_If) {
            var ab = aborts(stat.body);
            if (can_merge_flow(ab)) {
              if (ab.label)
                remove(ab.label.thedef.references, ab);
              changed2 = true;
              stat = stat.clone();
              stat.body = make_node(AST_BlockStatement, stat, {
                body: as_statement_array_with_return(stat.body, ab)
              });
              stat.alternative = make_node(AST_BlockStatement, stat, {
                body: as_statement_array(stat.alternative).concat(extract_functions(merge_jump, jump))
              });
              adjust_refs(ab.value, merge_jump);
              statements2[i] = stat;
              statements2[i] = stat.transform(compressor2);
              continue;
            }
            if (ab && !stat.alternative && next instanceof AST_Jump) {
              var cond = stat.condition;
              var preference = i + 1 == j2 && stat.body instanceof AST_BlockStatement;
              cond = best_of_expression(cond, cond.negate(compressor2), preference);
              if (cond !== stat.condition) {
                changed2 = true;
                stat = stat.clone();
                stat.condition = cond;
                var body = stat.body;
                stat.body = make_node(AST_BlockStatement, next, {
                  body: extract_functions(true, null, j2 + 1)
                });
                statements2.splice(i, 1, stat, body);
                if (!in_lambda || self instanceof AST_Block && self.body === statements2) {
                  statements2[i] = stat.transform(compressor2);
                }
                continue;
              }
            }
            var alt = aborts(stat.alternative);
            if (can_merge_flow(alt)) {
              if (alt.label)
                remove(alt.label.thedef.references, alt);
              changed2 = true;
              stat = stat.clone();
              stat.body = make_node(AST_BlockStatement, stat.body, {
                body: as_statement_array(stat.body).concat(extract_functions(merge_jump, jump))
              });
              stat.alternative = make_node(AST_BlockStatement, stat.alternative, {
                body: as_statement_array_with_return(stat.alternative, alt)
              });
              adjust_refs(alt.value, merge_jump);
              statements2[i] = stat;
              statements2[i] = stat.transform(compressor2);
              continue;
            }
            if (compressor2.option("typeofs")) {
              if (ab && !alt) {
                var stats = make_node(AST_BlockStatement, self, { body: statements2.slice(i + 1) });
                mark_locally_defined(stat.condition, null, stats);
              }
              if (!ab && alt) {
                var stats = make_node(AST_BlockStatement, self, { body: statements2.slice(i + 1) });
                mark_locally_defined(stat.condition, stats);
              }
            }
          }
          if (stat instanceof AST_If && stat.body instanceof AST_Return) {
            var value = stat.body.value;
            var in_bool = stat.body.in_bool || next instanceof AST_Return && next.in_bool;
            if (!stat.alternative && next instanceof AST_Return && (drop_return_void || !value == !next.value)) {
              changed2 = true;
              stat = stat.clone();
              stat.alternative = make_node(AST_BlockStatement, next, {
                body: extract_functions(true, null, j2 + 1)
              });
              statements2[i] = stat;
              statements2[i] = stat.transform(compressor2);
              continue;
            }
            if (in_lambda && declare_only && !next && !stat.alternative && (in_bool || value && multiple_if_returns || value instanceof AST_Conditional && (is_undefined(value.consequent, compressor2) || is_undefined(value.alternative, compressor2)))) {
              changed2 = true;
              stat = stat.clone();
              stat.alternative = make_node(AST_Return, stat, { value: null });
              statements2[i] = stat;
              statements2[i] = stat.transform(compressor2);
              continue;
            }
            var prev, prev_stat;
            if (chain_if_returns && !stat.alternative && (!(prev_stat = statements2[prev = prev_index(i)]) && in_iife || prev_stat instanceof AST_If && prev_stat.body instanceof AST_Return) && (!next ? !declare_only : next instanceof AST_SimpleStatement && next_index(j2) == statements2.length)) {
              changed2 = true;
              var exprs = [];
              stat = stat.clone();
              exprs.push(stat.condition);
              stat.condition = make_sequence(stat, exprs);
              stat.alternative = make_node(AST_BlockStatement, self, {
                body: extract_functions().concat(make_node(AST_Return, self, { value: null }))
              });
              statements2[i] = stat.transform(compressor2);
              i = prev + 1;
              continue;
            }
          }
          if (stat instanceof AST_Break || stat instanceof AST_Exit) {
            jump = stat;
            continue;
          }
          if (declare_only && jump && jump === next)
            eliminate_returns(stat);
        }
        return changed2;
        function has_multiple_if_returns(statements3) {
          var n = 0;
          for (var i2 = statements3.length;--i2 >= 0; ) {
            var stat2 = statements3[i2];
            if (stat2 instanceof AST_If && stat2.body instanceof AST_Return) {
              if (++n > 1)
                return true;
            }
          }
          return false;
        }
        function match_target(target) {
          return last_of(compressor2, function(node) {
            return node === target;
          });
        }
        function match_return(ab2, exact) {
          if (!jump)
            return false;
          if (jump.TYPE != ab2.TYPE)
            return false;
          var value2 = ab2.value;
          if (!value2)
            return false;
          var equals = jump.equals(ab2);
          if (!equals && value2 instanceof AST_Sequence) {
            value2 = value2.tail_node();
            if (jump.value && jump.value.equals(value2))
              equals = 2;
          }
          if (!equals && !exact && jump.value instanceof AST_Sequence) {
            if (jump.value.tail_node().equals(value2))
              equals = 3;
          }
          return equals;
        }
        function can_drop_abort(ab2) {
          if (ab2 instanceof AST_Exit) {
            if (merge_jump = match_return(ab2))
              return true;
            if (!in_lambda)
              return false;
            if (!(ab2 instanceof AST_Return))
              return false;
            var value2 = ab2.value;
            if (value2 && !is_undefined(value2.tail_node()))
              return false;
            if (!(self instanceof AST_SwitchBranch))
              return true;
            if (!jump)
              return false;
            if (jump instanceof AST_Exit && jump.value)
              return false;
            merge_jump = 4;
            return true;
          }
          if (!(ab2 instanceof AST_LoopControl))
            return false;
          if (self instanceof AST_SwitchBranch) {
            if (jump instanceof AST_Exit) {
              if (!in_lambda)
                return false;
              if (jump.value)
                return false;
              merge_jump = true;
            } else if (jump) {
              if (compressor2.loopcontrol_target(jump) !== parent)
                return false;
              merge_jump = true;
            } else if (jump === false) {
              return false;
            }
          }
          var lct = compressor2.loopcontrol_target(ab2);
          if (ab2 instanceof AST_Continue)
            return match_target(loop_body(lct));
          if (lct instanceof AST_IterationStatement)
            return false;
          return match_target(lct);
        }
        function can_merge_flow(ab2) {
          merge_jump = false;
          if (!can_drop_abort(ab2))
            return false;
          for (var j3 = statements2.length;--j3 > i; ) {
            var stat2 = statements2[j3];
            if (stat2 instanceof AST_DefClass) {
              if (stat2.name.definition().preinit)
                return false;
            } else if (stat2 instanceof AST_Const || stat2 instanceof AST_Let) {
              if (!all(stat2.definitions, function(defn) {
                return !defn.name.match_symbol(function(node) {
                  return node instanceof AST_SymbolDeclaration && node.definition().preinit;
                });
              }))
                return false;
            }
          }
          return true;
        }
        function extract_functions(mode, stop, end) {
          var defuns = [];
          var lexical = false;
          var start = i + 1;
          if (!mode) {
            end = statements2.length;
            jump = null;
          } else if (stop) {
            end = statements2.lastIndexOf(stop);
          } else {
            stop = statements2[end];
            if (stop !== jump)
              jump = false;
          }
          var tail2 = statements2.splice(start, end - start).filter(function(stat2) {
            if (stat2 instanceof AST_LambdaDefinition) {
              defuns.push(stat2);
              return false;
            }
            if (is_lexical_definition(stat2))
              lexical = true;
            return true;
          });
          if (mode === 3) {
            tail2.push(make_node(AST_SimpleStatement, stop.value, {
              body: make_sequence(stop.value, stop.value.expressions.slice(0, -1))
            }));
            stop.value = stop.value.tail_node();
          }
          [].push.apply(lexical ? tail2 : statements2, defuns);
          return tail2;
        }
        function trim_return(value2, mode) {
          if (value2)
            switch (mode) {
              case 4:
                return value2;
              case 3:
                if (!(value2 instanceof AST_Sequence))
                  break;
              case 2:
                return make_sequence(value2, value2.expressions.slice(0, -1));
            }
        }
        function as_statement_array_with_return(node, ab2) {
          var body2 = as_statement_array(node);
          var block = body2, last;
          while ((last = block[block.length - 1]) !== ab2) {
            block = last.body;
          }
          block.pop();
          var value2 = ab2.value;
          if (merge_jump)
            value2 = trim_return(value2, merge_jump);
          if (value2)
            block.push(make_node(AST_SimpleStatement, value2, { body: value2 }));
          return body2;
        }
        function adjust_refs(value2, mode) {
          if (!mode)
            return;
          if (!value2)
            return;
          switch (mode) {
            case 4:
              return;
            case 3:
            case 2:
              value2 = value2.tail_node();
          }
          merge_expression(value2, jump.value);
        }
        function next_index(i2) {
          declare_only = true;
          for (var j3 = i2;++j3 < statements2.length; ) {
            var stat2 = statements2[j3];
            if (is_declaration(stat2))
              continue;
            if (stat2 instanceof AST_Var) {
              declare_only = false;
              continue;
            }
            break;
          }
          return j3;
        }
        function prev_index(i2) {
          for (var j3 = i2;--j3 >= 0; ) {
            var stat2 = statements2[j3];
            if (stat2 instanceof AST_Var)
              continue;
            if (is_declaration(stat2))
              continue;
            break;
          }
          return j3;
        }
        function eliminate_returns(stat2, keep_throws, in_block) {
          if (stat2 instanceof AST_Exit) {
            var mode = !(keep_throws && stat2 instanceof AST_Throw) && match_return(stat2, true);
            if (mode) {
              changed2 = true;
              var value2 = trim_return(stat2.value, mode);
              if (value2)
                return make_node(AST_SimpleStatement, value2, { body: value2 });
              return in_block ? null : make_node(AST_EmptyStatement, stat2);
            }
          } else if (stat2 instanceof AST_If) {
            stat2.body = eliminate_returns(stat2.body, keep_throws);
            if (stat2.alternative)
              stat2.alternative = eliminate_returns(stat2.alternative, keep_throws);
          } else if (stat2 instanceof AST_LabeledStatement) {
            stat2.body = eliminate_returns(stat2.body, keep_throws);
          } else if (stat2 instanceof AST_Try) {
            if (!stat2.bfinally || !jump.value || jump.value.is_constant()) {
              if (stat2.bcatch)
                eliminate_returns(stat2.bcatch, keep_throws);
              var trimmed = eliminate_returns(stat2.body.pop(), true, true);
              if (trimmed)
                stat2.body.push(trimmed);
            }
          } else if (stat2 instanceof AST_Block && !(stat2 instanceof AST_Scope || stat2 instanceof AST_Switch)) {
            var trimmed = eliminate_returns(stat2.body.pop(), keep_throws, true);
            if (trimmed)
              stat2.body.push(trimmed);
          }
          return stat2;
        }
      }
      function eliminate_dead_code(statements2, compressor2) {
        var has_quit;
        var self = compressor2.self();
        if (self instanceof AST_Catch) {
          self = compressor2.parent();
        } else if (self instanceof AST_LabeledStatement) {
          self = self.body;
        }
        for (var i = 0, n = 0, len = statements2.length;i < len; i++) {
          var stat = statements2[i];
          if (stat instanceof AST_LoopControl) {
            var lct = compressor2.loopcontrol_target(stat);
            if (loop_body(lct) !== self || stat instanceof AST_Break && lct instanceof AST_IterationStatement) {
              statements2[n++] = stat;
            } else if (stat.label) {
              remove(stat.label.thedef.references, stat);
            }
          } else {
            statements2[n++] = stat;
          }
          if (aborts(stat)) {
            has_quit = statements2.slice(i + 1);
            break;
          }
        }
        statements2.length = n;
        if (has_quit)
          has_quit.forEach(function(stat2) {
            extract_declarations_from_unreachable_code(compressor2, stat2, statements2);
          });
        return statements2.length != len;
      }
      function trim_awaits(statements2, compressor2) {
        if (!in_lambda || in_try && in_try.bfinally)
          return;
        var changed2 = false;
        for (var index = statements2.length;--index >= 0; ) {
          var stat = statements2[index];
          if (!(stat instanceof AST_SimpleStatement))
            break;
          var node = stat.body;
          if (!(node instanceof AST_Await))
            break;
          var exp = node.expression;
          if (!needs_enqueuing(compressor2, exp))
            break;
          changed2 = true;
          exp = exp.drop_side_effect_free(compressor2, true);
          if (exp) {
            stat.body = exp;
            break;
          }
        }
        statements2.length = index + 1;
        return changed2;
      }
      function inline_iife(statements2, compressor2) {
        var changed2 = false;
        var index = statements2.length - 1;
        if (in_lambda && index >= 0) {
          var no_return = in_try && in_try.bfinally && in_async_generator(scope);
          var inlined = statements2[index].try_inline(compressor2, block_scope, no_return);
          if (inlined) {
            statements2[index--] = inlined;
            changed2 = true;
          }
        }
        var loop = in_loop && in_try && in_try.bfinally ? "try" : in_loop;
        for (;index >= 0; index--) {
          var inlined = statements2[index].try_inline(compressor2, block_scope, true, loop);
          if (!inlined)
            continue;
          statements2[index] = inlined;
          changed2 = true;
        }
        return changed2;
      }
      function sequencesize(statements2, compressor2) {
        if (statements2.length < 2)
          return;
        var seq = [], n = 0;
        function push_seq() {
          if (!seq.length)
            return;
          var body = make_sequence(seq[0], seq);
          statements2[n++] = make_node(AST_SimpleStatement, body, { body });
          seq = [];
        }
        for (var i = 0, len = statements2.length;i < len; i++) {
          var stat = statements2[i];
          if (stat instanceof AST_SimpleStatement) {
            if (seq.length >= compressor2.sequences_limit)
              push_seq();
            merge_sequence(seq, stat.body);
          } else if (is_declaration(stat)) {
            statements2[n++] = stat;
          } else {
            push_seq();
            statements2[n++] = stat;
          }
        }
        push_seq();
        statements2.length = n;
        return n != len;
      }
      function to_simple_statement(block, decls) {
        if (!(block instanceof AST_BlockStatement))
          return block;
        var stat = null;
        for (var i = 0;i < block.body.length; i++) {
          var line = block.body[i];
          if (line instanceof AST_Var && declarations_only(line)) {
            decls.push(line);
          } else if (stat || is_lexical_definition(line)) {
            return false;
          } else {
            stat = line;
          }
        }
        return stat;
      }
      function sequencesize_2(statements2, compressor2) {
        var changed2 = false, n = 0, prev;
        for (var i = 0;i < statements2.length; i++) {
          var stat = statements2[i];
          if (prev) {
            if (stat instanceof AST_Exit) {
              if (stat.value || !in_async_generator(scope)) {
                stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat)).optimize(compressor2);
              }
            } else if (stat instanceof AST_For) {
              if (!(stat.init instanceof AST_Definitions)) {
                var abort = false;
                prev.body.walk(new TreeWalker(function(node) {
                  if (abort || node instanceof AST_Scope)
                    return true;
                  if (node instanceof AST_Binary && node.operator == "in") {
                    abort = true;
                    return true;
                  }
                }));
                if (!abort) {
                  if (stat.init)
                    stat.init = cons_seq(stat.init);
                  else {
                    stat.init = prev.body;
                    n--;
                    changed2 = true;
                  }
                }
              }
            } else if (stat instanceof AST_ForIn) {
              if (!is_lexical_definition(stat.init))
                stat.object = cons_seq(stat.object);
            } else if (stat instanceof AST_If) {
              stat.condition = cons_seq(stat.condition);
            } else if (stat instanceof AST_Switch) {
              stat.expression = cons_seq(stat.expression);
            } else if (stat instanceof AST_With) {
              stat.expression = cons_seq(stat.expression);
            }
          }
          if (compressor2.option("conditionals") && stat instanceof AST_If) {
            var decls = [];
            var body = to_simple_statement(stat.body, decls);
            var alt = to_simple_statement(stat.alternative, decls);
            if (body !== false && alt !== false && decls.length > 0) {
              var len = decls.length;
              decls.push(make_node(AST_If, stat, {
                condition: stat.condition,
                body: body || make_node(AST_EmptyStatement, stat.body),
                alternative: alt
              }));
              decls.unshift(n, 1);
              [].splice.apply(statements2, decls);
              i += len;
              n += len + 1;
              prev = null;
              changed2 = true;
              continue;
            }
          }
          statements2[n++] = stat;
          prev = stat instanceof AST_SimpleStatement ? stat : null;
        }
        statements2.length = n;
        return changed2;
        function cons_seq(right) {
          n--;
          changed2 = true;
          var left = prev.body;
          return make_sequence(left, [left, right]);
        }
      }
      function extract_exprs(body) {
        if (body instanceof AST_Assign)
          return [body];
        if (body instanceof AST_Sequence)
          return body.expressions.slice();
      }
      function join_assigns(defn, body, keep) {
        var exprs = extract_exprs(body);
        if (!exprs)
          return;
        keep = keep || 0;
        var trimmed = false;
        for (var i = exprs.length - keep;--i >= 0; ) {
          var expr = exprs[i];
          if (!can_trim(expr))
            continue;
          var tail;
          if (expr.left instanceof AST_SymbolRef) {
            tail = exprs.slice(i + 1);
          } else if (expr.left instanceof AST_PropAccess && can_trim(expr.left.expression)) {
            tail = exprs.slice(i + 1);
            var flattened = expr.clone();
            expr = expr.left.expression;
            flattened.left = flattened.left.clone();
            flattened.left.expression = expr.left.clone();
            tail.unshift(flattened);
          } else {
            continue;
          }
          if (tail.length == 0)
            continue;
          if (!trim_assigns(expr.left, expr.right, tail))
            continue;
          trimmed = true;
          exprs = exprs.slice(0, i).concat(expr, tail);
        }
        if (defn instanceof AST_Definitions) {
          for (var i = defn.definitions.length;--i >= 0; ) {
            var def = defn.definitions[i];
            if (!def.value)
              continue;
            if (trim_assigns(def.name, def.value, exprs))
              trimmed = true;
            if (merge_conditional_assignments(def, exprs, keep))
              trimmed = true;
            break;
          }
          if (defn instanceof AST_Var && join_var_assign(defn.definitions, exprs, keep))
            trimmed = true;
        }
        return trimmed && exprs;
        function can_trim(node) {
          return node instanceof AST_Assign && node.operator == "=";
        }
      }
      function merge_assigns(prev, defn) {
        if (!(prev instanceof AST_SimpleStatement))
          return;
        if (declarations_only(defn))
          return;
        var exprs = extract_exprs(prev.body);
        if (!exprs)
          return;
        var definitions = [];
        if (!join_var_assign(definitions, exprs.reverse(), 0))
          return;
        defn.definitions = definitions.reverse().concat(defn.definitions);
        return exprs.reverse();
      }
      function merge_conditional_assignments(var_def, exprs, keep) {
        if (!compressor.option("conditionals"))
          return;
        if (var_def.name instanceof AST_Destructured)
          return;
        var trimmed = false;
        var def = var_def.name.definition();
        while (exprs.length > keep) {
          var cond = to_conditional_assignment(compressor, def, var_def.value, exprs[0]);
          if (!cond)
            break;
          var_def.value = cond;
          exprs.shift();
          trimmed = true;
        }
        return trimmed;
      }
      function join_var_assign(definitions, exprs, keep) {
        var trimmed = false;
        while (exprs.length > keep) {
          var expr = exprs[0];
          if (!(expr instanceof AST_Assign))
            break;
          if (expr.operator != "=")
            break;
          var lhs = expr.left;
          if (!(lhs instanceof AST_SymbolRef))
            break;
          if (is_undeclared_ref(lhs))
            break;
          if (lhs.scope.resolve() !== scope)
            break;
          var def = lhs.definition();
          if (def.scope !== scope)
            break;
          if (def.orig.length > def.eliminated + 1)
            break;
          if (def.orig[0].TYPE != "SymbolVar")
            break;
          var name = make_node(AST_SymbolVar, lhs);
          definitions.push(make_node(AST_VarDef, expr, {
            name,
            value: expr.right
          }));
          def.orig.push(name);
          def.replaced++;
          exprs.shift();
          trimmed = true;
        }
        return trimmed;
      }
      function trim_assigns(name, value, exprs) {
        var names = new Dictionary;
        names.set(name.name, true);
        while (value instanceof AST_Assign && value.operator == "=") {
          if (value.left instanceof AST_SymbolRef)
            names.set(value.left.name, true);
          value = value.right;
        }
        if (!(value instanceof AST_Object))
          return;
        var trimmed = false;
        do {
          if (!try_join(exprs[0]))
            break;
          exprs.shift();
          trimmed = true;
        } while (exprs.length);
        return trimmed;
        function try_join(node) {
          if (!(node instanceof AST_Assign))
            return;
          if (node.operator != "=")
            return;
          if (!(node.left instanceof AST_PropAccess))
            return;
          var sym = node.left.expression;
          if (!(sym instanceof AST_SymbolRef))
            return;
          if (!names.has(sym.name))
            return;
          if (!node.right.is_constant_expression(scope))
            return;
          var prop = node.left.property;
          if (prop instanceof AST_Node) {
            if (try_join(prop))
              prop = node.left.property = prop.right.clone();
            prop = prop.evaluate(compressor);
          }
          if (prop instanceof AST_Node)
            return;
          prop = "" + prop;
          var diff = prop == "__proto__" || compressor.has_directive("use strict") ? function(node2) {
            var key = node2.key;
            return typeof key == "string" && key != prop && key != "__proto__";
          } : function(node2) {
            var key = node2.key;
            if (node2 instanceof AST_ObjectGetter || node2 instanceof AST_ObjectSetter) {
              return typeof key == "string" && key != prop;
            }
            return key !== "__proto__";
          };
          if (!all(value.properties, diff))
            return;
          value.properties.push(make_node(AST_ObjectKeyVal, node, {
            key: prop,
            value: node.right
          }));
          return true;
        }
      }
      function join_consecutive_vars(statements2) {
        var changed2 = false, defs;
        for (var i = 0, j2 = -1;i < statements2.length; i++) {
          var stat = statements2[i];
          var prev = statements2[j2];
          if (stat instanceof AST_Definitions) {
            if (prev && prev.TYPE == stat.TYPE) {
              prev.definitions = prev.definitions.concat(stat.definitions);
              changed2 = true;
            } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {
              defs.definitions = defs.definitions.concat(stat.definitions);
              changed2 = true;
            } else if (stat instanceof AST_Var) {
              var exprs = merge_assigns(prev, stat);
              if (exprs) {
                if (exprs.length) {
                  prev.body = make_sequence(prev, exprs);
                  j2++;
                }
                changed2 = true;
              } else {
                j2++;
              }
              statements2[j2] = defs = stat;
            } else {
              statements2[++j2] = stat;
            }
            continue;
          } else if (stat instanceof AST_Exit) {
            stat.value = join_assigns_expr(stat.value);
          } else if (stat instanceof AST_For) {
            var exprs = join_assigns(prev, stat.init);
            if (exprs) {
              changed2 = true;
              stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;
            } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {
              if (stat.init) {
                prev.definitions = prev.definitions.concat(stat.init.definitions);
              }
              stat = stat.clone();
              defs = stat.init = prev;
              statements2[j2] = merge_defns(stat);
              changed2 = true;
              continue;
            } else if (defs && stat.init && defs.TYPE == stat.init.TYPE && declarations_only(stat.init)) {
              defs.definitions = defs.definitions.concat(stat.init.definitions);
              stat.init = null;
              changed2 = true;
            } else if (stat.init instanceof AST_Var) {
              defs = stat.init;
              exprs = merge_assigns(prev, stat.init);
              if (exprs) {
                changed2 = true;
                if (exprs.length == 0) {
                  statements2[j2] = merge_defns(stat);
                  continue;
                }
                prev.body = make_sequence(prev, exprs);
              }
            }
          } else if (stat instanceof AST_ForEnumeration) {
            if (defs && defs.TYPE == stat.init.TYPE) {
              var defns = defs.definitions.slice();
              stat.init = stat.init.definitions[0].name.convert_symbol(AST_SymbolRef, function(ref, name) {
                defns.push(make_node(AST_VarDef, name, {
                  name,
                  value: null
                }));
                name.definition().references.push(ref);
              });
              defs.definitions = defns;
              changed2 = true;
            }
            stat.object = join_assigns_expr(stat.object);
          } else if (stat instanceof AST_If) {
            stat.condition = join_assigns_expr(stat.condition);
          } else if (stat instanceof AST_SimpleStatement) {
            var exprs = join_assigns(prev, stat.body), next;
            if (exprs) {
              changed2 = true;
              if (!exprs.length)
                continue;
              stat.body = make_sequence(stat.body, exprs);
            } else if (prev instanceof AST_Definitions && (next = statements2[i + 1]) && prev.TYPE == next.TYPE && (next = next.definitions[0]).value) {
              changed2 = true;
              next.value = make_sequence(stat, [stat.body, next.value]);
              continue;
            }
          } else if (stat instanceof AST_Switch) {
            stat.expression = join_assigns_expr(stat.expression);
          } else if (stat instanceof AST_With) {
            stat.expression = join_assigns_expr(stat.expression);
          }
          statements2[++j2] = defs ? merge_defns(stat) : stat;
        }
        statements2.length = j2 + 1;
        return changed2;
        function join_assigns_expr(value) {
          var exprs2 = join_assigns(prev, value, 1);
          if (!exprs2)
            return value;
          changed2 = true;
          var tail = value.tail_node();
          if (exprs2[exprs2.length - 1] !== tail)
            exprs2.push(tail.left);
          return make_sequence(value, exprs2);
        }
        function merge_defns(stat2) {
          return stat2.transform(new TreeTransformer(function(node, descend, in_list) {
            if (node instanceof AST_Definitions) {
              if (defs === node)
                return node;
              if (defs.TYPE != node.TYPE)
                return node;
              var parent = this.parent();
              if (parent instanceof AST_ForEnumeration && parent.init === node)
                return node;
              if (!declarations_only(node))
                return node;
              defs.definitions = defs.definitions.concat(node.definitions);
              changed2 = true;
              if (parent instanceof AST_For && parent.init === node)
                return null;
              return in_list ? List.skip : make_node(AST_EmptyStatement, node);
            }
            if (node instanceof AST_ExportDeclaration)
              return node;
            if (node instanceof AST_Scope)
              return node;
            if (!is_statement(node))
              return node;
          }));
        }
      }
    }
    function extract_declarations_from_unreachable_code(compressor, stat, target) {
      var block;
      var dropped = false;
      stat.walk(new TreeWalker(function(node, descend) {
        if (node instanceof AST_DefClass) {
          node.extends = null;
          node.properties = [];
          push(node);
          return true;
        }
        if (node instanceof AST_Definitions) {
          var defns = [];
          if (node.remove_initializers(compressor, defns)) {
            AST_Node.warn("Dropping initialization in unreachable code [{start}]", node);
          }
          if (defns.length > 0) {
            node.definitions = defns;
            push(node);
          }
          return true;
        }
        if (node instanceof AST_LambdaDefinition) {
          push(node);
          return true;
        }
        if (node instanceof AST_Scope)
          return true;
        if (node instanceof AST_BlockScope) {
          var save = block;
          block = [];
          descend();
          if (block.required) {
            target.push(make_node(AST_BlockStatement, stat, { body: block }));
          } else if (block.length) {
            [].push.apply(target, block);
          }
          block = save;
          return true;
        }
        if (!(node instanceof AST_LoopControl))
          dropped = true;
      }));
      if (dropped)
        AST_Node.warn("Dropping unreachable code [{start}]", stat);
      function push(node) {
        if (block) {
          block.push(node);
          if (!safe_to_trim(node))
            block.required = true;
        } else {
          target.push(node);
        }
      }
    }
    function is_undefined(node, compressor) {
      return node == null || node.is_undefined || node instanceof AST_Undefined || node instanceof AST_UnaryPrefix && node.operator == "void" && !(compressor && node.expression.has_side_effects(compressor));
    }
    (function(def) {
      def(AST_Class, return_true);
      def(AST_Scope, function(compressor) {
        var body = this.body;
        for (var i = 0;i < body.length; i++) {
          var stat = body[i];
          if (!(stat instanceof AST_Directive))
            break;
          if (stat.value == "use strict")
            return true;
        }
        var parent = this.parent_scope;
        if (!parent)
          return compressor.option("module");
        return parent.resolve(true).in_strict_mode(compressor);
      });
    })(function(node, func) {
      node.DEFMETHOD("in_strict_mode", func);
    });
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Array, return_true);
      def(AST_Assign, function() {
        return this.operator == "=" && this.right.is_truthy();
      });
      def(AST_Lambda, return_true);
      def(AST_Object, return_true);
      def(AST_RegExp, return_true);
      def(AST_Sequence, function() {
        return this.tail_node().is_truthy();
      });
      def(AST_SymbolRef, function() {
        var fixed = this.fixed_value();
        if (!fixed)
          return false;
        this.is_truthy = return_false;
        var result = fixed.is_truthy();
        delete this.is_truthy;
        return result;
      });
    })(function(node, func) {
      node.DEFMETHOD("is_truthy", func);
    });
    (function(def) {
      def(AST_Node, return_true);
      def(AST_Array, return_false);
      function binary(op, left, right) {
        switch (op) {
          case "-":
            return left.is_negative_zero() && (!(right instanceof AST_Constant) || right.value == 0);
          case "&&":
          case "||":
            return left.is_negative_zero() || right.is_negative_zero();
          case "*":
          case "/":
          case "%":
          case "**":
            return true;
          default:
            return false;
        }
      }
      def(AST_Assign, function() {
        var op = this.operator;
        if (op == "=")
          return this.right.is_negative_zero();
        return binary(op.slice(0, -1), this.left, this.right);
      });
      def(AST_Binary, function() {
        return binary(this.operator, this.left, this.right);
      });
      def(AST_Constant, function() {
        return this.value == 0 && 1 / this.value < 0;
      });
      def(AST_Lambda, return_false);
      def(AST_Object, return_false);
      def(AST_RegExp, return_false);
      def(AST_Sequence, function() {
        return this.tail_node().is_negative_zero();
      });
      def(AST_SymbolRef, function() {
        var fixed = this.fixed_value();
        if (!fixed)
          return true;
        this.is_negative_zero = return_true;
        var result = fixed.is_negative_zero();
        delete this.is_negative_zero;
        return result;
      });
      def(AST_UnaryPrefix, function() {
        return this.operator == "+" && this.expression.is_negative_zero() || this.operator == "-";
      });
    })(function(node, func) {
      node.DEFMETHOD("is_negative_zero", func);
    });
    (function(def) {
      AST_Node.DEFMETHOD("may_throw_on_access", function(compressor, force) {
        return !compressor.option("pure_getters") || this._dot_throw(compressor, force);
      });
      function is_strict(compressor, force) {
        return force || /strict/.test(compressor.option("pure_getters"));
      }
      def(AST_Node, is_strict);
      def(AST_Array, return_false);
      def(AST_Assign, function(compressor) {
        var op = this.operator;
        var sym = this.left;
        var rhs = this.right;
        if (op != "=") {
          return lazy_op[op.slice(0, -1)] && (sym._dot_throw(compressor) || rhs._dot_throw(compressor));
        }
        if (!rhs._dot_throw(compressor))
          return false;
        if (!(sym instanceof AST_SymbolRef))
          return true;
        if (rhs instanceof AST_Binary && rhs.operator == "||" && sym.name == rhs.left.name) {
          return rhs.right._dot_throw(compressor);
        }
        return true;
      });
      def(AST_Binary, function(compressor) {
        return lazy_op[this.operator] && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));
      });
      def(AST_Class, function(compressor, force) {
        return is_strict(compressor, force) && !all(this.properties, function(prop) {
          if (prop.private)
            return true;
          if (!prop.static)
            return true;
          return !(prop instanceof AST_ClassGetter || prop instanceof AST_ClassSetter);
        });
      });
      def(AST_Conditional, function(compressor) {
        return this.consequent._dot_throw(compressor) || this.alternative._dot_throw(compressor);
      });
      def(AST_Constant, return_false);
      def(AST_Dot, function(compressor, force) {
        if (!is_strict(compressor, force))
          return false;
        var exp = this.expression;
        if (exp instanceof AST_SymbolRef)
          exp = exp.fixed_value();
        return !(this.property == "prototype" && is_lambda(exp));
      });
      def(AST_Lambda, return_false);
      def(AST_Null, return_true);
      def(AST_Object, function(compressor, force) {
        return is_strict(compressor, force) && !all(this.properties, function(prop) {
          if (prop instanceof AST_ObjectGetter || prop instanceof AST_ObjectSetter)
            return false;
          return !(prop.key === "__proto__" && prop.value._dot_throw(compressor, force));
        });
      });
      def(AST_ObjectIdentity, function(compressor, force) {
        return is_strict(compressor, force) && !this.scope.resolve().new;
      });
      def(AST_Sequence, function(compressor) {
        return this.tail_node()._dot_throw(compressor);
      });
      def(AST_SymbolRef, function(compressor, force) {
        if (this.is_undefined)
          return true;
        if (!is_strict(compressor, force))
          return false;
        if (is_undeclared_ref(this) && this.is_declared(compressor))
          return false;
        if (this.is_immutable())
          return false;
        var def2 = this.definition();
        if (is_arguments(def2) && !def2.scope.rest && all(def2.scope.argnames, function(argname) {
          return argname instanceof AST_SymbolFunarg;
        }))
          return def2.scope.uses_arguments > 2;
        var fixed = this.fixed_value(true);
        if (!fixed)
          return true;
        this._dot_throw = return_true;
        if (fixed._dot_throw(compressor)) {
          delete this._dot_throw;
          return true;
        }
        this._dot_throw = return_false;
        return false;
      });
      def(AST_UnaryPrefix, function() {
        return this.operator == "void";
      });
      def(AST_UnaryPostfix, return_false);
      def(AST_Undefined, return_true);
    })(function(node, func) {
      node.DEFMETHOD("_dot_throw", func);
    });
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Array, return_true);
      function is_binary_defined(compressor, op, node) {
        switch (op) {
          case "&&":
            return node.left.is_defined(compressor) && node.right.is_defined(compressor);
          case "||":
            return node.left.is_truthy() || node.right.is_defined(compressor);
          case "??":
            return node.left.is_defined(compressor) || node.right.is_defined(compressor);
          default:
            return true;
        }
      }
      def(AST_Assign, function(compressor) {
        var op = this.operator;
        if (op == "=")
          return this.right.is_defined(compressor);
        return is_binary_defined(compressor, op.slice(0, -1), this);
      });
      def(AST_Binary, function(compressor) {
        return is_binary_defined(compressor, this.operator, this);
      });
      def(AST_Conditional, function(compressor) {
        return this.consequent.is_defined(compressor) && this.alternative.is_defined(compressor);
      });
      def(AST_Constant, return_true);
      def(AST_Hole, return_false);
      def(AST_Lambda, return_true);
      def(AST_Object, return_true);
      def(AST_Sequence, function(compressor) {
        return this.tail_node().is_defined(compressor);
      });
      def(AST_SymbolRef, function(compressor) {
        if (this.is_undefined)
          return false;
        if (is_undeclared_ref(this) && this.is_declared(compressor))
          return true;
        if (this.is_immutable())
          return true;
        var fixed = this.fixed_value();
        if (!fixed)
          return false;
        this.is_defined = return_false;
        var result = fixed.is_defined(compressor);
        delete this.is_defined;
        return result;
      });
      def(AST_UnaryPrefix, function() {
        return this.operator != "void";
      });
      def(AST_UnaryPostfix, return_true);
      def(AST_Undefined, return_false);
    })(function(node, func) {
      node.DEFMETHOD("is_defined", func);
    });
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Assign, function(compressor) {
        return this.operator == "=" && this.right.is_boolean(compressor);
      });
      var binary = makePredicate("in instanceof == != === !== < <= >= >");
      def(AST_Binary, function(compressor) {
        return binary[this.operator] || lazy_op[this.operator] && this.left.is_boolean(compressor) && this.right.is_boolean(compressor);
      });
      def(AST_Boolean, return_true);
      var fn = makePredicate("every hasOwnProperty isPrototypeOf propertyIsEnumerable some");
      def(AST_Call, function(compressor) {
        if (!compressor.option("unsafe"))
          return false;
        var exp = this.expression;
        return exp instanceof AST_Dot && (fn[exp.property] || exp.property == "test" && exp.expression instanceof AST_RegExp);
      });
      def(AST_Conditional, function(compressor) {
        return this.consequent.is_boolean(compressor) && this.alternative.is_boolean(compressor);
      });
      def(AST_New, return_false);
      def(AST_Sequence, function(compressor) {
        return this.tail_node().is_boolean(compressor);
      });
      def(AST_SymbolRef, function(compressor) {
        var fixed = this.fixed_value();
        if (!fixed)
          return false;
        this.is_boolean = return_false;
        var result = fixed.is_boolean(compressor);
        delete this.is_boolean;
        return result;
      });
      var unary = makePredicate("! delete");
      def(AST_UnaryPrefix, function() {
        return unary[this.operator];
      });
    })(function(node, func) {
      node.DEFMETHOD("is_boolean", func);
    });
    (function(def) {
      def(AST_Node, return_false);
      var binary = makePredicate("- * / % ** & | ^ << >> >>>");
      def(AST_Assign, function(compressor) {
        return binary[this.operator.slice(0, -1)] || this.operator == "=" && this.right.is_number(compressor);
      });
      def(AST_Binary, function(compressor) {
        if (binary[this.operator])
          return true;
        if (this.operator != "+")
          return false;
        return (this.left.is_boolean(compressor) || this.left.is_number(compressor)) && (this.right.is_boolean(compressor) || this.right.is_number(compressor));
      });
      var fn = makePredicate([
        "charCodeAt",
        "getDate",
        "getDay",
        "getFullYear",
        "getHours",
        "getMilliseconds",
        "getMinutes",
        "getMonth",
        "getSeconds",
        "getTime",
        "getTimezoneOffset",
        "getUTCDate",
        "getUTCDay",
        "getUTCFullYear",
        "getUTCHours",
        "getUTCMilliseconds",
        "getUTCMinutes",
        "getUTCMonth",
        "getUTCSeconds",
        "getYear",
        "indexOf",
        "lastIndexOf",
        "localeCompare",
        "push",
        "search",
        "setDate",
        "setFullYear",
        "setHours",
        "setMilliseconds",
        "setMinutes",
        "setMonth",
        "setSeconds",
        "setTime",
        "setUTCDate",
        "setUTCFullYear",
        "setUTCHours",
        "setUTCMilliseconds",
        "setUTCMinutes",
        "setUTCMonth",
        "setUTCSeconds",
        "setYear"
      ]);
      def(AST_Call, function(compressor) {
        if (!compressor.option("unsafe"))
          return false;
        var exp = this.expression;
        return exp instanceof AST_Dot && (fn[exp.property] || is_undeclared_ref(exp.expression) && exp.expression.name == "Math");
      });
      def(AST_Conditional, function(compressor) {
        return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);
      });
      def(AST_New, return_false);
      def(AST_Number, return_true);
      def(AST_Sequence, function(compressor) {
        return this.tail_node().is_number(compressor);
      });
      def(AST_SymbolRef, function(compressor, keep_unary) {
        var fixed = this.fixed_value();
        if (!fixed)
          return false;
        if (keep_unary && fixed instanceof AST_UnaryPrefix && fixed.operator == "+" && fixed.expression.equals(this)) {
          return false;
        }
        this.is_number = return_false;
        var result = fixed.is_number(compressor);
        delete this.is_number;
        return result;
      });
      var unary = makePredicate("+ - ~ ++ --");
      def(AST_Unary, function() {
        return unary[this.operator];
      });
    })(function(node, func) {
      node.DEFMETHOD("is_number", func);
    });
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Assign, function(compressor) {
        switch (this.operator) {
          case "+=":
            if (this.left.is_string(compressor))
              return true;
          case "=":
            return this.right.is_string(compressor);
        }
      });
      def(AST_Binary, function(compressor) {
        return this.operator == "+" && (this.left.is_string(compressor) || this.right.is_string(compressor));
      });
      var fn = makePredicate([
        "charAt",
        "substr",
        "substring",
        "toExponential",
        "toFixed",
        "toLowerCase",
        "toPrecision",
        "toString",
        "toUpperCase",
        "trim"
      ]);
      def(AST_Call, function(compressor) {
        if (!compressor.option("unsafe"))
          return false;
        var exp = this.expression;
        return exp instanceof AST_Dot && fn[exp.property];
      });
      def(AST_Conditional, function(compressor) {
        return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);
      });
      def(AST_Sequence, function(compressor) {
        return this.tail_node().is_string(compressor);
      });
      def(AST_String, return_true);
      def(AST_SymbolRef, function(compressor) {
        var fixed = this.fixed_value();
        if (!fixed)
          return false;
        this.is_string = return_false;
        var result = fixed.is_string(compressor);
        delete this.is_string;
        return result;
      });
      def(AST_Template, function(compressor) {
        return !this.tag || is_raw_tag(compressor, this.tag);
      });
      def(AST_UnaryPrefix, function() {
        return this.operator == "typeof";
      });
    })(function(node, func) {
      node.DEFMETHOD("is_string", func);
    });
    var lazy_op = makePredicate("&& || ??");
    (function(def) {
      function to_node(value, orig) {
        if (value instanceof AST_Node)
          return value.clone(true);
        if (Array.isArray(value))
          return make_node(AST_Array, orig, {
            elements: value.map(function(value2) {
              return to_node(value2, orig);
            })
          });
        if (value && typeof value == "object") {
          var props = [];
          for (var key in value)
            if (HOP(value, key)) {
              props.push(make_node(AST_ObjectKeyVal, orig, {
                key,
                value: to_node(value[key], orig)
              }));
            }
          return make_node(AST_Object, orig, { properties: props });
        }
        return make_node_from_constant(value, orig);
      }
      function warn(node) {
        AST_Node.warn("global_defs {this} redefined [{start}]", node);
      }
      AST_Toplevel.DEFMETHOD("resolve_defines", function(compressor) {
        if (!compressor.option("global_defs"))
          return this;
        this.figure_out_scope({ ie: compressor.option("ie") });
        return this.transform(new TreeTransformer(function(node) {
          var def2 = node._find_defs(compressor, "");
          if (!def2)
            return;
          var level = 0, child = node, parent;
          while (parent = this.parent(level++)) {
            if (!(parent instanceof AST_PropAccess))
              break;
            if (parent.expression !== child)
              break;
            child = parent;
          }
          if (is_lhs(child, parent)) {
            warn(node);
            return;
          }
          return def2;
        }));
      });
      def(AST_Node, noop);
      def(AST_Dot, function(compressor, suffix) {
        return this.expression._find_defs(compressor, "." + this.property + suffix);
      });
      def(AST_SymbolDeclaration, function(compressor) {
        if (!this.definition().global)
          return;
        if (HOP(compressor.option("global_defs"), this.name))
          warn(this);
      });
      def(AST_SymbolRef, function(compressor, suffix) {
        if (!this.definition().global)
          return;
        var defines = compressor.option("global_defs");
        var name = this.name + suffix;
        if (HOP(defines, name))
          return to_node(defines[name], this);
      });
    })(function(node, func) {
      node.DEFMETHOD("_find_defs", func);
    });
    function best_of_expression(ast1, ast2, threshold) {
      var delta = ast2.print_to_string().length - ast1.print_to_string().length;
      return delta < (threshold || 0) ? ast2 : ast1;
    }
    function best_of_statement(ast1, ast2, threshold) {
      return best_of_expression(make_node(AST_SimpleStatement, ast1, {
        body: ast1
      }), make_node(AST_SimpleStatement, ast2, {
        body: ast2
      }), threshold).body;
    }
    function best_of(compressor, ast1, ast2, threshold) {
      return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2, threshold);
    }
    function convert_to_predicate(obj) {
      var map = Object.create(null);
      Object.keys(obj).forEach(function(key) {
        map[key] = makePredicate(obj[key]);
      });
      return map;
    }
    function skip_directives(body) {
      for (var i = 0;i < body.length; i++) {
        var stat = body[i];
        if (!(stat instanceof AST_Directive))
          return stat;
      }
    }
    function arrow_first_statement() {
      if (this.value)
        return make_node(AST_Return, this.value, { value: this.value });
      return skip_directives(this.body);
    }
    AST_Arrow.DEFMETHOD("first_statement", arrow_first_statement);
    AST_AsyncArrow.DEFMETHOD("first_statement", arrow_first_statement);
    AST_Lambda.DEFMETHOD("first_statement", function() {
      return skip_directives(this.body);
    });
    AST_Lambda.DEFMETHOD("length", function() {
      var argnames = this.argnames;
      for (var i = 0;i < argnames.length; i++) {
        if (argnames[i] instanceof AST_DefaultValue)
          break;
      }
      return i;
    });
    function try_evaluate(compressor, node) {
      var ev = node.evaluate(compressor);
      if (ev === node)
        return node;
      ev = make_node_from_constant(ev, node).optimize(compressor);
      return best_of(compressor, node, ev, compressor.eval_threshold);
    }
    var object_fns = [
      "constructor",
      "toString",
      "valueOf"
    ];
    var native_fns = convert_to_predicate({
      Array: [
        "indexOf",
        "join",
        "lastIndexOf",
        "slice"
      ].concat(object_fns),
      Boolean: object_fns,
      Function: object_fns,
      Number: [
        "toExponential",
        "toFixed",
        "toPrecision"
      ].concat(object_fns),
      Object: object_fns,
      RegExp: [
        "exec",
        "test"
      ].concat(object_fns),
      String: [
        "charAt",
        "charCodeAt",
        "concat",
        "indexOf",
        "italics",
        "lastIndexOf",
        "match",
        "replace",
        "search",
        "slice",
        "split",
        "substr",
        "substring",
        "toLowerCase",
        "toUpperCase",
        "trim"
      ].concat(object_fns)
    });
    var static_fns = convert_to_predicate({
      Array: [
        "isArray"
      ],
      Math: [
        "abs",
        "acos",
        "asin",
        "atan",
        "ceil",
        "cos",
        "exp",
        "floor",
        "log",
        "round",
        "sin",
        "sqrt",
        "tan",
        "atan2",
        "pow",
        "max",
        "min"
      ],
      Number: [
        "isFinite",
        "isNaN"
      ],
      Object: [
        "create",
        "getOwnPropertyDescriptor",
        "getOwnPropertyNames",
        "getPrototypeOf",
        "isExtensible",
        "isFrozen",
        "isSealed",
        "keys"
      ],
      String: [
        "fromCharCode",
        "raw"
      ]
    });
    function is_static_fn(node) {
      if (!(node instanceof AST_Dot))
        return false;
      var expr = node.expression;
      if (!is_undeclared_ref(expr))
        return false;
      var static_fn = static_fns[expr.name];
      return static_fn && (static_fn[node.property] || expr.name == "Math" && node.property == "random");
    }
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Constant, return_true);
      def(AST_RegExp, return_false);
      var unaryPrefix = makePredicate("! ~ - + void");
      def(AST_UnaryPrefix, function() {
        return unaryPrefix[this.operator] && this.expression instanceof AST_Constant;
      });
    })(function(node, func) {
      node.DEFMETHOD("is_constant", func);
    });
    (function(def) {
      AST_Node.DEFMETHOD("evaluate", function(compressor, ignore_side_effects) {
        if (!compressor.option("evaluate"))
          return this;
        var cached = [];
        var val = this._eval(compressor, ignore_side_effects, cached, 1);
        cached.forEach(function(node) {
          delete node._eval;
        });
        if (ignore_side_effects)
          return val;
        if (!val || val instanceof RegExp)
          return val;
        if (typeof val == "function" || typeof val == "object")
          return this;
        return val;
      });
      var scan_modified = new TreeWalker(function(node) {
        if (node instanceof AST_Assign)
          modified(node.left);
        if (node instanceof AST_ForEnumeration)
          modified(node.init);
        if (node instanceof AST_Unary && UNARY_POSTFIX[node.operator])
          modified(node.expression);
      });
      function modified(node) {
        if (node instanceof AST_DestructuredArray) {
          node.elements.forEach(modified);
        } else if (node instanceof AST_DestructuredObject) {
          node.properties.forEach(function(prop) {
            modified(prop.value);
          });
        } else if (node instanceof AST_PropAccess) {
          modified(node.expression);
        } else if (node instanceof AST_SymbolRef) {
          node.definition().references.forEach(function(ref) {
            delete ref._eval;
          });
        }
      }
      def(AST_Statement, function() {
        throw new Error(string_template("Cannot evaluate a statement [{start}]", this));
      });
      def(AST_Accessor, return_this);
      def(AST_BigInt, return_this);
      def(AST_Class, return_this);
      def(AST_Node, return_this);
      def(AST_Constant, function() {
        return this.value;
      });
      def(AST_Assign, function(compressor, ignore_side_effects, cached, depth) {
        var lhs = this.left;
        if (!ignore_side_effects) {
          if (!(lhs instanceof AST_SymbolRef))
            return this;
          if (!HOP(lhs, "_eval")) {
            if (!lhs.fixed)
              return this;
            var def2 = lhs.definition();
            if (!def2.fixed)
              return this;
            if (def2.undeclared)
              return this;
            if (def2.last_ref !== lhs)
              return this;
            if (def2.single_use == "m")
              return this;
            if (this.right.has_side_effects(compressor))
              return this;
          }
        }
        var op = this.operator;
        var node;
        if (!HOP(lhs, "_eval") && lhs instanceof AST_SymbolRef && lhs.fixed && lhs.definition().fixed) {
          node = lhs;
        } else if (op == "=") {
          node = this.right;
        } else {
          node = make_node(AST_Binary, this, {
            operator: op.slice(0, -1),
            left: lhs,
            right: this.right
          });
        }
        lhs.walk(scan_modified);
        var value = node._eval(compressor, ignore_side_effects, cached, depth);
        if (typeof value == "object")
          return this;
        modified(lhs);
        return value;
      });
      def(AST_Sequence, function(compressor, ignore_side_effects, cached, depth) {
        if (!ignore_side_effects)
          return this;
        var exprs = this.expressions;
        for (var i = 0, last = exprs.length - 1;i < last; i++) {
          exprs[i].walk(scan_modified);
        }
        var tail = exprs[last];
        var value = tail._eval(compressor, ignore_side_effects, cached, depth);
        return value === tail ? this : value;
      });
      def(AST_Lambda, function(compressor) {
        if (compressor.option("unsafe")) {
          var fn = function() {
          };
          fn.node = this;
          fn.toString = function() {
            return "function(){}";
          };
          return fn;
        }
        return this;
      });
      def(AST_Array, function(compressor, ignore_side_effects, cached, depth) {
        if (compressor.option("unsafe")) {
          var elements = [];
          for (var i = 0;i < this.elements.length; i++) {
            var element = this.elements[i];
            if (element instanceof AST_Hole)
              return this;
            var value = element._eval(compressor, ignore_side_effects, cached, depth);
            if (element === value)
              return this;
            elements.push(value);
          }
          return elements;
        }
        return this;
      });
      def(AST_Object, function(compressor, ignore_side_effects, cached, depth) {
        if (compressor.option("unsafe")) {
          var val = {};
          for (var i = 0;i < this.properties.length; i++) {
            var prop = this.properties[i];
            if (!(prop instanceof AST_ObjectKeyVal))
              return this;
            var key = prop.key;
            if (key instanceof AST_Node) {
              key = key._eval(compressor, ignore_side_effects, cached, depth);
              if (key === prop.key)
                return this;
            }
            switch (key) {
              case "__proto__":
              case "toString":
              case "valueOf":
                return this;
            }
            val[key] = prop.value._eval(compressor, ignore_side_effects, cached, depth);
            if (val[key] === prop.value)
              return this;
          }
          return val;
        }
        return this;
      });
      var non_converting_unary = makePredicate("! typeof void");
      def(AST_UnaryPrefix, function(compressor, ignore_side_effects, cached, depth) {
        var e = this.expression;
        var op = this.operator;
        if (compressor.option("typeofs") && op == "typeof" && (e instanceof AST_Lambda || e instanceof AST_SymbolRef && e.fixed_value() instanceof AST_Lambda)) {
          return "function";
        }
        var def2 = e instanceof AST_SymbolRef && e.definition();
        if (!non_converting_unary[op] && !(def2 && def2.fixed))
          depth++;
        e.walk(scan_modified);
        var v = e._eval(compressor, ignore_side_effects, cached, depth);
        if (v === e) {
          if (ignore_side_effects && op == "void")
            return;
          return this;
        }
        switch (op) {
          case "!":
            return !v;
          case "typeof":
            if (v instanceof RegExp)
              return this;
            return typeof v;
          case "void":
            return;
          case "~":
            return ~v;
          case "-":
            return -v;
          case "+":
            return +v;
          case "++":
          case "--":
            if (!def2)
              return this;
            if (!ignore_side_effects) {
              if (def2.undeclared)
                return this;
              if (def2.last_ref !== e)
                return this;
            }
            if (HOP(e, "_eval"))
              v = +(op[0] + 1) + +v;
            modified(e);
            return v;
        }
        return this;
      });
      def(AST_UnaryPostfix, function(compressor, ignore_side_effects, cached, depth) {
        var e = this.expression;
        if (!(e instanceof AST_SymbolRef)) {
          if (!ignore_side_effects)
            return this;
        } else if (!HOP(e, "_eval")) {
          if (!e.fixed)
            return this;
          if (!ignore_side_effects) {
            var def2 = e.definition();
            if (!def2.fixed)
              return this;
            if (def2.undeclared)
              return this;
            if (def2.last_ref !== e)
              return this;
          }
        }
        if (!(e instanceof AST_SymbolRef && e.definition().fixed))
          depth++;
        e.walk(scan_modified);
        var v = e._eval(compressor, ignore_side_effects, cached, depth);
        if (v === e)
          return this;
        modified(e);
        return +v;
      });
      var non_converting_binary = makePredicate("&& || === !==");
      def(AST_Binary, function(compressor, ignore_side_effects, cached, depth) {
        if (!non_converting_binary[this.operator])
          depth++;
        var left = this.left._eval(compressor, ignore_side_effects, cached, depth);
        if (left === this.left)
          return this;
        if (this.operator == (left ? "||" : "&&"))
          return left;
        var rhs_ignore_side_effects = ignore_side_effects && !(left && typeof left == "object");
        var right = this.right._eval(compressor, rhs_ignore_side_effects, cached, depth);
        if (right === this.right)
          return this;
        var result;
        switch (this.operator) {
          case "&&":
            result = left && right;
            break;
          case "||":
            result = left || right;
            break;
          case "??":
            result = left == null ? right : left;
            break;
          case "|":
            result = left | right;
            break;
          case "&":
            result = left & right;
            break;
          case "^":
            result = left ^ right;
            break;
          case "+":
            result = left + right;
            break;
          case "-":
            result = left - right;
            break;
          case "*":
            result = left * right;
            break;
          case "/":
            result = left / right;
            break;
          case "%":
            result = left % right;
            break;
          case "<<":
            result = left << right;
            break;
          case ">>":
            result = left >> right;
            break;
          case ">>>":
            result = left >>> right;
            break;
          case "==":
            result = left == right;
            break;
          case "===":
            result = left === right;
            break;
          case "!=":
            result = left != right;
            break;
          case "!==":
            result = left !== right;
            break;
          case "<":
            result = left < right;
            break;
          case "<=":
            result = left <= right;
            break;
          case ">":
            result = left > right;
            break;
          case ">=":
            result = left >= right;
            break;
          case "**":
            result = Math.pow(left, right);
            break;
          case "in":
            if (right && typeof right == "object" && HOP(right, left)) {
              result = true;
              break;
            }
          default:
            return this;
        }
        if (isNaN(result))
          return compressor.find_parent(AST_With) ? this : result;
        if (compressor.option("unsafe_math") && !ignore_side_effects && result && typeof result == "number" && (this.operator == "+" || this.operator == "-")) {
          var digits = Math.max(0, decimals(left), decimals(right));
          if (digits < 16)
            return +result.toFixed(digits);
        }
        return result;
        function decimals(operand) {
          var match = /(\.[0-9]*)?(e[^e]+)?$/.exec(+operand);
          return (match[1] || ".").length - 1 - (match[2] || "").slice(1);
        }
      });
      def(AST_Conditional, function(compressor, ignore_side_effects, cached, depth) {
        var condition = this.condition._eval(compressor, ignore_side_effects, cached, depth);
        if (condition === this.condition)
          return this;
        var node = condition ? this.consequent : this.alternative;
        var value = node._eval(compressor, ignore_side_effects, cached, depth);
        return value === node ? this : value;
      });
      function verify_escaped(ref, depth) {
        var escaped = ref.definition().escaped;
        switch (escaped.length) {
          case 0:
            return true;
          case 1:
            var found = false;
            escaped[0].walk(new TreeWalker(function(node) {
              if (found)
                return true;
              if (node === ref)
                return found = true;
              if (node instanceof AST_Scope)
                return true;
            }));
            return found;
          default:
            return depth <= escaped.depth;
        }
      }
      def(AST_SymbolRef, function(compressor, ignore_side_effects, cached, depth) {
        var fixed = this.fixed_value();
        if (!fixed)
          return this;
        var value;
        if (HOP(fixed, "_eval")) {
          value = fixed._eval();
        } else {
          this._eval = return_this;
          value = fixed._eval(compressor, ignore_side_effects, cached, depth);
          delete this._eval;
          if (value === fixed)
            return this;
          fixed._eval = function() {
            return value;
          };
          cached.push(fixed);
        }
        return value && typeof value == "object" && !verify_escaped(this, depth) ? this : value;
      });
      var global_objs = {
        Array,
        Math,
        Number,
        Object,
        String
      };
      var static_values = convert_to_predicate({
        Math: [
          "E",
          "LN10",
          "LN2",
          "LOG2E",
          "LOG10E",
          "PI",
          "SQRT1_2",
          "SQRT2"
        ],
        Number: [
          "MAX_VALUE",
          "MIN_VALUE",
          "NaN",
          "NEGATIVE_INFINITY",
          "POSITIVE_INFINITY"
        ]
      });
      var regexp_props = makePredicate("global ignoreCase multiline source");
      def(AST_PropAccess, function(compressor, ignore_side_effects, cached, depth) {
        if (compressor.option("unsafe")) {
          var val;
          var exp = this.expression;
          if (!is_undeclared_ref(exp)) {
            val = exp._eval(compressor, ignore_side_effects, cached, depth + 1);
            if (val == null || val === exp)
              return this;
          }
          var key = this.property;
          if (key instanceof AST_Node) {
            key = key._eval(compressor, ignore_side_effects, cached, depth);
            if (key === this.property)
              return this;
          }
          if (val === undefined) {
            var static_value = static_values[exp.name];
            if (!static_value || !static_value[key])
              return this;
            val = global_objs[exp.name];
          } else if (val instanceof RegExp) {
            if (!regexp_props[key])
              return this;
          } else if (typeof val == "object") {
            if (!HOP(val, key))
              return this;
          } else if (typeof val == "function")
            switch (key) {
              case "name":
                return val.node.name ? val.node.name.name : "";
              case "length":
                return val.node.length();
              default:
                return this;
            }
          return val[key];
        }
        return this;
      });
      function eval_all(nodes, compressor, ignore_side_effects, cached, depth) {
        var values = [];
        for (var i = 0;i < nodes.length; i++) {
          var node = nodes[i];
          var value = node._eval(compressor, ignore_side_effects, cached, depth);
          if (node === value)
            return;
          values.push(value);
        }
        return values;
      }
      def(AST_Call, function(compressor, ignore_side_effects, cached, depth) {
        var exp = this.expression;
        var fn = exp instanceof AST_SymbolRef ? exp.fixed_value() : exp;
        if (fn instanceof AST_Arrow || fn instanceof AST_Defun || fn instanceof AST_Function) {
          if (fn.evaluating)
            return this;
          if (fn.name && fn.name.definition().recursive_refs > 0)
            return this;
          if (this.is_expr_pure(compressor))
            return this;
          var args = eval_all(this.args, compressor, ignore_side_effects, cached, depth);
          if (!all(fn.argnames, function(sym, index) {
            if (sym instanceof AST_DefaultValue) {
              if (!args)
                return false;
              if (args[index] === undefined) {
                var value = sym.value._eval(compressor, ignore_side_effects, cached, depth);
                if (value === sym.value)
                  return false;
                args[index] = value;
              }
              sym = sym.name;
            }
            return !(sym instanceof AST_Destructured);
          }))
            return this;
          if (fn.rest instanceof AST_Destructured)
            return this;
          if (!args && !ignore_side_effects)
            return this;
          var stat = fn.first_statement();
          if (!(stat instanceof AST_Return)) {
            if (ignore_side_effects) {
              fn.walk(scan_modified);
              var found = false;
              fn.evaluating = true;
              walk_body(fn, new TreeWalker(function(node) {
                if (found)
                  return true;
                if (node instanceof AST_Return) {
                  if (node.value && node.value._eval(compressor, true, cached, depth) !== undefined) {
                    found = true;
                  }
                  return true;
                }
                if (node instanceof AST_Scope && node !== fn)
                  return true;
              }));
              fn.evaluating = false;
              if (!found)
                return;
            }
            return this;
          }
          var val = stat.value;
          if (!val)
            return;
          var cached_args = [];
          if (!args || all(fn.argnames, function(sym, i) {
            return assign(sym, args[i]);
          }) && !(fn.rest && !assign(fn.rest, args.slice(fn.argnames.length))) || ignore_side_effects) {
            if (ignore_side_effects)
              fn.argnames.forEach(function(sym) {
                if (sym instanceof AST_DefaultValue)
                  sym.value.walk(scan_modified);
              });
            fn.evaluating = true;
            val = val._eval(compressor, ignore_side_effects, cached, depth);
            fn.evaluating = false;
          }
          cached_args.forEach(function(node) {
            delete node._eval;
          });
          return val === stat.value ? this : val;
        } else if (compressor.option("unsafe") && exp instanceof AST_PropAccess) {
          var key = exp.property;
          if (key instanceof AST_Node) {
            key = key._eval(compressor, ignore_side_effects, cached, depth);
            if (key === exp.property)
              return this;
          }
          var val;
          var e = exp.expression;
          if (is_undeclared_ref(e)) {
            var static_fn = static_fns[e.name];
            if (!static_fn || !static_fn[key])
              return this;
            val = global_objs[e.name];
          } else {
            val = e._eval(compressor, ignore_side_effects, cached, depth + 1);
            if (val == null || val === e)
              return this;
            var native_fn = native_fns[val.constructor.name];
            if (!native_fn || !native_fn[key])
              return this;
            if (val instanceof RegExp && val.global && !(e instanceof AST_RegExp))
              return this;
          }
          var args = eval_all(this.args, compressor, ignore_side_effects, cached, depth);
          if (!args)
            return this;
          if (key == "replace" && typeof args[1] == "function")
            return this;
          try {
            return val[key].apply(val, args);
          } catch (ex) {
            AST_Node.warn("Error evaluating {this} [{start}]", this);
          } finally {
            if (val instanceof RegExp)
              val.lastIndex = 0;
          }
        }
        return this;
        function assign(sym, arg) {
          if (sym instanceof AST_DefaultValue)
            sym = sym.name;
          var def2 = sym.definition();
          if (def2.orig[def2.orig.length - 1] !== sym)
            return false;
          var value = arg;
          def2.references.forEach(function(node) {
            node._eval = function() {
              return value;
            };
            cached_args.push(node);
          });
          return true;
        }
      });
      def(AST_New, return_this);
      def(AST_Template, function(compressor, ignore_side_effects, cached, depth) {
        if (!compressor.option("templates"))
          return this;
        if (this.tag) {
          if (!is_raw_tag(compressor, this.tag))
            return this;
          decode = function(str) {
            return str;
          };
        }
        var exprs = eval_all(this.expressions, compressor, ignore_side_effects, cached, depth);
        if (!exprs)
          return this;
        var malformed = false;
        var ret = decode(this.strings[0]);
        for (var i = 0;i < exprs.length; i++) {
          ret += exprs[i] + decode(this.strings[i + 1]);
        }
        if (!malformed)
          return ret;
        this._eval = return_this;
        return this;
        function decode(str) {
          str = decode_template(str);
          if (typeof str != "string")
            malformed = true;
          return str;
        }
      });
    })(function(node, func) {
      node.DEFMETHOD("_eval", func);
    });
    (function(def) {
      function basic_negation(exp) {
        return make_node(AST_UnaryPrefix, exp, {
          operator: "!",
          expression: exp
        });
      }
      function best(orig, alt, first_in_statement2) {
        var negated = basic_negation(orig);
        if (first_in_statement2)
          return best_of_expression(negated, make_node(AST_SimpleStatement, alt, {
            body: alt
          })) === negated ? negated : alt;
        return best_of_expression(negated, alt);
      }
      def(AST_Node, function() {
        return basic_negation(this);
      });
      def(AST_Statement, function() {
        throw new Error("Cannot negate a statement");
      });
      def(AST_Binary, function(compressor, first_in_statement2) {
        var self = this.clone(), op = this.operator;
        if (compressor.option("unsafe_comps")) {
          switch (op) {
            case "<=":
              self.operator = ">";
              return self;
            case "<":
              self.operator = ">=";
              return self;
            case ">=":
              self.operator = "<";
              return self;
            case ">":
              self.operator = "<=";
              return self;
          }
        }
        switch (op) {
          case "==":
            self.operator = "!=";
            return self;
          case "!=":
            self.operator = "==";
            return self;
          case "===":
            self.operator = "!==";
            return self;
          case "!==":
            self.operator = "===";
            return self;
          case "&&":
            self.operator = "||";
            self.left = self.left.negate(compressor, first_in_statement2);
            self.right = self.right.negate(compressor);
            return best(this, self, first_in_statement2);
          case "||":
            self.operator = "&&";
            self.left = self.left.negate(compressor, first_in_statement2);
            self.right = self.right.negate(compressor);
            return best(this, self, first_in_statement2);
        }
        return basic_negation(this);
      });
      def(AST_ClassExpression, function() {
        return basic_negation(this);
      });
      def(AST_Conditional, function(compressor, first_in_statement2) {
        var self = this.clone();
        self.consequent = self.consequent.negate(compressor);
        self.alternative = self.alternative.negate(compressor);
        return best(this, self, first_in_statement2);
      });
      def(AST_LambdaExpression, function() {
        return basic_negation(this);
      });
      def(AST_Sequence, function(compressor) {
        var expressions = this.expressions.slice();
        expressions.push(expressions.pop().negate(compressor));
        return make_sequence(this, expressions);
      });
      def(AST_UnaryPrefix, function() {
        if (this.operator == "!")
          return this.expression;
        return basic_negation(this);
      });
    })(function(node, func) {
      node.DEFMETHOD("negate", function(compressor, first_in_statement2) {
        return func.call(this, compressor, first_in_statement2);
      });
    });
    var global_pure_fns = makePredicate("Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError");
    var global_pure_constructors = makePredicate("Map Set WeakMap WeakSet");
    AST_Call.DEFMETHOD("is_expr_pure", function(compressor) {
      if (compressor.option("unsafe")) {
        var expr = this.expression;
        if (is_undeclared_ref(expr)) {
          if (global_pure_fns[expr.name])
            return true;
          if (this instanceof AST_New && global_pure_constructors[expr.name])
            return true;
        }
        if (is_static_fn(expr))
          return true;
      }
      return compressor.option("annotations") && this.pure || !compressor.pure_funcs(this);
    });
    AST_Template.DEFMETHOD("is_expr_pure", function(compressor) {
      var tag = this.tag;
      if (!tag)
        return true;
      if (compressor.option("unsafe")) {
        if (is_undeclared_ref(tag) && global_pure_fns[tag.name])
          return true;
        if (tag instanceof AST_Dot && is_undeclared_ref(tag.expression)) {
          var static_fn = static_fns[tag.expression.name];
          return static_fn && (static_fn[tag.property] || tag.expression.name == "Math" && tag.property == "random");
        }
      }
      return !compressor.pure_funcs(this);
    });
    AST_Node.DEFMETHOD("is_call_pure", return_false);
    AST_Call.DEFMETHOD("is_call_pure", function(compressor) {
      if (!compressor.option("unsafe"))
        return false;
      var dot = this.expression;
      if (!(dot instanceof AST_Dot))
        return false;
      var exp = dot.expression;
      var map;
      var prop = dot.property;
      if (exp instanceof AST_Array) {
        map = native_fns.Array;
      } else if (exp.is_boolean(compressor)) {
        map = native_fns.Boolean;
      } else if (exp.is_number(compressor)) {
        map = native_fns.Number;
      } else if (exp instanceof AST_RegExp) {
        map = native_fns.RegExp;
      } else if (exp.is_string(compressor)) {
        map = native_fns.String;
        if (prop == "replace") {
          var arg = this.args[1];
          if (arg && !arg.is_string(compressor))
            return false;
        }
      } else if (!dot.may_throw_on_access(compressor)) {
        map = native_fns.Object;
      }
      return map && map[prop];
    });
    (function(def) {
      def(AST_Node, return_false);
      def(AST_Array, return_true);
      def(AST_Assign, function() {
        switch (this.operator) {
          case "=":
            return this.right.safe_to_spread();
          case "&&=":
          case "||=":
          case "??=":
            return this.left.safe_to_spread() && this.right.safe_to_spread();
        }
        return true;
      });
      def(AST_Binary, function() {
        return !lazy_op[this.operator] || this.left.safe_to_spread() && this.right.safe_to_spread();
      });
      def(AST_Constant, return_true);
      def(AST_Lambda, return_true);
      def(AST_Object, function() {
        return all(this.properties, function(prop) {
          return !(prop instanceof AST_ObjectGetter || prop instanceof AST_Spread);
        });
      });
      def(AST_Sequence, function() {
        return this.tail_node().safe_to_spread();
      });
      def(AST_SymbolRef, function() {
        var fixed = this.fixed_value();
        return fixed && fixed.safe_to_spread();
      });
      def(AST_Unary, return_true);
    })(function(node, func) {
      node.DEFMETHOD("safe_to_spread", func);
    });
    (function(def) {
      function any(list, compressor, spread) {
        return !all(list, spread ? function(node) {
          return node instanceof AST_Spread ? !spread(node, compressor) : !node.has_side_effects(compressor);
        } : function(node) {
          return !node.has_side_effects(compressor);
        });
      }
      function array_spread(node, compressor) {
        var exp = node.expression;
        return !exp.is_string(compressor) || exp.has_side_effects(compressor);
      }
      def(AST_Node, return_true);
      def(AST_Array, function(compressor) {
        return any(this.elements, compressor, array_spread);
      });
      def(AST_Assign, function(compressor) {
        var lhs = this.left;
        if (!(lhs instanceof AST_PropAccess))
          return true;
        var node = lhs.expression;
        return !(node instanceof AST_ObjectIdentity) || !node.scope.resolve().new || lhs instanceof AST_Sub && lhs.property.has_side_effects(compressor) || this.right.has_side_effects(compressor);
      });
      def(AST_Binary, function(compressor) {
        return this.left.has_side_effects(compressor) || this.right.has_side_effects(compressor) || !can_drop_op(this.operator, this.right, compressor);
      });
      def(AST_Block, function(compressor) {
        return any(this.body, compressor);
      });
      def(AST_Call, function(compressor) {
        if (!this.is_expr_pure(compressor) && (!this.is_call_pure(compressor) || this.expression.has_side_effects(compressor))) {
          return true;
        }
        return any(this.args, compressor, array_spread);
      });
      def(AST_Case, function(compressor) {
        return this.expression.has_side_effects(compressor) || any(this.body, compressor);
      });
      def(AST_Class, function(compressor) {
        var base = this.extends;
        if (base) {
          if (base instanceof AST_SymbolRef)
            base = base.fixed_value();
          if (!safe_for_extends(base))
            return true;
        }
        return any(this.properties, compressor);
      });
      def(AST_ClassProperty, function(compressor) {
        return this.key instanceof AST_Node && this.key.has_side_effects(compressor) || this.static && this.value && this.value.has_side_effects(compressor);
      });
      def(AST_Conditional, function(compressor) {
        return this.condition.has_side_effects(compressor) || this.consequent.has_side_effects(compressor) || this.alternative.has_side_effects(compressor);
      });
      def(AST_Constant, return_false);
      def(AST_Definitions, function(compressor) {
        return any(this.definitions, compressor);
      });
      def(AST_DestructuredArray, function(compressor) {
        return any(this.elements, compressor);
      });
      def(AST_DestructuredKeyVal, function(compressor) {
        return this.key instanceof AST_Node && this.key.has_side_effects(compressor) || this.value.has_side_effects(compressor);
      });
      def(AST_DestructuredObject, function(compressor) {
        return any(this.properties, compressor);
      });
      def(AST_Dot, function(compressor) {
        return this.expression.may_throw_on_access(compressor) || this.expression.has_side_effects(compressor);
      });
      def(AST_EmptyStatement, return_false);
      def(AST_If, function(compressor) {
        return this.condition.has_side_effects(compressor) || this.body && this.body.has_side_effects(compressor) || this.alternative && this.alternative.has_side_effects(compressor);
      });
      def(AST_LabeledStatement, function(compressor) {
        return this.body.has_side_effects(compressor);
      });
      def(AST_Lambda, return_false);
      def(AST_Object, function(compressor) {
        return any(this.properties, compressor, function(node, compressor2) {
          var exp = node.expression;
          return !exp.safe_to_spread() || exp.has_side_effects(compressor2);
        });
      });
      def(AST_ObjectIdentity, return_false);
      def(AST_ObjectProperty, function(compressor) {
        return this.key instanceof AST_Node && this.key.has_side_effects(compressor) || this.value.has_side_effects(compressor);
      });
      def(AST_Sequence, function(compressor) {
        return any(this.expressions, compressor);
      });
      def(AST_SimpleStatement, function(compressor) {
        return this.body.has_side_effects(compressor);
      });
      def(AST_Sub, function(compressor) {
        return this.expression.may_throw_on_access(compressor) || this.expression.has_side_effects(compressor) || this.property.has_side_effects(compressor);
      });
      def(AST_Switch, function(compressor) {
        return this.expression.has_side_effects(compressor) || any(this.body, compressor);
      });
      def(AST_SymbolDeclaration, return_false);
      def(AST_SymbolRef, function(compressor) {
        return !this.is_declared(compressor) || !can_drop_symbol(this, compressor);
      });
      def(AST_Template, function(compressor) {
        return !this.is_expr_pure(compressor) || any(this.expressions, compressor);
      });
      def(AST_Try, function(compressor) {
        return any(this.body, compressor) || this.bcatch && this.bcatch.has_side_effects(compressor) || this.bfinally && this.bfinally.has_side_effects(compressor);
      });
      def(AST_Unary, function(compressor) {
        return unary_side_effects[this.operator] || this.expression.has_side_effects(compressor);
      });
      def(AST_VarDef, function() {
        return this.value;
      });
    })(function(node, func) {
      node.DEFMETHOD("has_side_effects", func);
    });
    (function(def) {
      def(AST_Node, return_true);
      def(AST_Constant, return_false);
      def(AST_EmptyStatement, return_false);
      def(AST_Lambda, return_false);
      def(AST_ObjectIdentity, return_false);
      def(AST_SymbolDeclaration, return_false);
      function any(list, compressor) {
        for (var i = list.length;--i >= 0; )
          if (list[i].may_throw(compressor))
            return true;
        return false;
      }
      function call_may_throw(exp, compressor) {
        if (exp.may_throw(compressor))
          return true;
        if (exp instanceof AST_SymbolRef)
          exp = exp.fixed_value();
        if (!(exp instanceof AST_Lambda))
          return true;
        if (any(exp.argnames, compressor))
          return true;
        if (any(exp.body, compressor))
          return true;
        return is_arrow(exp) && exp.value && exp.value.may_throw(compressor);
      }
      def(AST_Array, function(compressor) {
        return any(this.elements, compressor);
      });
      def(AST_Assign, function(compressor) {
        if (this.right.may_throw(compressor))
          return true;
        if (!compressor.has_directive("use strict") && this.operator == "=" && this.left instanceof AST_SymbolRef) {
          return false;
        }
        return this.left.may_throw(compressor);
      });
      def(AST_Await, function(compressor) {
        return this.expression.may_throw(compressor);
      });
      def(AST_Binary, function(compressor) {
        return this.left.may_throw(compressor) || this.right.may_throw(compressor) || !can_drop_op(this.operator, this.right, compressor);
      });
      def(AST_Block, function(compressor) {
        return any(this.body, compressor);
      });
      def(AST_Call, function(compressor) {
        if (any(this.args, compressor))
          return true;
        if (this.is_expr_pure(compressor))
          return false;
        this.may_throw = return_true;
        var ret = call_may_throw(this.expression, compressor);
        delete this.may_throw;
        return ret;
      });
      def(AST_Case, function(compressor) {
        return this.expression.may_throw(compressor) || any(this.body, compressor);
      });
      def(AST_Conditional, function(compressor) {
        return this.condition.may_throw(compressor) || this.consequent.may_throw(compressor) || this.alternative.may_throw(compressor);
      });
      def(AST_DefaultValue, function(compressor) {
        return this.name.may_throw(compressor) || this.value && this.value.may_throw(compressor);
      });
      def(AST_Definitions, function(compressor) {
        return any(this.definitions, compressor);
      });
      def(AST_Dot, function(compressor) {
        return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor);
      });
      def(AST_ForEnumeration, function(compressor) {
        if (this.init.may_throw(compressor))
          return true;
        var obj = this.object;
        if (obj.may_throw(compressor))
          return true;
        obj = obj.tail_node();
        if (!(obj instanceof AST_Array || obj.is_string(compressor)))
          return true;
        return this.body.may_throw(compressor);
      });
      def(AST_If, function(compressor) {
        return this.condition.may_throw(compressor) || this.body && this.body.may_throw(compressor) || this.alternative && this.alternative.may_throw(compressor);
      });
      def(AST_LabeledStatement, function(compressor) {
        return this.body.may_throw(compressor);
      });
      def(AST_Object, function(compressor) {
        return any(this.properties, compressor);
      });
      def(AST_ObjectProperty, function(compressor) {
        return this.value.may_throw(compressor) || this.key instanceof AST_Node && this.key.may_throw(compressor);
      });
      def(AST_Return, function(compressor) {
        return this.value && this.value.may_throw(compressor);
      });
      def(AST_Sequence, function(compressor) {
        return any(this.expressions, compressor);
      });
      def(AST_SimpleStatement, function(compressor) {
        return this.body.may_throw(compressor);
      });
      def(AST_Sub, function(compressor) {
        return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor) || this.property.may_throw(compressor);
      });
      def(AST_Switch, function(compressor) {
        return this.expression.may_throw(compressor) || any(this.body, compressor);
      });
      def(AST_SymbolRef, function(compressor) {
        return !this.is_declared(compressor) || !can_drop_symbol(this, compressor);
      });
      def(AST_Template, function(compressor) {
        if (any(this.expressions, compressor))
          return true;
        if (this.is_expr_pure(compressor))
          return false;
        if (!this.tag)
          return false;
        this.may_throw = return_true;
        var ret = call_may_throw(this.tag, compressor);
        delete this.may_throw;
        return ret;
      });
      def(AST_Try, function(compressor) {
        return (this.bcatch ? this.bcatch.may_throw(compressor) : any(this.body, compressor)) || this.bfinally && this.bfinally.may_throw(compressor);
      });
      def(AST_Unary, function(compressor) {
        return this.expression.may_throw(compressor) && !(this.operator == "typeof" && this.expression instanceof AST_SymbolRef);
      });
      def(AST_VarDef, function(compressor) {
        return this.name.may_throw(compressor) || this.value && this.value.may_throw(compressor);
      });
    })(function(node, func) {
      node.DEFMETHOD("may_throw", func);
    });
    (function(def) {
      function all_constant(list, scope) {
        for (var i = list.length;--i >= 0; )
          if (!list[i].is_constant_expression(scope))
            return false;
        return true;
      }
      def(AST_Node, return_false);
      def(AST_Array, function(scope) {
        return all_constant(this.elements, scope);
      });
      def(AST_Binary, function(scope) {
        return this.left.is_constant_expression(scope) && this.right.is_constant_expression(scope) && can_drop_op(this.operator, this.right);
      });
      def(AST_Class, function(scope) {
        var base = this.extends;
        if (base && !safe_for_extends(base))
          return false;
        return all_constant(this.properties, scope);
      });
      def(AST_ClassProperty, function(scope) {
        return typeof this.key == "string" && (!this.value || this.value.is_constant_expression(scope));
      });
      def(AST_Constant, return_true);
      def(AST_Lambda, function(scope) {
        var self = this;
        var result = true;
        var scopes = [];
        self.walk(new TreeWalker(function(node, descend) {
          if (!result)
            return true;
          if (node instanceof AST_BlockScope) {
            if (node === self)
              return;
            scopes.push(node);
            descend();
            scopes.pop();
            return true;
          }
          if (node instanceof AST_SymbolRef) {
            if (self.inlined || node.redef || node.in_arg) {
              result = false;
              return true;
            }
            if (self.variables.has(node.name))
              return true;
            var def2 = node.definition();
            if (member(def2.scope, scopes))
              return true;
            if (scope && !def2.redefined()) {
              var scope_def = scope.find_variable(node.name);
              if (scope_def ? scope_def === def2 : def2.undeclared) {
                result = "f";
                return true;
              }
            }
            result = false;
            return true;
          }
          if (node instanceof AST_ObjectIdentity) {
            if (is_arrow(self) && all(scopes, function(s2) {
              return !(s2 instanceof AST_Scope) || is_arrow(s2);
            }))
              result = false;
            return true;
          }
        }));
        return result;
      });
      def(AST_Object, function(scope) {
        return all_constant(this.properties, scope);
      });
      def(AST_ObjectProperty, function(scope) {
        return typeof this.key == "string" && this.value.is_constant_expression(scope);
      });
      def(AST_Unary, function(scope) {
        return this.expression.is_constant_expression(scope);
      });
    })(function(node, func) {
      node.DEFMETHOD("is_constant_expression", func);
    });
    function aborts(thing) {
      return thing && thing.aborts();
    }
    (function(def) {
      def(AST_Statement, return_null);
      def(AST_Jump, return_this);
      function block_aborts() {
        var n = this.body.length;
        return n > 0 && aborts(this.body[n - 1]);
      }
      def(AST_BlockStatement, block_aborts);
      def(AST_SwitchBranch, block_aborts);
      def(AST_If, function() {
        return this.alternative && aborts(this.body) && aborts(this.alternative) && this;
      });
    })(function(node, func) {
      node.DEFMETHOD("aborts", func);
    });
    var directives = makePredicate(["use asm", "use strict"]);
    OPT(AST_Directive, function(self, compressor) {
      if (compressor.option("directives") && (!directives[self.value] || compressor.has_directive(self.value) !== self)) {
        return make_node(AST_EmptyStatement, self);
      }
      return self;
    });
    OPT(AST_Debugger, function(self, compressor) {
      if (compressor.option("drop_debugger"))
        return make_node(AST_EmptyStatement, self);
      return self;
    });
    OPT(AST_LabeledStatement, function(self, compressor) {
      if (self.body instanceof AST_If || self.body instanceof AST_Break) {
        var body = tighten_body([self.body], compressor);
        switch (body.length) {
          case 0:
            self.body = make_node(AST_EmptyStatement, self);
            break;
          case 1:
            self.body = body[0];
            break;
          default:
            self.body = make_node(AST_BlockStatement, self, { body });
            break;
        }
      }
      return compressor.option("unused") && self.label.references.length == 0 ? self.body : self;
    });
    OPT(AST_LoopControl, function(self, compressor) {
      if (!compressor.option("dead_code"))
        return self;
      var label = self.label;
      if (label) {
        var lct = compressor.loopcontrol_target(self);
        self.label = null;
        if (compressor.loopcontrol_target(self) === lct) {
          remove(label.thedef.references, self);
        } else {
          self.label = label;
        }
      }
      return self;
    });
    OPT(AST_Block, function(self, compressor) {
      self.body = tighten_body(self.body, compressor);
      return self;
    });
    function trim_block(node, parent, in_list) {
      switch (node.body.length) {
        case 0:
          return in_list ? List.skip : make_node(AST_EmptyStatement, node);
        case 1:
          var stat = node.body[0];
          if (!safe_to_trim(stat))
            return node;
          if (parent instanceof AST_IterationStatement && stat instanceof AST_LambdaDefinition)
            return node;
          return stat;
      }
      return node;
    }
    OPT(AST_BlockStatement, function(self, compressor) {
      self.body = tighten_body(self.body, compressor);
      return trim_block(self, compressor.parent());
    });
    function drop_rest_farg(fn, compressor) {
      if (!compressor.option("rests"))
        return;
      if (fn.uses_arguments)
        return;
      if (!(fn.rest instanceof AST_DestructuredArray))
        return;
      if (!compressor.drop_fargs(fn, compressor.parent()))
        return;
      fn.argnames = fn.argnames.concat(fn.rest.elements);
      fn.rest = fn.rest.rest;
    }
    OPT(AST_Lambda, function(self, compressor) {
      drop_rest_farg(self, compressor);
      self.body = tighten_body(self.body, compressor);
      return self;
    });
    function opt_arrow(self, compressor) {
      if (!compressor.option("arrows"))
        return self;
      drop_rest_farg(self, compressor);
      if (self.value)
        self.body = [self.first_statement()];
      var body = tighten_body(self.body, compressor);
      switch (body.length) {
        case 1:
          var stat = body[0];
          if (stat instanceof AST_Return) {
            self.body.length = 0;
            self.value = stat.value;
            break;
          }
        default:
          self.body = body;
          self.value = null;
          break;
      }
      return self;
    }
    OPT(AST_Arrow, opt_arrow);
    OPT(AST_AsyncArrow, opt_arrow);
    OPT(AST_Function, function(self, compressor) {
      drop_rest_farg(self, compressor);
      self.body = tighten_body(self.body, compressor);
      var parent = compressor.parent();
      if (compressor.option("inline"))
        for (var i = 0;i < self.body.length; i++) {
          var stat = self.body[i];
          if (stat instanceof AST_Directive)
            continue;
          if (stat instanceof AST_Return) {
            if (i != self.body.length - 1)
              break;
            var call = stat.value;
            if (!call || call.TYPE != "Call")
              break;
            if (call.is_expr_pure(compressor))
              break;
            var exp = call.expression, fn;
            if (!(exp instanceof AST_SymbolRef)) {
              fn = exp;
            } else if (self.name && self.name.definition() === exp.definition()) {
              break;
            } else {
              fn = exp.fixed_value();
            }
            if (!(fn instanceof AST_Defun || fn instanceof AST_Function))
              break;
            if (fn.rest)
              break;
            if (fn.uses_arguments)
              break;
            if (fn === exp) {
              if (fn.parent_scope !== self)
                break;
              if (!all(fn.enclosed, function(def) {
                return def.scope !== self;
              }))
                break;
            }
            if ((fn !== exp || fn.name) && (parent instanceof AST_ClassMethod || parent instanceof AST_ObjectMethod) && parent.value === compressor.self())
              break;
            if (fn.contains_this())
              break;
            var len = fn.argnames.length;
            if (len > 0 && compressor.option("inline") < 2)
              break;
            if (len > self.argnames.length)
              break;
            if (!all(self.argnames, function(argname) {
              return argname instanceof AST_SymbolFunarg;
            }))
              break;
            if (!all(call.args, function(arg2) {
              return !(arg2 instanceof AST_Spread);
            }))
              break;
            for (var j2 = 0;j2 < len; j2++) {
              var arg = call.args[j2];
              if (!(arg instanceof AST_SymbolRef))
                break;
              if (arg.definition() !== self.argnames[j2].definition())
                break;
            }
            if (j2 < len)
              break;
            for (;j2 < call.args.length; j2++) {
              if (call.args[j2].has_side_effects(compressor))
                break;
            }
            if (j2 < call.args.length)
              break;
            if (len < self.argnames.length && !compressor.drop_fargs(self, parent)) {
              if (!compressor.drop_fargs(fn, call))
                break;
              do {
                fn.argnames.push(fn.make_var(AST_SymbolFunarg, fn, "argument_" + len));
              } while (++len < self.argnames.length);
            }
            return exp;
          }
          break;
        }
      return self;
    });
    var NO_MERGE = makePredicate("arguments await yield");
    AST_Scope.DEFMETHOD("merge_variables", function(compressor) {
      if (!compressor.option("merge_vars"))
        return;
      var in_arg = [], in_try, root, segment = {}, self = this;
      var first = [], last = [], index = 0;
      var declarations = new Dictionary;
      var references = Object.create(null);
      var prev = Object.create(null);
      var tw = new TreeWalker(function(node, descend) {
        if (node instanceof AST_Assign) {
          var lhs = node.left;
          var rhs = node.right;
          if (lhs instanceof AST_Destructured) {
            rhs.walk(tw);
            walk_destructured(AST_SymbolRef, mark, lhs);
            return true;
          }
          if (lazy_op[node.operator.slice(0, -1)]) {
            lhs.walk(tw);
            push();
            rhs.walk(tw);
            if (lhs instanceof AST_SymbolRef)
              mark(lhs);
            pop();
            return true;
          }
          if (lhs instanceof AST_SymbolRef) {
            if (node.operator != "=")
              mark(lhs, true);
            rhs.walk(tw);
            mark(lhs);
            return true;
          }
          return;
        }
        if (node instanceof AST_Binary) {
          if (!lazy_op[node.operator])
            return;
          walk_cond(node);
          return true;
        }
        if (node instanceof AST_Break) {
          var target = tw.loopcontrol_target(node);
          if (!(target instanceof AST_IterationStatement))
            insert(target);
          return true;
        }
        if (node instanceof AST_Call) {
          var exp = node.expression;
          if (exp instanceof AST_LambdaExpression) {
            node.args.forEach(function(arg) {
              arg.walk(tw);
            });
            exp.walk(tw);
          } else {
            descend();
            mark_expression(exp);
          }
          return true;
        }
        if (node instanceof AST_Class) {
          if (node.name)
            node.name.walk(tw);
          if (node.extends)
            node.extends.walk(tw);
          node.properties.filter(function(prop) {
            if (prop.key instanceof AST_Node)
              prop.key.walk(tw);
            return prop.value;
          }).forEach(function(prop) {
            if (prop.static) {
              prop.value.walk(tw);
            } else {
              push();
              segment.block = node;
              prop.value.walk(tw);
              pop();
            }
          });
          return true;
        }
        if (node instanceof AST_Conditional) {
          walk_cond(node.condition, node.consequent, node.alternative);
          return true;
        }
        if (node instanceof AST_Continue) {
          var target = tw.loopcontrol_target(node);
          if (target instanceof AST_Do)
            insert(target);
          return true;
        }
        if (node instanceof AST_Do) {
          push();
          segment.block = node;
          segment.loop = true;
          var save = segment;
          node.body.walk(tw);
          if (segment.inserted === node)
            segment = save;
          node.condition.walk(tw);
          pop();
          return true;
        }
        if (node instanceof AST_For) {
          if (node.init)
            node.init.walk(tw);
          push();
          segment.block = node;
          segment.loop = true;
          if (node.condition)
            node.condition.walk(tw);
          node.body.walk(tw);
          if (node.step)
            node.step.walk(tw);
          pop();
          return true;
        }
        if (node instanceof AST_ForEnumeration) {
          node.object.walk(tw);
          push();
          segment.block = node;
          segment.loop = true;
          node.init.walk(tw);
          node.body.walk(tw);
          pop();
          return true;
        }
        if (node instanceof AST_If) {
          walk_cond(node.condition, node.body, node.alternative);
          return true;
        }
        if (node instanceof AST_LabeledStatement) {
          push();
          segment.block = node;
          var save = segment;
          node.body.walk(tw);
          if (segment.inserted === node)
            segment = save;
          pop();
          return true;
        }
        if (node instanceof AST_Scope) {
          push();
          segment.block = node;
          if (node === self)
            root = segment;
          if (node instanceof AST_Lambda) {
            if (node.name)
              references[node.name.definition().id] = false;
            var marker = node.uses_arguments && !tw.has_directive("use strict") ? function(node2) {
              references[node2.definition().id] = false;
            } : function(node2) {
              mark(node2);
            };
            in_arg.push(node);
            node.argnames.forEach(function(argname) {
              walk_destructured(AST_SymbolFunarg, marker, argname);
            });
            if (node.rest)
              walk_destructured(AST_SymbolFunarg, marker, node.rest);
            in_arg.pop();
          }
          walk_lambda(node, tw);
          pop();
          return true;
        }
        if (node instanceof AST_Sub) {
          var exp = node.expression;
          if (node.optional) {
            exp.walk(tw);
            push();
            node.property.walk(tw);
            pop();
          } else {
            descend();
          }
          mark_expression(exp);
          return true;
        }
        if (node instanceof AST_Switch) {
          node.expression.walk(tw);
          var save = segment;
          node.body.forEach(function(branch) {
            if (branch instanceof AST_Default)
              return;
            branch.expression.walk(tw);
            if (save === segment)
              push();
          });
          segment = save;
          node.body.forEach(function(branch) {
            push();
            segment.block = node;
            var save2 = segment;
            walk_body(branch, tw);
            if (segment.inserted === node)
              segment = save2;
            pop();
          });
          return true;
        }
        if (node instanceof AST_SymbolConst || node instanceof AST_SymbolLet) {
          references[node.definition().id] = false;
          return true;
        }
        if (node instanceof AST_SymbolRef) {
          mark(node, true);
          return true;
        }
        if (node instanceof AST_Try) {
          var save_try = in_try;
          in_try = node;
          walk_body(node, tw);
          if (node.bcatch) {
            if (node.bcatch.argname)
              node.bcatch.argname.mark_symbol(function(node2) {
                if (node2 instanceof AST_SymbolCatch) {
                  var def2 = node2.definition();
                  references[def2.id] = false;
                  if (def2 = def2.redefined())
                    references[def2.id] = false;
                }
              }, tw);
            if (node.bfinally || (in_try = save_try)) {
              walk_body(node.bcatch, tw);
            } else {
              push();
              walk_body(node.bcatch, tw);
              pop();
            }
          }
          in_try = save_try;
          if (node.bfinally)
            node.bfinally.walk(tw);
          return true;
        }
        if (node instanceof AST_Unary) {
          if (!UNARY_POSTFIX[node.operator])
            return;
          var sym = node.expression;
          if (!(sym instanceof AST_SymbolRef))
            return;
          mark(sym, true);
          return true;
        }
        if (node instanceof AST_VarDef) {
          var assigned = node.value;
          if (assigned) {
            assigned.walk(tw);
          } else {
            assigned = segment.block instanceof AST_ForEnumeration && segment.block.init === tw.parent();
          }
          walk_destructured(AST_SymbolDeclaration, assigned ? function(node2) {
            if (node2 instanceof AST_SymbolVar) {
              mark(node2);
            } else {
              node2.walk(tw);
            }
          } : function(node2) {
            if (node2 instanceof AST_SymbolVar) {
              var id = node2.definition().id;
              var refs = references[id];
              if (refs) {
                refs.push(node2);
              } else if (!(id in references)) {
                declarations.add(id, node2);
              }
            } else {
              node2.walk(tw);
            }
          }, node.name);
          return true;
        }
        if (node instanceof AST_While) {
          push();
          segment.block = node;
          segment.loop = true;
          descend();
          pop();
          return true;
        }
        function mark_expression(exp2) {
          if (!compressor.option("ie"))
            return;
          var sym2 = root_expr(exp2);
          if (sym2 instanceof AST_SymbolRef)
            sym2.walk(tw);
        }
        function walk_cond(condition, consequent, alternative) {
          var save2 = segment;
          var segments = [save2, save2];
          if (condition instanceof AST_Binary)
            switch (condition.operator) {
              case "&&":
                segments[0] = walk_cond(condition.left, condition.right)[0];
                break;
              case "||":
              case "??":
                segments[1] = walk_cond(condition.left, null, condition.right)[1];
                break;
              default:
                condition.walk(tw);
                break;
            }
          else if (condition instanceof AST_Conditional) {
            walk_cond(condition.condition, condition.consequent, condition.alternative);
          } else {
            condition.walk(tw);
          }
          segment = segments[0];
          if (consequent) {
            push();
            consequent.walk(tw);
          }
          segments[0] = segment;
          segment = segments[1];
          if (alternative) {
            push();
            alternative.walk(tw);
          }
          segments[1] = segment;
          segment = save2;
          return segments;
        }
      });
      tw.directives = Object.create(compressor.directives);
      self.walk(tw);
      var changed = false;
      var merged = Object.create(null);
      while (first.length && last.length) {
        var tail = last.shift();
        if (!tail)
          continue;
        var def = tail.definition;
        var tail_refs = references[def.id];
        if (!tail_refs)
          continue;
        tail_refs = { end: tail_refs.end };
        while (def.id in merged)
          def = merged[def.id];
        tail_refs.start = references[def.id].start;
        var skipped = [];
        do {
          var head = first.shift();
          if (tail.index > head.index)
            continue;
          var prev_def = head.definition;
          if (!(prev_def.id in prev))
            continue;
          var head_refs = references[prev_def.id];
          if (!head_refs)
            continue;
          if (head_refs.start.block !== tail_refs.start.block || !mergeable(head_refs, tail_refs) || (head_refs.start.loop || !same_scope(def)) && !mergeable(tail_refs, head_refs) || compressor.option("webkit") && is_funarg(def) !== is_funarg(prev_def) || prev_def.const_redefs || !all(head_refs.scopes, function(scope) {
            return scope.find_variable(def.name) === def;
          })) {
            skipped.push(head);
            continue;
          }
          head_refs.forEach(function(sym) {
            sym.thedef = def;
            sym.name = def.name;
            if (sym instanceof AST_SymbolRef) {
              def.references.push(sym);
              prev_def.replaced++;
            } else {
              def.orig.push(sym);
              prev_def.eliminated++;
            }
          });
          if (!prev_def.fixed)
            def.fixed = false;
          merged[prev_def.id] = def;
          changed = true;
          break;
        } while (first.length);
        if (skipped.length)
          first = skipped.concat(first);
      }
      return changed;
      function push() {
        segment = Object.create(segment);
      }
      function pop() {
        segment = Object.getPrototypeOf(segment);
      }
      function walk_destructured(symbol_type, mark2, lhs) {
        var marker = new TreeWalker(function(node) {
          if (node instanceof AST_Destructured)
            return;
          if (node instanceof AST_DefaultValue) {
            push();
            node.value.walk(tw);
            pop();
            node.name.walk(marker);
          } else if (node instanceof AST_DestructuredKeyVal) {
            if (!(node.key instanceof AST_Node)) {
              node.value.walk(marker);
            } else if (node.value instanceof AST_PropAccess) {
              push();
              segment.block = node;
              node.key.walk(tw);
              node.value.walk(marker);
              pop();
            } else {
              node.key.walk(tw);
              node.value.walk(marker);
            }
          } else if (node instanceof symbol_type) {
            mark2(node);
          } else {
            node.walk(tw);
          }
          return true;
        });
        lhs.walk(marker);
      }
      function mark(sym, read) {
        var def2 = sym.definition(), ldef;
        if (read && !all(in_arg, function(fn) {
          ldef = fn.variables.get(sym.name);
          if (!ldef)
            return true;
          if (!is_funarg(ldef))
            return true;
          return ldef !== def2 && !def2.undeclared && fn.parent_scope.find_variable(sym.name) !== def2;
        }))
          return references[def2.id] = references[ldef.id] = false;
        var seg = segment;
        if (in_try) {
          push();
          seg = segment;
          pop();
        }
        if (def2.id in references) {
          var refs = references[def2.id];
          if (!refs)
            return;
          if (refs.start.block !== seg.block)
            return references[def2.id] = false;
          push_ref(sym);
          refs.end = seg;
          if (def2.id in prev) {
            last[prev[def2.id]] = null;
          } else if (!read) {
            return;
          }
        } else if ((ldef = self.variables.get(def2.name)) !== def2) {
          if (ldef && root === seg)
            references[ldef.id] = false;
          return references[def2.id] = false;
        } else if (compressor.exposed(def2) || NO_MERGE[sym.name]) {
          return references[def2.id] = false;
        } else {
          var refs = declarations.get(def2.id) || [];
          refs.scopes = [];
          push_ref(sym);
          references[def2.id] = refs;
          if (!read) {
            refs.start = seg;
            return first.push({
              index: index++,
              definition: def2
            });
          }
          if (seg.block !== self)
            return references[def2.id] = false;
          refs.start = root;
        }
        prev[def2.id] = last.length;
        last.push({
          index: index++,
          definition: def2
        });
        function push_ref(sym2) {
          refs.push(sym2);
          push_uniq(refs.scopes, sym2.scope);
          var scope = find_scope(tw);
          if (scope !== sym2.scope)
            push_uniq(refs.scopes, scope);
        }
      }
      function insert(target) {
        var stack = [];
        while (true) {
          if (HOP(segment, "block")) {
            var block = segment.block;
            if (block instanceof AST_LabeledStatement)
              block = block.body;
            if (block === target)
              break;
          }
          stack.push(segment);
          pop();
        }
        segment.inserted = segment.block;
        push();
        while (stack.length) {
          var seg = stack.pop();
          push();
          if (HOP(seg, "block"))
            segment.block = seg.block;
          if (HOP(seg, "loop"))
            segment.loop = seg.loop;
        }
      }
      function must_visit(base, segment2) {
        return base === segment2 || base.isPrototypeOf(segment2);
      }
      function mergeable(head2, tail2) {
        return must_visit(head2.start, head2.end) || must_visit(head2.start, tail2.start);
      }
    });
    function fill_holes(orig, elements) {
      for (var i = elements.length;--i >= 0; ) {
        if (!elements[i])
          elements[i] = make_node(AST_Hole, orig);
      }
    }
    function to_class_expr(defcl, drop_name) {
      var cl = make_node(AST_ClassExpression, defcl);
      if (cl.name)
        cl.name = drop_name ? null : make_node(AST_SymbolClass, cl.name);
      return cl;
    }
    function to_func_expr(defun, drop_name) {
      var ctor;
      switch (defun.CTOR) {
        case AST_AsyncDefun:
          ctor = AST_AsyncFunction;
          break;
        case AST_AsyncGeneratorDefun:
          ctor = AST_AsyncGeneratorFunction;
          break;
        case AST_Defun:
          ctor = AST_Function;
          break;
        case AST_GeneratorDefun:
          ctor = AST_GeneratorFunction;
          break;
      }
      var fn = make_node(ctor, defun);
      fn.name = drop_name ? null : make_node(AST_SymbolLambda, defun.name);
      return fn;
    }
    AST_Scope.DEFMETHOD("drop_unused", function(compressor) {
      if (!compressor.option("unused"))
        return;
      var self = this;
      var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;
      var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;
      var assign_as_unused = /keep_assign/.test(compressor.option("unused")) ? return_false : function(node, props) {
        var sym, nested = false;
        if (node instanceof AST_Assign) {
          if (node.write_only || node.operator == "=")
            sym = extract_reference(node.left, props);
        } else if (node instanceof AST_Unary) {
          if (node.write_only)
            sym = extract_reference(node.expression, props);
        }
        if (!(sym instanceof AST_SymbolRef))
          return;
        var def = sym.definition();
        if (export_defaults[def.id])
          return;
        if (compressor.exposed(def))
          return;
        if (!can_drop_symbol(sym, compressor, nested))
          return;
        return sym;
        function extract_reference(node2, props2) {
          if (node2 instanceof AST_PropAccess) {
            var expr = node2.expression;
            if (!expr.may_throw_on_access(compressor, true)) {
              nested = true;
              if (props2 && node2 instanceof AST_Sub)
                props2.unshift(node2.property);
              return extract_reference(expr, props2);
            }
          } else if (node2 instanceof AST_Assign && node2.operator == "=") {
            node2.write_only = "p";
            var ref = extract_reference(node2.right);
            if (!props2)
              return ref;
            props2.assign = node2;
            return ref instanceof AST_SymbolRef ? ref : node2.left;
          }
          return node2;
        }
      };
      var assign_in_use = Object.create(null);
      var export_defaults = Object.create(null);
      var find_variable = function(name) {
        find_variable = compose(self, 0, noop);
        return find_variable(name);
        function compose(child, level, find) {
          var parent = compressor.parent(level);
          if (!parent)
            return find;
          var in_arg = parent instanceof AST_Lambda && member(child, parent.argnames);
          return compose(parent, level + 1, in_arg ? function(name2) {
            var def = find(name2);
            if (def)
              return def;
            def = parent.variables.get(name2);
            if (def) {
              var sym = def.orig[0];
              if (sym instanceof AST_SymbolFunarg || sym instanceof AST_SymbolLambda)
                return def;
            }
          } : parent.variables ? function(name2) {
            return find(name2) || parent.variables.get(name2);
          } : find);
        }
      };
      var for_ins = Object.create(null);
      var in_use = [];
      var in_use_ids = Object.create(null);
      var lambda_ids = Object.create(null);
      var value_read = Object.create(null);
      var value_modified = Object.create(null);
      var var_defs = Object.create(null);
      if (self instanceof AST_Toplevel && compressor.top_retain) {
        self.variables.each(function(def) {
          if (compressor.top_retain(def) && !(def.id in in_use_ids)) {
            AST_Node.info("Retaining variable {name}", def);
            in_use_ids[def.id] = true;
            in_use.push(def);
          }
        });
      }
      var assignments = new Dictionary;
      var initializations = new Dictionary;
      var scope = this;
      var tw = new TreeWalker(function(node, descend) {
        if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive("use strict")) {
          node.each_argname(function(argname) {
            var def2 = argname.definition();
            if (!(def2.id in in_use_ids)) {
              in_use_ids[def2.id] = true;
              in_use.push(def2);
            }
          });
        }
        if (node === self)
          return;
        if (scope === self) {
          if (node instanceof AST_DefClass) {
            var def = node.name.definition();
            var drop = drop_funcs && !def.exported;
            if (!drop && !(def.id in in_use_ids)) {
              in_use_ids[def.id] = true;
              in_use.push(def);
            }
            var used = tw.parent() instanceof AST_ExportDefault;
            if (used) {
              export_defaults[def.id] = true;
            } else if (drop && !(def.id in lambda_ids)) {
              lambda_ids[def.id] = 1;
            }
            if (node.extends)
              node.extends.walk(tw);
            var values = [];
            node.properties.forEach(function(prop) {
              if (prop.key instanceof AST_Node)
                prop.key.walk(tw);
              var value = prop.value;
              if (!value)
                return;
              if (is_static_field_or_init(prop)) {
                if (!used && value.contains_this())
                  used = true;
                walk_class_prop(value);
              } else {
                values.push(value);
              }
            });
            values.forEach(drop && used ? walk_class_prop : function(value) {
              initializations.add(def.id, value);
            });
            return true;
          }
          if (node instanceof AST_LambdaDefinition) {
            var def = node.name.definition();
            var drop = drop_funcs && !def.exported;
            if (!drop && !(def.id in in_use_ids)) {
              in_use_ids[def.id] = true;
              in_use.push(def);
            }
            initializations.add(def.id, node);
            if (tw.parent() instanceof AST_ExportDefault) {
              export_defaults[def.id] = true;
              return scan_ref_scoped(node, descend, true);
            }
            if (drop && !(def.id in lambda_ids))
              lambda_ids[def.id] = 1;
            return true;
          }
          if (node instanceof AST_Definitions) {
            node.definitions.forEach(function(defn) {
              var value = defn.value;
              var side_effects = value && (defn.name instanceof AST_Destructured || value.has_side_effects(compressor));
              var shared = side_effects && value.tail_node().operator == "=";
              defn.name.mark_symbol(function(name) {
                if (!(name instanceof AST_SymbolDeclaration))
                  return;
                var def2 = name.definition();
                var_defs[def2.id] = (var_defs[def2.id] || 0) + 1;
                if (node instanceof AST_Var && def2.orig[0] instanceof AST_SymbolCatch) {
                  var redef = def2.redefined();
                  if (redef)
                    var_defs[redef.id] = (var_defs[redef.id] || 0) + 1;
                }
                if (!(def2.id in in_use_ids) && (!drop_vars || def2.exported || (node instanceof AST_Const ? def2.redefined() : def2.const_redefs) || !(node instanceof AST_Var || is_safe_lexical(def2)))) {
                  in_use_ids[def2.id] = true;
                  in_use.push(def2);
                }
                if (value) {
                  if (!side_effects) {
                    initializations.add(def2.id, value);
                  } else if (shared) {
                    verify_safe_usage(def2, name, value_modified[def2.id]);
                  }
                  assignments.add(def2.id, defn);
                }
                unmark_lambda(def2);
                return true;
              }, tw);
              if (side_effects)
                value.walk(tw);
            });
            return true;
          }
          if (node instanceof AST_SymbolFunarg) {
            var def = node.definition();
            var_defs[def.id] = (var_defs[def.id] || 0) + 1;
            assignments.add(def.id, node);
            return true;
          }
          if (node instanceof AST_SymbolImport) {
            var def = node.definition();
            if (!(def.id in in_use_ids) && (!drop_vars || !is_safe_lexical(def))) {
              in_use_ids[def.id] = true;
              in_use.push(def);
            }
            return true;
          }
        }
        return scan_ref_scoped(node, descend, true);
        function walk_class_prop(value) {
          var save_scope = scope;
          scope = node;
          value.walk(tw);
          scope = save_scope;
        }
      });
      tw.directives = Object.create(compressor.directives);
      self.walk(tw);
      var drop_fn_name = compressor.option("keep_fnames") ? return_false : compressor.option("ie") ? function(def) {
        return !compressor.exposed(def) && def.references.length == def.replaced;
      } : function(def) {
        if (!(def.id in in_use_ids))
          return true;
        if (def.orig.length - def.eliminated < 2)
          return false;
        if (def.orig[1] instanceof AST_SymbolFunarg)
          return true;
        return all(def.references, function(ref) {
          return !ref.in_arg;
        });
      };
      if (compressor.option("ie"))
        initializations.each(function(init2, id) {
          if (id in in_use_ids)
            return;
          init2.forEach(function(init3) {
            init3.walk(new TreeWalker(function(node) {
              if (node instanceof AST_Function && node.name && !drop_fn_name(node.name.definition())) {
                node.walk(tw);
                return true;
              }
              if (node instanceof AST_Scope)
                return true;
            }));
          });
        });
      tw = new TreeWalker(scan_ref_scoped);
      for (var i = 0;i < in_use.length; i++) {
        var init = initializations.get(in_use[i].id);
        if (init)
          init.forEach(function(init2) {
            init2.walk(tw);
          });
      }
      Object.keys(assign_in_use).forEach(function(id) {
        var assigns = assign_in_use[id];
        if (!assigns) {
          delete assign_in_use[id];
          return;
        }
        assigns = assigns.reduce(function(in_use3, assigns2) {
          assigns2.forEach(function(assign) {
            push_uniq(in_use3, assign);
          });
          return in_use3;
        }, []);
        var in_use2 = (assignments.get(id) || []).filter(function(node) {
          return find_if(node instanceof AST_Unary ? function(assign) {
            return assign === node;
          } : function(assign) {
            if (assign === node)
              return true;
            if (assign instanceof AST_Unary)
              return false;
            return get_rvalue(assign) === get_rvalue(node);
          }, assigns);
        });
        if (assigns.length == in_use2.length) {
          assign_in_use[id] = in_use2;
        } else {
          delete assign_in_use[id];
        }
      });
      var calls_to_drop_args = [];
      var fns_with_marked_args = [];
      var trimmer = new TreeTransformer(function(node) {
        if (node instanceof AST_DefaultValue)
          return trim_default(trimmer, node);
        if (node instanceof AST_Destructured && node.rest)
          node.rest = node.rest.transform(trimmer);
        if (node instanceof AST_DestructuredArray) {
          var trim = !node.rest;
          for (var i2 = node.elements.length;--i2 >= 0; ) {
            var element = node.elements[i2].transform(trimmer);
            if (element) {
              node.elements[i2] = element;
              trim = false;
            } else if (trim) {
              node.elements.pop();
            } else {
              node.elements[i2] = make_node(AST_Hole, node.elements[i2]);
            }
          }
          return node;
        }
        if (node instanceof AST_DestructuredObject) {
          var properties = [];
          node.properties.forEach(function(prop) {
            var retain = false;
            if (prop.key instanceof AST_Node) {
              prop.key = prop.key.transform(tt2);
              retain = prop.key.has_side_effects(compressor);
            }
            if ((retain || node.rest) && is_decl(prop.value)) {
              prop.value = prop.value.transform(tt2);
              properties.push(prop);
            } else {
              var value = prop.value.transform(trimmer);
              if (!value && node.rest) {
                if (prop.value instanceof AST_DestructuredArray) {
                  value = make_node(AST_DestructuredArray, prop.value, { elements: [] });
                } else {
                  value = make_node(AST_DestructuredObject, prop.value, { properties: [] });
                }
              }
              if (value) {
                prop.value = value;
                properties.push(prop);
              }
            }
          });
          node.properties = properties;
          return node;
        }
        if (node instanceof AST_SymbolDeclaration)
          return trim_decl(node);
      });
      var tt2 = new TreeTransformer(function(node, descend, in_list) {
        var parent = tt2.parent();
        if (drop_vars) {
          var props = [], sym = assign_as_unused(node, props);
          if (sym) {
            var value;
            if (can_drop_lhs(sym, node)) {
              if (node instanceof AST_Assign) {
                value = get_rhs(node);
                if (node.write_only === true)
                  value = value.drop_side_effect_free(compressor);
              }
              if (!value)
                value = make_node(AST_Number, node, { value: 0 });
            }
            if (value) {
              if (props.assign) {
                var assign = props.assign.drop_side_effect_free(compressor);
                if (assign) {
                  assign.write_only = true;
                  props.unshift(assign);
                }
              }
              if (!(parent instanceof AST_Sequence) || parent.tail_node() === node || value.has_side_effects(compressor)) {
                props.push(value);
              }
              switch (props.length) {
                case 0:
                  return List.skip;
                case 1:
                  return maintain_this_binding(parent, node, props[0].transform(tt2));
                default:
                  return make_sequence(node, props.map(function(prop) {
                    return prop.transform(tt2);
                  }));
              }
            }
          } else if (node instanceof AST_UnaryPostfix && node.expression instanceof AST_SymbolRef && indexOf_assign(node.expression.definition(), node) < 0) {
            return make_node(AST_UnaryPrefix, node, {
              operator: "+",
              expression: node.expression
            });
          }
        }
        if (node instanceof AST_Binary && node.operator == "instanceof") {
          var sym = node.right;
          if (!(sym instanceof AST_SymbolRef))
            return;
          if (sym.definition().id in in_use_ids)
            return;
          var lhs = node.left.drop_side_effect_free(compressor);
          var value = make_node(AST_False, node).optimize(compressor);
          return lhs ? make_sequence(node, [lhs, value]) : value;
        }
        if (node instanceof AST_Call) {
          calls_to_drop_args.push(node);
          node.args = node.args.map(function(arg) {
            return arg.transform(tt2);
          });
          node.expression = node.expression.transform(tt2);
          return node;
        }
        if (scope !== self)
          return;
        if (drop_funcs && node !== self && node instanceof AST_DefClass) {
          var def = node.name.definition();
          if (!(def.id in in_use_ids)) {
            log(node.name, "Dropping unused class {name}");
            def.eliminated++;
            descend(node, tt2);
            var trimmed = to_class_expr(node, true);
            if (parent instanceof AST_ExportDefault)
              return trimmed;
            trimmed = trimmed.drop_side_effect_free(compressor, true);
            if (trimmed)
              return make_node(AST_SimpleStatement, node, { body: trimmed });
            return in_list ? List.skip : make_node(AST_EmptyStatement, node);
          }
        }
        if (node instanceof AST_ClassExpression && node.name && drop_fn_name(node.name.definition())) {
          node.name = null;
        }
        if (node instanceof AST_Lambda) {
          if (drop_funcs && node !== self && node instanceof AST_LambdaDefinition) {
            var def = node.name.definition();
            if (!(def.id in in_use_ids)) {
              log(node.name, "Dropping unused function {name}");
              def.eliminated++;
              if (parent instanceof AST_ExportDefault) {
                descend_scope();
                return to_func_expr(node, true);
              }
              return in_list ? List.skip : make_node(AST_EmptyStatement, node);
            }
          }
          descend_scope();
          if (node instanceof AST_LambdaExpression && node.name && drop_fn_name(node.name.definition())) {
            node.name = null;
          }
          if (!(node instanceof AST_Accessor)) {
            var args, spread, trim = compressor.drop_fargs(node, parent);
            if (trim && parent instanceof AST_Call && parent.expression === node) {
              args = parent.args;
              for (spread = 0;spread < args.length; spread++) {
                if (args[spread] instanceof AST_Spread)
                  break;
              }
            }
            var argnames = node.argnames;
            var rest = node.rest;
            var after = false, before = false;
            if (rest) {
              before = true;
              if (!args || spread < argnames.length || rest instanceof AST_SymbolFunarg) {
                rest = rest.transform(trimmer);
              } else {
                var trimmed = trim_destructured(rest, make_node(AST_Array, parent, {
                  elements: args.slice(argnames.length)
                }), trim_decl, !node.uses_arguments, rest);
                rest = trimmed.name;
                args.length = argnames.length;
                if (trimmed.value.elements.length)
                  [].push.apply(args, trimmed.value.elements);
              }
              if (rest instanceof AST_Destructured && !rest.rest) {
                if (rest instanceof AST_DestructuredArray) {
                  if (rest.elements.length == 0)
                    rest = null;
                } else if (rest.properties.length == 0) {
                  rest = null;
                }
              }
              node.rest = rest;
              if (rest) {
                trim = false;
                after = true;
              }
            }
            var default_length = trim ? -1 : node.length();
            var trim_value = args && !node.uses_arguments && parent !== compressor.parent();
            for (var i2 = argnames.length;--i2 >= 0; ) {
              var sym = argnames[i2];
              if (sym instanceof AST_SymbolFunarg) {
                var def = sym.definition();
                if (def.id in in_use_ids) {
                  trim = false;
                  if (indexOf_assign(def, sym) < 0)
                    sym.unused = null;
                } else if (trim) {
                  log(sym, "Dropping unused function argument {name}");
                  argnames.pop();
                  def.eliminated++;
                  sym.unused = true;
                } else {
                  sym.unused = true;
                }
              } else {
                before = true;
                var funarg;
                if (!args || spread < i2) {
                  funarg = sym.transform(trimmer);
                } else {
                  var trimmed = trim_destructured(sym, args[i2], trim_decl, trim_value, sym);
                  funarg = trimmed.name;
                  if (trimmed.value)
                    args[i2] = trimmed.value;
                }
                if (funarg) {
                  trim = false;
                  argnames[i2] = funarg;
                  if (!after)
                    after = !(funarg instanceof AST_SymbolFunarg);
                } else if (trim) {
                  log_default(sym, "Dropping unused default argument {name}");
                  argnames.pop();
                } else if (i2 > default_length) {
                  log_default(sym, "Dropping unused default argument assignment {name}");
                  if (sym.name instanceof AST_SymbolFunarg) {
                    sym.name.unused = true;
                  } else {
                    after = true;
                  }
                  argnames[i2] = sym.name;
                } else {
                  log_default(sym, "Dropping unused default argument value {name}");
                  argnames[i2] = sym = sym.clone();
                  sym.value = make_node(AST_Number, sym, { value: 0 });
                  after = true;
                }
              }
            }
            if (before && !after && node.uses_arguments && !tt2.has_directive("use strict")) {
              node.rest = make_node(AST_DestructuredArray, node, { elements: [] });
            }
            fns_with_marked_args.push(node);
          }
          return node;
        }
        if (node instanceof AST_Catch && node.argname instanceof AST_Destructured) {
          node.argname.transform(trimmer);
        }
        if (node instanceof AST_Definitions && !(parent instanceof AST_ForEnumeration && parent.init === node)) {
          var body = [], head = [], tail = [];
          var side_effects = [];
          var duplicated = 0;
          var is_var = node instanceof AST_Var;
          node.definitions.forEach(function(def2) {
            if (def2.value)
              def2.value = def2.value.transform(tt2);
            var value2 = def2.value;
            if (def2.name instanceof AST_Destructured) {
              var trimmed2 = trim_destructured(def2.name, value2, function(node2) {
                if (!drop_vars)
                  return node2;
                if (node2.definition().id in in_use_ids)
                  return node2;
                if (is_catch(node2))
                  return node2;
                if (is_var && !can_drop_symbol(node2))
                  return node2;
                return null;
              }, true);
              if (trimmed2.name) {
                def2 = make_node(AST_VarDef, def2, {
                  name: trimmed2.name,
                  value: value2 = trimmed2.value
                });
                flush();
              } else if (trimmed2.value) {
                side_effects.push(trimmed2.value);
              }
              return;
            }
            var sym2 = def2.name.definition();
            var drop_sym = is_var ? can_drop_symbol(def2.name) : is_safe_lexical(sym2);
            if (!drop_sym || !drop_vars || sym2.id in in_use_ids) {
              var index;
              if (value2 && ((index = indexOf_assign(sym2, def2)) < 0 || self_assign(value2.tail_node()))) {
                def2 = def2.clone();
                value2 = value2.drop_side_effect_free(compressor);
                if (value2)
                  AST_Node.warn("Side effects in definition of variable {name} [{start}]", def2.name);
                if (node instanceof AST_Const) {
                  def2.value = value2 || make_node(AST_Number, def2, { value: 0 });
                } else {
                  def2.value = null;
                  if (value2)
                    side_effects.push(value2);
                }
                value2 = null;
                if (index >= 0)
                  assign_in_use[sym2.id][index] = def2;
              }
              var old_def, fn;
              if (!value2 && !(node instanceof AST_Let)) {
                if (parent instanceof AST_ExportDeclaration) {
                  flush();
                } else if (drop_sym && var_defs[sym2.id] > 1) {
                  AST_Node.info("Dropping declaration of variable {name} [{start}]", def2.name);
                  var_defs[sym2.id]--;
                  sym2.eliminated++;
                } else {
                  head.push(def2);
                }
              } else if (compressor.option("functions") && !compressor.option("ie") && drop_sym && value2 && var_defs[sym2.id] == 1 && sym2.assignments == 0 && (fn = value2.tail_node()) instanceof AST_LambdaExpression && !is_arguments(sym2) && !is_arrow(fn) && assigned_once(fn, sym2.references) && can_declare_defun(fn) && (old_def = rename_def(fn, def2.name.name)) !== false) {
                AST_Node.warn("Declaring {name} as function [{start}]", def2.name);
                var ctor;
                switch (fn.CTOR) {
                  case AST_AsyncFunction:
                    ctor = AST_AsyncDefun;
                    break;
                  case AST_AsyncGeneratorFunction:
                    ctor = AST_AsyncGeneratorDefun;
                    break;
                  case AST_Function:
                    ctor = AST_Defun;
                    break;
                  case AST_GeneratorFunction:
                    ctor = AST_GeneratorDefun;
                    break;
                }
                var defun = make_node(ctor, fn);
                defun.name = make_node(AST_SymbolDefun, def2.name);
                var name_def = def2.name.scope.resolve().def_function(defun.name);
                if (old_def)
                  old_def.forEach(function(node2) {
                    node2.name = name_def.name;
                    node2.thedef = name_def;
                    node2.reference();
                  });
                body.push(defun);
                if (value2 !== fn)
                  [].push.apply(side_effects, value2.expressions.slice(0, -1));
              } else {
                if (drop_sym && var_defs[sym2.id] > 1 && !(parent instanceof AST_ExportDeclaration) && sym2.orig.indexOf(def2.name) > sym2.eliminated) {
                  var_defs[sym2.id]--;
                  duplicated++;
                }
                flush();
              }
            } else if (is_catch(def2.name)) {
              value2 = value2 && value2.drop_side_effect_free(compressor);
              if (value2)
                side_effects.push(value2);
              if (var_defs[sym2.id] > 1) {
                AST_Node.warn("Dropping duplicated declaration of variable {name} [{start}]", def2.name);
                var_defs[sym2.id]--;
                sym2.eliminated++;
              } else {
                def2.value = null;
                head.push(def2);
              }
            } else {
              value2 = value2 && value2.drop_side_effect_free(compressor);
              if (value2) {
                AST_Node.warn("Side effects in initialization of unused variable {name} [{start}]", def2.name);
                side_effects.push(value2);
              } else {
                log(def2.name, "Dropping unused variable {name}");
              }
              sym2.eliminated++;
            }
            function self_assign(ref) {
              return ref instanceof AST_SymbolRef && ref.definition() === sym2;
            }
            function assigned_once(fn2, refs) {
              if (refs.length == 0)
                return fn2 === def2.name.fixed_value();
              return all(refs, function(ref) {
                return fn2 === ref.fixed_value();
              });
            }
            function can_declare_defun(fn2) {
              if (!is_var || compressor.has_directive("use strict") || !(fn2 instanceof AST_Function)) {
                return parent instanceof AST_Scope;
              }
              return parent instanceof AST_Block || parent instanceof AST_For && parent.init === node || parent instanceof AST_If;
            }
            function rename_def(fn2, name) {
              if (!fn2.name)
                return null;
              var def3 = fn2.name.definition();
              if (def3.orig.length > 1)
                return null;
              if (def3.assignments > 0)
                return false;
              if (def3.name == name)
                return def3;
              if (compressor.option("keep_fnames"))
                return false;
              var forbidden;
              switch (name) {
                case "await":
                  forbidden = is_async;
                  break;
                case "yield":
                  forbidden = is_generator;
                  break;
              }
              return all(def3.references, function(ref) {
                var scope2 = ref.scope;
                if (scope2.find_variable(name) !== sym2)
                  return false;
                if (forbidden)
                  do {
                    scope2 = scope2.resolve();
                    if (forbidden(scope2))
                      return false;
                  } while (scope2 !== fn2 && (scope2 = scope2.parent_scope));
                return true;
              }) && def3;
            }
            function is_catch(node2) {
              var sym3 = node2.definition();
              return sym3.orig[0] instanceof AST_SymbolCatch && sym3.scope.resolve() === node2.scope.resolve();
            }
            function flush() {
              if (side_effects.length > 0) {
                if (tail.length == 0) {
                  body.push(make_node(AST_SimpleStatement, node, {
                    body: make_sequence(node, side_effects)
                  }));
                } else if (value2) {
                  side_effects.push(value2);
                  def2.value = make_sequence(value2, side_effects);
                } else {
                  def2.value = make_node(AST_UnaryPrefix, def2, {
                    operator: "void",
                    expression: make_sequence(def2, side_effects)
                  });
                }
                side_effects = [];
              }
              tail.push(def2);
            }
          });
          switch (head.length) {
            case 0:
              if (tail.length == 0)
                break;
              if (tail.length == duplicated) {
                [].unshift.apply(side_effects, tail.map(function(def2) {
                  AST_Node.info("Dropping duplicated definition of variable {name} [{start}]", def2.name);
                  var sym2 = def2.name.definition();
                  var ref = make_node(AST_SymbolRef, def2.name);
                  sym2.references.push(ref);
                  var assign2 = make_node(AST_Assign, def2, {
                    operator: "=",
                    left: ref,
                    right: def2.value
                  });
                  var index = indexOf_assign(sym2, def2);
                  if (index >= 0)
                    assign_in_use[sym2.id][index] = assign2;
                  sym2.assignments++;
                  sym2.eliminated++;
                  return assign2;
                }));
                break;
              }
            case 1:
              if (tail.length == 0) {
                var id = head[0].name.definition().id;
                if (id in for_ins) {
                  node.definitions = head;
                  for_ins[id].init = node;
                  break;
                }
              }
            default:
              var seq;
              if (tail.length > 0 && (seq = tail[0].value) instanceof AST_Sequence) {
                tail[0].value = seq.tail_node();
                body.push(make_node(AST_SimpleStatement, node, {
                  body: make_sequence(seq, seq.expressions.slice(0, -1))
                }));
              }
              node.definitions = head.concat(tail);
              body.push(node);
          }
          if (side_effects.length > 0) {
            body.push(make_node(AST_SimpleStatement, node, { body: make_sequence(node, side_effects) }));
          }
          return insert_statements(body, node, in_list);
        }
        if (node instanceof AST_Assign) {
          descend(node, tt2);
          if (!(node.left instanceof AST_Destructured))
            return node;
          var trimmed = trim_destructured(node.left, node.right, function(node2) {
            return node2;
          }, node.write_only === true);
          if (trimmed.name)
            return make_node(AST_Assign, node, {
              operator: node.operator,
              left: trimmed.name,
              right: trimmed.value
            });
          if (trimmed.value)
            return trimmed.value;
          if (parent instanceof AST_Sequence && parent.tail_node() !== node)
            return List.skip;
          return make_node(AST_Number, node, { value: 0 });
        }
        if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {
          descend(node, tt2);
          if (node.body instanceof AST_BlockStatement) {
            var block = node.body;
            node.body = block.body.pop();
            block.body.push(node);
            return in_list ? List.splice(block.body) : block;
          }
          return node;
        }
        if (node instanceof AST_Scope) {
          descend_scope();
          return node;
        }
        if (node instanceof AST_SymbolImport) {
          if (!compressor.option("imports") || node.definition().id in in_use_ids)
            return node;
          return in_list ? List.skip : null;
        }
        function descend_scope() {
          var save_scope = scope;
          scope = node;
          descend(node, tt2);
          scope = save_scope;
        }
      }, function(node, in_list) {
        if (node instanceof AST_BlockStatement)
          return trim_block(node, tt2.parent(), in_list);
        if (node instanceof AST_ExportDeclaration) {
          var block = node.body;
          if (!(block instanceof AST_BlockStatement))
            return;
          node.body = block.body.pop();
          block.body.push(node);
          return in_list ? List.splice(block.body) : block;
        }
        if (node instanceof AST_For)
          return patch_for_init(node, in_list);
        if (node instanceof AST_ForIn) {
          if (!drop_vars || !compressor.option("loops"))
            return;
          if (!is_empty(node.body))
            return;
          var sym = get_init_symbol(node);
          if (!sym)
            return;
          var def = sym.definition();
          if (def.id in in_use_ids)
            return;
          log(sym, "Dropping unused loop variable {name}");
          if (for_ins[def.id] === node)
            delete for_ins[def.id];
          var body = [];
          var value = node.object.drop_side_effect_free(compressor);
          if (value) {
            AST_Node.warn("Side effects in object of for-in loop [{start}]", value);
            body.push(make_node(AST_SimpleStatement, node, { body: value }));
          }
          if (node.init instanceof AST_Definitions && def.orig[0] instanceof AST_SymbolCatch) {
            body.push(node.init);
          }
          return insert_statements(body, node, in_list);
        }
        if (node instanceof AST_Import) {
          if (node.properties && node.properties.length == 0)
            node.properties = null;
          return node;
        }
        if (node instanceof AST_Sequence) {
          if (node.expressions.length > 1)
            return;
          return maintain_this_binding(tt2.parent(), node, node.expressions[0]);
        }
      });
      tt2.push(compressor.parent());
      tt2.directives = Object.create(compressor.directives);
      self.transform(tt2);
      if (self instanceof AST_Lambda && self.body.length == 1 && self.body[0] instanceof AST_Directive && self.body[0].value == "use strict") {
        self.body.length = 0;
      }
      calls_to_drop_args.forEach(function(call) {
        drop_unused_call_args(call, compressor, fns_with_marked_args);
      });
      function log(sym, text) {
        AST_Node[sym.definition().references.length > 0 ? "info" : "warn"](text + " [{start}]", sym);
      }
      function log_default(node, text) {
        if (node.name instanceof AST_SymbolFunarg) {
          log(node.name, text);
        } else {
          AST_Node.info(text + " [{start}]", node);
        }
      }
      function get_rvalue(expr) {
        return expr[expr instanceof AST_Assign ? "right" : "value"];
      }
      function insert_statements(body, orig, in_list) {
        switch (body.length) {
          case 0:
            return in_list ? List.skip : make_node(AST_EmptyStatement, orig);
          case 1:
            return body[0];
          default:
            return in_list ? List.splice(body) : make_node(AST_BlockStatement, orig, { body });
        }
      }
      function track_assigns(def, node) {
        if (def.scope.resolve() !== self)
          return false;
        if (!def.fixed || !node.fixed)
          assign_in_use[def.id] = false;
        return assign_in_use[def.id] !== false;
      }
      function add_assigns(def, node) {
        if (!assign_in_use[def.id])
          assign_in_use[def.id] = [];
        if (node.fixed.assigns)
          push_uniq(assign_in_use[def.id], node.fixed.assigns);
      }
      function indexOf_assign(def, node) {
        var nodes = assign_in_use[def.id];
        return nodes && nodes.indexOf(node);
      }
      function unmark_lambda(def) {
        if (lambda_ids[def.id] > 1 && !(def.id in in_use_ids)) {
          in_use_ids[def.id] = true;
          in_use.push(def);
        }
        lambda_ids[def.id] = 0;
      }
      function verify_safe_usage(def, read, modified) {
        if (def.id in in_use_ids)
          return;
        if (read && modified) {
          in_use_ids[def.id] = read;
          in_use.push(def);
        } else {
          value_read[def.id] = read;
          value_modified[def.id] = modified;
        }
      }
      function can_drop_lhs(sym, node) {
        var def = sym.definition();
        var in_use2 = in_use_ids[def.id];
        if (!in_use2)
          return true;
        if (node[node instanceof AST_Assign ? "left" : "expression"] !== sym)
          return false;
        return in_use2 === sym && def.references.length - def.replaced == 1 || indexOf_assign(def, node) < 0;
      }
      function get_rhs(assign) {
        var rhs = assign.right;
        if (!assign.write_only)
          return rhs;
        if (!(rhs instanceof AST_Binary && lazy_op[rhs.operator]))
          return rhs;
        if (!(rhs.left instanceof AST_SymbolRef))
          return rhs;
        if (!(assign.left instanceof AST_SymbolRef))
          return rhs;
        var def = assign.left.definition();
        if (rhs.left.definition() !== def)
          return rhs;
        if (rhs.right.has_side_effects(compressor))
          return rhs;
        if (track_assigns(def, rhs.left))
          add_assigns(def, rhs.left);
        return rhs.right;
      }
      function get_init_symbol(for_in) {
        var init2 = for_in.init;
        if (init2 instanceof AST_Definitions) {
          init2 = init2.definitions[0].name;
          return init2 instanceof AST_SymbolDeclaration && init2;
        }
        while (init2 instanceof AST_PropAccess)
          init2 = init2.expression.tail_node();
        if (init2 instanceof AST_SymbolRef)
          return init2;
      }
      function scan_ref_scoped(node, descend, init2) {
        if (node instanceof AST_Assign && node.left instanceof AST_SymbolRef) {
          var def = node.left.definition();
          if (def.scope.resolve() === self)
            assignments.add(def.id, node);
        }
        if (node instanceof AST_SymbolRef && node.in_arg)
          var_defs[node.definition().id] = 0;
        if (node instanceof AST_Unary && node.expression instanceof AST_SymbolRef) {
          var def = node.expression.definition();
          if (def.scope.resolve() === self)
            assignments.add(def.id, node);
        }
        var props = [], sym = assign_as_unused(node, props);
        if (sym) {
          var node_def = sym.definition();
          if (node_def.scope.resolve() !== self && self.variables.get(sym.name) !== node_def)
            return;
          if (is_arguments(node_def) && !all(self.argnames, function(argname) {
            return !argname.match_symbol(function(node2) {
              if (node2 instanceof AST_SymbolFunarg) {
                var def2 = node2.definition();
                return def2.references.length > def2.replaced;
              }
            }, true);
          }))
            return;
          if (node.write_only === "p" && node.right.may_throw_on_access(compressor, true))
            return;
          var assign = props.assign;
          if (assign) {
            assign.write_only = true;
            assign.walk(tw);
          }
          props.forEach(function(prop) {
            prop.walk(tw);
          });
          if (node instanceof AST_Assign) {
            var right = get_rhs(node), shared = false;
            if (init2 && node.write_only === true && !right.has_side_effects(compressor)) {
              initializations.add(node_def.id, right);
            } else {
              right.walk(tw);
              shared = right.tail_node().operator == "=";
            }
            if (node.left === sym) {
              if (!node.write_only || shared) {
                verify_safe_usage(node_def, sym, value_modified[node_def.id]);
              }
            } else {
              var fixed = sym.fixed_value();
              if (!fixed || !fixed.is_constant()) {
                verify_safe_usage(node_def, value_read[node_def.id], true);
              }
            }
          }
          if (track_assigns(node_def, sym) && is_lhs(sym, node) !== sym)
            add_assigns(node_def, sym);
          unmark_lambda(node_def);
          return true;
        }
        if (node instanceof AST_Binary) {
          if (node.operator != "instanceof")
            return;
          var sym = node.right;
          if (!(sym instanceof AST_SymbolRef))
            return;
          var id = sym.definition().id;
          if (!lambda_ids[id])
            return;
          node.left.walk(tw);
          lambda_ids[id]++;
          return true;
        }
        if (node instanceof AST_ForIn) {
          if (node.init instanceof AST_SymbolRef && scope === self) {
            var id = node.init.definition().id;
            if (!(id in for_ins))
              for_ins[id] = node;
          }
          if (!drop_vars || !compressor.option("loops"))
            return;
          if (!is_empty(node.body))
            return;
          if (node.init.has_side_effects(compressor))
            return;
          var sym = get_init_symbol(node);
          if (!sym)
            return;
          var def = sym.definition();
          if (def.scope.resolve() !== self) {
            var d2 = find_variable(sym.name);
            if (d2 === def || d2 && d2.redefined() === def)
              return;
          }
          node.object.walk(tw);
          return true;
        }
        if (node instanceof AST_SymbolRef) {
          var node_def = node.definition();
          if (!(node_def.id in in_use_ids)) {
            in_use_ids[node_def.id] = true;
            in_use.push(node_def);
          }
          if (cross_scope(node_def.scope, node.scope)) {
            var redef = node_def.redefined();
            if (redef && !(redef.id in in_use_ids)) {
              in_use_ids[redef.id] = true;
              in_use.push(redef);
            }
          }
          if (track_assigns(node_def, node))
            add_assigns(node_def, node);
          return true;
        }
        if (node instanceof AST_Scope) {
          var save_scope = scope;
          scope = node;
          descend();
          scope = save_scope;
          return true;
        }
      }
      function is_decl(node) {
        return (node instanceof AST_DefaultValue ? node.name : node) instanceof AST_SymbolDeclaration;
      }
      function trim_decl(node) {
        if (node.definition().id in in_use_ids)
          return node;
        if (node instanceof AST_SymbolFunarg)
          node.unused = true;
        return null;
      }
      function trim_default(trimmer2, node) {
        node.value = node.value.transform(tt2);
        var name = node.name.transform(trimmer2);
        if (!name) {
          if (node.name instanceof AST_Destructured)
            return null;
          var value = node.value.drop_side_effect_free(compressor);
          if (!value)
            return null;
          log(node.name, "Side effects in default value of unused variable {name}");
          node = node.clone();
          node.name.unused = null;
          node.value = value;
        }
        return node;
      }
      function trim_destructured(node, value, process2, drop, root) {
        var trimmer2 = new TreeTransformer(function(node2) {
          if (node2 instanceof AST_DefaultValue) {
            if (!(compressor.option("default_values") && value && value.is_defined(compressor))) {
              var save_drop = drop;
              drop = false;
              var trimmed = trim_default(trimmer2, node2);
              drop = save_drop;
              if (!trimmed && drop && value)
                value = value.drop_side_effect_free(compressor);
              return trimmed;
            } else if (node2 === root) {
              root = node2 = node2.name;
            } else {
              node2 = node2.name;
            }
          }
          if (node2 instanceof AST_DestructuredArray) {
            var save_drop = drop;
            var save_value = value;
            if (value instanceof AST_SymbolRef) {
              drop = false;
              value = value.fixed_value();
            }
            var native, values;
            if (value instanceof AST_Array) {
              native = true;
              values = value.elements;
            } else {
              native = value && value.is_string(compressor);
              values = false;
            }
            var elements = [], newValues = drop && [], pos = 0;
            node2.elements.forEach(function(element, index) {
              value = values && values[index];
              if (value instanceof AST_Hole) {
                value = null;
              } else if (value instanceof AST_Spread) {
                if (drop) {
                  newValues.length = pos;
                  fill_holes(save_value, newValues);
                  [].push.apply(newValues, values.slice(index));
                  save_value.elements = newValues;
                }
                value = values = false;
              }
              element = element.transform(trimmer2);
              if (element)
                elements[pos] = element;
              if (drop && value)
                newValues[pos] = value;
              if (element || value || !drop || !values)
                pos++;
            });
            value = values && make_node(AST_Array, save_value, {
              elements: values.slice(node2.elements.length)
            });
            if (node2.rest) {
              var was_drop = drop;
              drop = false;
              node2.rest = node2.rest.transform(compressor.option("rests") ? trimmer2 : tt2);
              drop = was_drop;
              if (node2.rest)
                elements.length = pos;
            }
            if (drop) {
              if (value && !node2.rest)
                value = value.drop_side_effect_free(compressor);
              if (value instanceof AST_Array) {
                value = value.elements;
              } else if (value instanceof AST_Sequence) {
                value = value.expressions;
              } else if (value) {
                value = [value];
              }
              if (value && value.length) {
                newValues.length = pos;
                [].push.apply(newValues, value);
              }
            }
            value = save_value;
            drop = save_drop;
            if (values && newValues) {
              fill_holes(value, newValues);
              value = value.clone();
              value.elements = newValues;
            }
            if (!native) {
              elements.length = node2.elements.length;
            } else if (!node2.rest)
              switch (elements.length) {
                case 0:
                  if (node2 === root)
                    break;
                  if (drop)
                    value = value.drop_side_effect_free(compressor);
                  return null;
                case 1:
                  if (!drop)
                    break;
                  if (node2 === root)
                    break;
                  var sym = elements[0];
                  if (sym.has_side_effects(compressor))
                    break;
                  if (value.has_side_effects(compressor) && sym.match_symbol(function(node3) {
                    return node3 instanceof AST_PropAccess;
                  }))
                    break;
                  value = make_node(AST_Sub, node2, {
                    expression: value,
                    property: make_node(AST_Number, node2, { value: 0 })
                  });
                  return sym;
              }
            fill_holes(node2, elements);
            node2.elements = elements;
            return node2;
          }
          if (node2 instanceof AST_DestructuredObject) {
            var save_drop = drop;
            var save_value = value;
            if (value instanceof AST_SymbolRef) {
              drop = false;
              value = value.fixed_value();
            }
            var prop_keys, prop_map, values;
            if (value instanceof AST_Object) {
              prop_keys = [];
              prop_map = new Dictionary;
              values = value.properties.map(function(prop2, index) {
                prop2 = prop2.clone();
                if (prop2 instanceof AST_Spread) {
                  prop_map = false;
                } else {
                  var key = prop2.key;
                  if (key instanceof AST_Node)
                    key = key.evaluate(compressor, true);
                  if (key instanceof AST_Node) {
                    prop_map = false;
                  } else if (prop_map && !(prop2 instanceof AST_ObjectSetter)) {
                    prop_map.set(key, prop2);
                  }
                  prop_keys[index] = key;
                }
                return prop2;
              });
            }
            if (node2.rest) {
              value = false;
              node2.rest = node2.rest.transform(compressor.option("rests") ? trimmer2 : tt2);
            }
            var can_drop = new Dictionary;
            var drop_keys = drop && new Dictionary;
            var properties = [];
            node2.properties.map(function(prop2) {
              var key = prop2.key;
              if (key instanceof AST_Node) {
                prop2.key = key = key.transform(tt2);
                key = key.evaluate(compressor, true);
              }
              if (key instanceof AST_Node) {
                drop_keys = false;
              } else {
                can_drop.set(key, !can_drop.has(key));
              }
              return key;
            }).forEach(function(key, index) {
              var prop2 = node2.properties[index], trimmed2;
              if (key instanceof AST_Node) {
                drop = false;
                value = false;
                trimmed2 = prop2.value.transform(trimmer2) || retain_lhs(prop2.value);
              } else {
                drop = drop_keys && can_drop.get(key);
                var mapped = prop_map && prop_map.get(key);
                if (mapped) {
                  value = mapped.value;
                  if (value instanceof AST_Accessor)
                    value = false;
                } else {
                  value = false;
                }
                trimmed2 = prop2.value.transform(trimmer2);
                if (!trimmed2) {
                  if (node2.rest || retain_key(prop2))
                    trimmed2 = retain_lhs(prop2.value);
                  if (drop_keys && !drop_keys.has(key)) {
                    if (mapped) {
                      drop_keys.set(key, mapped);
                      if (value === null) {
                        prop_map.set(key, retain_key(mapped) && make_node(AST_ObjectKeyVal, mapped, {
                          key: mapped.key,
                          value: make_node(AST_Number, mapped, { value: 0 })
                        }));
                      }
                    } else {
                      drop_keys.set(key, true);
                    }
                  }
                } else if (drop_keys) {
                  drop_keys.set(key, false);
                }
                if (value)
                  mapped.value = value;
              }
              if (trimmed2) {
                prop2.value = trimmed2;
                properties.push(prop2);
              }
            });
            value = save_value;
            drop = save_drop;
            if (drop_keys && prop_keys) {
              value = value.clone();
              value.properties = List(values, function(prop2, index) {
                if (prop2 instanceof AST_Spread)
                  return prop2;
                var key = prop_keys[index];
                if (key instanceof AST_Node)
                  return prop2;
                if (drop_keys.has(key)) {
                  var mapped = drop_keys.get(key);
                  if (!mapped)
                    return prop2;
                  if (mapped === prop2)
                    return prop_map.get(key) || List.skip;
                } else if (node2.rest) {
                  return prop2;
                }
                var trimmed2 = prop2.value.drop_side_effect_free(compressor);
                if (trimmed2) {
                  prop2.value = trimmed2;
                  return prop2;
                }
                return retain_key(prop2) ? make_node(AST_ObjectKeyVal, prop2, {
                  key: prop2.key,
                  value: make_node(AST_Number, prop2, { value: 0 })
                }) : List.skip;
              });
            }
            if (value && !node2.rest)
              switch (properties.length) {
                case 0:
                  if (node2 === root)
                    break;
                  if (value.may_throw_on_access(compressor, true))
                    break;
                  if (drop)
                    value = value.drop_side_effect_free(compressor);
                  return null;
                case 1:
                  if (!drop)
                    break;
                  if (node2 === root)
                    break;
                  var prop = properties[0];
                  if (prop.key instanceof AST_Node)
                    break;
                  if (prop.value.has_side_effects(compressor))
                    break;
                  if (value.has_side_effects(compressor) && prop.value.match_symbol(function(node3) {
                    return node3 instanceof AST_PropAccess;
                  }))
                    break;
                  value = make_node(AST_Sub, node2, {
                    expression: value,
                    property: make_node_from_constant(prop.key, prop)
                  });
                  return prop.value;
              }
            node2.properties = properties;
            return node2;
          }
          if (node2 instanceof AST_Hole) {
            node2 = null;
          } else {
            node2 = process2(node2);
          }
          if (!node2 && drop && value)
            value = value.drop_side_effect_free(compressor);
          return node2;
        });
        return {
          name: node.transform(trimmer2),
          value
        };
        function retain_key(prop) {
          return prop.key instanceof AST_Node && prop.key.has_side_effects(compressor);
        }
        function clear_write_only(node2) {
          if (node2 instanceof AST_Assign) {
            node2.write_only = false;
            clear_write_only(node2.right);
          } else if (node2 instanceof AST_Binary) {
            if (!lazy_op[node2.operator])
              return;
            clear_write_only(node2.left);
            clear_write_only(node2.right);
          } else if (node2 instanceof AST_Conditional) {
            clear_write_only(node2.consequent);
            clear_write_only(node2.alternative);
          } else if (node2 instanceof AST_Sequence) {
            clear_write_only(node2.tail_node());
          } else if (node2 instanceof AST_Unary) {
            node2.write_only = false;
          }
        }
        function retain_lhs(node2) {
          if (node2 instanceof AST_DefaultValue)
            return retain_lhs(node2.name);
          if (node2 instanceof AST_Destructured) {
            if (value === null) {
              value = make_node(AST_Number, node2, { value: 0 });
            } else if (value) {
              if (value.may_throw_on_access(compressor, true)) {
                value = make_node(AST_Array, node2, {
                  elements: value instanceof AST_Sequence ? value.expressions : [value]
                });
              } else {
                clear_write_only(value);
              }
            }
            return make_node(AST_DestructuredObject, node2, { properties: [] });
          }
          node2.unused = null;
          return node2;
        }
      }
    });
    AST_Scope.DEFMETHOD("hoist_declarations", function(compressor) {
      if (compressor.has_directive("use asm"))
        return;
      var hoist_funs = compressor.option("hoist_funs");
      var hoist_vars = compressor.option("hoist_vars");
      var self = this;
      if (hoist_vars) {
        var var_decl = 0;
        self.walk(new TreeWalker(function(node) {
          if (var_decl > 1)
            return true;
          if (node instanceof AST_ExportDeclaration)
            return true;
          if (node instanceof AST_Scope && node !== self)
            return true;
          if (node instanceof AST_Var) {
            var_decl++;
            return true;
          }
        }));
        if (var_decl <= 1)
          hoist_vars = false;
      }
      if (!hoist_funs && !hoist_vars)
        return;
      var consts = new Dictionary;
      var dirs = [];
      var hoisted = [];
      var vars = new Dictionary;
      var tt2 = new TreeTransformer(function(node, descend, in_list) {
        if (node === self)
          return;
        if (node instanceof AST_Directive) {
          dirs.push(node);
          return in_list ? List.skip : make_node(AST_EmptyStatement, node);
        }
        if (node instanceof AST_LambdaDefinition) {
          if (!hoist_funs)
            return node;
          var p2 = tt2.parent();
          if (p2 instanceof AST_ExportDeclaration)
            return node;
          if (p2 instanceof AST_ExportDefault)
            return node;
          if (p2 !== self && compressor.has_directive("use strict"))
            return node;
          hoisted.push(node);
          return in_list ? List.skip : make_node(AST_EmptyStatement, node);
        }
        if (node instanceof AST_Var) {
          if (!hoist_vars)
            return node;
          var p2 = tt2.parent();
          if (p2 instanceof AST_ExportDeclaration)
            return node;
          if (!all(node.definitions, function(defn) {
            var sym2 = defn.name;
            return sym2 instanceof AST_SymbolVar && !consts.has(sym2.name) && self.find_variable(sym2.name) === sym2.definition();
          }))
            return node;
          node.definitions.forEach(function(defn) {
            vars.set(defn.name.name, defn);
          });
          var seq = node.to_assignments();
          if (p2 instanceof AST_ForEnumeration && p2.init === node) {
            if (seq)
              return seq;
            var sym = node.definitions[0].name;
            return make_node(AST_SymbolRef, sym);
          }
          if (p2 instanceof AST_For && p2.init === node)
            return seq;
          if (!seq)
            return in_list ? List.skip : make_node(AST_EmptyStatement, node);
          return make_node(AST_SimpleStatement, node, { body: seq });
        }
        if (node instanceof AST_Scope)
          return node;
        if (node instanceof AST_SymbolConst) {
          consts.set(node.name, true);
          return node;
        }
      });
      self.transform(tt2);
      if (vars.size() > 0) {
        var defns = [];
        if (self instanceof AST_Lambda)
          self.each_argname(function(argname) {
            if (all(argname.definition().references, function(ref) {
              return !ref.in_arg;
            }))
              vars.del(argname.name);
          });
        vars.each(function(defn, name) {
          defn = defn.clone();
          defn.name = defn.name.clone();
          defn.value = null;
          defns.push(defn);
          vars.set(name, defn);
          defn.name.definition().orig.unshift(defn.name);
        });
        if (defns.length > 0)
          hoisted.push(make_node(AST_Var, self, { definitions: defns }));
      }
      self.body = dirs.concat(hoisted, self.body);
    });
    function scan_local_returns(fn, transform) {
      fn.walk(new TreeWalker(function(node) {
        if (node instanceof AST_Return) {
          transform(node);
          return true;
        }
        if (node instanceof AST_Scope && node !== fn)
          return true;
      }));
    }
    function map_self_returns(fn) {
      var map = Object.create(null);
      scan_local_returns(fn, function(node) {
        var value = node.value;
        if (value)
          value = value.tail_node();
        if (value instanceof AST_SymbolRef) {
          var id = value.definition().id;
          map[id] = (map[id] || 0) + 1;
        }
      });
      return map;
    }
    function can_trim_returns(def, self_returns, compressor) {
      if (compressor.exposed(def))
        return false;
      switch (def.references.length - def.replaced - (self_returns[def.id] || 0)) {
        case def.drop_return:
          return "d";
        case def.bool_return:
          return true;
      }
    }
    function process_boolean_returns(fn, compressor) {
      scan_local_returns(fn, function(node) {
        node.in_bool = true;
        var value = node.value;
        if (value) {
          var ev = fuzzy_eval(compressor, value);
          if (!ev) {
            value = value.drop_side_effect_free(compressor);
            node.value = value ? make_sequence(node.value, [
              value,
              make_node(AST_Number, node.value, { value: 0 })
            ]) : null;
          } else if (!(ev instanceof AST_Node)) {
            value = value.drop_side_effect_free(compressor);
            node.value = value ? make_sequence(node.value, [
              value,
              make_node(AST_Number, node.value, { value: 1 })
            ]) : make_node(AST_Number, node.value, { value: 1 });
          }
        }
      });
    }
    AST_Scope.DEFMETHOD("process_returns", noop);
    AST_Defun.DEFMETHOD("process_returns", function(compressor) {
      if (!compressor.option("booleans"))
        return;
      if (compressor.parent() instanceof AST_ExportDefault)
        return;
      switch (can_trim_returns(this.name.definition(), map_self_returns(this), compressor)) {
        case "d":
          drop_returns(compressor, this, true);
          break;
        case true:
          process_boolean_returns(this, compressor);
          break;
      }
    });
    AST_Function.DEFMETHOD("process_returns", function(compressor) {
      if (!compressor.option("booleans"))
        return;
      var drop = true;
      var self_returns = map_self_returns(this);
      if (this.name && !can_trim(this.name.definition()))
        return;
      var parent = compressor.parent();
      if (parent instanceof AST_Assign) {
        if (parent.operator != "=")
          return;
        var sym = parent.left;
        if (!(sym instanceof AST_SymbolRef))
          return;
        if (!can_trim(sym.definition()))
          return;
      } else if (parent instanceof AST_Call && parent.expression !== this) {
        var exp = parent.expression;
        if (exp instanceof AST_SymbolRef)
          exp = exp.fixed_value();
        if (!(exp instanceof AST_Lambda))
          return;
        if (exp.uses_arguments || exp.pinned())
          return;
        var args = parent.args, sym;
        for (var i = 0;i < args.length; i++) {
          var arg = args[i];
          if (arg === this) {
            sym = exp.argnames[i];
            if (!sym && exp.rest)
              return;
            break;
          }
          if (arg instanceof AST_Spread)
            return;
        }
        if (sym instanceof AST_DefaultValue)
          sym = sym.name;
        if (sym instanceof AST_SymbolFunarg && !can_trim(sym.definition()))
          return;
      } else if (parent.TYPE == "Call") {
        compressor.pop();
        var in_bool = compressor.in_boolean_context();
        compressor.push(this);
        switch (in_bool) {
          case true:
            drop = false;
          case "d":
            break;
          default:
            return;
        }
      } else
        return;
      if (drop) {
        drop_returns(compressor, this, true);
      } else {
        process_boolean_returns(this, compressor);
      }
      function can_trim(def) {
        switch (can_trim_returns(def, self_returns, compressor)) {
          case true:
            drop = false;
          case "d":
            return true;
        }
      }
    });
    AST_BlockScope.DEFMETHOD("var_names", function() {
      var var_names = this._var_names;
      if (!var_names) {
        this._var_names = var_names = new Dictionary;
        this.enclosed.forEach(function(def) {
          var_names.set(def.name, true);
        });
        this.variables.each(function(def, name) {
          var_names.set(name, true);
        });
      }
      return var_names;
    });
    AST_Scope.DEFMETHOD("make_var", function(type, orig, prefix) {
      var scopes = [this];
      if (orig instanceof AST_SymbolDeclaration)
        orig.definition().references.forEach(function(ref) {
          var s2 = ref.scope;
          do {
            if (!push_uniq(scopes, s2))
              return;
            s2 = s2.parent_scope;
          } while (s2 && s2 !== this);
        });
      prefix = prefix.replace(/^[^a-z_$]|[^a-z0-9_$]/gi, "_");
      var name = prefix;
      for (var i = 0;!all(scopes, function(scope) {
        return !scope.var_names().has(name);
      }); i++)
        name = prefix + "$" + i;
      var sym = make_node(type, orig, {
        name,
        scope: this
      });
      var def = this.def_variable(sym);
      scopes.forEach(function(scope) {
        scope.enclosed.push(def);
        scope.var_names().set(name, true);
      });
      return sym;
    });
    AST_Scope.DEFMETHOD("hoist_properties", function(compressor) {
      if (!compressor.option("hoist_props") || compressor.has_directive("use asm"))
        return;
      var self = this;
      if (is_arrow(self) && self.value)
        return;
      var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;
      var defs_by_id = Object.create(null);
      var tt2 = new TreeTransformer(function(node, descend) {
        if (node instanceof AST_Assign) {
          if (node.operator != "=")
            return;
          if (!node.write_only)
            return;
          if (!can_hoist(node.left, node.right, 1))
            return;
          descend(node, tt2);
          var defs = new Dictionary;
          var assignments = [];
          var decls = [];
          node.right.properties.forEach(function(prop) {
            var decl2 = make_sym(AST_SymbolVar, node.left, prop.key);
            decls.push(make_node(AST_VarDef, node, {
              name: decl2,
              value: null
            }));
            var sym = make_node(AST_SymbolRef, node, {
              name: decl2.name,
              scope: self,
              thedef: decl2.definition()
            });
            sym.reference();
            assignments.push(make_node(AST_Assign, node, {
              operator: "=",
              left: sym,
              right: prop.value
            }));
          });
          defs.value = node.right;
          defs_by_id[node.left.definition().id] = defs;
          self.body.splice(self.body.indexOf(tt2.stack[1]) + 1, 0, make_node(AST_Var, node, {
            definitions: decls
          }));
          return make_sequence(node, assignments);
        }
        if (node instanceof AST_Scope) {
          if (node === self)
            return;
          var parent = tt2.parent();
          if (parent.TYPE == "Call" && parent.expression === node)
            return;
          return node;
        }
        if (node instanceof AST_VarDef) {
          if (!can_hoist(node.name, node.value, 0))
            return;
          descend(node, tt2);
          var defs = new Dictionary;
          var var_defs = [];
          var decl = node.clone();
          decl.value = node.name instanceof AST_SymbolConst ? make_node(AST_Number, node, { value: 0 }) : null;
          var_defs.push(decl);
          node.value.properties.forEach(function(prop) {
            var_defs.push(make_node(AST_VarDef, node, {
              name: make_sym(node.name.CTOR, node.name, prop.key),
              value: prop.value
            }));
          });
          defs.value = node.value;
          defs_by_id[node.name.definition().id] = defs;
          return List.splice(var_defs);
        }
        function make_sym(type, sym, key) {
          var new_var = self.make_var(type, sym, sym.name + "_" + key);
          defs.set(key, new_var.definition());
          return new_var;
        }
      });
      self.transform(tt2);
      self.transform(new TreeTransformer(function(node, descend) {
        if (node instanceof AST_PropAccess) {
          if (!(node.expression instanceof AST_SymbolRef))
            return;
          var defs = defs_by_id[node.expression.definition().id];
          if (!defs)
            return;
          if (node.expression.fixed_value() !== defs.value)
            return;
          var def = defs.get(node.get_property());
          var sym = make_node(AST_SymbolRef, node, {
            name: def.name,
            scope: node.expression.scope,
            thedef: def
          });
          sym.reference();
          return sym;
        }
        if (node instanceof AST_SymbolRef) {
          var defs = defs_by_id[node.definition().id];
          if (!defs)
            return;
          if (node.fixed_value() !== defs.value)
            return;
          return make_node(AST_Object, node, { properties: [] });
        }
      }));
      function can_hoist(sym, right, count) {
        if (!(sym instanceof AST_Symbol))
          return;
        var def = sym.definition();
        if (def.assignments != count)
          return;
        if (def.references.length - def.replaced == count)
          return;
        if (def.single_use)
          return;
        if (self.find_variable(sym.name) !== def)
          return;
        if (top_retain(def))
          return;
        if (sym.fixed_value() !== right)
          return;
        var fixed = sym.fixed || def.fixed;
        if (fixed.direct_access)
          return;
        if (fixed.escaped && fixed.escaped.depth == 1)
          return;
        return right instanceof AST_Object && right.properties.length > 0 && can_drop_symbol(sym, compressor) && all(right.properties, function(prop) {
          return can_hoist_property(prop) && prop.key !== "__proto__";
        });
      }
    });
    function fn_name_unused(fn, compressor) {
      if (!fn.name || !compressor.option("ie"))
        return true;
      var def = fn.name.definition();
      if (compressor.exposed(def))
        return false;
      return all(def.references, function(sym) {
        return !(sym instanceof AST_SymbolRef);
      });
    }
    function drop_returns(compressor, exp, ignore_name) {
      if (!(exp instanceof AST_Lambda))
        return;
      var arrow = is_arrow(exp);
      var async = is_async(exp);
      var changed = false;
      var drop_body = false;
      if (arrow && compressor.option("arrows")) {
        if (!exp.value) {
          drop_body = true;
        } else if (!async || needs_enqueuing(compressor, exp.value)) {
          var dropped = exp.value.drop_side_effect_free(compressor);
          if (dropped !== exp.value) {
            changed = true;
            exp.value = dropped;
          }
        }
      } else if (!is_generator(exp)) {
        if (!ignore_name && exp.name) {
          var def = exp.name.definition();
          drop_body = def.references.length == def.replaced;
        } else {
          drop_body = true;
        }
      }
      if (drop_body) {
        exp.process_expression(false, function(node) {
          var value = node.value;
          if (value) {
            if (async && !needs_enqueuing(compressor, value))
              return node;
            value = value.drop_side_effect_free(compressor, true);
          }
          changed = true;
          if (!value)
            return make_node(AST_EmptyStatement, node);
          return make_node(AST_SimpleStatement, node, { body: value });
        });
        scan_local_returns(exp, function(node) {
          var value = node.value;
          if (value) {
            if (async && !needs_enqueuing(compressor, value))
              return;
            var dropped2 = value.drop_side_effect_free(compressor);
            if (dropped2 !== value) {
              changed = true;
              if (dropped2 && async && !needs_enqueuing(compressor, dropped2)) {
                dropped2 = dropped2.negate(compressor);
              }
              node.value = dropped2;
            }
          }
        });
      }
      if (async && compressor.option("awaits")) {
        if (drop_body)
          exp.process_expression("awaits", function(node) {
            var body = node.body;
            if (body instanceof AST_Await) {
              if (needs_enqueuing(compressor, body.expression)) {
                changed = true;
                body = body.expression.drop_side_effect_free(compressor, true);
                if (!body)
                  return make_node(AST_EmptyStatement, node);
                node.body = body;
              }
            } else if (body instanceof AST_Sequence) {
              var exprs = body.expressions;
              for (var i = exprs.length;--i >= 0; ) {
                var tail = exprs[i];
                if (!(tail instanceof AST_Await))
                  break;
                var value = tail.expression;
                if (!needs_enqueuing(compressor, value))
                  break;
                changed = true;
                if (exprs[i] = value.drop_side_effect_free(compressor))
                  break;
              }
              switch (i) {
                case -1:
                  return make_node(AST_EmptyStatement, node);
                case 0:
                  node.body = exprs[0];
                  break;
                default:
                  exprs.length = i + 1;
                  break;
              }
            }
            return node;
          });
        var abort = !drop_body && exp.name || arrow && exp.value && !needs_enqueuing(compressor, exp.value);
        var tw = new TreeWalker(function(node) {
          if (abort)
            return true;
          if (tw.parent() === exp && node.may_throw(compressor))
            return abort = true;
          if (node instanceof AST_Await)
            return abort = true;
          if (node instanceof AST_ForAwaitOf)
            return abort = true;
          if (node instanceof AST_Return) {
            if (node.value && !needs_enqueuing(compressor, node.value))
              return abort = true;
            return;
          }
          if (node instanceof AST_Scope && node !== exp)
            return true;
        });
        exp.walk(tw);
        if (!abort) {
          var ctor;
          switch (exp.CTOR) {
            case AST_AsyncArrow:
              ctor = AST_Arrow;
              break;
            case AST_AsyncFunction:
              ctor = AST_Function;
              break;
            case AST_AsyncGeneratorFunction:
              ctor = AST_GeneratorFunction;
              break;
          }
          return make_node(ctor, exp);
        }
      }
      return changed && exp.clone();
    }
    (function(def) {
      function trim(nodes, compressor, first_in_statement2, spread) {
        var len = nodes.length;
        var ret = [], changed = false;
        for (var i = 0;i < len; i++) {
          var node = nodes[i];
          var trimmed;
          if (spread && node instanceof AST_Spread) {
            trimmed = spread(node, compressor, first_in_statement2);
          } else {
            trimmed = node.drop_side_effect_free(compressor, first_in_statement2);
          }
          if (trimmed !== node)
            changed = true;
          if (trimmed) {
            ret.push(trimmed);
            first_in_statement2 = false;
          }
        }
        return ret.length ? changed ? ret : nodes : null;
      }
      function array_spread(node, compressor, first_in_statement2) {
        var exp = node.expression;
        if (!exp.is_string(compressor))
          return node;
        return exp.drop_side_effect_free(compressor, first_in_statement2);
      }
      function convert_spread(node) {
        return node instanceof AST_Spread ? make_node(AST_Array, node, { elements: [node] }) : node;
      }
      def(AST_Node, return_this);
      def(AST_Accessor, return_null);
      def(AST_Array, function(compressor, first_in_statement2) {
        var values = trim(this.elements, compressor, first_in_statement2, array_spread);
        if (!values)
          return null;
        if (values === this.elements && all(values, function(node) {
          return node instanceof AST_Spread;
        }))
          return this;
        return make_sequence(this, values.map(convert_spread));
      });
      def(AST_Assign, function(compressor) {
        var left = this.left;
        if (left instanceof AST_PropAccess) {
          var expr = left.expression;
          if (expr.may_throw_on_access(compressor, true))
            return this;
          if (compressor.has_directive("use strict") && expr.is_constant())
            return this;
        }
        if (left.has_side_effects(compressor))
          return this;
        if (lazy_op[this.operator.slice(0, -1)])
          return this;
        this.write_only = true;
        if (!root_expr(left).is_constant_expression(compressor.find_parent(AST_Scope)))
          return this;
        return this.right.drop_side_effect_free(compressor);
      });
      def(AST_Await, function(compressor) {
        if (!compressor.option("awaits"))
          return this;
        var exp = this.expression;
        if (!needs_enqueuing(compressor, exp))
          return this;
        if (exp instanceof AST_UnaryPrefix && exp.operator == "!")
          exp = exp.expression;
        var dropped = exp.drop_side_effect_free(compressor);
        if (dropped === exp)
          return this;
        if (!dropped) {
          dropped = make_node(AST_Number, exp, { value: 0 });
        } else if (!needs_enqueuing(compressor, dropped)) {
          dropped = dropped.negate(compressor);
        }
        var node = this.clone();
        node.expression = dropped;
        return node;
      });
      def(AST_Binary, function(compressor, first_in_statement2) {
        var left = this.left;
        var right = this.right;
        var op = this.operator;
        if (!can_drop_op(op, right, compressor)) {
          var lhs = left.drop_side_effect_free(compressor, first_in_statement2);
          if (lhs === left)
            return this;
          var node = this.clone();
          node.left = lhs || make_node(AST_Number, left, { value: 0 });
          return node;
        }
        var rhs = right.drop_side_effect_free(compressor, first_in_statement2);
        if (!rhs)
          return left.drop_side_effect_free(compressor, first_in_statement2);
        if (lazy_op[op] && rhs.has_side_effects(compressor)) {
          var node = this;
          if (rhs !== right) {
            node = node.clone();
            node.right = rhs.drop_side_effect_free(compressor);
          }
          if (op == "??")
            return node;
          var negated = node.clone();
          negated.operator = op == "&&" ? "||" : "&&";
          negated.left = left.negate(compressor, first_in_statement2);
          var negated_rhs = negated.right.tail_node();
          if (negated_rhs instanceof AST_Binary && negated.operator == negated_rhs.operator)
            swap_chain(negated);
          var best = first_in_statement2 ? best_of_statement : best_of_expression;
          return op == "&&" ? best(node, negated) : best(negated, node);
        }
        var lhs = left.drop_side_effect_free(compressor, first_in_statement2);
        if (!lhs)
          return rhs;
        rhs = rhs.drop_side_effect_free(compressor);
        if (!rhs)
          return lhs;
        return make_sequence(this, [lhs, rhs]);
      });
      function assign_this_only(fn, compressor) {
        fn.new = true;
        var result = all(fn.body, function(stat) {
          return !stat.has_side_effects(compressor);
        }) && all(fn.argnames, function(argname) {
          return !argname.match_symbol(return_false);
        }) && !(fn.rest && fn.rest.match_symbol(return_false));
        fn.new = false;
        return result;
      }
      def(AST_Call, function(compressor, first_in_statement2) {
        var self = this;
        if (self.is_expr_pure(compressor)) {
          if (self.pure)
            AST_Node.warn("Dropping __PURE__ call [{start}]", self);
          var args = trim(self.args, compressor, first_in_statement2, array_spread);
          return args && make_sequence(self, args.map(convert_spread));
        }
        var exp = self.expression;
        if (self.is_call_pure(compressor)) {
          var exprs = self.args.slice();
          exprs.unshift(exp.expression);
          exprs = trim(exprs, compressor, first_in_statement2, array_spread);
          return exprs && make_sequence(self, exprs.map(convert_spread));
        }
        if (compressor.option("yields") && is_generator(exp)) {
          var call = self.clone();
          call.expression = make_node(AST_Function, exp);
          call.expression.body = [];
          var opt = call.transform(compressor);
          if (opt !== call)
            return opt.drop_side_effect_free(compressor, first_in_statement2);
        }
        var dropped = drop_returns(compressor, exp);
        if (dropped) {
          self = self.clone();
          self.expression = dropped;
          if (exp._squeezed)
            self.expression._squeezed = true;
        }
        if (self instanceof AST_New) {
          var fn = exp;
          if (fn instanceof AST_SymbolRef)
            fn = fn.fixed_value();
          if (fn instanceof AST_Lambda) {
            if (assign_this_only(fn, compressor)) {
              var exprs = self.args.slice();
              exprs.unshift(exp);
              exprs = trim(exprs, compressor, first_in_statement2, array_spread);
              return exprs && make_sequence(self, exprs.map(convert_spread));
            }
            if (!fn.contains_this()) {
              self = make_node(AST_Call, self);
              self.expression = self.expression.clone();
              self.args = self.args.slice();
            }
          }
        }
        self.call_only = true;
        return self;
      });
      def(AST_ClassExpression, function(compressor, first_in_statement2) {
        var self = this;
        var exprs = [], values = [], init = 0;
        var props = self.properties;
        for (var i = 0;i < props.length; i++) {
          var prop = props[i];
          if (prop.key instanceof AST_Node)
            exprs.push(prop.key);
          if (!is_static_field_or_init(prop))
            continue;
          var value = prop.value;
          if (!value.has_side_effects(compressor))
            continue;
          if (value.contains_this())
            return self;
          if (prop instanceof AST_ClassInit) {
            init++;
            values.push(prop);
          } else {
            values.push(value);
          }
        }
        var base = self.extends;
        if (base) {
          if (base instanceof AST_SymbolRef)
            base = base.fixed_value();
          base = !safe_for_extends(base);
          if (!base)
            exprs.unshift(self.extends);
        }
        exprs = trim(exprs, compressor, first_in_statement2);
        if (exprs)
          first_in_statement2 = false;
        values = trim(values, compressor, first_in_statement2);
        if (!exprs) {
          if (!base && !values && !self.name)
            return null;
          exprs = [];
        }
        if (base || self.name || !compressor.has_directive("use strict")) {
          var node = to_class_expr(self);
          if (!base)
            node.extends = null;
          node.properties = [];
          if (values) {
            if (values.length == init) {
              if (exprs.length)
                values.unshift(make_node(AST_ClassField, self, {
                  key: make_sequence(self, exprs),
                  value: null
                }));
              node.properties = values;
            } else
              node.properties.push(make_node(AST_ClassField, self, {
                static: true,
                key: exprs.length ? make_sequence(self, exprs) : "c",
                value: make_value()
              }));
          } else if (exprs.length)
            node.properties.push(make_node(AST_ClassMethod, self, {
              key: make_sequence(self, exprs),
              value: make_node(AST_Function, self, {
                argnames: [],
                body: []
              }).init_vars(node)
            }));
          return node;
        }
        if (values)
          exprs.push(make_node(AST_Call, self, {
            expression: make_node(AST_Arrow, self, {
              argnames: [],
              body: [],
              value: make_value()
            }).init_vars(self.parent_scope),
            args: []
          }));
        return make_sequence(self, exprs);
        function make_value() {
          return make_sequence(self, values.map(function(node2) {
            if (!(node2 instanceof AST_ClassInit))
              return node2;
            var fn = make_node(AST_Arrow, node2.value);
            fn.argnames = [];
            return make_node(AST_Call, node2, {
              expression: fn,
              args: []
            });
          }));
        }
      });
      def(AST_Conditional, function(compressor) {
        var consequent = this.consequent.drop_side_effect_free(compressor);
        var alternative = this.alternative.drop_side_effect_free(compressor);
        if (consequent === this.consequent && alternative === this.alternative)
          return this;
        var exprs;
        if (compressor.option("ie")) {
          exprs = [];
          if (consequent instanceof AST_Function) {
            exprs.push(consequent);
            consequent = null;
          }
          if (alternative instanceof AST_Function) {
            exprs.push(alternative);
            alternative = null;
          }
        }
        var node;
        if (!consequent) {
          node = alternative ? make_node(AST_Binary, this, {
            operator: "||",
            left: this.condition,
            right: alternative
          }) : this.condition.drop_side_effect_free(compressor);
        } else if (!alternative) {
          node = make_node(AST_Binary, this, {
            operator: "&&",
            left: this.condition,
            right: consequent
          });
        } else {
          node = this.clone();
          node.consequent = consequent;
          node.alternative = alternative;
        }
        if (!exprs)
          return node;
        if (node)
          exprs.push(node);
        return exprs.length == 0 ? null : make_sequence(this, exprs);
      });
      def(AST_Constant, return_null);
      def(AST_Dot, function(compressor, first_in_statement2) {
        var expr = this.expression;
        if (expr.may_throw_on_access(compressor))
          return this;
        return expr.drop_side_effect_free(compressor, first_in_statement2);
      });
      def(AST_Function, function(compressor) {
        return fn_name_unused(this, compressor) ? null : this;
      });
      def(AST_LambdaExpression, return_null);
      def(AST_Object, function(compressor, first_in_statement2) {
        var exprs = [];
        this.properties.forEach(function(prop) {
          if (prop instanceof AST_Spread) {
            exprs.push(prop);
          } else {
            if (prop.key instanceof AST_Node)
              exprs.push(prop.key);
            exprs.push(prop.value);
          }
        });
        var values = trim(exprs, compressor, first_in_statement2, function(node, compressor2, first_in_statement3) {
          var exp = node.expression;
          return exp.safe_to_spread() ? exp.drop_side_effect_free(compressor2, first_in_statement3) : node;
        });
        if (!values)
          return null;
        if (values === exprs && !all(values, function(node) {
          return !(node instanceof AST_Spread);
        }))
          return this;
        return make_sequence(this, values.map(function(node) {
          return node instanceof AST_Spread ? make_node(AST_Object, node, { properties: [node] }) : node;
        }));
      });
      def(AST_ObjectIdentity, return_null);
      def(AST_Sequence, function(compressor, first_in_statement2) {
        var expressions = trim(this.expressions, compressor, first_in_statement2);
        if (!expressions)
          return null;
        var end = expressions.length - 1;
        var last = expressions[end];
        if (compressor.option("awaits") && end > 0 && last instanceof AST_Await && last.expression.is_constant()) {
          expressions = expressions.slice(0, -1);
          end--;
          var expr = expressions[end];
          last.expression = needs_enqueuing(compressor, expr) ? expr : expr.negate(compressor);
          expressions[end] = last;
        }
        var assign, cond, lhs;
        if (compressor.option("conditionals") && end > 0 && (assign = expressions[end - 1]) instanceof AST_Assign && assign.operator == "=" && (lhs = assign.left) instanceof AST_SymbolRef && (cond = to_conditional_assignment(compressor, lhs.definition(), assign.right, last))) {
          assign = assign.clone();
          assign.right = cond;
          expressions = expressions.slice(0, -2);
          expressions.push(assign.drop_side_effect_free(compressor, first_in_statement2));
        }
        return expressions === this.expressions ? this : make_sequence(this, expressions);
      });
      def(AST_Sub, function(compressor, first_in_statement2) {
        var expr = this.expression;
        if (expr.may_throw_on_access(compressor))
          return this;
        var prop = this.property;
        expr = expr.drop_side_effect_free(compressor, first_in_statement2);
        if (!expr)
          return prop.drop_side_effect_free(compressor, first_in_statement2);
        prop = prop.drop_side_effect_free(compressor);
        if (!prop)
          return expr;
        return make_sequence(this, [expr, prop]);
      });
      def(AST_SymbolRef, function(compressor) {
        return this.is_declared(compressor) && can_drop_symbol(this, compressor) ? null : this;
      });
      def(AST_Template, function(compressor, first_in_statement2) {
        var self = this;
        if (self.is_expr_pure(compressor)) {
          var expressions = self.expressions;
          if (expressions.length == 0)
            return null;
          return make_sequence(self, expressions).drop_side_effect_free(compressor, first_in_statement2);
        }
        var tag = self.tag;
        var dropped = drop_returns(compressor, tag);
        if (dropped) {
          self = self.clone();
          self.tag = dropped;
          if (tag._squeezed)
            self.tag._squeezed = true;
        }
        return self;
      });
      def(AST_Unary, function(compressor, first_in_statement2) {
        var exp = this.expression;
        if (unary_side_effects[this.operator]) {
          this.write_only = !exp.has_side_effects(compressor);
          return this;
        }
        if (this.operator == "typeof" && exp instanceof AST_SymbolRef && can_drop_symbol(exp, compressor)) {
          return null;
        }
        var node = exp.drop_side_effect_free(compressor, first_in_statement2);
        if (first_in_statement2 && node && is_iife_call(node)) {
          if (node === exp && this.operator == "!")
            return this;
          return node.negate(compressor, first_in_statement2);
        }
        return node;
      });
    })(function(node, func) {
      node.DEFMETHOD("drop_side_effect_free", func);
    });
    OPT(AST_SimpleStatement, function(self, compressor) {
      if (compressor.option("side_effects")) {
        var body = self.body;
        var node = body.drop_side_effect_free(compressor, true);
        if (!node) {
          AST_Node.warn("Dropping side-effect-free statement [{start}]", self);
          return make_node(AST_EmptyStatement, self);
        }
        if (node !== body) {
          return make_node(AST_SimpleStatement, self, { body: node });
        }
      }
      return self;
    });
    OPT(AST_While, function(self, compressor) {
      return compressor.option("loops") ? make_node(AST_For, self).optimize(compressor) : self;
    });
    function has_loop_control(loop, parent, type) {
      if (!type)
        type = AST_LoopControl;
      var found = false;
      var tw = new TreeWalker(function(node) {
        if (found || node instanceof AST_Scope)
          return true;
        if (node instanceof type && tw.loopcontrol_target(node) === loop) {
          return found = true;
        }
      });
      if (parent instanceof AST_LabeledStatement)
        tw.push(parent);
      tw.push(loop);
      loop.body.walk(tw);
      return found;
    }
    OPT(AST_Do, function(self, compressor) {
      if (!compressor.option("loops"))
        return self;
      var cond = fuzzy_eval(compressor, self.condition);
      if (!(cond instanceof AST_Node)) {
        if (cond && !has_loop_control(self, compressor.parent(), AST_Continue))
          return make_node(AST_For, self, {
            body: make_node(AST_BlockStatement, self.body, {
              body: [
                self.body,
                make_node(AST_SimpleStatement, self.condition, { body: self.condition })
              ]
            })
          }).optimize(compressor);
        if (!has_loop_control(self, compressor.parent()))
          return make_node(AST_BlockStatement, self.body, {
            body: [
              self.body,
              make_node(AST_SimpleStatement, self.condition, { body: self.condition })
            ]
          }).optimize(compressor);
      }
      if (self.body instanceof AST_BlockStatement && !has_loop_control(self, compressor.parent(), AST_Continue)) {
        var body = self.body.body;
        for (var i = body.length;--i >= 0; ) {
          var stat = body[i];
          if (stat instanceof AST_If && !stat.alternative && stat.body instanceof AST_Break && compressor.loopcontrol_target(stat.body) === self) {
            if (has_block_scope_refs(stat.condition))
              break;
            self.condition = make_node(AST_Binary, self, {
              operator: "&&",
              left: stat.condition.negate(compressor),
              right: self.condition
            });
            body.splice(i, 1);
          } else if (stat instanceof AST_SimpleStatement) {
            if (has_block_scope_refs(stat.body))
              break;
            self.condition = make_sequence(self, [
              stat.body,
              self.condition
            ]);
            body.splice(i, 1);
          } else if (!is_declaration(stat, true)) {
            break;
          }
        }
        self.body = trim_block(self.body, compressor.parent());
      }
      if (self.body instanceof AST_EmptyStatement)
        return make_node(AST_For, self).optimize(compressor);
      if (self.body instanceof AST_SimpleStatement)
        return make_node(AST_For, self, {
          condition: make_sequence(self.condition, [
            self.body.body,
            self.condition
          ]),
          body: make_node(AST_EmptyStatement, self)
        }).optimize(compressor);
      return self;
      function has_block_scope_refs(node) {
        var found = false;
        node.walk(new TreeWalker(function(node2) {
          if (found)
            return true;
          if (node2 instanceof AST_SymbolRef) {
            if (!member(node2.definition(), self.enclosed))
              found = true;
            return true;
          }
        }));
        return found;
      }
    });
    function if_break_in_loop(self, compressor) {
      var first = first_statement(self.body);
      if (compressor.option("dead_code") && (first instanceof AST_Break || first instanceof AST_Continue && external_target(first) || first instanceof AST_Exit)) {
        var body = [];
        if (is_statement(self.init)) {
          body.push(self.init);
        } else if (self.init) {
          body.push(make_node(AST_SimpleStatement, self.init, { body: self.init }));
        }
        var retain = external_target(first) || first instanceof AST_Exit;
        if (self.condition && retain) {
          body.push(make_node(AST_If, self, {
            condition: self.condition,
            body: first,
            alternative: null
          }));
        } else if (self.condition) {
          body.push(make_node(AST_SimpleStatement, self.condition, { body: self.condition }));
        } else if (retain) {
          body.push(first);
        }
        extract_declarations_from_unreachable_code(compressor, self.body, body);
        return make_node(AST_BlockStatement, self, { body });
      }
      if (first instanceof AST_If) {
        var ab = first_statement(first.body);
        if (ab instanceof AST_Break && !external_target(ab)) {
          if (self.condition) {
            self.condition = make_node(AST_Binary, self.condition, {
              left: self.condition,
              operator: "&&",
              right: first.condition.negate(compressor)
            });
          } else {
            self.condition = first.condition.negate(compressor);
          }
          var body = as_statement_array(first.alternative);
          extract_declarations_from_unreachable_code(compressor, first.body, body);
          return drop_it(body);
        }
        ab = first_statement(first.alternative);
        if (ab instanceof AST_Break && !external_target(ab)) {
          if (self.condition) {
            self.condition = make_node(AST_Binary, self.condition, {
              left: self.condition,
              operator: "&&",
              right: first.condition
            });
          } else {
            self.condition = first.condition;
          }
          var body = as_statement_array(first.body);
          extract_declarations_from_unreachable_code(compressor, first.alternative, body);
          return drop_it(body);
        }
      }
      return self;
      function first_statement(body2) {
        return body2 instanceof AST_BlockStatement ? body2.body[0] : body2;
      }
      function external_target(node) {
        return compressor.loopcontrol_target(node) !== compressor.self();
      }
      function drop_it(rest) {
        if (self.body instanceof AST_BlockStatement) {
          self.body = self.body.clone();
          self.body.body = rest.concat(self.body.body.slice(1));
          self.body = self.body.transform(compressor);
        } else {
          self.body = make_node(AST_BlockStatement, self.body, { body: rest }).transform(compressor);
        }
        return if_break_in_loop(self, compressor);
      }
    }
    OPT(AST_For, function(self, compressor) {
      if (!compressor.option("loops"))
        return self;
      if (compressor.option("side_effects")) {
        if (self.init)
          self.init = self.init.drop_side_effect_free(compressor);
        if (self.step)
          self.step = self.step.drop_side_effect_free(compressor);
      }
      if (self.condition) {
        var cond = fuzzy_eval(compressor, self.condition);
        if (!cond) {
          if (compressor.option("dead_code")) {
            var body = [];
            if (is_statement(self.init)) {
              body.push(self.init);
            } else if (self.init) {
              body.push(make_node(AST_SimpleStatement, self.init, { body: self.init }));
            }
            body.push(make_node(AST_SimpleStatement, self.condition, { body: self.condition }));
            extract_declarations_from_unreachable_code(compressor, self.body, body);
            return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
          }
        } else if (!(cond instanceof AST_Node)) {
          self.body = make_node(AST_BlockStatement, self.body, {
            body: [
              make_node(AST_SimpleStatement, self.condition, { body: self.condition }),
              self.body
            ]
          });
          self.condition = null;
        }
      }
      return if_break_in_loop(self, compressor);
    });
    OPT(AST_ForEnumeration, function(self, compressor) {
      if (compressor.option("varify") && is_lexical_definition(self.init)) {
        var name = self.init.definitions[0].name;
        if ((name instanceof AST_Destructured || name instanceof AST_SymbolLet) && !name.match_symbol(function(node) {
          if (node instanceof AST_SymbolDeclaration) {
            var def = node.definition();
            return !same_scope(def) || may_overlap(compressor, def);
          }
        }, true)) {
          self.init = to_var(self.init, self.resolve());
        }
      }
      return self;
    });
    function mark_locally_defined(condition, consequent, alternative) {
      if (condition instanceof AST_Sequence)
        condition = condition.tail_node();
      if (!(condition instanceof AST_Binary))
        return;
      if (!(condition.left instanceof AST_String)) {
        switch (condition.operator) {
          case "&&":
            mark_locally_defined(condition.left, consequent);
            mark_locally_defined(condition.right, consequent);
            break;
          case "||":
            mark_locally_defined(negate(condition.left), alternative);
            mark_locally_defined(negate(condition.right), alternative);
            break;
        }
        return;
      }
      if (!(condition.right instanceof AST_UnaryPrefix))
        return;
      if (condition.right.operator != "typeof")
        return;
      var sym = condition.right.expression;
      if (!is_undeclared_ref(sym))
        return;
      var body;
      var undef = condition.left.value == "undefined";
      switch (condition.operator) {
        case "==":
          body = undef ? alternative : consequent;
          break;
        case "!=":
          body = undef ? consequent : alternative;
          break;
        default:
          return;
      }
      if (!body)
        return;
      var abort = false;
      var def = sym.definition();
      var fn;
      var refs = [];
      var scanned = [];
      var tw = new TreeWalker(function(node, descend) {
        if (abort)
          return true;
        if (node instanceof AST_Assign) {
          var ref = node.left;
          if (!(ref instanceof AST_SymbolRef && ref.definition() === def))
            return;
          node.right.walk(tw);
          switch (node.operator) {
            case "=":
            case "&&=":
              abort = true;
          }
          return true;
        }
        if (node instanceof AST_Call) {
          descend();
          fn = node.expression.tail_node();
          var save;
          if (fn instanceof AST_SymbolRef) {
            fn = fn.fixed_value();
            save = refs.length;
          }
          if (!(fn instanceof AST_Lambda)) {
            abort = true;
          } else if (push_uniq(scanned, fn)) {
            fn.walk(tw);
          }
          if (save >= 0)
            refs.length = save;
          return true;
        }
        if (node instanceof AST_DWLoop) {
          var save = refs.length;
          descend();
          if (abort)
            refs.length = save;
          return true;
        }
        if (node instanceof AST_For) {
          if (node.init)
            node.init.walk(tw);
          var save = refs.length;
          if (node.condition)
            node.condition.walk(tw);
          node.body.walk(tw);
          if (node.step)
            node.step.walk(tw);
          if (abort)
            refs.length = save;
          return true;
        }
        if (node instanceof AST_ForEnumeration) {
          node.object.walk(tw);
          var save = refs.length;
          node.init.walk(tw);
          node.body.walk(tw);
          if (abort)
            refs.length = save;
          return true;
        }
        if (node instanceof AST_Scope) {
          if (node === fn)
            return;
          return true;
        }
        if (node instanceof AST_SymbolRef) {
          if (node.definition() === def)
            refs.push(node);
          return true;
        }
      });
      body.walk(tw);
      refs.forEach(function(ref) {
        ref.defined = true;
      });
      function negate(node) {
        if (!(node instanceof AST_Binary))
          return;
        switch (node.operator) {
          case "==":
            node = node.clone();
            node.operator = "!=";
            return node;
          case "!=":
            node = node.clone();
            node.operator = "==";
            return node;
        }
      }
    }
    function fuzzy_eval(compressor, node, nullish) {
      if (node.truthy)
        return true;
      if (is_undefined(node))
        return;
      if (node.falsy && !nullish)
        return false;
      if (node.is_truthy())
        return true;
      return node.evaluate(compressor, true);
    }
    function mark_duplicate_condition(compressor, node) {
      var child;
      var level = 0;
      var negated = false;
      var parent = compressor.self();
      if (!is_statement(parent))
        while (true) {
          child = parent;
          parent = compressor.parent(level++);
          if (parent instanceof AST_Binary) {
            switch (child) {
              case parent.left:
                if (lazy_op[parent.operator])
                  continue;
                break;
              case parent.right:
                if (match(parent.left))
                  switch (parent.operator) {
                    case "&&":
                      node[negated ? "falsy" : "truthy"] = true;
                      break;
                    case "||":
                    case "??":
                      node[negated ? "truthy" : "falsy"] = true;
                      break;
                  }
                break;
            }
          } else if (parent instanceof AST_Conditional) {
            var cond = parent.condition;
            if (cond === child)
              continue;
            if (match(cond))
              switch (child) {
                case parent.consequent:
                  node[negated ? "falsy" : "truthy"] = true;
                  break;
                case parent.alternative:
                  node[negated ? "truthy" : "falsy"] = true;
                  break;
              }
          } else if (parent instanceof AST_Exit) {
            break;
          } else if (parent instanceof AST_If) {
            break;
          } else if (parent instanceof AST_Sequence) {
            if (parent.expressions[0] === child)
              continue;
          } else if (parent instanceof AST_SimpleStatement) {
            break;
          }
          return;
        }
      while (true) {
        child = parent;
        parent = compressor.parent(level++);
        if (parent instanceof AST_BlockStatement) {
          if (parent.body[0] === child)
            continue;
        } else if (parent instanceof AST_If) {
          if (match(parent.condition))
            switch (child) {
              case parent.body:
                node[negated ? "falsy" : "truthy"] = true;
                break;
              case parent.alternative:
                node[negated ? "truthy" : "falsy"] = true;
                break;
            }
        }
        return;
      }
      function match(cond2) {
        if (node.equals(cond2))
          return true;
        if (!(cond2 instanceof AST_UnaryPrefix))
          return false;
        if (cond2.operator != "!")
          return false;
        if (!node.equals(cond2.expression))
          return false;
        negated = true;
        return true;
      }
    }
    OPT(AST_If, function(self, compressor) {
      if (is_empty(self.alternative))
        self.alternative = null;
      if (!compressor.option("conditionals"))
        return self;
      if (compressor.option("booleans") && !self.condition.has_side_effects(compressor)) {
        mark_duplicate_condition(compressor, self.condition);
      }
      if (compressor.option("dead_code")) {
        var cond = fuzzy_eval(compressor, self.condition);
        if (!cond) {
          AST_Node.warn("Condition always false [{start}]", self.condition);
          var body = [
            make_node(AST_SimpleStatement, self.condition, { body: self.condition }).transform(compressor)
          ];
          extract_declarations_from_unreachable_code(compressor, self.body, body);
          if (self.alternative)
            body.push(self.alternative);
          return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
        } else if (!(cond instanceof AST_Node)) {
          AST_Node.warn("Condition always true [{start}]", self.condition);
          var body = [
            make_node(AST_SimpleStatement, self.condition, { body: self.condition }).transform(compressor),
            self.body
          ];
          if (self.alternative)
            extract_declarations_from_unreachable_code(compressor, self.alternative, body);
          return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
        }
      }
      var negated = self.condition.negate(compressor);
      var self_condition_length = self.condition.print_to_string().length;
      var negated_length = negated.print_to_string().length;
      var negated_is_best = negated_length < self_condition_length;
      if (self.alternative && negated_is_best) {
        negated_is_best = false;
        self.condition = negated;
        var tmp = self.body;
        self.body = self.alternative;
        self.alternative = is_empty(tmp) ? null : tmp;
      }
      var body_defuns = [];
      var body_var_defs = [];
      var body_refs = [];
      var body_exprs = sequencesize(self.body, body_defuns, body_var_defs, body_refs);
      var alt_defuns = [];
      var alt_var_defs = [];
      var alt_refs = [];
      var alt_exprs = sequencesize(self.alternative, alt_defuns, alt_var_defs, alt_refs);
      if (body_exprs instanceof AST_BlockStatement || alt_exprs instanceof AST_BlockStatement) {
        var body = [], var_defs = [];
        if (body_exprs) {
          [].push.apply(body, body_defuns);
          [].push.apply(var_defs, body_var_defs);
          if (body_exprs instanceof AST_BlockStatement) {
            self.body = body_exprs;
          } else if (body_exprs.length == 0) {
            self.body = make_node(AST_EmptyStatement, self.body);
          } else {
            self.body = make_node(AST_SimpleStatement, self.body, {
              body: make_sequence(self.body, body_exprs)
            });
          }
          body_refs.forEach(process_to_assign);
        }
        if (alt_exprs) {
          [].push.apply(body, alt_defuns);
          [].push.apply(var_defs, alt_var_defs);
          if (alt_exprs instanceof AST_BlockStatement) {
            self.alternative = alt_exprs;
          } else if (alt_exprs.length == 0) {
            self.alternative = null;
          } else {
            self.alternative = make_node(AST_SimpleStatement, self.alternative, {
              body: make_sequence(self.alternative, alt_exprs)
            });
          }
          alt_refs.forEach(process_to_assign);
        }
        if (var_defs.length > 0)
          body.push(make_node(AST_Var, self, { definitions: var_defs }));
        if (body.length > 0) {
          body.push(self.transform(compressor));
          return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
        }
      } else if (body_exprs && alt_exprs) {
        var body = body_defuns.concat(alt_defuns);
        if (body_var_defs.length > 0 || alt_var_defs.length > 0)
          body.push(make_node(AST_Var, self, {
            definitions: body_var_defs.concat(alt_var_defs)
          }));
        if (body_exprs.length == 0) {
          body.push(make_node(AST_SimpleStatement, self.condition, {
            body: alt_exprs.length > 0 ? make_node(AST_Binary, self, {
              operator: "||",
              left: self.condition,
              right: make_sequence(self.alternative, alt_exprs)
            }).transform(compressor) : self.condition.clone()
          }).optimize(compressor));
        } else if (alt_exprs.length == 0) {
          if (self_condition_length === negated_length && !negated_is_best && self.condition instanceof AST_Binary && self.condition.operator == "||") {
            negated_is_best = true;
          }
          body.push(make_node(AST_SimpleStatement, self, {
            body: make_node(AST_Binary, self, {
              operator: negated_is_best ? "||" : "&&",
              left: negated_is_best ? negated : self.condition,
              right: make_sequence(self.body, body_exprs)
            }).transform(compressor)
          }).optimize(compressor));
        } else {
          body.push(make_node(AST_SimpleStatement, self, {
            body: make_node(AST_Conditional, self, {
              condition: self.condition,
              consequent: make_sequence(self.body, body_exprs),
              alternative: make_sequence(self.alternative, alt_exprs)
            })
          }).optimize(compressor));
        }
        body_refs.forEach(process_to_assign);
        alt_refs.forEach(process_to_assign);
        return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
      }
      if (is_empty(self.body))
        self = make_node(AST_If, self, {
          condition: negated,
          body: self.alternative,
          alternative: null
        });
      if (self.alternative instanceof AST_Exit && self.body.TYPE == self.alternative.TYPE) {
        var cons_value = self.body.value;
        var alt_value = self.alternative.value;
        if (!cons_value && !alt_value)
          return make_node(AST_BlockStatement, self, {
            body: [
              make_node(AST_SimpleStatement, self, { body: self.condition }),
              self.body
            ]
          }).optimize(compressor);
        if (cons_value && alt_value || !keep_return_void()) {
          var exit = make_node(self.body.CTOR, self, {
            value: make_node(AST_Conditional, self, {
              condition: self.condition,
              consequent: cons_value || make_node(AST_Undefined, self.body).transform(compressor),
              alternative: alt_value || make_node(AST_Undefined, self.alternative).transform(compressor)
            })
          });
          if (exit instanceof AST_Return)
            exit.in_bool = self.body.in_bool || self.alternative.in_bool;
          return exit;
        }
      }
      if (self.body instanceof AST_If && !self.body.alternative && !self.alternative) {
        self = make_node(AST_If, self, {
          condition: make_node(AST_Binary, self.condition, {
            operator: "&&",
            left: self.condition,
            right: self.body.condition
          }),
          body: self.body.body,
          alternative: null
        });
      }
      if (aborts(self.body) && self.alternative) {
        var alt = self.alternative;
        self.alternative = null;
        return make_node(AST_BlockStatement, self, { body: [self, alt] }).optimize(compressor);
      }
      if (aborts(self.alternative)) {
        var body = self.body;
        self.body = self.alternative;
        self.condition = negated_is_best ? negated : self.condition.negate(compressor);
        self.alternative = null;
        return make_node(AST_BlockStatement, self, { body: [self, body] }).optimize(compressor);
      }
      if (self.alternative) {
        var body_stats = as_array(self.body);
        var body_index = last_index(body_stats);
        var alt_stats = as_array(self.alternative);
        var alt_index = last_index(alt_stats);
        for (var stats = [];body_index >= 0 && alt_index >= 0; ) {
          var stat = body_stats[body_index];
          var alt_stat = alt_stats[alt_index];
          if (stat.equals(alt_stat)) {
            body_stats.splice(body_index--, 1);
            alt_stats.splice(alt_index--, 1);
            stats.unshift(merge_expression(stat, alt_stat));
          } else {
            if (!(stat instanceof AST_SimpleStatement))
              break;
            if (!(alt_stat instanceof AST_SimpleStatement))
              break;
            var expr1 = stat.body.tail_node();
            var expr2 = alt_stat.body.tail_node();
            if (!expr1.equals(expr2))
              break;
            body_index = pop_expr(body_stats, stat.body, body_index);
            alt_index = pop_expr(alt_stats, alt_stat.body, alt_index);
            stats.unshift(make_node(AST_SimpleStatement, expr1, { body: merge_expression(expr1, expr2) }));
          }
        }
        if (stats.length > 0) {
          self.body = body_stats.length > 0 ? make_node(AST_BlockStatement, self, {
            body: body_stats
          }) : make_node(AST_EmptyStatement, self);
          self.alternative = alt_stats.length > 0 ? make_node(AST_BlockStatement, self, {
            body: alt_stats
          }) : null;
          stats.unshift(self);
          return make_node(AST_BlockStatement, self, { body: stats }).optimize(compressor);
        }
      }
      if (compressor.option("typeofs"))
        mark_locally_defined(self.condition, self.body, self.alternative);
      return self;
      function as_array(node) {
        return node instanceof AST_BlockStatement ? node.body : [node];
      }
      function keep_return_void() {
        var has_finally = false, level = 0, node = compressor.self();
        do {
          if (node instanceof AST_Catch) {
            if (compressor.parent(level).bfinally)
              has_finally = true;
            level++;
          } else if (node instanceof AST_Finally) {
            level++;
          } else if (node instanceof AST_Scope) {
            return has_finally && in_async_generator(node);
          } else if (node instanceof AST_Try) {
            if (node.bfinally)
              has_finally = true;
          }
        } while (node = compressor.parent(level++));
      }
      function last_index(stats2) {
        for (var index = stats2.length;--index >= 0; ) {
          if (!is_declaration(stats2[index], true))
            break;
        }
        return index;
      }
      function pop_expr(stats2, body2, index) {
        if (body2 instanceof AST_Sequence) {
          stats2[index] = make_node(AST_SimpleStatement, body2, {
            body: make_sequence(body2, body2.expressions.slice(0, -1))
          });
        } else {
          stats2.splice(index--, 1);
        }
        return index;
      }
      function sequencesize(stat2, defuns, var_defs2, refs) {
        if (stat2 == null)
          return [];
        if (stat2 instanceof AST_BlockStatement) {
          var exprs = [];
          for (var i = 0;i < stat2.body.length; i++) {
            var line = stat2.body[i];
            if (line instanceof AST_EmptyStatement)
              continue;
            if (line instanceof AST_Exit) {
              if (i == 0)
                return;
              if (exprs.length > 0) {
                line = line.clone();
                exprs.push(line.value || make_node(AST_Undefined, line).transform(compressor));
                line.value = make_sequence(stat2, exprs);
              }
              var block = stat2.clone();
              block.body = block.body.slice(i + 1);
              block.body.unshift(line);
              return block;
            }
            if (line instanceof AST_LambdaDefinition) {
              defuns.push(line);
            } else if (line instanceof AST_SimpleStatement) {
              if (!compressor.option("sequences") && exprs.length > 0)
                return;
              exprs.push(line.body);
            } else if (line instanceof AST_Var) {
              if (!compressor.option("sequences") && exprs.length > 0)
                return;
              line.remove_initializers(compressor, var_defs2);
              line.definitions.forEach(process_var_def);
            } else {
              return;
            }
          }
          return exprs;
        }
        if (stat2 instanceof AST_LambdaDefinition) {
          defuns.push(stat2);
          return [];
        }
        if (stat2 instanceof AST_EmptyStatement)
          return [];
        if (stat2 instanceof AST_SimpleStatement)
          return [stat2.body];
        if (stat2 instanceof AST_Var) {
          var exprs = [];
          stat2.remove_initializers(compressor, var_defs2);
          stat2.definitions.forEach(process_var_def);
          return exprs;
        }
        function process_var_def(var_def) {
          if (!var_def.value)
            return;
          exprs.push(make_node(AST_Assign, var_def, {
            operator: "=",
            left: var_def.name.convert_symbol(AST_SymbolRef, function(ref) {
              refs.push(ref);
            }),
            right: var_def.value
          }));
        }
      }
    });
    OPT(AST_Switch, function(self, compressor) {
      if (!compressor.option("switches"))
        return self;
      if (!compressor.option("dead_code"))
        return self;
      var body = [];
      var branch;
      var decl = [];
      var default_branch;
      var exact_match;
      var side_effects = [];
      for (var i = 0, len = self.body.length;i < len; i++) {
        branch = self.body[i];
        if (branch instanceof AST_Default) {
          var prev = body[body.length - 1];
          if (default_branch || is_break(branch.body[0], compressor) && (!prev || aborts(prev))) {
            eliminate_branch(branch, prev);
            continue;
          } else {
            default_branch = branch;
          }
        } else {
          var exp = branch.expression;
          var equals = make_node(AST_Binary, self, {
            operator: "===",
            left: self.expression,
            right: exp
          }).evaluate(compressor, true);
          if (!equals) {
            if (exp.has_side_effects(compressor))
              side_effects.push(exp);
            eliminate_branch(branch, body[body.length - 1]);
            continue;
          }
          if (!(equals instanceof AST_Node)) {
            if (default_branch) {
              var default_index = body.indexOf(default_branch);
              body.splice(default_index, 1);
              eliminate_branch(default_branch, body[default_index - 1]);
              default_branch = null;
            }
            if (exp.has_side_effects(compressor)) {
              exact_match = branch;
            } else {
              default_branch = branch = make_node(AST_Default, branch);
            }
            while (++i < len)
              eliminate_branch(self.body[i], branch);
          }
        }
        if (i + 1 >= len || aborts(branch)) {
          var prev = body[body.length - 1];
          var statements = branch.body;
          if (aborts(prev))
            switch (prev.body.length - statements.length) {
              case 1:
                var stat = prev.body[prev.body.length - 1];
                if (!is_break(stat, compressor))
                  break;
                statements = statements.concat(stat);
              case 0:
                var prev_block = make_node(AST_BlockStatement, prev);
                var next_block = make_node(AST_BlockStatement, branch, { body: statements });
                if (prev_block.equals(next_block))
                  prev.body = [];
            }
        }
        if (side_effects.length) {
          if (branch instanceof AST_Default) {
            body.push(make_node(AST_Case, self, { expression: make_sequence(self, side_effects), body: [] }));
          } else {
            side_effects.push(branch.expression);
            branch.expression = make_sequence(self, side_effects);
          }
          side_effects = [];
        }
        body.push(branch);
      }
      if (side_effects.length && !exact_match) {
        body.push(make_node(AST_Case, self, { expression: make_sequence(self, side_effects), body: [] }));
      }
      while (branch = body[body.length - 1]) {
        var stat = branch.body[branch.body.length - 1];
        if (is_break(stat, compressor))
          branch.body.pop();
        if (branch === default_branch) {
          if (!has_declarations_only(branch))
            break;
        } else if (branch.expression.has_side_effects(compressor)) {
          break;
        } else if (default_branch) {
          if (!has_declarations_only(default_branch))
            break;
          if (body[body.length - 2] !== default_branch)
            break;
          default_branch.body = default_branch.body.concat(branch.body);
          branch.body = [];
        } else if (!has_declarations_only(branch))
          break;
        eliminate_branch(branch);
        if (body.pop() === default_branch)
          default_branch = null;
      }
      if (!branch) {
        decl.push(make_node(AST_SimpleStatement, self.expression, { body: self.expression }));
        if (side_effects.length)
          decl.push(make_node(AST_SimpleStatement, self, {
            body: make_sequence(self, side_effects)
          }));
        return make_node(AST_BlockStatement, self, { body: decl }).optimize(compressor);
      }
      if (branch === default_branch)
        while (branch = body[body.length - 2]) {
          if (branch instanceof AST_Default)
            break;
          if (!has_declarations_only(branch))
            break;
          var exp = branch.expression;
          if (exp.has_side_effects(compressor)) {
            var prev = body[body.length - 3];
            if (prev && !aborts(prev))
              break;
            default_branch.body.unshift(make_node(AST_SimpleStatement, self, { body: exp }));
          }
          eliminate_branch(branch);
          body.splice(-2, 1);
        }
      body[0].body = decl.concat(body[0].body);
      self.body = body;
      if (compressor.option("conditionals"))
        switch (body.length) {
          case 1:
            if (!no_break(body[0]))
              break;
            var exp = body[0].expression;
            var statements = body[0].body.slice();
            if (body[0] !== default_branch && body[0] !== exact_match)
              return make_node(AST_If, self, {
                condition: make_node(AST_Binary, self, {
                  operator: "===",
                  left: self.expression,
                  right: exp
                }),
                body: make_node(AST_BlockStatement, self, { body: statements }),
                alternative: null
              }).optimize(compressor);
            if (exp)
              statements.unshift(make_node(AST_SimpleStatement, exp, { body: exp }));
            statements.unshift(make_node(AST_SimpleStatement, self.expression, { body: self.expression }));
            return make_node(AST_BlockStatement, self, { body: statements }).optimize(compressor);
          case 2:
            if (!member(default_branch, body) || !no_break(body[1]))
              break;
            var statements = body[0].body.slice();
            var exclusive = statements.length && is_break(statements[statements.length - 1], compressor);
            if (exclusive)
              statements.pop();
            if (!all(statements, no_break))
              break;
            var alternative = body[1].body.length && make_node(AST_BlockStatement, body[1]);
            var node = make_node(AST_If, self, {
              condition: make_node(AST_Binary, self, body[0] === default_branch ? {
                operator: "!==",
                left: self.expression,
                right: body[1].expression
              } : {
                operator: "===",
                left: self.expression,
                right: body[0].expression
              }),
              body: make_node(AST_BlockStatement, body[0], { body: statements }),
              alternative: exclusive && alternative || null
            });
            if (!exclusive && alternative)
              node = make_node(AST_BlockStatement, self, { body: [node, alternative] });
            return node.optimize(compressor);
        }
      return self;
      function is_break(node2, tw) {
        return node2 instanceof AST_Break && tw.loopcontrol_target(node2) === self;
      }
      function no_break(node2) {
        var found = false;
        var tw = new TreeWalker(function(node3) {
          if (found || node3 instanceof AST_Lambda || node3 instanceof AST_SimpleStatement)
            return true;
          if (is_break(node3, tw))
            found = true;
        });
        tw.push(self);
        node2.walk(tw);
        return !found;
      }
      function eliminate_branch(branch2, prev2) {
        if (prev2 && !aborts(prev2)) {
          prev2.body = prev2.body.concat(branch2.body);
        } else {
          extract_declarations_from_unreachable_code(compressor, branch2, decl);
        }
      }
    });
    OPT(AST_Try, function(self, compressor) {
      self.body = tighten_body(self.body, compressor);
      if (compressor.option("dead_code")) {
        if (has_declarations_only(self) && !(self.bcatch && self.bcatch.argname && self.bcatch.argname.match_symbol(function(node) {
          return node instanceof AST_SymbolCatch && !can_drop_symbol(node);
        }, true))) {
          var body = [];
          if (self.bcatch) {
            extract_declarations_from_unreachable_code(compressor, self.bcatch, body);
            body.forEach(function(stat) {
              if (!(stat instanceof AST_Var))
                return;
              stat.definitions.forEach(function(var_def) {
                var def = var_def.name.definition().redefined();
                if (!def)
                  return;
                var_def.name = var_def.name.clone();
                var_def.name.thedef = def;
              });
            });
          }
          body.unshift(make_node(AST_BlockStatement, self).optimize(compressor));
          if (self.bfinally) {
            body.push(make_node(AST_BlockStatement, self.bfinally).optimize(compressor));
          }
          return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
        }
        if (self.bfinally && has_declarations_only(self.bfinally)) {
          var body = make_node(AST_BlockStatement, self.bfinally).optimize(compressor);
          body = self.body.concat(body);
          if (!self.bcatch)
            return make_node(AST_BlockStatement, self, { body }).optimize(compressor);
          self.body = body;
          self.bfinally = null;
        }
      }
      return self;
    });
    function remove_initializers(make_value) {
      return function(compressor, defns) {
        var dropped = false;
        this.definitions.forEach(function(defn) {
          if (defn.value)
            dropped = true;
          defn.name.match_symbol(function(node) {
            if (node instanceof AST_SymbolDeclaration)
              defns.push(make_node(AST_VarDef, node, {
                name: node,
                value: make_value(compressor, node)
              }));
          }, true);
        });
        return dropped;
      };
    }
    AST_Const.DEFMETHOD("remove_initializers", remove_initializers(function(compressor, node) {
      return make_node(AST_Undefined, node).optimize(compressor);
    }));
    AST_Let.DEFMETHOD("remove_initializers", remove_initializers(return_null));
    AST_Var.DEFMETHOD("remove_initializers", remove_initializers(return_null));
    AST_Definitions.DEFMETHOD("to_assignments", function() {
      var assignments = this.definitions.reduce(function(a2, defn) {
        var def = defn.name.definition();
        var value = defn.value;
        if (value) {
          if (value instanceof AST_Sequence)
            value = value.clone();
          var name = make_node(AST_SymbolRef, defn.name);
          var assign = make_node(AST_Assign, defn, {
            operator: "=",
            left: name,
            right: value
          });
          a2.push(assign);
          var fixed = function() {
            return assign.right;
          };
          fixed.assigns = [assign];
          fixed.direct_access = def.direct_access;
          fixed.escaped = def.escaped;
          name.fixed = fixed;
          def.references.forEach(function(ref) {
            if (!ref.fixed)
              return;
            var assigns = ref.fixed.assigns;
            if (!assigns)
              return;
            if (assigns[0] !== defn)
              return;
            if (assigns.length > 1 || ref.fixed.to_binary || ref.fixed.to_prefix) {
              assigns[0] = assign;
            } else {
              ref.fixed = fixed;
              if (def.fixed === ref.fixed)
                def.fixed = fixed;
            }
          });
          def.references.push(name);
        }
        def.assignments++;
        def.eliminated++;
        def.single_use = false;
        return a2;
      }, []);
      if (assignments.length == 0)
        return null;
      return make_sequence(this, assignments);
    });
    function is_safe_lexical(def) {
      return def.name != "arguments" && def.orig.length < (def.orig[0] instanceof AST_SymbolLambda ? 3 : 2);
    }
    function may_overlap(compressor, def) {
      if (compressor.exposed(def))
        return true;
      var scope = def.scope.resolve();
      for (var s2 = def.scope;s2 !== scope; ) {
        s2 = s2.parent_scope;
        if (s2.var_names().has(def.name))
          return true;
      }
    }
    function to_var(stat, scope) {
      return make_node(AST_Var, stat, {
        definitions: stat.definitions.map(function(defn) {
          return make_node(AST_VarDef, defn, {
            name: defn.name.convert_symbol(AST_SymbolVar, function(name, node) {
              var def = name.definition();
              def.orig[def.orig.indexOf(node)] = name;
              if (def.scope === scope)
                return;
              def.scope = scope;
              scope.variables.set(def.name, def);
              scope.enclosed.push(def);
              scope.var_names().set(def.name, true);
            }),
            value: defn.value
          });
        })
      });
    }
    function can_varify(compressor, sym) {
      var def = sym.definition();
      return (def.fixed || def.fixed === 0) && is_safe_lexical(def) && same_scope(def) && !may_overlap(compressor, def);
    }
    function varify(self, compressor) {
      return compressor.option("varify") && all(self.definitions, function(defn) {
        return !defn.name.match_symbol(function(node) {
          if (node instanceof AST_SymbolDeclaration)
            return !can_varify(compressor, node);
        }, true);
      }) ? to_var(self, compressor.find_parent(AST_Scope)) : self;
    }
    OPT(AST_Const, varify);
    OPT(AST_Let, varify);
    function trim_optional_chain(node, compressor) {
      if (!compressor.option("optional_chains"))
        return;
      if (node.terminal)
        do {
          var expr = node.expression;
          if (node.optional) {
            var ev = fuzzy_eval(compressor, expr, true);
            if (ev == null)
              return make_node(AST_UnaryPrefix, node, {
                operator: "void",
                expression: expr
              }).optimize(compressor);
            if (!(ev instanceof AST_Node))
              node.optional = false;
          }
          node = expr;
        } while ((node.TYPE == "Call" || node instanceof AST_PropAccess) && !node.terminal);
    }
    function lift_sequence_in_expression(node, compressor) {
      var exp = node.expression;
      if (!(exp instanceof AST_Sequence))
        return node;
      var x2 = exp.expressions.slice();
      var e = node.clone();
      e.expression = x2.pop();
      x2.push(e);
      return make_sequence(node, x2);
    }
    function drop_unused_call_args(call, compressor, fns_with_marked_args) {
      var exp = call.expression;
      var fn = exp instanceof AST_SymbolRef ? exp.fixed_value() : exp;
      if (!(fn instanceof AST_Lambda))
        return;
      if (fn.uses_arguments)
        return;
      if (fn.pinned())
        return;
      if (fns_with_marked_args && fns_with_marked_args.indexOf(fn) < 0)
        return;
      var args = call.args;
      if (!all(args, function(arg2) {
        return !(arg2 instanceof AST_Spread);
      }))
        return;
      var argnames = fn.argnames;
      var is_iife = fn === exp && !fn.name;
      if (fn.rest) {
        if (!(is_iife && compressor.option("rests")))
          return;
        var insert = argnames.length;
        args = args.slice(0, insert);
        while (args.length < insert)
          args.push(make_node(AST_Undefined, call).optimize(compressor));
        args.push(make_node(AST_Array, call, { elements: call.args.slice(insert) }));
        argnames = argnames.concat(fn.rest);
        fn.rest = null;
      } else {
        args = args.slice();
        argnames = argnames.slice();
      }
      var pos = 0, last = 0;
      var drop_defaults = is_iife && compressor.option("default_values");
      var drop_fargs = is_iife && compressor.drop_fargs(fn, call) ? function(argname2, arg2) {
        if (!argname2)
          return true;
        if (argname2 instanceof AST_DestructuredArray) {
          return argname2.elements.length == 0 && !argname2.rest && arg2 instanceof AST_Array;
        }
        if (argname2 instanceof AST_DestructuredObject) {
          return argname2.properties.length == 0 && !argname2.rest && arg2 && !arg2.may_throw_on_access(compressor);
        }
        return argname2.unused;
      } : return_false;
      var side_effects = [];
      for (var i = 0;i < args.length; i++) {
        var argname = argnames[i];
        if (drop_defaults && argname instanceof AST_DefaultValue && args[i].is_defined(compressor)) {
          argnames[i] = argname = argname.name;
        }
        if (!argname || argname.unused !== undefined) {
          var node = args[i].drop_side_effect_free(compressor);
          if (drop_fargs(argname)) {
            if (argname)
              argnames.splice(i, 1);
            args.splice(i, 1);
            if (node)
              side_effects.push(node);
            i--;
            continue;
          } else if (node) {
            side_effects.push(node);
            args[pos++] = make_sequence(call, side_effects);
            side_effects = [];
          } else if (argname) {
            if (side_effects.length) {
              args[pos++] = make_sequence(call, side_effects);
              side_effects = [];
            } else {
              args[pos++] = make_node(AST_Number, args[i], { value: 0 });
              continue;
            }
          }
        } else if (drop_fargs(argname, args[i])) {
          var node = args[i].drop_side_effect_free(compressor);
          argnames.splice(i, 1);
          args.splice(i, 1);
          if (node)
            side_effects.push(node);
          i--;
          continue;
        } else {
          side_effects.push(args[i]);
          args[pos++] = make_sequence(call, side_effects);
          side_effects = [];
        }
        last = pos;
      }
      for (;i < argnames.length; i++) {
        if (drop_fargs(argnames[i]))
          argnames.splice(i--, 1);
      }
      fn.argnames = argnames;
      args.length = last;
      call.args = args;
      if (!side_effects.length)
        return;
      var arg = make_sequence(call, side_effects);
      args.push(args.length < argnames.length ? make_node(AST_UnaryPrefix, call, {
        operator: "void",
        expression: arg
      }) : arg);
    }
    function avoid_await_yield(compressor, parent_scope) {
      if (!parent_scope)
        parent_scope = compressor.find_parent(AST_Scope);
      var avoid = [];
      if (is_async(parent_scope) || parent_scope instanceof AST_Toplevel && compressor.option("module")) {
        avoid.push("await");
      }
      if (is_generator(parent_scope))
        avoid.push("yield");
      return avoid.length && makePredicate(avoid);
    }
    function safe_from_await_yield(fn, avoid) {
      if (!avoid)
        return true;
      var safe = true;
      var tw = new TreeWalker(function(node) {
        if (!safe)
          return true;
        if (node instanceof AST_Scope) {
          if (node === fn)
            return;
          if (is_arrow(node)) {
            for (var i = 0;safe && i < node.argnames.length; i++)
              node.argnames[i].walk(tw);
          } else if (node instanceof AST_LambdaDefinition && avoid[node.name.name]) {
            safe = false;
          }
          return true;
        }
        if (node instanceof AST_Symbol && avoid[node.name] && node !== fn.name)
          safe = false;
      });
      fn.walk(tw);
      return safe;
    }
    function safe_from_strict_mode(fn, compressor) {
      return fn.in_strict_mode(compressor) || !compressor.has_directive("use strict");
    }
    OPT(AST_Call, function(self, compressor) {
      var exp = self.expression;
      var terminated = trim_optional_chain(self, compressor);
      if (terminated)
        return terminated;
      if (compressor.option("sequences")) {
        if (exp instanceof AST_PropAccess) {
          var seq = lift_sequence_in_expression(exp, compressor);
          if (seq !== exp) {
            var call = self.clone();
            call.expression = seq.expressions.pop();
            seq.expressions.push(call);
            return seq.optimize(compressor);
          }
        } else if (!needs_unbinding(exp.tail_node())) {
          var seq = lift_sequence_in_expression(self, compressor);
          if (seq !== self)
            return seq.optimize(compressor);
        }
      }
      if (compressor.option("unused"))
        drop_unused_call_args(self, compressor);
      if (compressor.option("unsafe")) {
        if (is_undeclared_ref(exp))
          switch (exp.name) {
            case "Array":
              if (self.args.length == 1) {
                var first = self.args[0];
                if (first instanceof AST_Number)
                  try {
                    var length = first.value;
                    if (length > 6)
                      break;
                    var elements = Array(length);
                    for (var i = 0;i < length; i++)
                      elements[i] = make_node(AST_Hole, self);
                    return make_node(AST_Array, self, { elements });
                  } catch (ex) {
                    AST_Node.warn("Invalid array length: {length} [{start}]", {
                      length,
                      start: self.start
                    });
                    break;
                  }
                if (!first.is_boolean(compressor) && !first.is_string(compressor))
                  break;
              }
              return make_node(AST_Array, self, { elements: self.args });
            case "Object":
              if (self.args.length == 0)
                return make_node(AST_Object, self, { properties: [] });
              break;
            case "String":
              if (self.args.length == 0)
                return make_node(AST_String, self, { value: "" });
              if (self.args.length == 1)
                return make_node(AST_Binary, self, {
                  operator: "+",
                  left: make_node(AST_String, self, { value: "" }),
                  right: self.args[0]
                }).optimize(compressor);
              break;
            case "Number":
              if (self.args.length == 0)
                return make_node(AST_Number, self, { value: 0 });
              if (self.args.length == 1)
                return make_node(AST_UnaryPrefix, self, {
                  operator: "+",
                  expression: make_node(AST_Binary, self, {
                    operator: "+",
                    left: make_node(AST_String, self, { value: "" }),
                    right: self.args[0]
                  })
                }).optimize(compressor);
              break;
            case "Boolean":
              if (self.args.length == 0)
                return make_node(AST_False, self).optimize(compressor);
              if (self.args.length == 1)
                return make_node(AST_UnaryPrefix, self, {
                  operator: "!",
                  expression: make_node(AST_UnaryPrefix, self, {
                    operator: "!",
                    expression: self.args[0]
                  })
                }).optimize(compressor);
              break;
            case "RegExp":
              var params = [];
              if (all(self.args, function(arg) {
                var value2 = arg.evaluate(compressor);
                params.unshift(value2);
                return arg !== value2;
              }))
                try {
                  return best_of(compressor, self, make_node(AST_RegExp, self, {
                    value: RegExp.apply(RegExp, params)
                  }));
                } catch (ex) {
                  AST_Node.warn("Error converting {this} [{start}]", self);
                }
              break;
          }
        else if (exp instanceof AST_Dot)
          switch (exp.property) {
            case "toString":
              var expr = exp.expression;
              if (self.args.length == 0 && !(expr.may_throw_on_access(compressor) || expr instanceof AST_Super)) {
                return make_node(AST_Binary, self, {
                  operator: "+",
                  left: make_node(AST_String, self, { value: "" }),
                  right: expr
                }).optimize(compressor);
              }
              break;
            case "join":
              if (exp.expression instanceof AST_Array && self.args.length < 2)
                EXIT: {
                  var separator = self.args[0];
                  if (exp.expression.elements.length == 0 && !(separator instanceof AST_Spread)) {
                    return separator ? make_sequence(self, [
                      separator,
                      make_node(AST_String, self, { value: "" })
                    ]).optimize(compressor) : make_node(AST_String, self, { value: "" });
                  }
                  if (separator) {
                    separator = separator.evaluate(compressor);
                    if (separator instanceof AST_Node)
                      break EXIT;
                  }
                  var elements = [];
                  var consts = [];
                  for (var i = 0;i < exp.expression.elements.length; i++) {
                    var el = exp.expression.elements[i];
                    var value = el.evaluate(compressor);
                    if (value !== el) {
                      consts.push(value);
                    } else if (el instanceof AST_Spread) {
                      break EXIT;
                    } else {
                      if (consts.length > 0) {
                        elements.push(make_node(AST_String, self, { value: consts.join(separator) }));
                        consts.length = 0;
                      }
                      elements.push(el);
                    }
                  }
                  if (consts.length > 0)
                    elements.push(make_node(AST_String, self, {
                      value: consts.join(separator)
                    }));
                  if (elements.length == 1) {
                    if (elements[0].is_string(compressor))
                      return elements[0];
                    return make_node(AST_Binary, elements[0], {
                      operator: "+",
                      left: make_node(AST_String, self, { value: "" }),
                      right: elements[0]
                    });
                  }
                  if (separator == "") {
                    var first;
                    if (elements[0].is_string(compressor) || elements[1].is_string(compressor)) {
                      first = elements.shift();
                    } else {
                      first = make_node(AST_String, self, { value: "" });
                    }
                    return elements.reduce(function(prev, el2) {
                      return make_node(AST_Binary, el2, {
                        operator: "+",
                        left: prev,
                        right: el2
                      });
                    }, first).optimize(compressor);
                  }
                  var node = self.clone();
                  node.expression = node.expression.clone();
                  node.expression.expression = node.expression.expression.clone();
                  node.expression.expression.elements = elements;
                  return best_of(compressor, self, node);
                }
              break;
            case "charAt":
              if (self.args.length < 2) {
                var node = make_node(AST_Binary, self, {
                  operator: "||",
                  left: make_node(AST_Sub, self, {
                    expression: exp.expression,
                    property: self.args.length ? make_node(AST_Binary, self.args[0], {
                      operator: "|",
                      left: make_node(AST_Number, self, { value: 0 }),
                      right: self.args[0]
                    }) : make_node(AST_Number, self, { value: 0 })
                  }).optimize(compressor),
                  right: make_node(AST_String, self, { value: "" })
                });
                node.is_string = return_true;
                return node.optimize(compressor);
              }
              break;
            case "apply":
              if (self.args.length == 2 && self.args[1] instanceof AST_Array) {
                var args = self.args[1].elements.slice();
                args.unshift(self.args[0]);
                return make_node(AST_Call, self, {
                  expression: make_node(AST_Dot, exp, {
                    expression: exp.expression,
                    property: "call"
                  }),
                  args
                }).optimize(compressor);
              }
              break;
            case "call":
              var func = exp.expression;
              if (func instanceof AST_SymbolRef) {
                func = func.fixed_value();
              }
              if (func instanceof AST_Lambda && !func.contains_this()) {
                return (self.args.length ? make_sequence(self, [
                  self.args[0],
                  make_node(AST_Call, self, {
                    expression: exp.expression,
                    args: self.args.slice(1)
                  })
                ]) : make_node(AST_Call, self, {
                  expression: exp.expression,
                  args: []
                })).optimize(compressor);
              }
              break;
          }
        else if (compressor.option("side_effects") && exp instanceof AST_Call && exp.args.length == 1 && is_undeclared_ref(exp.expression) && exp.expression.name == "Object") {
          var call = self.clone();
          call.expression = maintain_this_binding(self, exp, exp.args[0]);
          return call.optimize(compressor);
        }
      }
      if (compressor.option("unsafe_Function") && is_undeclared_ref(exp) && exp.name == "Function") {
        if (self.args.length == 0)
          return make_node(AST_Function, self, {
            argnames: [],
            body: []
          }).init_vars(exp.scope);
        if (all(self.args, function(x2) {
          return x2 instanceof AST_String;
        })) {
          try {
            var code = "n(function(" + self.args.slice(0, -1).map(function(arg) {
              return arg.value;
            }).join() + "){" + self.args[self.args.length - 1].value + "})";
            var ast = parse(code);
            var mangle = { ie: compressor.option("ie") };
            ast.figure_out_scope(mangle);
            var comp = new Compressor2(compressor.options);
            ast = ast.transform(comp);
            ast.figure_out_scope(mangle);
            ast.compute_char_frequency(mangle);
            ast.mangle_names(mangle);
            var fun;
            ast.walk(new TreeWalker(function(node2) {
              if (fun)
                return true;
              if (node2 instanceof AST_Lambda) {
                fun = node2;
                return true;
              }
            }));
            var code = OutputStream();
            AST_BlockStatement.prototype._codegen.call(fun, code);
            self.args = [
              make_node(AST_String, self, {
                value: fun.argnames.map(function(arg) {
                  return arg.print_to_string();
                }).join()
              }),
              make_node(AST_String, self.args[self.args.length - 1], {
                value: code.get().replace(/^\{|\}$/g, "")
              })
            ];
            return self;
          } catch (ex) {
            if (ex instanceof JS_Parse_Error) {
              AST_Node.warn("Error parsing code passed to new Function [{start}]", self.args[self.args.length - 1]);
              AST_Node.warn(ex.toString());
            } else {
              throw ex;
            }
          }
        }
      }
      var fn = exp instanceof AST_SymbolRef ? exp.fixed_value() : exp;
      var parent = compressor.parent(), current = compressor.self();
      var is_func = fn instanceof AST_Lambda && (!is_async(fn) || compressor.option("awaits") && parent instanceof AST_Await) && (!is_generator(fn) || compressor.option("yields") && current instanceof AST_Yield && current.nested);
      var stat = is_func && fn.first_statement();
      var has_default = 0, has_destructured = false;
      var has_spread = !all(self.args, function(arg) {
        return !(arg instanceof AST_Spread);
      });
      var can_drop = is_func && all(fn.argnames, function(argname, index) {
        if (has_default == 1 && self.args[index] instanceof AST_Spread)
          has_default = 2;
        if (argname instanceof AST_DefaultValue) {
          if (!has_default)
            has_default = 1;
          var arg = has_default == 1 && self.args[index];
          if (!is_undefined(arg))
            has_default = 2;
          if (has_arg_refs(fn, argname.value))
            return false;
          argname = argname.name;
        }
        if (argname instanceof AST_Destructured) {
          has_destructured = true;
          if (has_arg_refs(fn, argname))
            return false;
        }
        return true;
      }) && !(fn.rest instanceof AST_Destructured && has_arg_refs(fn, fn.rest));
      var can_inline = can_drop && compressor.option("inline") && !self.is_expr_pure(compressor) && (exp === fn || safe_from_strict_mode(fn, compressor));
      if (can_inline && stat instanceof AST_Return) {
        var value = stat.value;
        if (exp === fn && !fn.name && (!value || value.is_constant_expression()) && safe_from_await_yield(fn, avoid_await_yield(compressor))) {
          return make_sequence(self, convert_args(value)).optimize(compressor);
        }
      }
      if (is_func && !fn.contains_this()) {
        var def, value, var_assigned = false;
        if (can_inline && !fn.uses_arguments && !fn.pinned() && !(fn.name && fn instanceof AST_LambdaExpression) && (exp === fn || !recursive_ref(compressor, def = exp.definition(), fn) && fn.is_constant_expression(find_scope(compressor))) && (value = can_flatten_body(stat))) {
          var replacing = exp === fn || def.single_use && def.references.length - def.replaced == 1;
          if (can_substitute_directly()) {
            var args = self.args.slice();
            var refs = [];
            var retValue = value.clone(true).transform(new TreeTransformer(function(node2) {
              if (node2 instanceof AST_SymbolRef) {
                var def2 = node2.definition();
                if (fn.variables.get(node2.name) !== def2) {
                  refs.push(node2);
                  return node2;
                }
                var index = resolve_index(def2);
                var arg = args[index];
                if (!arg)
                  return make_node(AST_Undefined, self);
                args[index] = null;
                var parent2 = this.parent();
                return parent2 ? maintain_this_binding(parent2, node2, arg) : arg;
              }
            }));
            var save_inlined = fn.inlined;
            if (exp !== fn)
              fn.inlined = true;
            var exprs = [];
            args.forEach(function(arg) {
              if (!arg)
                return;
              arg = arg.clone(true);
              arg.walk(new TreeWalker(function(node2) {
                if (node2 instanceof AST_SymbolRef)
                  refs.push(node2);
              }));
              exprs.push(arg);
            }, []);
            exprs.push(retValue);
            var node = make_sequence(self, exprs).optimize(compressor);
            fn.inlined = save_inlined;
            node = maintain_this_binding(parent, current, node);
            if (replacing || best_of_expression(node, self) === node) {
              refs.forEach(function(ref) {
                ref.scope = exp === fn ? fn.parent_scope : exp.scope;
                ref.reference();
                var def2 = ref.definition();
                if (replacing)
                  def2.replaced++;
                def2.single_use = false;
              });
              return node;
            } else if (!node.has_side_effects(compressor)) {
              self.drop_side_effect_free = function(compressor2, first_in_statement2) {
                var self2 = this;
                var exprs2 = self2.args.slice();
                exprs2.unshift(self2.expression);
                return make_sequence(self2, exprs2).drop_side_effect_free(compressor2, first_in_statement2);
              };
            }
          }
          var arg_used, insert, in_loop, scope;
          if (replacing && can_inject_symbols()) {
            fn._squeezed = true;
            if (exp !== fn)
              fn.parent_scope = exp.scope;
            var node = make_sequence(self, flatten_fn()).optimize(compressor);
            return maintain_this_binding(parent, current, node);
          }
        }
        if (compressor.option("side_effects") && can_drop && all(fn.body, is_empty) && (fn === exp ? fn_name_unused(fn, compressor) : !has_default && !has_destructured && !fn.rest) && !(is_arrow(fn) && fn.value) && safe_from_await_yield(fn, avoid_await_yield(compressor))) {
          return make_sequence(self, convert_args()).optimize(compressor);
        }
      }
      if (compressor.option("drop_console")) {
        if (exp instanceof AST_PropAccess) {
          var name = exp.expression;
          while (name.expression) {
            name = name.expression;
          }
          if (is_undeclared_ref(name) && name.name == "console") {
            return make_node(AST_Undefined, self).optimize(compressor);
          }
        }
      }
      if (compressor.option("negate_iife") && parent instanceof AST_SimpleStatement && is_iife_call(current)) {
        return self.negate(compressor, true);
      }
      return try_evaluate(compressor, self);
      function make_void_lhs(orig) {
        return make_node(AST_Sub, orig, {
          expression: make_node(AST_Array, orig, { elements: [] }),
          property: make_node(AST_Number, orig, { value: 0 })
        });
      }
      function convert_args(value2) {
        var args2 = self.args.slice();
        var destructured = has_default > 1 || has_destructured || fn.rest;
        if (destructured || has_spread)
          args2 = [make_node(AST_Array, self, { elements: args2 })];
        if (destructured) {
          var tt2 = new TreeTransformer(function(node2, descend) {
            if (node2 instanceof AST_DefaultValue)
              return make_node(AST_DefaultValue, node2, {
                name: node2.name.transform(tt2) || make_void_lhs(node2),
                value: node2.value
              });
            if (node2 instanceof AST_DestructuredArray) {
              var elements2 = [];
              node2.elements.forEach(function(node3, index) {
                node3 = node3.transform(tt2);
                if (node3)
                  elements2[index] = node3;
              });
              fill_holes(node2, elements2);
              return make_node(AST_DestructuredArray, node2, { elements: elements2 });
            }
            if (node2 instanceof AST_DestructuredObject) {
              var properties = [], side_effects = [];
              node2.properties.forEach(function(prop) {
                var key = prop.key;
                var value3 = prop.value.transform(tt2);
                if (value3) {
                  if (side_effects.length) {
                    if (!(key instanceof AST_Node))
                      key = make_node_from_constant(key, prop);
                    side_effects.push(key);
                    key = make_sequence(node2, side_effects);
                    side_effects = [];
                  }
                  properties.push(make_node(AST_DestructuredKeyVal, prop, {
                    key,
                    value: value3
                  }));
                } else if (key instanceof AST_Node) {
                  side_effects.push(key);
                }
              });
              if (side_effects.length)
                properties.push(make_node(AST_DestructuredKeyVal, node2, {
                  key: make_sequence(node2, side_effects),
                  value: make_void_lhs(node2)
                }));
              return make_node(AST_DestructuredObject, node2, { properties });
            }
            if (node2 instanceof AST_SymbolFunarg)
              return null;
          });
          var lhs = [];
          fn.argnames.forEach(function(argname, index) {
            argname = argname.transform(tt2);
            if (argname)
              lhs[index] = argname;
          });
          var rest = fn.rest && fn.rest.transform(tt2);
          if (rest)
            lhs.length = fn.argnames.length;
          fill_holes(fn, lhs);
          args2[0] = make_node(AST_Assign, self, {
            operator: "=",
            left: make_node(AST_DestructuredArray, fn, {
              elements: lhs,
              rest
            }),
            right: args2[0]
          });
        } else
          fn.argnames.forEach(function(argname) {
            if (argname instanceof AST_DefaultValue)
              args2.push(argname.value);
          });
        args2.push(value2 || make_node(AST_Undefined, self));
        return args2;
      }
      function noop_value() {
        return self.call_only ? make_node(AST_Number, self, { value: 0 }) : make_node(AST_Undefined, self);
      }
      function return_value(stat2) {
        if (!stat2)
          return noop_value();
        if (stat2 instanceof AST_Return)
          return stat2.value || noop_value();
        if (stat2 instanceof AST_SimpleStatement) {
          return self.call_only ? stat2.body : make_node(AST_UnaryPrefix, stat2, {
            operator: "void",
            expression: stat2.body
          });
        }
      }
      function can_flatten_body(stat2) {
        var len = fn.body.length;
        if (len < 2) {
          stat2 = return_value(stat2);
          if (stat2)
            return stat2;
        }
        if (compressor.option("inline") < 3)
          return false;
        stat2 = null;
        for (var i2 = 0;i2 < len; i2++) {
          var line = fn.body[i2];
          if (line instanceof AST_Var) {
            if (var_assigned) {
              if (!stat2)
                continue;
              if (!(stat2 instanceof AST_SimpleStatement))
                return false;
              if (!declarations_only(line))
                stat2 = null;
            } else if (!declarations_only(line)) {
              if (stat2 && !(stat2 instanceof AST_SimpleStatement))
                return false;
              stat2 = null;
              var_assigned = true;
            }
          } else if (line instanceof AST_AsyncDefun || line instanceof AST_Defun || line instanceof AST_EmptyStatement) {
            continue;
          } else if (stat2) {
            return false;
          } else {
            stat2 = line;
          }
        }
        return return_value(stat2);
      }
      function resolve_index(def2) {
        for (var i2 = fn.argnames.length;--i2 >= 0; ) {
          if (fn.argnames[i2].definition() === def2)
            return i2;
        }
      }
      function can_substitute_directly() {
        if (has_default || has_destructured || has_spread || var_assigned || fn.rest)
          return;
        if (compressor.option("inline") < 2 && fn.argnames.length)
          return;
        if (!fn.variables.all(function(def2) {
          return def2.references.length - def2.replaced < 2 && def2.orig[0] instanceof AST_SymbolFunarg;
        }))
          return;
        var scope2 = compressor.find_parent(AST_Scope);
        var abort = false;
        var avoid = avoid_await_yield(compressor, scope2);
        var begin;
        var in_order = [];
        var side_effects = false;
        var tw = new TreeWalker(function(node2, descend) {
          if (abort)
            return true;
          if (node2 instanceof AST_Binary && lazy_op[node2.operator] || node2 instanceof AST_Conditional) {
            in_order = null;
            return;
          }
          if (node2 instanceof AST_Scope)
            return abort = true;
          if (avoid && node2 instanceof AST_Symbol && avoid[node2.name])
            return abort = true;
          if (node2 instanceof AST_SymbolRef) {
            var def2 = node2.definition();
            if (fn.variables.get(node2.name) !== def2) {
              in_order = null;
              return;
            }
            if (def2.init instanceof AST_LambdaDefinition)
              return abort = true;
            if (is_lhs(node2, tw.parent()))
              return abort = true;
            var index = resolve_index(def2);
            if (!(begin < index))
              begin = index;
            if (!in_order)
              return;
            if (side_effects) {
              in_order = null;
            } else {
              in_order.push(fn.argnames[index]);
            }
            return;
          }
          if (side_effects)
            return;
          if (node2 instanceof AST_Assign && node2.left instanceof AST_PropAccess) {
            node2.left.expression.walk(tw);
            if (node2.left instanceof AST_Sub)
              node2.left.property.walk(tw);
            node2.right.walk(tw);
            side_effects = true;
            return true;
          }
          if (node2.has_side_effects(compressor)) {
            descend();
            side_effects = true;
            return true;
          }
        });
        value.walk(tw);
        if (abort)
          return;
        var end = self.args.length;
        if (in_order && fn.argnames.length >= end) {
          end = fn.argnames.length;
          while (end-- > begin && fn.argnames[end] === in_order.pop())
            ;
          end++;
        }
        return end <= begin || all(self.args.slice(begin, end), side_effects && !in_order ? function(funarg) {
          return funarg.is_constant_expression(scope2);
        } : function(funarg) {
          return !funarg.has_side_effects(compressor);
        });
      }
      function var_exists(defined, name2) {
        return defined.has(name2) || identifier_atom[name2] || scope.var_names().has(name2);
      }
      function can_inject_args(defined, safe_to_inject) {
        var abort = false;
        fn.each_argname(function(arg) {
          if (abort)
            return;
          if (arg.unused)
            return;
          if (!safe_to_inject || var_exists(defined, arg.name))
            return abort = true;
          arg_used.set(arg.name, true);
          if (in_loop)
            in_loop.push(arg.definition());
        });
        return !abort;
      }
      function can_inject_vars(defined, safe_to_inject) {
        for (var i2 = 0;i2 < fn.body.length; i2++) {
          var stat2 = fn.body[i2];
          if (stat2 instanceof AST_LambdaDefinition) {
            var name2 = stat2.name;
            if (!safe_to_inject)
              return false;
            if (arg_used.has(name2.name))
              return false;
            if (var_exists(defined, name2.name))
              return false;
            if (!all(stat2.enclosed, function(def2) {
              return def2.scope === scope || def2.scope === stat2 || !defined.has(def2.name);
            }))
              return false;
            if (in_loop)
              in_loop.push(name2.definition());
            continue;
          }
          if (!(stat2 instanceof AST_Var))
            continue;
          if (!safe_to_inject)
            return false;
          for (var j2 = stat2.definitions.length;--j2 >= 0; ) {
            var name2 = stat2.definitions[j2].name;
            if (var_exists(defined, name2.name))
              return false;
            if (in_loop)
              in_loop.push(name2.definition());
          }
        }
        return true;
      }
      function can_inject_symbols() {
        var defined = new Dictionary;
        var level = 0, child;
        scope = current;
        do {
          if (scope.variables)
            scope.variables.each(function(def2) {
              defined.set(def2.name, true);
            });
          child = scope;
          scope = compressor.parent(level++);
          if (scope instanceof AST_ClassField) {
            if (!scope.static)
              return false;
          } else if (scope instanceof AST_DWLoop) {
            in_loop = [];
          } else if (scope instanceof AST_For) {
            if (scope.init === child)
              continue;
            in_loop = [];
          } else if (scope instanceof AST_ForEnumeration) {
            if (scope.init === child)
              continue;
            if (scope.object === child)
              continue;
            in_loop = [];
          }
        } while (!(scope instanceof AST_Scope));
        insert = scope.body.indexOf(child) + 1;
        if (!insert)
          return false;
        if (!safe_from_await_yield(fn, avoid_await_yield(compressor, scope)))
          return false;
        var safe_to_inject = (exp !== fn || fn.parent_scope.resolve() === scope) && !scope.pinned();
        if (scope instanceof AST_Toplevel) {
          if (compressor.toplevel.vars) {
            defined.set("arguments", true);
          } else {
            safe_to_inject = false;
          }
        }
        arg_used = new Dictionary;
        var inline = compressor.option("inline");
        if (!can_inject_args(defined, inline >= 2 && safe_to_inject))
          return false;
        if (!can_inject_vars(defined, inline >= 3 && safe_to_inject))
          return false;
        return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);
      }
      function append_var(decls, expressions, name2, value2) {
        var def2 = name2.definition();
        if (!scope.var_names().has(name2.name)) {
          scope.var_names().set(name2.name, true);
          decls.push(make_node(AST_VarDef, name2, {
            name: name2,
            value: null
          }));
        }
        scope.variables.set(name2.name, def2);
        scope.enclosed.push(def2);
        if (!value2)
          return;
        var sym = make_node(AST_SymbolRef, name2);
        def2.assignments++;
        def2.references.push(sym);
        expressions.push(make_node(AST_Assign, self, {
          operator: "=",
          left: sym,
          right: value2
        }));
      }
      function flatten_args(decls, expressions) {
        var len = fn.argnames.length;
        for (var i2 = self.args.length;--i2 >= len; ) {
          expressions.push(self.args[i2]);
        }
        var default_args = [];
        for (i2 = len;--i2 >= 0; ) {
          var argname = fn.argnames[i2];
          var name2;
          if (argname instanceof AST_DefaultValue) {
            default_args.push(argname);
            name2 = argname.name;
          } else {
            name2 = argname;
          }
          var value2 = self.args[i2];
          if (name2.unused || scope.var_names().has(name2.name)) {
            if (value2)
              expressions.push(value2);
          } else {
            var symbol = make_node(AST_SymbolVar, name2);
            var def2 = name2.definition();
            def2.orig.push(symbol);
            def2.eliminated++;
            if (name2.unused !== undefined) {
              append_var(decls, expressions, symbol);
              if (value2)
                expressions.push(value2);
            } else {
              if (!value2 && argname === name2 && (in_loop || name2.name == "arguments" && !is_arrow(fn) && is_arrow(scope))) {
                value2 = make_node(AST_Undefined, self);
              }
              append_var(decls, expressions, symbol, value2);
            }
          }
        }
        decls.reverse();
        expressions.reverse();
        for (i2 = default_args.length;--i2 >= 0; ) {
          var node2 = default_args[i2];
          if (node2.name.unused !== undefined) {
            expressions.push(node2.value);
          } else {
            var sym = make_node(AST_SymbolRef, node2.name);
            node2.name.definition().references.push(sym);
            expressions.push(make_node(AST_Assign, node2, {
              operator: "=",
              left: sym,
              right: node2.value
            }));
          }
        }
      }
      function flatten_destructured(decls, expressions) {
        expressions.push(make_node(AST_Assign, self, {
          operator: "=",
          left: make_node(AST_DestructuredArray, self, {
            elements: fn.argnames.map(function(argname) {
              if (argname.unused)
                return make_node(AST_Hole, argname);
              return argname.convert_symbol(AST_SymbolRef, process2);
            }),
            rest: fn.rest && fn.rest.convert_symbol(AST_SymbolRef, process2)
          }),
          right: make_node(AST_Array, self, { elements: self.args.slice() })
        }));
        function process2(ref, name2) {
          if (name2.unused)
            return make_void_lhs(name2);
          var def2 = name2.definition();
          def2.assignments++;
          def2.references.push(ref);
          var symbol = make_node(AST_SymbolVar, name2);
          def2.orig.push(symbol);
          def2.eliminated++;
          append_var(decls, expressions, symbol);
        }
      }
      function flatten_vars(decls, expressions) {
        var args2 = [insert, 0];
        var decl_var = [], expr_fn = [], expr_var = [], expr_loop = [], exprs2 = [];
        fn.body.filter(in_loop ? function(stat2) {
          if (!(stat2 instanceof AST_LambdaDefinition))
            return true;
          var name2 = make_node(AST_SymbolVar, flatten_var(stat2.name));
          var def2 = name2.definition();
          def2.fixed = false;
          def2.orig.push(name2);
          def2.eliminated++;
          append_var(decls, expr_fn, name2, to_func_expr(stat2, true));
          return false;
        } : function(stat2) {
          if (!(stat2 instanceof AST_LambdaDefinition))
            return true;
          var def2 = stat2.name.definition();
          scope.functions.set(def2.name, def2);
          scope.variables.set(def2.name, def2);
          scope.enclosed.push(def2);
          scope.var_names().set(def2.name, true);
          args2.push(stat2);
          return false;
        }).forEach(function(stat2) {
          if (!(stat2 instanceof AST_Var)) {
            if (stat2 instanceof AST_SimpleStatement)
              exprs2.push(stat2.body);
            return;
          }
          for (var j2 = 0;j2 < stat2.definitions.length; j2++) {
            var var_def = stat2.definitions[j2];
            var name2 = flatten_var(var_def.name);
            var value2 = var_def.value;
            if (value2 && exprs2.length > 0) {
              exprs2.push(value2);
              value2 = make_sequence(var_def, exprs2);
              exprs2 = [];
            }
            append_var(decl_var, expr_var, name2, value2);
            if (!in_loop)
              continue;
            if (arg_used.has(name2.name))
              continue;
            if (name2.definition().orig.length == 1 && fn.functions.has(name2.name))
              continue;
            expr_loop.push(init_ref(compressor, name2));
          }
        });
        [].push.apply(decls, decl_var);
        [].push.apply(expressions, expr_loop);
        [].push.apply(expressions, expr_fn);
        [].push.apply(expressions, expr_var);
        return args2;
      }
      function flatten_fn() {
        var decls = [];
        var expressions = [];
        if (has_default > 1 || has_destructured || has_spread || fn.rest) {
          flatten_destructured(decls, expressions);
        } else {
          flatten_args(decls, expressions);
        }
        var args2 = flatten_vars(decls, expressions);
        expressions.push(value);
        if (decls.length)
          args2.push(make_node(AST_Var, fn, { definitions: decls }));
        [].splice.apply(scope.body, args2);
        fn.enclosed.forEach(function(def2) {
          if (scope.var_names().has(def2.name))
            return;
          scope.enclosed.push(def2);
          scope.var_names().set(def2.name, true);
        });
        return expressions;
      }
    });
    OPT(AST_New, function(self, compressor) {
      if (compressor.option("unsafe")) {
        var exp = self.expression;
        if (is_undeclared_ref(exp))
          switch (exp.name) {
            case "Array":
            case "Error":
            case "Function":
            case "Object":
            case "RegExp":
              return make_node(AST_Call, self).transform(compressor);
          }
      }
      if (compressor.option("sequences")) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (compressor.option("unused"))
        drop_unused_call_args(self, compressor);
      return self;
    });
    function to_conditional_assignment(compressor, def, value, node) {
      if (!(node instanceof AST_Binary))
        return;
      if (!(node.operator == "&&" || node.operator == "||"))
        return;
      if (!(node.right instanceof AST_Assign))
        return;
      if (node.right.operator != "=")
        return;
      if (!(node.right.left instanceof AST_SymbolRef))
        return;
      if (node.right.left.definition() !== def)
        return;
      if (value.has_side_effects(compressor))
        return;
      if (!safe_from_assignment(node.left))
        return;
      if (!safe_from_assignment(node.right.right))
        return;
      def.replaced++;
      return node.operator == "&&" ? make_node(AST_Conditional, node, {
        condition: node.left,
        consequent: node.right.right,
        alternative: value
      }) : make_node(AST_Conditional, node, {
        condition: node.left,
        consequent: value,
        alternative: node.right.right
      });
      function safe_from_assignment(node2) {
        if (node2.has_side_effects(compressor))
          return;
        var hit = false;
        node2.walk(new TreeWalker(function(node3) {
          if (hit)
            return true;
          if (node3 instanceof AST_SymbolRef && node3.definition() === def)
            return hit = true;
        }));
        return !hit;
      }
    }
    OPT(AST_Sequence, function(self, compressor) {
      var expressions = filter_for_side_effects();
      var end = expressions.length - 1;
      merge_assignments();
      trim_right_for_undefined();
      if (end == 0) {
        self = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);
        if (!(self instanceof AST_Sequence))
          self = self.optimize(compressor);
        return self;
      }
      self.expressions = expressions;
      return self;
      function filter_for_side_effects() {
        if (!compressor.option("side_effects"))
          return self.expressions;
        var expressions2 = [];
        var first = first_in_statement(compressor);
        var last = self.expressions.length - 1;
        self.expressions.forEach(function(expr, index) {
          if (index < last)
            expr = expr.drop_side_effect_free(compressor, first);
          if (expr) {
            merge_sequence(expressions2, expr);
            first = false;
          }
        });
        return expressions2;
      }
      function trim_right_for_undefined() {
        if (!compressor.option("side_effects"))
          return;
        while (end > 0 && is_undefined(expressions[end], compressor))
          end--;
        if (end < expressions.length - 1) {
          expressions[end] = make_node(AST_UnaryPrefix, self, {
            operator: "void",
            expression: expressions[end]
          });
          expressions.length = end + 1;
        }
      }
      function is_simple_assign(node) {
        return node instanceof AST_Assign && node.operator == "=" && node.left instanceof AST_SymbolRef && node.left.definition();
      }
      function merge_assignments() {
        for (var i = 1;i < end; i++) {
          var prev = expressions[i - 1];
          var def = is_simple_assign(prev);
          if (!def)
            continue;
          var expr = expressions[i];
          if (compressor.option("conditionals")) {
            var cond = to_conditional_assignment(compressor, def, prev.right, expr);
            if (cond) {
              prev.right = cond;
              expressions.splice(i--, 1);
              end--;
              continue;
            }
          }
          if (compressor.option("dead_code") && is_simple_assign(expr) === def && expr.right.is_constant_expression(def.scope.resolve())) {
            expressions[--i] = prev.right;
          }
        }
      }
    });
    OPT(AST_UnaryPostfix, function(self, compressor) {
      if (compressor.option("sequences")) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      return try_evaluate(compressor, self);
    });
    var SIGN_OPS = makePredicate("+ -");
    var MULTIPLICATIVE_OPS = makePredicate("* / %");
    OPT(AST_UnaryPrefix, function(self, compressor) {
      var op = self.operator;
      var exp = self.expression;
      if (compressor.option("sequences") && can_lift()) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      switch (op) {
        case "+":
          if (!compressor.option("evaluate"))
            break;
          if (!exp.is_number(compressor, true))
            break;
          var parent = compressor.parent();
          if (parent instanceof AST_UnaryPrefix && parent.operator == "delete")
            break;
          return exp;
        case "-":
          if (exp instanceof AST_Infinity)
            exp = exp.transform(compressor);
          if (exp instanceof AST_Number || exp instanceof AST_Infinity)
            return self;
          break;
        case "!":
          if (!compressor.option("booleans"))
            break;
          if (exp.is_truthy())
            return make_sequence(self, [exp, make_node(AST_False, self)]).optimize(compressor);
          if (compressor.in_boolean_context()) {
            if (exp instanceof AST_UnaryPrefix && exp.operator == "!")
              return exp.expression;
            if (exp instanceof AST_Binary) {
              var first = first_in_statement(compressor);
              self = (first ? best_of_statement : best_of_expression)(self, exp.negate(compressor, first));
            }
          }
          break;
        case "delete":
          if (!compressor.option("evaluate"))
            break;
          if (may_not_delete(exp))
            break;
          return make_sequence(self, [exp, make_node(AST_True, self)]).optimize(compressor);
        case "typeof":
          if (!compressor.option("booleans"))
            break;
          if (!compressor.in_boolean_context())
            break;
          AST_Node.warn("Boolean expression always true [{start}]", self);
          var exprs = [make_node(AST_True, self)];
          if (!(exp instanceof AST_SymbolRef && can_drop_symbol(exp, compressor)))
            exprs.unshift(exp);
          return make_sequence(self, exprs).optimize(compressor);
        case "void":
          if (!compressor.option("side_effects"))
            break;
          exp = exp.drop_side_effect_free(compressor);
          if (!exp)
            return make_node(AST_Undefined, self).optimize(compressor);
          self.expression = exp;
          return self;
      }
      if (compressor.option("evaluate") && exp instanceof AST_Binary && SIGN_OPS[op] && MULTIPLICATIVE_OPS[exp.operator] && (exp.left.is_constant() || !exp.right.has_side_effects(compressor))) {
        return make_node(AST_Binary, self, {
          operator: exp.operator,
          left: make_node(AST_UnaryPrefix, exp.left, {
            operator: op,
            expression: exp.left
          }),
          right: exp.right
        });
      }
      return try_evaluate(compressor, self);
      function may_not_delete(node) {
        return node instanceof AST_Infinity || node instanceof AST_NaN || node instanceof AST_NewTarget || node instanceof AST_PropAccess || node instanceof AST_SymbolRef || node instanceof AST_Undefined;
      }
      function can_lift() {
        switch (op) {
          case "delete":
            return !may_not_delete(exp.tail_node());
          case "typeof":
            return !is_undeclared_ref(exp.tail_node());
          default:
            return true;
        }
      }
    });
    OPT(AST_Await, function(self, compressor) {
      if (!compressor.option("awaits"))
        return self;
      if (compressor.option("sequences")) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (compressor.option("side_effects")) {
        var exp = self.expression;
        if (exp instanceof AST_Await)
          return exp.optimize(compressor);
        if (exp instanceof AST_UnaryPrefix && exp.expression instanceof AST_Await)
          return exp.optimize(compressor);
        for (var level = 0, node = self, parent;parent = compressor.parent(level++); node = parent) {
          if (is_arrow(parent)) {
            if (parent.value === node)
              return exp.optimize(compressor);
          } else if (parent instanceof AST_Return) {
            var drop = true;
            do {
              node = parent;
              parent = compressor.parent(level++);
              if (parent instanceof AST_Try && (parent.bfinally || parent.bcatch) !== node) {
                drop = false;
                break;
              }
            } while (parent && !(parent instanceof AST_Scope));
            if (drop)
              return exp.optimize(compressor);
          } else if (parent instanceof AST_Sequence) {
            if (parent.tail_node() === node)
              continue;
          }
          break;
        }
      }
      return self;
    });
    OPT(AST_Yield, function(self, compressor) {
      if (!compressor.option("yields"))
        return self;
      if (compressor.option("sequences")) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      var exp = self.expression;
      if (self.nested && exp.TYPE == "Call") {
        var inlined = exp.clone().optimize(compressor);
        if (inlined.TYPE != "Call")
          return inlined;
      }
      return self;
    });
    AST_Binary.DEFMETHOD("lift_sequences", function(compressor) {
      if (this.left instanceof AST_PropAccess) {
        if (!(this.left.expression instanceof AST_Sequence))
          return this;
        var x2 = this.left.expression.expressions.slice();
        var e = this.clone();
        e.left = e.left.clone();
        e.left.expression = x2.pop();
        x2.push(e);
        return make_sequence(this, x2);
      }
      if (this.left instanceof AST_Sequence) {
        var x2 = this.left.expressions.slice();
        var e = this.clone();
        e.left = x2.pop();
        x2.push(e);
        return make_sequence(this, x2);
      }
      if (this.right instanceof AST_Sequence) {
        if (this.left.has_side_effects(compressor))
          return this;
        var assign = this.operator == "=" && this.left instanceof AST_SymbolRef;
        var x2 = this.right.expressions;
        var last = x2.length - 1;
        for (var i = 0;i < last; i++) {
          if (!assign && x2[i].has_side_effects(compressor))
            break;
        }
        if (i == last) {
          x2 = x2.slice();
          var e = this.clone();
          e.right = x2.pop();
          x2.push(e);
          return make_sequence(this, x2);
        }
        if (i > 0) {
          var e = this.clone();
          e.right = make_sequence(this.right, x2.slice(i));
          x2 = x2.slice(0, i);
          x2.push(e);
          return make_sequence(this, x2);
        }
      }
      return this;
    });
    var indexFns = makePredicate("indexOf lastIndexOf");
    var commutativeOperators = makePredicate("== === != !== * & | ^");
    function is_object(node, plain) {
      if (node instanceof AST_Assign)
        return !plain && node.operator == "=" && is_object(node.right);
      if (node instanceof AST_New)
        return !plain;
      if (node instanceof AST_Sequence)
        return is_object(node.tail_node(), plain);
      if (node instanceof AST_SymbolRef)
        return !plain && is_object(node.fixed_value());
      return node instanceof AST_Array || node instanceof AST_Class || node instanceof AST_Lambda || node instanceof AST_Object;
    }
    function can_drop_op(op, rhs, compressor) {
      switch (op) {
        case "in":
          return is_object(rhs) || compressor && compressor.option("unsafe_comps");
        case "instanceof":
          if (rhs instanceof AST_SymbolRef)
            rhs = rhs.fixed_value();
          return is_lambda(rhs) || compressor && compressor.option("unsafe_comps");
        default:
          return true;
      }
    }
    function needs_enqueuing(compressor, node) {
      if (node.is_constant())
        return true;
      if (node instanceof AST_Assign)
        return node.operator != "=" || needs_enqueuing(compressor, node.right);
      if (node instanceof AST_Binary) {
        return !lazy_op[node.operator] || needs_enqueuing(compressor, node.left) && needs_enqueuing(compressor, node.right);
      }
      if (node instanceof AST_Call)
        return is_async(node.expression);
      if (node instanceof AST_Conditional) {
        return needs_enqueuing(compressor, node.consequent) && needs_enqueuing(compressor, node.alternative);
      }
      if (node instanceof AST_Sequence)
        return needs_enqueuing(compressor, node.tail_node());
      if (node instanceof AST_SymbolRef) {
        var fixed = node.fixed_value();
        return fixed && needs_enqueuing(compressor, fixed);
      }
      if (node instanceof AST_Template)
        return !node.tag || is_raw_tag(compressor, node.tag);
      if (node instanceof AST_Unary)
        return true;
    }
    function extract_lhs(node, compressor) {
      if (node instanceof AST_Assign)
        return is_lhs_read_only(node.left, compressor) ? node : node.left;
      if (node instanceof AST_Sequence)
        return extract_lhs(node.tail_node(), compressor);
      if (node instanceof AST_UnaryPrefix && UNARY_POSTFIX[node.operator]) {
        return is_lhs_read_only(node.expression, compressor) ? node : node.expression;
      }
      return node;
    }
    function repeatable(compressor, node) {
      if (node instanceof AST_Dot)
        return repeatable(compressor, node.expression);
      if (node instanceof AST_Sub) {
        return repeatable(compressor, node.expression) && repeatable(compressor, node.property);
      }
      if (node instanceof AST_Symbol)
        return true;
      return !node.has_side_effects(compressor);
    }
    function swap_chain(self, compressor) {
      var rhs = self.right.tail_node();
      if (rhs !== self.right) {
        var exprs = self.right.expressions.slice(0, -1);
        exprs.push(rhs.left);
        rhs = rhs.clone();
        rhs.left = make_sequence(self.right, exprs);
        self.right = rhs;
      }
      self.left = make_node(AST_Binary, self, {
        operator: self.operator,
        left: self.left,
        right: rhs.left,
        start: self.left.start,
        end: rhs.left.end
      });
      self.right = rhs.right;
      if (compressor) {
        self.left = self.left.transform(compressor);
      } else if (self.operator == rhs.left.operator) {
        swap_chain(self.left);
      }
    }
    OPT(AST_Binary, function(self, compressor) {
      if (commutativeOperators[self.operator] && self.right.is_constant() && !self.left.is_constant() && !(self.left instanceof AST_Binary && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {
        reverse();
      }
      if (compressor.option("sequences")) {
        var seq = self.lift_sequences(compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (compressor.option("assignments") && lazy_op[self.operator]) {
        var lhs = extract_lhs(self.left, compressor);
        var right = self.right;
        if (lhs instanceof AST_SymbolRef && right instanceof AST_Assign && right.operator == "=" && lhs.equals(right.left)) {
          lhs = lhs.clone();
          var assign = make_node(AST_Assign, self, {
            operator: "=",
            left: lhs,
            right: make_node(AST_Binary, self, {
              operator: self.operator,
              left: self.left,
              right: right.right
            })
          });
          if (lhs.fixed) {
            lhs.fixed = function() {
              return assign.right;
            };
            lhs.fixed.assigns = [assign];
          }
          var def = lhs.definition();
          def.references.push(lhs);
          def.replaced++;
          return assign.optimize(compressor);
        }
      }
      if (compressor.option("comparisons"))
        switch (self.operator) {
          case "===":
          case "!==":
            if (is_undefined(self.left, compressor) && self.right.is_defined(compressor)) {
              AST_Node.warn("Expression always defined [{start}]", self);
              return make_sequence(self, [
                self.right,
                make_node(self.operator == "===" ? AST_False : AST_True, self)
              ]).optimize(compressor);
            }
            var is_strict_comparison = true;
            if (self.left.is_string(compressor) && self.right.is_string(compressor) || self.left.is_number(compressor) && self.right.is_number(compressor) || self.left.is_boolean(compressor) && self.right.is_boolean(compressor) || repeatable(compressor, self.left) && self.left.equals(self.right)) {
              self.operator = self.operator.slice(0, 2);
            }
          case "==":
          case "!=":
            if (!is_strict_comparison && is_undefined(self.left, compressor)) {
              self.left = make_node(AST_Null, self.left);
            } else if (compressor.option("typeofs") && self.left instanceof AST_String && self.left.value == "undefined" && self.right instanceof AST_UnaryPrefix && self.right.operator == "typeof") {
              var expr = self.right.expression;
              if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor) : !(expr instanceof AST_PropAccess && compressor.option("ie"))) {
                self.right = expr;
                self.left = make_node(AST_Undefined, self.left).optimize(compressor);
                if (self.operator.length == 2)
                  self.operator += "=";
              }
            } else if (self.left instanceof AST_SymbolRef && self.right instanceof AST_SymbolRef && self.left.definition() === self.right.definition() && is_object(self.left)) {
              return make_node(self.operator[0] == "=" ? AST_True : AST_False, self).optimize(compressor);
            }
            break;
          case "&&":
          case "||":
            var left = self.left;
            if (!(left instanceof AST_Binary))
              break;
            if (left.operator != (self.operator == "&&" ? "!==" : "==="))
              break;
            if (!(self.right instanceof AST_Binary))
              break;
            if (left.operator != self.right.operator)
              break;
            if (is_undefined(left.left, compressor) && self.right.left instanceof AST_Null || left.left instanceof AST_Null && is_undefined(self.right.left, compressor)) {
              var expr = left.right;
              if (expr instanceof AST_Assign && expr.operator == "=")
                expr = expr.left;
              if (expr.has_side_effects(compressor))
                break;
              if (!expr.equals(self.right.right))
                break;
              left.operator = left.operator.slice(0, -1);
              left.left = make_node(AST_Null, self);
              return left;
            }
            break;
        }
      var in_bool = false;
      var parent = compressor.parent();
      if (compressor.option("booleans")) {
        var lhs = extract_lhs(self.left, compressor);
        if (lazy_op[self.operator] && !lhs.has_side_effects(compressor)) {
          if (lhs.equals(self.right)) {
            return maintain_this_binding(parent, compressor.self(), self.left).optimize(compressor);
          }
          mark_duplicate_condition(compressor, lhs);
        }
        in_bool = compressor.in_boolean_context();
      }
      if (in_bool)
        switch (self.operator) {
          case "+":
            var ev = self.left.evaluate(compressor, true);
            if (ev && typeof ev == "string" || (ev = self.right.evaluate(compressor, true)) && typeof ev == "string") {
              AST_Node.warn("+ in boolean context always true [{start}]", self);
              var exprs = [];
              if (self.left.evaluate(compressor) instanceof AST_Node)
                exprs.push(self.left);
              if (self.right.evaluate(compressor) instanceof AST_Node)
                exprs.push(self.right);
              if (exprs.length < 2) {
                exprs.push(make_node(AST_True, self));
                return make_sequence(self, exprs).optimize(compressor);
              }
              self.truthy = true;
            }
            break;
          case "==":
            if (self.left instanceof AST_String && self.left.value == "" && self.right.is_string(compressor)) {
              return make_node(AST_UnaryPrefix, self, {
                operator: "!",
                expression: self.right
              }).optimize(compressor);
            }
            break;
          case "!=":
            if (self.left instanceof AST_String && self.left.value == "" && self.right.is_string(compressor)) {
              return self.right.optimize(compressor);
            }
            break;
        }
      if (compressor.option("comparisons") && self.is_boolean(compressor)) {
        if (parent.TYPE != "Binary") {
          var negated = make_node(AST_UnaryPrefix, self, {
            operator: "!",
            expression: self.negate(compressor)
          });
          if (best_of(compressor, self, negated) === negated)
            return negated;
        }
        switch (self.operator) {
          case ">":
            reverse("<");
            break;
          case ">=":
            reverse("<=");
            break;
        }
      }
      if (compressor.option("conditionals") && lazy_op[self.operator]) {
        if (self.left instanceof AST_Binary && self.operator == self.left.operator) {
          var before = make_node(AST_Binary, self, {
            operator: self.operator,
            left: self.left.right,
            right: self.right
          });
          var after = before.transform(compressor);
          if (before !== after) {
            self.left = self.left.left;
            self.right = after;
          }
        }
        var rhs = self.right.tail_node();
        if (rhs instanceof AST_Binary && self.operator == rhs.operator)
          swap_chain(self, compressor);
      }
      if (compressor.option("strings") && self.operator == "+") {
        if (self.right instanceof AST_String && self.right.value == "" && self.left.is_string(compressor)) {
          return self.left.optimize(compressor);
        }
        if (self.left instanceof AST_String && self.left.value == "" && self.right.is_string(compressor)) {
          return self.right.optimize(compressor);
        }
        if (self.left instanceof AST_Binary && self.left.operator == "+" && self.left.left instanceof AST_String && self.left.left.value == "" && self.right.is_string(compressor) && (self.left.right.is_constant() || !self.right.has_side_effects(compressor))) {
          self.left = self.left.right;
          return self.optimize(compressor);
        }
        var rhs = self.right.tail_node();
        if (rhs instanceof AST_Binary && self.operator == rhs.operator && (self.left.is_string(compressor) && rhs.is_string(compressor) || rhs.left.is_string(compressor) && (self.left.is_constant() || !rhs.right.has_side_effects(compressor)))) {
          swap_chain(self, compressor);
        }
      }
      if (compressor.option("evaluate")) {
        var associative = true;
        switch (self.operator) {
          case "&&":
            var ll = fuzzy_eval(compressor, self.left);
            if (!ll) {
              AST_Node.warn("Condition left of && always false [{start}]", self);
              return maintain_this_binding(parent, compressor.self(), self.left).optimize(compressor);
            } else if (!(ll instanceof AST_Node)) {
              AST_Node.warn("Condition left of && always true [{start}]", self);
              return make_sequence(self, [self.left, self.right]).optimize(compressor);
            }
            if (!self.right.evaluate(compressor, true)) {
              if (in_bool && !(self.right.evaluate(compressor) instanceof AST_Node)) {
                AST_Node.warn("Boolean && always false [{start}]", self);
                return make_sequence(self, [self.left, make_node(AST_False, self)]).optimize(compressor);
              } else
                self.falsy = true;
            } else if ((in_bool || parent.operator == "&&" && parent.left === compressor.self()) && !(self.right.evaluate(compressor) instanceof AST_Node)) {
              AST_Node.warn("Dropping side-effect-free && [{start}]", self);
              return self.left.optimize(compressor);
            }
            if (self.left.operator == "||") {
              var lr = fuzzy_eval(compressor, self.left.right);
              if (!lr)
                return make_node(AST_Conditional, self, {
                  condition: self.left.left,
                  consequent: self.right,
                  alternative: self.left.right
                }).optimize(compressor);
            }
            break;
          case "??":
            var nullish = true;
          case "||":
            var ll = fuzzy_eval(compressor, self.left, nullish);
            if (nullish ? ll == null : !ll) {
              AST_Node.warn("Condition left of {operator} always {value} [{start}]", {
                operator: self.operator,
                value: nullish ? "nullish" : "false",
                start: self.start
              });
              return make_sequence(self, [self.left, self.right]).optimize(compressor);
            } else if (!(ll instanceof AST_Node)) {
              AST_Node.warn("Condition left of {operator} always {value} [{start}]", {
                operator: self.operator,
                value: nullish ? "defined" : "true",
                start: self.start
              });
              return maintain_this_binding(parent, compressor.self(), self.left).optimize(compressor);
            }
            var rr;
            if (!nullish && (rr = self.right.evaluate(compressor, true)) && !(rr instanceof AST_Node)) {
              if (in_bool && !(self.right.evaluate(compressor) instanceof AST_Node)) {
                AST_Node.warn("Boolean || always true [{start}]", self);
                return make_sequence(self, [self.left, make_node(AST_True, self)]).optimize(compressor);
              } else
                self.truthy = true;
            } else if ((in_bool || parent.operator == "||" && parent.left === compressor.self()) && !self.right.evaluate(compressor)) {
              AST_Node.warn("Dropping side-effect-free {operator} [{start}]", self);
              return self.left.optimize(compressor);
            }
            if (!nullish && self.left.operator == "&&") {
              var lr = fuzzy_eval(compressor, self.left.right);
              if (lr && !(lr instanceof AST_Node))
                return make_node(AST_Conditional, self, {
                  condition: self.left.left,
                  consequent: self.left.right,
                  alternative: self.right
                }).optimize(compressor);
            }
            break;
          case "+":
            if (self.left instanceof AST_Constant && self.right instanceof AST_Binary && self.right.operator == "+" && self.right.left instanceof AST_Constant && self.right.is_string(compressor)) {
              self = make_node(AST_Binary, self, {
                operator: "+",
                left: make_node(AST_String, self.left, {
                  value: "" + self.left.value + self.right.left.value,
                  start: self.left.start,
                  end: self.right.left.end
                }),
                right: self.right.right
              });
            }
            if (self.right instanceof AST_Constant && self.left instanceof AST_Binary && self.left.operator == "+" && self.left.right instanceof AST_Constant && self.left.is_string(compressor)) {
              self = make_node(AST_Binary, self, {
                operator: "+",
                left: self.left.left,
                right: make_node(AST_String, self.right, {
                  value: "" + self.left.right.value + self.right.value,
                  start: self.left.right.start,
                  end: self.right.end
                })
              });
            }
            if (self.right instanceof AST_UnaryPrefix && self.right.operator == "-" && self.left.is_number(compressor)) {
              self = make_node(AST_Binary, self, {
                operator: "-",
                left: self.left,
                right: self.right.expression
              });
              break;
            }
            if (self.left instanceof AST_UnaryPrefix && self.left.operator == "-" && reversible() && self.right.is_number(compressor)) {
              self = make_node(AST_Binary, self, {
                operator: "-",
                left: self.right,
                right: self.left.expression
              });
              break;
            }
            if (compressor.option("unsafe_math") && self.left instanceof AST_Binary && PRECEDENCE[self.left.operator] == PRECEDENCE[self.operator] && self.right.is_constant() && (self.right.is_boolean(compressor) || self.right.is_number(compressor)) && self.left.is_number(compressor) && !self.left.right.is_constant() && (self.left.left.is_boolean(compressor) || self.left.left.is_number(compressor))) {
              self = make_node(AST_Binary, self, {
                operator: self.left.operator,
                left: make_node(AST_Binary, self, {
                  operator: self.operator,
                  left: self.right,
                  right: self.left.left
                }),
                right: self.left.right
              });
              break;
            }
          case "-":
            if (self.right instanceof AST_UnaryPrefix && self.right.operator == "-" && self.left.is_number(compressor) && self.right.expression.is_number(compressor)) {
              self = make_node(AST_Binary, self, {
                operator: "+",
                left: self.left,
                right: self.right.expression
              });
              break;
            }
          case "*":
          case "/":
            associative = compressor.option("unsafe_math");
            if (self.operator != "+")
              ["left", "right"].forEach(function(operand) {
                var node2 = self[operand];
                if (node2 instanceof AST_UnaryPrefix && node2.operator == "+") {
                  var exp = node2.expression;
                  if (exp.is_boolean(compressor) || exp.is_number(compressor) || exp.is_string(compressor)) {
                    self[operand] = exp;
                  }
                }
              });
          case "&":
          case "|":
          case "^":
            if (self.operator != "-" && self.operator != "/" && (self.left.is_boolean(compressor) || self.left.is_number(compressor)) && (self.right.is_boolean(compressor) || self.right.is_number(compressor)) && reversible() && !(self.left instanceof AST_Binary && self.left.operator != self.operator && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {
              self = best_of(compressor, self, make_node(AST_Binary, self, {
                operator: self.operator,
                left: self.right,
                right: self.left
              }), self.right instanceof AST_Constant && !(self.left instanceof AST_Constant));
            }
            if (!associative || !self.is_number(compressor))
              break;
            if (self.right instanceof AST_Binary && self.right.operator != "%" && PRECEDENCE[self.right.operator] == PRECEDENCE[self.operator] && self.right.is_number(compressor) && (self.operator != "+" || self.right.left.is_boolean(compressor) || self.right.left.is_number(compressor)) && (self.operator != "-" || !self.left.is_negative_zero()) && (self.right.left.is_constant_expression() || !self.right.right.has_side_effects(compressor)) && !is_modify_array(self.right.right)) {
              self = make_node(AST_Binary, self, {
                operator: align(self.operator, self.right.operator),
                left: make_node(AST_Binary, self.left, {
                  operator: self.operator,
                  left: self.left,
                  right: self.right.left,
                  start: self.left.start,
                  end: self.right.left.end
                }),
                right: self.right.right
              });
              if (self.operator == "+" && !self.right.is_boolean(compressor) && !self.right.is_number(compressor)) {
                self.right = make_node(AST_UnaryPrefix, self.right, {
                  operator: "+",
                  expression: self.right
                });
              }
            }
            if (self.right instanceof AST_Constant && self.left instanceof AST_Binary && self.left.operator != "%" && PRECEDENCE[self.left.operator] == PRECEDENCE[self.operator] && self.left.is_number(compressor)) {
              if (self.left.left instanceof AST_Constant) {
                var lhs = make_binary(self.operator, self.left.left, self.right, {
                  start: self.left.left.start,
                  end: self.right.end
                });
                self = make_binary(self.left.operator, try_evaluate(compressor, lhs), self.left.right, self);
              } else if (self.left.right instanceof AST_Constant) {
                var op = align(self.left.operator, self.operator);
                var rhs = try_evaluate(compressor, make_binary(op, self.left.right, self.right, self.left));
                if (rhs.is_constant() && !(self.left.operator == "-" && self.right.value != 0 && +rhs.value == 0 && self.left.left.is_negative_zero())) {
                  self = make_binary(self.left.operator, self.left.left, rhs, self);
                }
              }
            }
            break;
          case "instanceof":
            if (is_lambda(self.right))
              return make_sequence(self, [
                self,
                make_node(AST_False, self)
              ]).optimize(compressor);
            break;
        }
        if (!(parent instanceof AST_UnaryPrefix && parent.operator == "delete")) {
          if (self.left instanceof AST_Number && !self.right.is_constant())
            switch (self.operator) {
              case "+":
                if (self.left.value == 0) {
                  if (self.right.is_boolean(compressor))
                    return make_node(AST_UnaryPrefix, self, {
                      operator: "+",
                      expression: self.right
                    }).optimize(compressor);
                  if (self.right.is_number(compressor) && !self.right.is_negative_zero())
                    return self.right;
                }
                break;
              case "*":
                if (self.left.value == 1)
                  return make_node(AST_UnaryPrefix, self, {
                    operator: "+",
                    expression: self.right
                  }).optimize(compressor);
                break;
            }
          if (self.right instanceof AST_Number && !self.left.is_constant())
            switch (self.operator) {
              case "+":
                if (self.right.value == 0) {
                  if (self.left.is_boolean(compressor))
                    return make_node(AST_UnaryPrefix, self, {
                      operator: "+",
                      expression: self.left
                    }).optimize(compressor);
                  if (self.left.is_number(compressor) && !self.left.is_negative_zero())
                    return self.left;
                }
                break;
              case "-":
                if (self.right.value == 0)
                  return make_node(AST_UnaryPrefix, self, {
                    operator: "+",
                    expression: self.left
                  }).optimize(compressor);
                break;
              case "/":
                if (self.right.value == 1)
                  return make_node(AST_UnaryPrefix, self, {
                    operator: "+",
                    expression: self.left
                  }).optimize(compressor);
                break;
            }
        }
      }
      if (compressor.option("typeofs"))
        switch (self.operator) {
          case "&&":
            mark_locally_defined(self.left, self.right, null);
            break;
          case "||":
            mark_locally_defined(self.left, null, self.right);
            break;
        }
      if (compressor.option("unsafe")) {
        var indexRight = is_indexFn(self.right);
        if (in_bool && indexRight && (self.operator == "==" || self.operator == "!=") && self.left instanceof AST_Number && self.left.value == 0) {
          return (self.operator == "==" ? make_node(AST_UnaryPrefix, self, {
            operator: "!",
            expression: self.right
          }) : self.right).optimize(compressor);
        }
        var indexLeft = is_indexFn(self.left);
        if (compressor.option("comparisons") && is_indexOf_match_pattern()) {
          var node = make_node(AST_UnaryPrefix, self, {
            operator: "!",
            expression: make_node(AST_UnaryPrefix, self, {
              operator: "~",
              expression: indexLeft ? self.left : self.right
            })
          });
          switch (self.operator) {
            case "<":
              if (indexLeft)
                break;
            case "<=":
            case "!=":
              node = make_node(AST_UnaryPrefix, self, {
                operator: "!",
                expression: node
              });
              break;
          }
          return node.optimize(compressor);
        }
      }
      return try_evaluate(compressor, self);
      function is_modify_array(node2) {
        var found = false;
        node2.walk(new TreeWalker(function(node3) {
          if (found)
            return true;
          if (node3 instanceof AST_Assign) {
            if (node3.left instanceof AST_PropAccess)
              return found = true;
          } else if (node3 instanceof AST_Unary) {
            if (unary_side_effects[node3.operator] && node3.expression instanceof AST_PropAccess) {
              return found = true;
            }
          }
        }));
        return found;
      }
      function align(ref, op2) {
        switch (ref) {
          case "-":
            return op2 == "+" ? "-" : "+";
          case "/":
            return op2 == "*" ? "/" : "*";
          default:
            return op2;
        }
      }
      function make_binary(op2, left2, right2, orig) {
        if (op2 == "+") {
          if (!left2.is_boolean(compressor) && !left2.is_number(compressor)) {
            left2 = make_node(AST_UnaryPrefix, left2, {
              operator: "+",
              expression: left2
            });
          }
          if (!right2.is_boolean(compressor) && !right2.is_number(compressor)) {
            right2 = make_node(AST_UnaryPrefix, right2, {
              operator: "+",
              expression: right2
            });
          }
        }
        return make_node(AST_Binary, orig, {
          operator: op2,
          left: left2,
          right: right2
        });
      }
      function is_indexFn(node2) {
        return node2.TYPE == "Call" && node2.expression instanceof AST_Dot && indexFns[node2.expression.property];
      }
      function is_indexOf_match_pattern() {
        switch (self.operator) {
          case "<=":
            return indexRight && self.left instanceof AST_Number && self.left.value == 0;
          case "<":
            if (indexLeft && self.right instanceof AST_Number && self.right.value == 0)
              return true;
          case "==":
          case "!=":
            if (!indexRight)
              return false;
            return self.left instanceof AST_Number && self.left.value == -1 || self.left instanceof AST_UnaryPrefix && self.left.operator == "-" && self.left.expression instanceof AST_Number && self.left.expression.value == 1;
        }
      }
      function reversible() {
        return self.left.is_constant() || self.right.is_constant() || !self.left.has_side_effects(compressor) && !self.right.has_side_effects(compressor);
      }
      function reverse(op2) {
        if (reversible()) {
          if (op2)
            self.operator = op2;
          var tmp = self.left;
          self.left = self.right;
          self.right = tmp;
        }
      }
    });
    OPT(AST_SymbolExport, function(self) {
      return self;
    });
    function recursive_ref(compressor, def, fn) {
      var level = 0, node = compressor.self();
      do {
        if (node === fn)
          return node;
        if (is_lambda(node) && node.name && node.name.definition() === def)
          return node;
      } while (node = compressor.parent(level++));
    }
    function same_scope(def) {
      var scope = def.scope.resolve();
      return all(def.references, function(ref) {
        return scope === ref.scope.resolve();
      });
    }
    OPT(AST_SymbolRef, function(self, compressor) {
      if (!compressor.option("ie") && is_undeclared_ref(self) && !(self.scope.resolve().uses_with && compressor.find_parent(AST_With))) {
        switch (self.name) {
          case "undefined":
            return make_node(AST_Undefined, self).optimize(compressor);
          case "NaN":
            return make_node(AST_NaN, self).optimize(compressor);
          case "Infinity":
            return make_node(AST_Infinity, self).optimize(compressor);
        }
      }
      var parent = compressor.parent();
      if (compressor.option("reduce_vars") && is_lhs(compressor.self(), parent) !== compressor.self()) {
        var def = self.definition();
        var fixed = self.fixed_value();
        var single_use = def.single_use && !(parent instanceof AST_Call && parent.is_expr_pure(compressor));
        if (single_use) {
          if (is_lambda(fixed)) {
            if ((def.scope !== self.scope.resolve(true) || def.in_loop) && (!compressor.option("reduce_funcs") || def.escaped.depth == 1 || fixed.inlined)) {
              single_use = false;
            } else if (def.redefined()) {
              single_use = false;
            } else if (recursive_ref(compressor, def, fixed)) {
              single_use = false;
            } else if (fixed.name && fixed.name.definition() !== def) {
              single_use = false;
            } else if (fixed.parent_scope !== self.scope || is_funarg(def)) {
              if (!safe_from_strict_mode(fixed, compressor)) {
                single_use = false;
              } else if ((single_use = fixed.is_constant_expression(self.scope)) == "f") {
                var scope = self.scope;
                do {
                  if (scope instanceof AST_LambdaDefinition || scope instanceof AST_LambdaExpression) {
                    scope.inlined = true;
                  }
                } while (scope = scope.parent_scope);
              }
            } else if (fixed.name && (fixed.name.name == "await" && is_async(fixed) || fixed.name.name == "yield" && is_generator(fixed))) {
              single_use = false;
            } else if (fixed.has_side_effects(compressor)) {
              single_use = false;
            } else if (compressor.option("ie") && fixed instanceof AST_Class) {
              single_use = false;
            }
            if (single_use)
              fixed.parent_scope = self.scope;
          } else if (!fixed || def.recursive_refs > 0 || !fixed.is_constant_expression() || fixed.drop_side_effect_free(compressor)) {
            single_use = false;
          }
        }
        if (single_use) {
          def.single_use = false;
          fixed._squeezed = true;
          fixed.single_use = true;
          if (fixed instanceof AST_DefClass)
            fixed = to_class_expr(fixed);
          if (fixed instanceof AST_LambdaDefinition)
            fixed = to_func_expr(fixed);
          if (is_lambda(fixed)) {
            var scopes = [];
            var scope = self.scope;
            do {
              scopes.push(scope);
              if (scope === def.scope)
                break;
            } while (scope = scope.parent_scope);
            fixed.enclosed.forEach(function(def2) {
              if (fixed.variables.has(def2.name))
                return;
              for (var i = 0;i < scopes.length; i++) {
                var scope2 = scopes[i];
                if (!push_uniq(scope2.enclosed, def2))
                  return;
                scope2.var_names().set(def2.name, true);
              }
            });
          }
          var value;
          if (def.recursive_refs > 0) {
            value = fixed.clone(true);
            var defun_def = value.name.definition();
            var lambda_def = value.variables.get(value.name.name);
            var name = lambda_def && lambda_def.orig[0];
            var def_fn_name, symbol_type;
            if (value instanceof AST_Class) {
              def_fn_name = "def_function";
              symbol_type = AST_SymbolClass;
            } else {
              def_fn_name = "def_variable";
              symbol_type = AST_SymbolLambda;
            }
            if (!(name instanceof symbol_type)) {
              name = make_node(symbol_type, value.name);
              name.scope = value;
              value.name = name;
              lambda_def = value[def_fn_name](name);
              lambda_def.recursive_refs = def.recursive_refs;
            }
            value.walk(new TreeWalker(function(node) {
              if (node instanceof AST_SymbolDeclaration) {
                if (node !== name) {
                  var def2 = node.definition();
                  def2.orig.push(node);
                  def2.eliminated++;
                }
                return;
              }
              if (!(node instanceof AST_SymbolRef))
                return;
              var def2 = node.definition();
              if (def2 === defun_def) {
                node.thedef = def2 = lambda_def;
              } else {
                def2.single_use = false;
                var fn = node.fixed_value();
                if (is_lambda(fn) && fn.name && fn.name.definition() === def2 && def2.scope === fn.name.scope && fixed.variables.get(fn.name.name) === def2) {
                  fn.name = fn.name.clone();
                  node.thedef = def2 = value.variables.get(fn.name.name) || value[def_fn_name](fn.name);
                }
              }
              def2.references.push(node);
            }));
          } else {
            if (fixed instanceof AST_Scope) {
              compressor.push(fixed);
              value = fixed.optimize(compressor);
              compressor.pop();
            } else {
              value = fixed.optimize(compressor);
            }
            value = value.transform(new TreeTransformer(function(node, descend) {
              if (node instanceof AST_Scope)
                return node;
              node = node.clone();
              descend(node, this);
              return node;
            }));
          }
          def.replaced++;
          return value;
        }
        var state;
        if (fixed && (state = self.fixed || def.fixed).should_replace !== false) {
          var ev, init;
          if (fixed instanceof AST_This) {
            if (!is_funarg(def) && same_scope(def) && !cross_class(def))
              init = fixed;
          } else if ((ev = fixed.evaluate(compressor, true)) !== fixed && typeof ev != "function" && (ev === null || typeof ev != "object" || compressor.option("unsafe_regexp") && ev instanceof RegExp && !def.cross_loop && same_scope(def))) {
            init = make_node_from_constant(ev, fixed);
          }
          if (init) {
            if (state.should_replace === undefined) {
              var value_length = init.optimize(compressor).print_to_string().length;
              if (!has_symbol_ref(fixed)) {
                value_length = Math.min(value_length, fixed.print_to_string().length);
              }
              var name_length = def.name.length;
              if (compressor.option("unused") && !compressor.exposed(def)) {
                var refs = def.references.length - def.replaced - def.assignments;
                refs = Math.min(refs, def.references.filter(function(ref) {
                  return ref.fixed === state;
                }).length);
                name_length += (name_length + 2 + value_length) / Math.max(1, refs);
              }
              state.should_replace = value_length - Math.floor(name_length) < compressor.eval_threshold;
            }
            if (state.should_replace) {
              var value;
              if (has_symbol_ref(fixed)) {
                value = init.optimize(compressor);
                if (value === init)
                  value = value.clone(true);
              } else {
                value = best_of_expression(init.optimize(compressor), fixed);
                if (value === init || value === fixed)
                  value = value.clone(true);
              }
              def.replaced++;
              return value;
            }
          }
        }
      }
      return self;
      function cross_class(def2) {
        var scope2 = self.scope;
        while (scope2 !== def2.scope) {
          if (scope2 instanceof AST_Class)
            return true;
          scope2 = scope2.parent_scope;
        }
      }
      function has_symbol_ref(value2) {
        var found;
        value2.walk(new TreeWalker(function(node) {
          if (node instanceof AST_SymbolRef)
            found = true;
          if (found)
            return true;
        }));
        return found;
      }
    });
    function is_raw_tag(compressor, tag) {
      return compressor.option("unsafe") && tag instanceof AST_Dot && tag.property == "raw" && is_undeclared_ref(tag.expression) && tag.expression.name == "String";
    }
    function decode_template(str) {
      var malformed = false;
      str = str.replace(/\\(u\{[^{}]*\}?|u[\s\S]{0,4}|x[\s\S]{0,2}|[0-9]+|[\s\S])/g, function(match, seq) {
        var ch = decode_escape_sequence(seq);
        if (typeof ch == "string")
          return ch;
        malformed = true;
      });
      if (!malformed)
        return str;
    }
    OPT(AST_Template, function(self, compressor) {
      if (!compressor.option("templates"))
        return self;
      var tag = self.tag;
      if (!tag || is_raw_tag(compressor, tag)) {
        var exprs = [];
        var strs = [];
        for (var i = 0, status;i < self.strings.length; i++) {
          var str = self.strings[i];
          if (!tag) {
            var trimmed = decode_template(str);
            if (trimmed)
              str = escape_literal(trimmed);
          }
          if (i > 0) {
            var node = self.expressions[i - 1];
            var value = should_join(node);
            if (value) {
              var prev = strs[strs.length - 1];
              var joined = prev + value + str;
              var decoded;
              if (tag || typeof (decoded = decode_template(joined)) == status) {
                strs[strs.length - 1] = decoded ? escape_literal(decoded) : joined;
                continue;
              }
            }
            exprs.push(node);
          }
          strs.push(str);
          if (!tag)
            status = typeof trimmed;
        }
        if (!tag && strs.length > 1) {
          if (strs[strs.length - 1] == "")
            return make_node(AST_Binary, self, {
              operator: "+",
              left: make_node(AST_Template, self, {
                expressions: exprs.slice(0, -1),
                strings: strs.slice(0, -1)
              }).transform(compressor),
              right: exprs[exprs.length - 1]
            }).optimize(compressor);
          if (strs[0] == "") {
            var left = make_node(AST_Binary, self, {
              operator: "+",
              left: make_node(AST_String, self, { value: "" }),
              right: exprs[0]
            });
            for (var i = 1;strs[i] == "" && i < exprs.length; i++) {
              left = make_node(AST_Binary, self, {
                operator: "+",
                left,
                right: exprs[i]
              });
            }
            return best_of(compressor, self, make_node(AST_Binary, self, {
              operator: "+",
              left: left.transform(compressor),
              right: make_node(AST_Template, self, {
                expressions: exprs.slice(i),
                strings: strs.slice(i)
              }).transform(compressor)
            }).optimize(compressor));
          }
        }
        self.expressions = exprs;
        self.strings = strs;
      }
      return try_evaluate(compressor, self);
      function escape_literal(str2) {
        return str2.replace(/\r|\\|`|\${/g, function(s2) {
          return "\\" + (s2 == "\r" ? "r" : s2);
        });
      }
      function should_join(node2) {
        var ev = node2.evaluate(compressor);
        if (ev === node2)
          return;
        if (tag && /\r|\\|`/.test(ev))
          return;
        ev = escape_literal("" + ev);
        if (ev.length > node2.print_to_string().length + "${}".length)
          return;
        return ev;
      }
    });
    function is_atomic(lhs, self) {
      return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;
    }
    OPT(AST_Undefined, function(self, compressor) {
      if (compressor.option("unsafe_undefined")) {
        var undef = find_scope(compressor).find_variable("undefined");
        if (undef) {
          var ref = make_node(AST_SymbolRef, self, {
            name: "undefined",
            scope: undef.scope,
            thedef: undef
          });
          ref.is_undefined = true;
          return ref;
        }
      }
      var lhs = is_lhs(compressor.self(), compressor.parent());
      if (lhs && is_atomic(lhs, self))
        return self;
      return make_node(AST_UnaryPrefix, self, {
        operator: "void",
        expression: make_node(AST_Number, self, { value: 0 })
      });
    });
    OPT(AST_Infinity, function(self, compressor) {
      var lhs = is_lhs(compressor.self(), compressor.parent());
      if (lhs && is_atomic(lhs, self))
        return self;
      if (compressor.option("keep_infinity") && !lhs && !find_scope(compressor).find_variable("Infinity")) {
        return self;
      }
      return make_node(AST_Binary, self, {
        operator: "/",
        left: make_node(AST_Number, self, { value: 1 }),
        right: make_node(AST_Number, self, { value: 0 })
      });
    });
    OPT(AST_NaN, function(self, compressor) {
      var lhs = is_lhs(compressor.self(), compressor.parent());
      if (lhs && is_atomic(lhs, self))
        return self;
      if (!lhs && !find_scope(compressor).find_variable("NaN"))
        return self;
      return make_node(AST_Binary, self, {
        operator: "/",
        left: make_node(AST_Number, self, { value: 0 }),
        right: make_node(AST_Number, self, { value: 0 })
      });
    });
    function is_reachable(self, defs) {
      var reachable = false;
      var find_ref = new TreeWalker(function(node) {
        if (reachable)
          return true;
        if (node instanceof AST_SymbolRef && member(node.definition(), defs))
          return reachable = true;
      });
      var scan_scope = new TreeWalker(function(node) {
        if (reachable)
          return true;
        if (node instanceof AST_Lambda && node !== self) {
          if (!(node.name || is_async(node) || is_generator(node))) {
            var parent = scan_scope.parent();
            if (parent instanceof AST_Call && parent.expression === node)
              return;
          }
          node.walk(find_ref);
          return true;
        }
      });
      self.walk(scan_scope);
      return reachable;
    }
    var ASSIGN_OPS = makePredicate("+ - * / % >> << >>> | ^ &");
    var ASSIGN_OPS_COMMUTATIVE = makePredicate("* | ^ &");
    OPT(AST_Assign, function(self, compressor) {
      if (compressor.option("dead_code")) {
        if (self.left instanceof AST_PropAccess) {
          if (self.operator == "=") {
            if (self.redundant) {
              var exprs = [self.left.expression];
              if (self.left instanceof AST_Sub)
                exprs.push(self.left.property);
              exprs.push(self.right);
              return make_sequence(self, exprs).optimize(compressor);
            }
            if (self.left.equals(self.right) && !self.left.has_side_effects(compressor)) {
              return self.right;
            }
            var exp = self.left.expression;
            if (exp instanceof AST_Lambda || !compressor.has_directive("use strict") && exp instanceof AST_Constant && !exp.may_throw_on_access(compressor)) {
              return self.left instanceof AST_Dot ? self.right : make_sequence(self, [
                self.left.property,
                self.right
              ]).optimize(compressor);
            }
          }
        } else if (self.left instanceof AST_SymbolRef && can_drop_symbol(self.left, compressor)) {
          var parent;
          if (self.operator == "=" && self.left.equals(self.right) && !((parent = compressor.parent()) instanceof AST_UnaryPrefix && parent.operator == "delete")) {
            return self.right;
          }
          if (self.left.is_immutable())
            return strip_assignment();
          var def = self.left.definition();
          var scope = def.scope.resolve();
          var local = scope === compressor.find_parent(AST_Lambda);
          var level = 0, node;
          parent = compressor.self();
          if (!(scope.uses_arguments && is_funarg(def)) || compressor.has_directive("use strict"))
            do {
              node = parent;
              parent = compressor.parent(level++);
              if (parent instanceof AST_Assign) {
                if (parent.left instanceof AST_SymbolRef && parent.left.definition() === def) {
                  if (in_try(level, parent, !local))
                    break;
                  return strip_assignment(def);
                }
                if (parent.left.match_symbol(function(node2) {
                  if (node2 instanceof AST_PropAccess)
                    return true;
                }))
                  break;
                continue;
              }
              if (parent instanceof AST_Exit) {
                if (!local)
                  break;
                if (in_try(level, parent))
                  break;
                if (is_reachable(scope, [def]))
                  break;
                return strip_assignment(def);
              }
              if (parent instanceof AST_SimpleStatement) {
                if (!local)
                  break;
                if (is_reachable(scope, [def]))
                  break;
                var stat;
                do {
                  stat = parent;
                  parent = compressor.parent(level++);
                  if (parent === scope && is_last_statement(parent.body, stat))
                    return strip_assignment(def);
                } while (is_tail_block(stat, parent));
                break;
              }
              if (parent instanceof AST_VarDef) {
                if (!(parent.name instanceof AST_SymbolDeclaration))
                  continue;
                if (parent.name.definition() !== def)
                  continue;
                if (in_try(level, parent))
                  break;
                return strip_assignment(def);
              }
            } while (is_tail(node, parent));
        }
      }
      if (compressor.option("sequences")) {
        var seq = self.lift_sequences(compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (compressor.option("assignments")) {
        if (self.operator == "=" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {
          if (self.right.left instanceof AST_SymbolRef && self.right.left.name == self.left.name && ASSIGN_OPS[self.right.operator]) {
            return make_compound(self.right.right);
          }
          if (self.right.right instanceof AST_SymbolRef && self.right.right.name == self.left.name && ASSIGN_OPS_COMMUTATIVE[self.right.operator] && !self.right.left.has_side_effects(compressor)) {
            return make_compound(self.right.left);
          }
        }
        if ((self.operator == "-=" || self.operator == "+=" && (self.left.is_boolean(compressor) || self.left.is_number(compressor))) && self.right instanceof AST_Number && self.right.value == 1) {
          var op = self.operator.slice(0, -1);
          return make_node(AST_UnaryPrefix, self, {
            operator: op + op,
            expression: self.left
          });
        }
      }
      return try_evaluate(compressor, self);
      function is_tail(node2, parent2) {
        if (parent2 instanceof AST_Binary)
          switch (node2) {
            case parent2.left:
              return parent2.right.is_constant_expression(scope);
            case parent2.right:
              return true;
            default:
              return false;
          }
        if (parent2 instanceof AST_Conditional)
          switch (node2) {
            case parent2.condition:
              return parent2.consequent.is_constant_expression(scope) && parent2.alternative.is_constant_expression(scope);
            case parent2.consequent:
            case parent2.alternative:
              return true;
            default:
              return false;
          }
        if (parent2 instanceof AST_Sequence) {
          var exprs2 = parent2.expressions;
          var stop = exprs2.indexOf(node2);
          if (stop < 0)
            return false;
          for (var i = exprs2.length;--i > stop; ) {
            if (!exprs2[i].is_constant_expression(scope))
              return false;
          }
          return true;
        }
        return parent2 instanceof AST_UnaryPrefix;
      }
      function is_tail_block(stat2, parent2) {
        if (parent2 instanceof AST_BlockStatement)
          return is_last_statement(parent2.body, stat2);
        if (parent2 instanceof AST_Catch)
          return is_last_statement(parent2.body, stat2);
        if (parent2 instanceof AST_Finally)
          return is_last_statement(parent2.body, stat2);
        if (parent2 instanceof AST_If)
          return parent2.body === stat2 || parent2.alternative === stat2;
        if (parent2 instanceof AST_Try)
          return parent2.bfinally ? parent2.bfinally === stat2 : parent2.bcatch === stat2;
      }
      function in_try(level2, node2, sync) {
        var right = self.right;
        self.right = make_node(AST_Null, right);
        var may_throw = node2.may_throw(compressor);
        self.right = right;
        return find_try(compressor, level2, node2, scope, may_throw, sync);
      }
      function make_compound(rhs) {
        var fixed = self.left.fixed;
        if (fixed)
          fixed.to_binary = replace_ref(function(node2) {
            return node2.left;
          }, fixed);
        return make_node(AST_Assign, self, {
          operator: self.right.operator + "=",
          left: self.left,
          right: rhs
        });
      }
      function strip_assignment(def2) {
        if (def2)
          def2.fixed = false;
        return (self.operator != "=" ? make_node(AST_Binary, self, {
          operator: self.operator.slice(0, -1),
          left: self.left,
          right: self.right
        }) : maintain_this_binding(compressor.parent(), self, self.right)).optimize(compressor);
      }
    });
    OPT(AST_Conditional, function(self, compressor) {
      if (compressor.option("sequences") && self.condition instanceof AST_Sequence) {
        var expressions = self.condition.expressions.slice();
        var node = self.clone();
        node.condition = expressions.pop();
        expressions.push(node);
        return make_sequence(self, expressions).optimize(compressor);
      }
      if (!compressor.option("conditionals"))
        return self;
      var condition = self.condition;
      if (compressor.option("booleans") && !condition.has_side_effects(compressor)) {
        mark_duplicate_condition(compressor, condition);
      }
      condition = fuzzy_eval(compressor, condition);
      if (!condition) {
        AST_Node.warn("Condition always false [{start}]", self);
        return make_sequence(self, [self.condition, self.alternative]).optimize(compressor);
      } else if (!(condition instanceof AST_Node)) {
        AST_Node.warn("Condition always true [{start}]", self);
        return make_sequence(self, [self.condition, self.consequent]).optimize(compressor);
      }
      var first = first_in_statement(compressor);
      var negated = condition.negate(compressor, first);
      if ((first ? best_of_statement : best_of_expression)(condition, negated) === negated) {
        self = make_node(AST_Conditional, self, {
          condition: negated,
          consequent: self.alternative,
          alternative: self.consequent
        });
        negated = condition;
        condition = self.condition;
      }
      var consequent = self.consequent;
      var alternative = self.alternative;
      var cond_lhs = extract_lhs(condition, compressor);
      if (repeatable(compressor, cond_lhs)) {
        if (cond_lhs.equals(consequent))
          return make_node(AST_Binary, self, {
            operator: "||",
            left: condition,
            right: alternative
          }).optimize(compressor);
        if (cond_lhs.equals(alternative))
          return make_node(AST_Binary, self, {
            operator: "&&",
            left: condition,
            right: consequent
          }).optimize(compressor);
      }
      var seq_tail = consequent.tail_node();
      if (seq_tail instanceof AST_Assign) {
        var is_eq = seq_tail.operator == "=";
        var alt_tail = is_eq ? alternative.tail_node() : alternative;
        if ((is_eq || consequent === seq_tail) && alt_tail instanceof AST_Assign && seq_tail.operator == alt_tail.operator && seq_tail.left.equals(alt_tail.left) && (is_eq && seq_tail.left instanceof AST_SymbolRef || !condition.has_side_effects(compressor) && can_shift_lhs_of_tail(consequent) && can_shift_lhs_of_tail(alternative))) {
          return make_node(AST_Assign, self, {
            operator: seq_tail.operator,
            left: seq_tail.left,
            right: make_node(AST_Conditional, self, {
              condition,
              consequent: pop_lhs(consequent),
              alternative: pop_lhs(alternative)
            })
          });
        }
      }
      var alt_tail = alternative.tail_node();
      if (seq_tail.equals(alt_tail))
        return make_sequence(self, consequent.equals(alternative) ? [
          condition,
          consequent
        ] : [
          make_node(AST_Conditional, self, {
            condition,
            consequent: pop_seq(consequent),
            alternative: pop_seq(alternative)
          }),
          alt_tail
        ]).optimize(compressor);
      var combined = combine_tail(consequent, alternative, true);
      if (combined)
        return combined;
      var arg_index;
      if (consequent instanceof AST_Call && alternative.TYPE == consequent.TYPE && (arg_index = arg_diff(consequent, alternative)) >= 0 && consequent.expression.equals(alternative.expression) && !condition.has_side_effects(compressor) && !consequent.expression.has_side_effects(compressor)) {
        var node = consequent.clone();
        var arg = consequent.args[arg_index];
        node.args[arg_index] = arg instanceof AST_Spread ? make_node(AST_Spread, self, {
          expression: make_node(AST_Conditional, self, {
            condition,
            consequent: arg.expression,
            alternative: alternative.args[arg_index].expression
          })
        }) : make_node(AST_Conditional, self, {
          condition,
          consequent: arg,
          alternative: alternative.args[arg_index]
        });
        return node;
      }
      if (seq_tail instanceof AST_Conditional && seq_tail.alternative.equals(alternative)) {
        return make_node(AST_Conditional, self, {
          condition: make_node(AST_Binary, self, {
            left: condition,
            operator: "&&",
            right: fuse(consequent, seq_tail, "condition")
          }),
          consequent: seq_tail.consequent,
          alternative: merge_expression(seq_tail.alternative, alternative)
        });
      }
      if (seq_tail instanceof AST_Conditional && seq_tail.consequent.equals(alternative)) {
        return make_node(AST_Conditional, self, {
          condition: make_node(AST_Binary, self, {
            left: negated,
            operator: "||",
            right: fuse(consequent, seq_tail, "condition")
          }),
          consequent: merge_expression(seq_tail.consequent, alternative),
          alternative: seq_tail.alternative
        });
      }
      if (alt_tail instanceof AST_Conditional && consequent.equals(alt_tail.consequent)) {
        return make_node(AST_Conditional, self, {
          condition: make_node(AST_Binary, self, {
            left: condition,
            operator: "||",
            right: fuse(alternative, alt_tail, "condition")
          }),
          consequent: merge_expression(consequent, alt_tail.consequent),
          alternative: alt_tail.alternative
        });
      }
      if (alt_tail instanceof AST_Conditional && consequent.equals(alt_tail.alternative)) {
        return make_node(AST_Conditional, self, {
          condition: make_node(AST_Binary, self, {
            left: negated,
            operator: "&&",
            right: fuse(alternative, alt_tail, "condition")
          }),
          consequent: alt_tail.consequent,
          alternative: merge_expression(consequent, alt_tail.alternative)
        });
      }
      if (seq_tail instanceof AST_Binary && seq_tail.operator == "&&" && seq_tail.right.equals(alternative)) {
        return make_node(AST_Binary, self, {
          operator: "&&",
          left: make_node(AST_Binary, self, {
            operator: "||",
            left: negated,
            right: fuse(consequent, seq_tail, "left")
          }),
          right: merge_expression(seq_tail.right, alternative)
        }).optimize(compressor);
      }
      if (seq_tail instanceof AST_Binary && seq_tail.operator == "||" && seq_tail.right.equals(alternative)) {
        return make_node(AST_Binary, self, {
          operator: "||",
          left: make_node(AST_Binary, self, {
            operator: "&&",
            left: condition,
            right: fuse(consequent, seq_tail, "left")
          }),
          right: merge_expression(seq_tail.right, alternative)
        }).optimize(compressor);
      }
      if (alt_tail instanceof AST_Binary && alt_tail.operator == "&&" && alt_tail.right.equals(consequent)) {
        return make_node(AST_Binary, self, {
          operator: "&&",
          left: make_node(AST_Binary, self, {
            operator: "||",
            left: condition,
            right: fuse(alternative, alt_tail, "left")
          }),
          right: merge_expression(consequent, alt_tail.right)
        }).optimize(compressor);
      }
      if (alt_tail instanceof AST_Binary && alt_tail.operator == "||" && alt_tail.right.equals(consequent)) {
        return make_node(AST_Binary, self, {
          operator: "||",
          left: make_node(AST_Binary, self, {
            operator: "&&",
            left: negated,
            right: fuse(alternative, alt_tail, "left")
          }),
          right: merge_expression(consequent, alt_tail.right)
        }).optimize(compressor);
      }
      var in_bool = compressor.option("booleans") && compressor.in_boolean_context();
      if (is_true(consequent)) {
        if (is_false(alternative))
          return booleanize(condition);
        return make_node(AST_Binary, self, {
          operator: "||",
          left: booleanize(condition),
          right: alternative
        }).optimize(compressor);
      }
      if (is_false(consequent)) {
        if (is_true(alternative))
          return booleanize(condition.negate(compressor));
        return make_node(AST_Binary, self, {
          operator: "&&",
          left: booleanize(condition.negate(compressor)),
          right: alternative
        }).optimize(compressor);
      }
      if (is_true(alternative))
        return make_node(AST_Binary, self, {
          operator: "||",
          left: booleanize(condition.negate(compressor)),
          right: consequent
        }).optimize(compressor);
      if (is_false(alternative))
        return make_node(AST_Binary, self, {
          operator: "&&",
          left: booleanize(condition),
          right: consequent
        }).optimize(compressor);
      if (compressor.option("typeofs"))
        mark_locally_defined(condition, consequent, alternative);
      return self;
      function booleanize(node2) {
        if (node2.is_boolean(compressor))
          return node2;
        return make_node(AST_UnaryPrefix, node2, {
          operator: "!",
          expression: node2.negate(compressor)
        });
      }
      function is_true(node2) {
        return node2 instanceof AST_True || in_bool && node2 instanceof AST_Constant && node2.value || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && !node2.expression.value;
      }
      function is_false(node2) {
        return node2 instanceof AST_False || in_bool && (node2 instanceof AST_Constant && !node2.value || node2 instanceof AST_UnaryPrefix && node2.operator == "void" && !node2.expression.has_side_effects(compressor)) || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && node2.expression.value;
      }
      function arg_diff(consequent2, alternative2) {
        var a2 = consequent2.args;
        var b5 = alternative2.args;
        var len = a2.length;
        if (len != b5.length)
          return -2;
        for (var i = 0;i < len; i++) {
          if (!a2[i].equals(b5[i])) {
            if (a2[i] instanceof AST_Spread !== b5[i] instanceof AST_Spread)
              return -3;
            for (var j2 = i + 1;j2 < len; j2++) {
              if (!a2[j2].equals(b5[j2]))
                return -2;
            }
            return i;
          }
        }
        return -1;
      }
      function fuse(node2, tail, prop) {
        if (node2 === tail)
          return tail[prop];
        var exprs = node2.expressions.slice(0, -1);
        exprs.push(tail[prop]);
        return make_sequence(node2, exprs);
      }
      function is_tail_equivalent(consequent2, alternative2) {
        if (consequent2.TYPE != alternative2.TYPE)
          return;
        if (consequent2.optional != alternative2.optional)
          return;
        if (consequent2 instanceof AST_Call) {
          if (arg_diff(consequent2, alternative2) != -1)
            return;
          return consequent2.TYPE != "Call" || !(consequent2.expression instanceof AST_PropAccess || alternative2.expression instanceof AST_PropAccess) || is_tail_equivalent(consequent2.expression, alternative2.expression);
        }
        if (!(consequent2 instanceof AST_PropAccess))
          return;
        var p2 = consequent2.property;
        var q2 = alternative2.property;
        return (p2 instanceof AST_Node ? p2.equals(q2) : p2 == q2) && !(consequent2.expression instanceof AST_Super || alternative2.expression instanceof AST_Super);
      }
      function combine_tail(consequent2, alternative2, top) {
        var seq_tail2 = consequent2.tail_node();
        var alt_tail2 = alternative2.tail_node();
        if (!is_tail_equivalent(seq_tail2, alt_tail2))
          return !top && make_node(AST_Conditional, self, {
            condition,
            consequent: consequent2,
            alternative: alternative2
          });
        var node2 = seq_tail2.clone();
        var seq_expr = fuse(consequent2, seq_tail2, "expression");
        var alt_expr = fuse(alternative2, alt_tail2, "expression");
        var combined2 = combine_tail(seq_expr, alt_expr);
        if (seq_tail2.expression instanceof AST_Sequence) {
          combined2 = maintain_this_binding(seq_tail2, seq_tail2.expression, combined2);
        }
        node2.expression = combined2;
        return node2;
      }
      function can_shift_lhs_of_tail(node2) {
        return node2 === node2.tail_node() || all(node2.expressions.slice(0, -1), function(expr) {
          return !expr.has_side_effects(compressor);
        });
      }
      function pop_lhs(node2) {
        if (!(node2 instanceof AST_Sequence))
          return node2.right;
        var exprs = node2.expressions.slice();
        exprs.push(exprs.pop().right);
        return make_sequence(node2, exprs);
      }
      function pop_seq(node2) {
        if (!(node2 instanceof AST_Sequence))
          return make_node(AST_Number, node2, { value: 0 });
        return make_sequence(node2, node2.expressions.slice(0, -1));
      }
    });
    OPT(AST_Boolean, function(self, compressor) {
      if (!compressor.option("booleans"))
        return self;
      if (compressor.in_boolean_context())
        return make_node(AST_Number, self, { value: +self.value });
      var p2 = compressor.parent();
      if (p2 instanceof AST_Binary && (p2.operator == "==" || p2.operator == "!=")) {
        AST_Node.warn("Non-strict equality against boolean: {operator} {value} [{start}]", {
          operator: p2.operator,
          value: self.value,
          start: p2.start
        });
        return make_node(AST_Number, self, { value: +self.value });
      }
      return make_node(AST_UnaryPrefix, self, {
        operator: "!",
        expression: make_node(AST_Number, self, { value: 1 - self.value })
      });
    });
    OPT(AST_Spread, function(self, compressor) {
      var exp = self.expression;
      if (compressor.option("spreads") && exp instanceof AST_Array && !(compressor.parent() instanceof AST_Object)) {
        return List.splice(exp.elements.map(function(node) {
          return node instanceof AST_Hole ? make_node(AST_Undefined, node).optimize(compressor) : node;
        }));
      }
      return self;
    });
    function safe_to_flatten(value, compressor) {
      if (!value)
        return false;
      var parent = compressor.parent();
      if (parent.TYPE != "Call")
        return true;
      if (parent.expression !== compressor.self())
        return true;
      if (value instanceof AST_SymbolRef) {
        value = value.fixed_value();
        if (!value)
          return false;
      }
      return value instanceof AST_Lambda && !value.contains_this();
    }
    OPT(AST_Sub, function(self, compressor) {
      var expr = self.expression;
      var prop = self.property;
      var terminated = trim_optional_chain(self, compressor);
      if (terminated)
        return terminated;
      if (compressor.option("properties")) {
        var key = prop.evaluate(compressor);
        if (key !== prop) {
          if (typeof key == "string") {
            if (key == "undefined") {
              key = undefined;
            } else {
              var value = parseFloat(key);
              if (value.toString() == key) {
                key = value;
              }
            }
          }
          prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));
          var property = "" + key;
          if (is_identifier_string(property) && property.length <= prop.print_to_string().length + 1) {
            return make_node(AST_Dot, self, {
              optional: self.optional,
              expression: expr,
              property,
              quoted: true
            }).optimize(compressor);
          }
        }
      }
      var parent = compressor.parent();
      var assigned = is_lhs(compressor.self(), parent);
      var def, fn, fn_parent, index;
      if (compressor.option("arguments") && expr instanceof AST_SymbolRef && is_arguments(def = expr.definition()) && !expr.in_arg && prop instanceof AST_Number && Math.floor(index = prop.value) == index && (fn = def.scope) === find_lambda() && fn.uses_arguments < (assigned ? 2 : 3)) {
        if (parent instanceof AST_UnaryPrefix && parent.operator == "delete") {
          if (!def.deleted)
            def.deleted = [];
          def.deleted[index] = true;
        }
        var argname = fn.argnames[index];
        if (def.deleted && def.deleted[index]) {
          argname = null;
        } else if (argname) {
          var arg_def;
          if (!(argname instanceof AST_SymbolFunarg) || argname.name == "await" || expr.scope.find_variable(argname.name) !== (arg_def = argname.definition())) {
            argname = null;
          } else if (compressor.has_directive("use strict") || fn.name || fn.rest || !(fn_parent instanceof AST_Call && index < fn_parent.args.length && all(fn_parent.args.slice(0, index + 1), function(arg) {
            return !(arg instanceof AST_Spread);
          })) || !all(fn.argnames, function(argname2) {
            return argname2 instanceof AST_SymbolFunarg;
          })) {
            if (has_reassigned() || arg_def.assignments || arg_def.orig.length > 1)
              argname = null;
          }
        } else if ((assigned || !has_reassigned()) && index < fn.argnames.length + 5 && compressor.drop_fargs(fn, fn_parent) && !fn.rest) {
          while (index >= fn.argnames.length) {
            argname = fn.make_var(AST_SymbolFunarg, fn, "argument_" + fn.argnames.length);
            fn.argnames.push(argname);
          }
        }
        if (argname && find_if(function(node) {
          return node.name === argname.name;
        }, fn.argnames) === argname) {
          if (assigned)
            def.reassigned--;
          var sym = make_node(AST_SymbolRef, argname);
          sym.reference();
          argname.unused = undefined;
          return sym;
        }
      }
      if (assigned)
        return self;
      if (compressor.option("sequences") && parent.TYPE != "Call" && !(parent instanceof AST_ForEnumeration && parent.init === self)) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (key !== prop) {
        var sub = self.flatten_object(property, compressor);
        if (sub) {
          expr = self.expression = sub.expression;
          prop = self.property = sub.property;
        }
      }
      var elements;
      if (compressor.option("properties") && compressor.option("side_effects") && prop instanceof AST_Number && expr instanceof AST_Array && all(elements = expr.elements, function(value2) {
        return !(value2 instanceof AST_Spread);
      })) {
        var index = prop.value;
        var retValue = elements[index];
        if (safe_to_flatten(retValue, compressor)) {
          var is_hole = retValue instanceof AST_Hole;
          var flatten = !is_hole;
          var values = [];
          for (var i = elements.length;--i > index; ) {
            var value = elements[i].drop_side_effect_free(compressor);
            if (value) {
              values.unshift(value);
              if (flatten && value.has_side_effects(compressor))
                flatten = false;
            }
          }
          if (!flatten)
            values.unshift(retValue);
          while (--i >= 0) {
            var value = elements[i].drop_side_effect_free(compressor);
            if (value) {
              values.unshift(value);
            } else if (is_hole) {
              values.unshift(make_node(AST_Hole, elements[i]));
            } else {
              index--;
            }
          }
          if (flatten) {
            values.push(retValue);
            return make_sequence(self, values).optimize(compressor);
          }
          return make_node(AST_Sub, self, {
            expression: make_node(AST_Array, expr, { elements: values }),
            property: make_node(AST_Number, prop, { value: index })
          });
        }
      }
      return try_evaluate(compressor, self);
      function find_lambda() {
        var i2 = 0, p2;
        while (p2 = compressor.parent(i2++)) {
          if (p2 instanceof AST_Lambda) {
            if (p2 instanceof AST_Accessor)
              return;
            if (is_arrow(p2))
              continue;
            fn_parent = compressor.parent(i2);
            return p2;
          }
        }
      }
      function has_reassigned() {
        return !compressor.option("reduce_vars") || def.reassigned;
      }
    });
    AST_LambdaExpression.DEFMETHOD("contains_super", function() {
      var result = false;
      var self = this;
      self.walk(new TreeWalker(function(node) {
        if (result)
          return true;
        if (node instanceof AST_Super)
          return result = true;
        if (node !== self && node instanceof AST_Scope && !is_arrow(node))
          return true;
      }));
      return result;
    });
    (function(def) {
      def(AST_Arrow, return_false);
      def(AST_AsyncArrow, return_false);
      def(AST_Node, function() {
        var result = false;
        var self = this;
        self.walk(new TreeWalker(function(node) {
          if (result)
            return true;
          if (node instanceof AST_This)
            return result = true;
          if (node !== self && node instanceof AST_Scope && !is_arrow(node))
            return true;
        }));
        return result;
      });
    })(function(node, func) {
      node.DEFMETHOD("contains_this", func);
    });
    function can_hoist_property(prop) {
      return prop instanceof AST_ObjectKeyVal && typeof prop.key == "string" && !(prop instanceof AST_ObjectMethod && prop.value.contains_super());
    }
    AST_PropAccess.DEFMETHOD("flatten_object", function(key, compressor) {
      if (!compressor.option("properties"))
        return;
      if (key === "__proto__")
        return;
      var self = this;
      var expr = self.expression;
      if (!(expr instanceof AST_Object))
        return;
      var props = expr.properties;
      for (var i = props.length;--i >= 0; ) {
        var prop = props[i];
        if (prop.key !== key)
          continue;
        if (!all(props, can_hoist_property))
          return;
        if (!safe_to_flatten(prop.value, compressor))
          return;
        var call, scope, values = [];
        for (var j2 = 0;j2 < props.length; j2++) {
          var value = props[j2].value;
          if (props[j2] instanceof AST_ObjectMethod) {
            var arrow = !(value.uses_arguments || is_generator(value) || value.contains_this());
            if (arrow) {
              if (!scope)
                scope = compressor.find_parent(AST_Scope);
              var avoid = avoid_await_yield(compressor, scope);
              value.each_argname(function(argname) {
                if (avoid[argname.name])
                  arrow = false;
              });
            }
            var ctor;
            if (arrow) {
              ctor = is_async(value) ? AST_AsyncArrow : AST_Arrow;
            } else if (i != j2 || (call = compressor.parent()) instanceof AST_Call && call.expression === self) {
              ctor = value.CTOR;
            } else {
              return;
            }
            value = make_node(ctor, value);
          }
          values.push(value);
        }
        return make_node(AST_Sub, self, {
          expression: make_node(AST_Array, expr, { elements: values }),
          property: make_node(AST_Number, self, { value: i })
        });
      }
    });
    OPT(AST_Dot, function(self, compressor) {
      if (self.property == "arguments" || self.property == "caller") {
        AST_Node.warn("Function.prototype.{property} not supported [{start}]", self);
      }
      var parent = compressor.parent();
      if (is_lhs(compressor.self(), parent))
        return self;
      var terminated = trim_optional_chain(self, compressor);
      if (terminated)
        return terminated;
      if (compressor.option("sequences") && parent.TYPE != "Call" && !(parent instanceof AST_ForEnumeration && parent.init === self)) {
        var seq = lift_sequence_in_expression(self, compressor);
        if (seq !== self)
          return seq.optimize(compressor);
      }
      if (compressor.option("unsafe_proto") && self.expression instanceof AST_Dot && self.expression.property == "prototype") {
        var exp = self.expression.expression;
        if (is_undeclared_ref(exp))
          switch (exp.name) {
            case "Array":
              self.expression = make_node(AST_Array, self.expression, { elements: [] });
              break;
            case "Function":
              self.expression = make_node(AST_Function, self.expression, {
                argnames: [],
                body: []
              }).init_vars(exp.scope);
              break;
            case "Number":
              self.expression = make_node(AST_Number, self.expression, { value: 0 });
              break;
            case "Object":
              self.expression = make_node(AST_Object, self.expression, { properties: [] });
              break;
            case "RegExp":
              self.expression = make_node(AST_RegExp, self.expression, { value: /t/ });
              break;
            case "String":
              self.expression = make_node(AST_String, self.expression, { value: "" });
              break;
          }
      }
      var sub = self.flatten_object(self.property, compressor);
      if (sub)
        return sub.optimize(compressor);
      return try_evaluate(compressor, self);
    });
    OPT(AST_DestructuredArray, function(self, compressor) {
      if (compressor.option("rests") && self.rest instanceof AST_DestructuredArray) {
        return make_node(AST_DestructuredArray, self, {
          elements: self.elements.concat(self.rest.elements),
          rest: self.rest.rest
        });
      }
      return self;
    });
    OPT(AST_DestructuredKeyVal, function(self, compressor) {
      if (compressor.option("objects")) {
        var key = self.key;
        if (key instanceof AST_Node) {
          key = key.evaluate(compressor);
          if (key !== self.key)
            self.key = "" + key;
        }
      }
      return self;
    });
    OPT(AST_Object, function(self, compressor) {
      if (!compressor.option("objects"))
        return self;
      var changed = false;
      var found = false;
      var generated = false;
      var keep_duplicate = compressor.has_directive("use strict");
      var keys = [];
      var map = new Dictionary;
      var values = [];
      self.properties.forEach(function(prop) {
        if (!(prop instanceof AST_Spread))
          return process2(prop);
        found = true;
        var exp = prop.expression;
        if (compressor.option("spreads") && exp instanceof AST_Object && all(exp.properties, function(prop2) {
          if (prop2 instanceof AST_ObjectGetter)
            return false;
          if (prop2 instanceof AST_Spread)
            return false;
          if (prop2.key !== "__proto__")
            return true;
          if (prop2 instanceof AST_ObjectSetter)
            return true;
          return !prop2.value.has_side_effects(compressor);
        })) {
          changed = true;
          exp.properties.forEach(function(prop2) {
            var key = prop2.key;
            var setter = prop2 instanceof AST_ObjectSetter;
            if (key === "__proto__") {
              if (!setter)
                return;
              key = make_node_from_constant(key, prop2);
            }
            process2(setter ? make_node(AST_ObjectKeyVal, prop2, {
              key,
              value: make_node(AST_Undefined, prop2).optimize(compressor)
            }) : prop2);
          });
        } else {
          generated = true;
          flush();
          values.push(prop);
        }
      });
      flush();
      if (!changed)
        return self;
      if (found && generated && values.length == 1) {
        var value = values[0];
        if (value instanceof AST_ObjectProperty && value.key instanceof AST_Number) {
          value.key = "" + value.key.value;
        }
      }
      return make_node(AST_Object, self, { properties: values });
      function flush() {
        keys.forEach(function(key) {
          var props = map.get(key);
          switch (props.length) {
            case 0:
              return;
            case 1:
              return values.push(props[0]);
          }
          changed = true;
          var tail = keep_duplicate && !generated && props.pop();
          values.push(props.length == 1 ? props[0] : make_node(AST_ObjectKeyVal, self, {
            key: props[0].key,
            value: make_sequence(self, props.map(function(prop) {
              return prop.value;
            }))
          }));
          if (tail)
            values.push(tail);
          props.length = 0;
        });
        keys = [];
        map = new Dictionary;
      }
      function process2(prop) {
        var key = prop.key;
        if (key instanceof AST_Node) {
          found = true;
          key = key.evaluate(compressor);
          if (key === prop.key || key === "__proto__") {
            generated = true;
          } else {
            key = prop.key = "" + key;
          }
        }
        if (can_hoist_property(prop)) {
          if (prop.value.has_side_effects(compressor))
            flush();
          keys.push(key);
          map.add(key, prop);
        } else {
          flush();
          values.push(prop);
        }
        if (found && !generated && typeof key == "string" && RE_POSITIVE_INTEGER.test(key)) {
          generated = true;
          if (map.has(key))
            prop = map.get(key)[0];
          prop.key = make_node(AST_Number, prop, { value: +key });
        }
      }
    });
    function flatten_var(name) {
      var redef = name.definition().redefined();
      if (redef) {
        name = name.clone();
        name.thedef = redef;
      }
      return name;
    }
    function has_arg_refs(fn, node) {
      var found = false;
      node.walk(new TreeWalker(function(node2) {
        if (found)
          return true;
        if (node2 instanceof AST_SymbolRef && fn.variables.get(node2.name) === node2.definition()) {
          return found = true;
        }
      }));
      return found;
    }
    function insert_assign(def, assign) {
      var visited = [];
      def.references.forEach(function(ref) {
        var fixed = ref.fixed;
        if (!fixed || !push_uniq(visited, fixed))
          return;
        if (fixed.assigns) {
          fixed.assigns.unshift(assign);
        } else {
          fixed.assigns = [assign];
        }
      });
    }
    function init_ref(compressor, name) {
      var sym = make_node(AST_SymbolRef, name);
      var assign = make_node(AST_Assign, name, {
        operator: "=",
        left: sym,
        right: make_node(AST_Undefined, name).transform(compressor)
      });
      var def = name.definition();
      if (def.fixed) {
        sym.fixed = function() {
          return assign.right;
        };
        sym.fixed.assigns = [assign];
        insert_assign(def, assign);
      }
      def.assignments++;
      def.references.push(sym);
      return assign;
    }
    (function(def) {
      def(AST_Node, noop);
      def(AST_Assign, noop);
      def(AST_Await, function(compressor, scope, no_return, in_loop) {
        if (!compressor.option("awaits"))
          return;
        var self = this;
        var inlined = self.expression.try_inline(compressor, scope, no_return, in_loop, true);
        if (!inlined)
          return;
        if (!no_return)
          scan_local_returns(inlined, function(node) {
            node.in_bool = false;
            var value = node.value;
            if (value instanceof AST_Await)
              return;
            node.value = make_node(AST_Await, self, {
              expression: value || make_node(AST_Undefined, node).transform(compressor)
            });
          });
        return aborts(inlined) ? inlined : make_node(AST_BlockStatement, self, {
          body: [inlined, make_node(AST_SimpleStatement, self, {
            body: make_node(AST_Await, self, { expression: make_node(AST_Number, self, { value: 0 }) })
          })]
        });
      });
      def(AST_Binary, function(compressor, scope, no_return, in_loop, in_await) {
        if (no_return === undefined)
          return;
        var self = this;
        var op = self.operator;
        if (!lazy_op[op])
          return;
        var inlined = self.right.try_inline(compressor, scope, no_return, in_loop, in_await);
        if (!inlined)
          return;
        return make_node(AST_If, self, {
          condition: make_condition(self.left),
          body: inlined,
          alternative: no_return ? null : make_node(AST_Return, self, {
            value: make_node(AST_Undefined, self).transform(compressor)
          })
        });
        function make_condition(cond) {
          switch (op) {
            case "&&":
              return cond;
            case "||":
              return cond.negate(compressor);
            case "??":
              return make_node(AST_Binary, self, {
                operator: "==",
                left: make_node(AST_Null, self),
                right: cond
              });
          }
        }
      });
      def(AST_BlockStatement, function(compressor, scope, no_return, in_loop) {
        if (no_return)
          return;
        if (!this.variables)
          return;
        var body = this.body;
        var last = body.length - 1;
        if (last < 0)
          return;
        var inlined = body[last].try_inline(compressor, this, no_return, in_loop);
        if (!inlined)
          return;
        body[last] = inlined;
        return this;
      });
      def(AST_Call, function(compressor, scope, no_return, in_loop, in_await) {
        if (compressor.option("inline") < 4)
          return;
        var call = this;
        if (call.is_expr_pure(compressor))
          return;
        var fn = call.expression;
        if (!(fn instanceof AST_LambdaExpression))
          return;
        if (fn.name)
          return;
        if (fn.uses_arguments)
          return;
        if (fn.pinned())
          return;
        if (is_generator(fn))
          return;
        var arrow = is_arrow(fn);
        if (arrow && fn.value)
          return;
        if (fn.body[0] instanceof AST_Directive)
          return;
        if (fn.contains_this())
          return;
        if (!scope)
          scope = find_scope(compressor);
        var defined = new Dictionary;
        defined.set("NaN", true);
        while (!(scope instanceof AST_Scope)) {
          scope.variables.each(function(def2) {
            defined.set(def2.name, true);
          });
          scope = scope.parent_scope;
        }
        if (!member(scope, compressor.stack))
          return;
        if (scope.pinned() && fn.variables.size() > (arrow ? 0 : 1))
          return;
        if (scope instanceof AST_Toplevel) {
          if (fn.variables.size() > (arrow ? 0 : 1)) {
            if (!compressor.toplevel.vars)
              return;
            if (fn.functions.size() > 0 && !compressor.toplevel.funcs)
              return;
          }
          defined.set("arguments", true);
        }
        var async = !in_await && is_async(fn);
        if (async) {
          if (!compressor.option("awaits"))
            return;
          if (!is_async(scope))
            return;
          if (call.may_throw(compressor))
            return;
        }
        var names = scope.var_names();
        if (in_loop)
          in_loop = [];
        if (!fn.variables.all(function(def2, name) {
          if (in_loop)
            in_loop.push(def2);
          if (!defined.has(name) && !names.has(name))
            return true;
          return !arrow && name == "arguments" && def2.orig.length == 1;
        }))
          return;
        if (in_loop && in_loop.length > 0 && is_reachable(fn, in_loop))
          return;
        var simple_argnames = true;
        if (!all(fn.argnames, function(argname) {
          var abort = false;
          var tw = new TreeWalker(function(node) {
            if (abort)
              return true;
            if (node instanceof AST_DefaultValue) {
              if (has_arg_refs(fn, node.value))
                return abort = true;
              node.name.walk(tw);
              return true;
            }
            if (node instanceof AST_DestructuredKeyVal) {
              if (node.key instanceof AST_Node && has_arg_refs(fn, node.key))
                return abort = true;
              node.value.walk(tw);
              return true;
            }
            if (node instanceof AST_SymbolFunarg && !all(node.definition().orig, function(sym) {
              return !(sym instanceof AST_SymbolDefun);
            }))
              return abort = true;
          });
          argname.walk(tw);
          if (abort)
            return false;
          if (!(argname instanceof AST_SymbolFunarg))
            simple_argnames = false;
          return true;
        }))
          return;
        if (fn.rest) {
          if (has_arg_refs(fn, fn.rest))
            return;
          simple_argnames = false;
        }
        var verify_body;
        if (no_return) {
          verify_body = function(stat) {
            var abort = false;
            stat.walk(new TreeWalker(function(node) {
              if (abort)
                return true;
              if (async && (node instanceof AST_Await || node instanceof AST_ForAwaitOf) || node instanceof AST_Return) {
                return abort = true;
              }
              if (node instanceof AST_Scope)
                return true;
            }));
            return !abort;
          };
        } else if (in_await || is_async(fn) || in_async_generator(scope)) {
          verify_body = function(stat) {
            var abort = false;
            var find_return = new TreeWalker(function(node) {
              if (abort)
                return true;
              if (node instanceof AST_Return)
                return abort = true;
              if (node instanceof AST_Scope)
                return true;
            });
            stat.walk(new TreeWalker(function(node) {
              if (abort)
                return true;
              if (node instanceof AST_Try) {
                if (node.bfinally && all(node.body, function(stat2) {
                  stat2.walk(find_return);
                  return !abort;
                }) && node.bcatch)
                  node.bcatch.walk(find_return);
                return true;
              }
              if (node instanceof AST_Scope)
                return true;
            }));
            return !abort;
          };
        }
        if (verify_body && !all(fn.body, verify_body))
          return;
        if (!safe_from_await_yield(fn, avoid_await_yield(compressor, scope)))
          return;
        fn.functions.each(function(def2, name) {
          scope.functions.set(name, def2);
        });
        var body = [];
        fn.variables.each(function(def2, name) {
          if (!arrow && name == "arguments" && def2.orig.length == 1)
            return;
          names.set(name, true);
          scope.enclosed.push(def2);
          scope.variables.set(name, def2);
          def2.single_use = false;
          if (!in_loop)
            return;
          if (def2.references.length == def2.replaced)
            return;
          if (def2.orig.length == def2.eliminated)
            return;
          if (def2.orig.length == 1 && fn.functions.has(name))
            return;
          if (!all(def2.orig, function(sym2) {
            if (sym2 instanceof AST_SymbolConst)
              return false;
            if (sym2 instanceof AST_SymbolFunarg)
              return !sym2.unused && def2.scope.resolve() !== fn;
            if (sym2 instanceof AST_SymbolLet)
              return false;
            return true;
          }))
            return;
          var sym = def2.orig[0];
          if (sym instanceof AST_SymbolCatch)
            return;
          body.push(make_node(AST_SimpleStatement, sym, { body: init_ref(compressor, flatten_var(sym)) }));
        });
        var defs = Object.create(null), syms = new Dictionary;
        if (simple_argnames && all(call.args, function(arg) {
          return !(arg instanceof AST_Spread);
        })) {
          var values = call.args.slice();
          fn.argnames.forEach(function(argname) {
            var value = values.shift();
            if (argname.unused) {
              if (value)
                body.push(make_node(AST_SimpleStatement, call, { body: value }));
              return;
            }
            var defn = make_node(AST_VarDef, call, {
              name: argname.convert_symbol(AST_SymbolVar, process2),
              value: value || make_node(AST_Undefined, call).transform(compressor)
            });
            if (argname instanceof AST_SymbolFunarg)
              insert_assign(argname.definition(), defn);
            body.push(make_node(AST_Var, call, { definitions: [defn] }));
          });
          if (values.length)
            body.push(make_node(AST_SimpleStatement, call, {
              body: make_sequence(call, values)
            }));
        } else {
          body.push(make_node(AST_Var, call, {
            definitions: [make_node(AST_VarDef, call, {
              name: make_node(AST_DestructuredArray, call, {
                elements: fn.argnames.map(function(argname) {
                  if (argname.unused)
                    return make_node(AST_Hole, argname);
                  return argname.convert_symbol(AST_SymbolVar, process2);
                }),
                rest: fn.rest && fn.rest.convert_symbol(AST_SymbolVar, process2)
              }),
              value: make_node(AST_Array, call, { elements: call.args.slice() })
            })]
          }));
        }
        syms.each(function(orig, id) {
          var def2 = defs[id];
          [].unshift.apply(def2.orig, orig);
          def2.eliminated += orig.length;
        });
        [].push.apply(body, in_loop ? fn.body.filter(function(stat) {
          if (!(stat instanceof AST_LambdaDefinition))
            return true;
          var name = make_node(AST_SymbolVar, flatten_var(stat.name));
          var def2 = name.definition();
          def2.fixed = false;
          def2.orig.push(name);
          def2.eliminated++;
          body.push(make_node(AST_Var, stat, {
            definitions: [make_node(AST_VarDef, stat, {
              name,
              value: to_func_expr(stat, true)
            })]
          }));
          return false;
        }) : fn.body);
        var inlined = make_node(AST_BlockStatement, call, { body });
        if (!no_return) {
          if (async)
            scan_local_returns(inlined, function(node) {
              var value = node.value;
              if (is_undefined(value))
                return;
              node.value = make_node(AST_Await, call, { expression: value });
            });
          body.push(make_node(AST_Return, call, {
            value: in_async_generator(scope) ? make_node(AST_Undefined, call).transform(compressor) : null
          }));
        }
        return inlined;
        function process2(sym, argname) {
          var def2 = argname.definition();
          defs[def2.id] = def2;
          syms.add(def2.id, sym);
        }
      });
      def(AST_Conditional, function(compressor, scope, no_return, in_loop, in_await) {
        var self = this;
        var body = self.consequent.try_inline(compressor, scope, no_return, in_loop, in_await);
        var alt = self.alternative.try_inline(compressor, scope, no_return, in_loop, in_await);
        if (!body && !alt)
          return;
        return make_node(AST_If, self, {
          condition: self.condition,
          body: body || make_body(self.consequent),
          alternative: alt || make_body(self.alternative)
        });
        function make_body(value) {
          if (no_return)
            return make_node(AST_SimpleStatement, value, { body: value });
          return make_node(AST_Return, value, { value });
        }
      });
      def(AST_For, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, true, true);
        if (body)
          this.body = body;
        var inlined = this.init;
        if (inlined) {
          inlined = inlined.try_inline(compressor, scope, true, in_loop);
          if (inlined) {
            this.init = null;
            if (inlined instanceof AST_BlockStatement) {
              inlined.body.push(this);
              return inlined;
            }
            return make_node(AST_BlockStatement, inlined, { body: [inlined, this] });
          }
        }
        return body && this;
      });
      def(AST_ForEnumeration, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, true, true);
        if (body)
          this.body = body;
        var obj = this.object;
        if (obj instanceof AST_Sequence) {
          var inlined = inline_sequence(compressor, scope, true, in_loop, false, obj, 1);
          if (inlined) {
            this.object = obj.tail_node();
            inlined.body.push(this);
            return inlined;
          }
        }
        return body && this;
      });
      def(AST_If, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, no_return, in_loop);
        if (body)
          this.body = body;
        var alt = this.alternative;
        if (alt) {
          alt = alt.try_inline(compressor, scope, no_return, in_loop);
          if (alt)
            this.alternative = alt;
        }
        var cond = this.condition;
        if (cond instanceof AST_Sequence) {
          var inlined = inline_sequence(compressor, scope, true, in_loop, false, cond, 1);
          if (inlined) {
            this.condition = cond.tail_node();
            inlined.body.push(this);
            return inlined;
          }
        }
        return (body || alt) && this;
      });
      def(AST_IterationStatement, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, true, true);
        if (!body)
          return;
        this.body = body;
        return this;
      });
      def(AST_LabeledStatement, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, no_return, in_loop);
        if (!body)
          return;
        if (this.body instanceof AST_IterationStatement && body instanceof AST_BlockStatement) {
          var loop = body.body.pop();
          this.body = loop;
          body.body.push(this);
          return body;
        }
        this.body = body;
        return this;
      });
      def(AST_New, noop);
      def(AST_Return, function(compressor, scope, no_return, in_loop) {
        var value = this.value;
        return value && value.try_inline(compressor, scope, undefined, in_loop === "try");
      });
      function inline_sequence(compressor, scope, no_return, in_loop, in_await, node, skip) {
        var body = [], exprs = node.expressions, no_ret = no_return;
        for (var i = exprs.length - (skip || 0), j2 = i;--i >= 0; no_ret = true, in_await = false) {
          var inlined = exprs[i].try_inline(compressor, scope, no_ret, in_loop, in_await);
          if (!inlined)
            continue;
          flush();
          body.push(inlined);
        }
        if (body.length == 0)
          return;
        flush();
        if (!no_return && body[0] instanceof AST_SimpleStatement) {
          body[0] = make_node(AST_Return, node, { value: body[0].body });
        }
        return make_node(AST_BlockStatement, node, { body: body.reverse() });
        function flush() {
          if (j2 > i + 1)
            body.push(make_node(AST_SimpleStatement, node, {
              body: make_sequence(node, exprs.slice(i + 1, j2))
            }));
          j2 = i;
        }
      }
      def(AST_Sequence, function(compressor, scope, no_return, in_loop, in_await) {
        return inline_sequence(compressor, scope, no_return, in_loop, in_await, this);
      });
      def(AST_SimpleStatement, function(compressor, scope, no_return, in_loop) {
        var body = this.body;
        while (body instanceof AST_UnaryPrefix) {
          var op = body.operator;
          if (unary_side_effects[op])
            break;
          if (op == "void")
            break;
          body = body.expression;
        }
        if (!no_return && !is_undefined(body))
          body = make_node(AST_UnaryPrefix, this, {
            operator: "void",
            expression: body
          });
        return body.try_inline(compressor, scope, no_return || false, in_loop);
      });
      def(AST_UnaryPrefix, function(compressor, scope, no_return, in_loop, in_await) {
        var self = this;
        var op = self.operator;
        if (unary_side_effects[op])
          return;
        if (!no_return && op == "void")
          no_return = false;
        var inlined = self.expression.try_inline(compressor, scope, no_return, in_loop, in_await);
        if (!inlined)
          return;
        if (!no_return)
          scan_local_returns(inlined, function(node) {
            node.in_bool = false;
            var value = node.value;
            if (op == "void" && is_undefined(value))
              return;
            node.value = make_node(AST_UnaryPrefix, self, {
              operator: op,
              expression: value || make_node(AST_Undefined, node).transform(compressor)
            });
          });
        return inlined;
      });
      def(AST_With, function(compressor, scope, no_return, in_loop) {
        var body = this.body.try_inline(compressor, scope, no_return, in_loop);
        if (body)
          this.body = body;
        var exp = this.expression;
        if (exp instanceof AST_Sequence) {
          var inlined = inline_sequence(compressor, scope, true, in_loop, false, exp, 1);
          if (inlined) {
            this.expression = exp.tail_node();
            inlined.body.push(this);
            return inlined;
          }
        }
        return body && this;
      });
      def(AST_Yield, function(compressor, scope, no_return, in_loop) {
        if (!compressor.option("yields"))
          return;
        if (!this.nested)
          return;
        var call = this.expression;
        if (call.TYPE != "Call")
          return;
        var fn = call.expression;
        switch (fn.CTOR) {
          case AST_AsyncGeneratorFunction:
            fn = make_node(AST_AsyncFunction, fn);
            break;
          case AST_GeneratorFunction:
            fn = make_node(AST_Function, fn);
            break;
          default:
            return;
        }
        call = call.clone();
        call.expression = fn;
        return call.try_inline(compressor, scope, no_return, in_loop);
      });
    })(function(node, func) {
      node.DEFMETHOD("try_inline", func);
    });
    OPT(AST_Return, function(self, compressor) {
      var value = self.value;
      if (value && compressor.option("side_effects") && is_undefined(value, compressor) && !in_async_generator(compressor.find_parent(AST_Scope))) {
        self.value = null;
      }
      return self;
    });
  })(function(node, optimizer) {
    node.DEFMETHOD("optimize", function(compressor) {
      var self = this;
      if (self._optimized)
        return self;
      if (compressor.has_directive("use asm"))
        return self;
      var opt = optimizer(self, compressor);
      opt._optimized = true;
      return opt;
    });
  });
});

// node_modules/uglify-js/lib/output.js
var exports_output = {};
var is_some_comments, OutputStream2;
var init_output = __esm(() => {
  is_some_comments = function(comment) {
    return comment.type == "comment2" && /@preserve|@license|@cc_on/i.test(comment.value);
  };
  OutputStream2 = function(options) {
    options = defaults(options, {
      annotations: false,
      ascii_only: false,
      beautify: false,
      braces: false,
      comments: false,
      extendscript: false,
      galio: false,
      ie: false,
      indent_level: 4,
      indent_start: 0,
      inline_script: true,
      keep_quoted_props: false,
      max_line_len: false,
      preamble: null,
      preserve_line: false,
      quote_keys: false,
      quote_style: 0,
      semicolons: true,
      shebang: true,
      source_map: null,
      v8: false,
      webkit: false,
      width: 80,
      wrap_iife: false
    }, true);
    var comment_filter = return_false;
    if (options.comments) {
      var comments = options.comments;
      if (typeof options.comments === "string" && /^\/.*\/[a-zA-Z]*$/.test(options.comments)) {
        var regex_pos = options.comments.lastIndexOf("/");
        comments = new RegExp(options.comments.substr(1, regex_pos - 1), options.comments.substr(regex_pos + 1));
      }
      if (comments instanceof RegExp) {
        comment_filter = function(comment) {
          return comment.type != "comment5" && comments.test(comment.value);
        };
      } else if (typeof comments === "function") {
        comment_filter = function(comment) {
          return comment.type != "comment5" && comments(this, comment);
        };
      } else if (comments === "some") {
        comment_filter = is_some_comments;
      } else {
        comment_filter = return_true;
      }
    }
    function make_indent(value) {
      if (typeof value == "number")
        return new Array(value + 1).join(" ");
      if (!value)
        return "";
      if (!/^\s*$/.test(value))
        throw new Error("unsupported indentation: " + JSON.stringify("" + value));
      return value;
    }
    var current_col = 0;
    var current_line = 1;
    var current_indent = make_indent(options.indent_start);
    var full_indent = make_indent(options.indent_level);
    var half_indent = full_indent.length + 1 >> 1;
    var last;
    var line_end = 0;
    var line_fixed = true;
    var mappings = options.source_map && [];
    var mapping_name;
    var mapping_token;
    var might_need_space;
    var might_need_semicolon;
    var need_newline_indented = false;
    var need_space = false;
    var output;
    var stack;
    var stored = "";
    function reset() {
      last = "";
      might_need_space = false;
      might_need_semicolon = false;
      stack = [];
      var str = output;
      output = "";
      return str;
    }
    reset();
    var to_utf8 = options.ascii_only ? function(str, identifier) {
      if (identifier)
        str = str.replace(/[\ud800-\udbff][\udc00-\udfff]/g, function(ch) {
          return "\\u{" + (ch.charCodeAt(0) - 55232 << 10 | ch.charCodeAt(1) - 56320).toString(16) + "}";
        });
      return str.replace(/[\u0000-\u001f\u007f-\uffff]/g, function(ch) {
        var code = ch.charCodeAt(0).toString(16);
        if (code.length <= 2 && !identifier) {
          while (code.length < 2)
            code = "0" + code;
          return "\\x" + code;
        } else {
          while (code.length < 4)
            code = "0" + code;
          return "\\u" + code;
        }
      });
    } : function(str) {
      var s2 = "";
      for (var i = 0, j2 = 0;i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (is_surrogate_pair_head(code)) {
          if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {
            i++;
            continue;
          }
        } else if (!is_surrogate_pair_tail(code)) {
          continue;
        }
        s2 += str.slice(j2, i) + "\\u" + code.toString(16);
        j2 = i + 1;
      }
      return j2 == 0 ? str : s2 + str.slice(j2);
    };
    function quote_single(str) {
      return "'" + str.replace(/\x27/g, "\\'") + "'";
    }
    function quote_double(str) {
      return '"' + str.replace(/\x22/g, '\\"') + '"';
    }
    var quote_string = [
      null,
      quote_single,
      quote_double,
      function(str, quote) {
        return quote == "'" ? quote_single(str) : quote_double(str);
      }
    ][options.quote_style] || function(str, quote, dq, sq) {
      return dq > sq ? quote_single(str) : quote_double(str);
    };
    function make_string(str, quote) {
      var dq = 0, sq = 0;
      str = str.replace(/[\\\b\f\n\r\v\t\x22\x27\u2028\u2029\0\ufeff]/g, function(s2, i) {
        switch (s2) {
          case '"':
            ++dq;
            return '"';
          case "'":
            ++sq;
            return "'";
          case "\\":
            return "\\\\";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "\t":
            return "\\t";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\v":
            return options.ie ? "\\x0B" : "\\v";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          case "\uFEFF":
            return "\\ufeff";
          case "\0":
            return /[0-9]/.test(str.charAt(i + 1)) ? "\\x00" : "\\0";
        }
        return s2;
      });
      return quote_string(to_utf8(str), quote, dq, sq);
    }
    var adjust_mappings = mappings ? function(line, col) {
      mappings.forEach(function(mapping) {
        mapping.line += line;
        mapping.col += col;
      });
    } : noop;
    var flush_mappings = mappings ? function() {
      mappings.forEach(function(mapping) {
        options.source_map.add(mapping.token.file, mapping.line, mapping.col, mapping.token.line, mapping.token.col, !mapping.name && mapping.token.type == "name" ? mapping.token.value : mapping.name);
      });
      mappings = [];
    } : noop;
    function insert_newlines(count) {
      stored += output.slice(0, line_end);
      output = output.slice(line_end);
      var new_col = output.length;
      adjust_mappings(count, new_col - current_col);
      current_line += count;
      current_col = new_col;
      while (count--)
        stored += "\n";
    }
    var fix_line = options.max_line_len ? function(flush) {
      if (line_fixed) {
        if (current_col > options.max_line_len) {
          AST_Node.warn("Output exceeds {max_line_len} characters", options);
        }
        return;
      }
      if (current_col > options.max_line_len) {
        insert_newlines(1);
        line_fixed = true;
      }
      if (line_fixed || flush)
        flush_mappings();
    } : noop;
    var require_semicolon = makePredicate("( [ + * / - , .");
    function require_space(prev, ch, str) {
      return is_identifier_char(prev) && (is_identifier_char(ch) || ch == "\\") || ch == "/" && ch == prev || (ch == "+" || ch == "-") && ch == last || last == "--" && ch == ">" || last == "!" && str == "--" || prev == "/" && (str == "in" || str == "instanceof");
    }
    var print = options.beautify || options.comments || options.max_line_len || options.preserve_line || options.shebang || !options.semicolons || options.source_map || options.width ? function(str) {
      var ch = str.charAt(0);
      if (need_newline_indented && ch) {
        need_newline_indented = false;
        if (ch != "\n") {
          print("\n");
          indent();
        }
      }
      if (need_space && ch) {
        need_space = false;
        if (!/[\s;})]/.test(ch)) {
          space();
        }
      }
      var prev = last.slice(-1);
      if (might_need_semicolon) {
        might_need_semicolon = false;
        if (prev == ":" && ch == "}" || prev != ";" && (!ch || ";}".indexOf(ch) < 0)) {
          var need_semicolon = require_semicolon[ch];
          if (need_semicolon || options.semicolons) {
            output += ";";
            current_col++;
            if (!line_fixed) {
              fix_line();
              if (line_fixed && !need_semicolon && output == ";") {
                output = "";
                current_col = 0;
              }
            }
            if (line_end == output.length - 1)
              line_end++;
          } else {
            fix_line();
            output += "\n";
            current_line++;
            current_col = 0;
            if (/^\s+$/.test(str))
              might_need_semicolon = true;
          }
          if (!options.beautify)
            might_need_space = false;
        }
      }
      if (might_need_space) {
        if (require_space(prev, ch, str)) {
          output += " ";
          current_col++;
        }
        if (prev != "<" || str != "!")
          might_need_space = false;
      }
      if (mapping_token) {
        mappings.push({
          token: mapping_token,
          name: mapping_name,
          line: current_line,
          col: current_col
        });
        mapping_token = false;
        if (line_fixed)
          flush_mappings();
      }
      output += str;
      var a2 = str.split(/\r?\n/), n = a2.length - 1;
      current_line += n;
      current_col += a2[0].length;
      if (n > 0) {
        fix_line();
        current_col = a2[n].length;
      }
      last = str;
    } : function(str) {
      var ch = str.charAt(0);
      var prev = last.slice(-1);
      if (might_need_semicolon) {
        might_need_semicolon = false;
        if (prev == ":" && ch == "}" || (!ch || ";}".indexOf(ch) < 0) && prev != ";") {
          output += ";";
          might_need_space = false;
        }
      }
      if (might_need_space) {
        if (require_space(prev, ch, str))
          output += " ";
        if (prev != "<" || str != "!")
          might_need_space = false;
      }
      output += str;
      last = str;
    };
    var space = options.beautify ? function() {
      print(" ");
    } : function() {
      might_need_space = true;
    };
    var indent = options.beautify ? function(half) {
      if (need_newline_indented)
        print("\n");
      print(half ? current_indent.slice(0, -half_indent) : current_indent);
    } : noop;
    var with_indent = options.beautify ? function(cont) {
      var save_indentation = current_indent;
      current_indent += full_indent;
      cont();
      current_indent = save_indentation;
    } : function(cont) {
      cont();
    };
    var may_add_newline = options.max_line_len || options.preserve_line ? function() {
      fix_line();
      line_end = output.length;
      line_fixed = false;
    } : noop;
    var newline = options.beautify ? function() {
      print("\n");
      line_end = output.length;
    } : may_add_newline;
    var semicolon = options.beautify ? function() {
      print(";");
    } : function() {
      might_need_semicolon = true;
    };
    function force_semicolon() {
      if (might_need_semicolon)
        print(";");
      print(";");
    }
    function with_block(cont, end) {
      print("{");
      newline();
      with_indent(cont);
      add_mapping(end);
      indent();
      print("}");
    }
    function with_parens(cont) {
      print("(");
      may_add_newline();
      cont();
      may_add_newline();
      print(")");
    }
    function with_square(cont) {
      print("[");
      may_add_newline();
      cont();
      may_add_newline();
      print("]");
    }
    function comma() {
      may_add_newline();
      print(",");
      may_add_newline();
      space();
    }
    function colon() {
      print(":");
      space();
    }
    var add_mapping = mappings ? function(token, name) {
      mapping_token = token;
      mapping_name = name;
    } : noop;
    function get() {
      if (!line_fixed)
        fix_line(true);
      return stored + output;
    }
    function has_nlb() {
      return /(^|\n) *$/.test(output);
    }
    function pad_comment(token, force) {
      if (need_newline_indented)
        return;
      if (token.nlb && (force || !has_nlb())) {
        need_newline_indented = true;
      } else if (force) {
        need_space = true;
      }
    }
    function print_comment(comment) {
      var value = comment.value.replace(/[@#]__PURE__/g, " ");
      if (/^\s*$/.test(value) && !/^\s*$/.test(comment.value))
        return false;
      if (/comment[134]/.test(comment.type)) {
        print("//" + value);
        need_newline_indented = true;
      } else if (comment.type == "comment2") {
        print("/*" + value + "*/");
      }
      return true;
    }
    function should_merge_comments(node, parent) {
      if (parent instanceof AST_Binary)
        return parent.left === node;
      if (parent.TYPE == "Call")
        return parent.expression === node;
      if (parent instanceof AST_Conditional)
        return parent.condition === node;
      if (parent instanceof AST_Dot)
        return parent.expression === node;
      if (parent instanceof AST_Exit)
        return true;
      if (parent instanceof AST_Sequence)
        return parent.expressions[0] === node;
      if (parent instanceof AST_Sub)
        return parent.expression === node;
      if (parent instanceof AST_UnaryPostfix)
        return true;
      if (parent instanceof AST_Yield)
        return true;
    }
    function prepend_comments(node) {
      var self = this;
      var scan;
      if (node instanceof AST_Exit) {
        scan = node.value;
      } else if (node instanceof AST_Yield) {
        scan = node.expression;
      }
      var comments2 = dump(node);
      if (!comments2)
        comments2 = [];
      if (scan) {
        var tw = new TreeWalker(function(node2) {
          if (!should_merge_comments(node2, tw.parent()))
            return true;
          var before = dump(node2);
          if (before)
            comments2 = comments2.concat(before);
        });
        tw.push(node);
        scan.walk(tw);
      }
      if (current_line == 1 && current_col == 0) {
        if (comments2.length > 0 && options.shebang && comments2[0].type == "comment5") {
          print("#!" + comments2.shift().value + "\n");
          indent();
        }
        var preamble = options.preamble;
        if (preamble)
          print(preamble.replace(/\r\n?|\u2028|\u2029|(^|\S)\s*$/g, "$1\n"));
      }
      comments2 = comments2.filter(comment_filter, node);
      var printed = false;
      comments2.forEach(function(comment, index) {
        pad_comment(comment, index);
        if (print_comment(comment))
          printed = true;
      });
      if (printed)
        pad_comment(node.start, true);
      function dump(node2) {
        var token = node2.start;
        if (!token) {
          if (!scan)
            return;
          node2.start = token = new AST_Token;
        }
        var comments3 = token.comments_before;
        if (!comments3) {
          if (!scan)
            return;
          token.comments_before = comments3 = [];
        }
        if (comments3._dumped === self)
          return;
        comments3._dumped = self;
        return comments3;
      }
    }
    function append_comments(node, tail) {
      var self = this;
      var token = node.end;
      if (!token)
        return;
      var comments2 = token[tail ? "comments_before" : "comments_after"];
      if (!comments2 || comments2._dumped === self)
        return;
      if (!(node instanceof AST_Statement || all(comments2, function(c2) {
        return !/comment[134]/.test(c2.type);
      })))
        return;
      comments2._dumped = self;
      comments2.filter(comment_filter, node).forEach(function(comment, index) {
        pad_comment(comment, index || !tail);
        print_comment(comment);
      });
    }
    return {
      get,
      reset,
      indent,
      should_break: options.beautify && options.width ? function() {
        return current_col >= options.width;
      } : return_false,
      has_parens: function() {
        return last.slice(-1) == "(";
      },
      newline,
      print,
      space,
      comma,
      colon,
      last: function() {
        return last;
      },
      semicolon,
      force_semicolon,
      to_utf8,
      print_name: function(name) {
        print(to_utf8(name.toString(), true));
      },
      print_string: options.inline_script ? function(str, quote) {
        str = make_string(str, quote).replace(/<\x2f(script)([>\/\t\n\f\r ])/gi, "<\\/$1$2");
        print(str.replace(/\x3c!--/g, "\\x3c!--").replace(/--\x3e/g, "--\\x3e"));
      } : function(str, quote) {
        print(make_string(str, quote));
      },
      with_indent,
      with_block,
      with_parens,
      with_square,
      add_mapping,
      option: function(opt) {
        return options[opt];
      },
      prepend_comments: options.comments || options.shebang ? prepend_comments : noop,
      append_comments: options.comments ? append_comments : noop,
      push_node: function(node) {
        stack.push(node);
      },
      pop_node: options.preserve_line ? function() {
        var node = stack.pop();
        if (node.start && node.start.line > current_line) {
          insert_newlines(node.start.line - current_line);
        }
      } : function() {
        stack.pop();
      },
      parent: function(n) {
        return stack[stack.length - 2 - (n || 0)];
      }
    };
  };
  (function() {
    function DEFPRINT(nodetype, generator) {
      nodetype.DEFMETHOD("_codegen", generator);
    }
    var use_asm = false;
    AST_Node.DEFMETHOD("print", function(stream, force_parens) {
      var self = this;
      stream.push_node(self);
      if (force_parens || self.needs_parens(stream)) {
        stream.with_parens(doit);
      } else {
        doit();
      }
      stream.pop_node();
      function doit() {
        stream.prepend_comments(self);
        self.add_source_map(stream);
        self._codegen(stream);
        stream.append_comments(self);
      }
    });
    var readonly = OutputStream2({
      inline_script: false,
      shebang: false,
      width: false
    });
    AST_Node.DEFMETHOD("print_to_string", function(options) {
      if (options) {
        var stream = OutputStream2(options);
        this.print(stream);
        return stream.get();
      }
      this.print(readonly);
      return readonly.reset();
    });
    function PARENS(nodetype, func) {
      nodetype.DEFMETHOD("needs_parens", func);
    }
    PARENS(AST_Node, return_false);
    function needs_parens_function(output) {
      var p2 = output.parent();
      if (!output.has_parens() && first_in_statement(output, false, true)) {
        return this.name || !(p2 instanceof AST_ExportDefault);
      }
      if (output.option("webkit") && p2 instanceof AST_PropAccess && p2.expression === this)
        return true;
      if (output.option("wrap_iife") && p2 instanceof AST_Call && p2.expression === this)
        return true;
    }
    PARENS(AST_AsyncFunction, needs_parens_function);
    PARENS(AST_AsyncGeneratorFunction, needs_parens_function);
    PARENS(AST_ClassExpression, needs_parens_function);
    PARENS(AST_Function, needs_parens_function);
    PARENS(AST_GeneratorFunction, needs_parens_function);
    function needs_parens_obj(output) {
      return !output.has_parens() && first_in_statement(output, true);
    }
    PARENS(AST_Object, needs_parens_obj);
    function needs_parens_unary(output) {
      var p2 = output.parent();
      if (p2 instanceof AST_Binary)
        return p2.operator == "**" && p2.left === this;
      if (p2 instanceof AST_Call)
        return p2.expression === this;
      if (p2 instanceof AST_Class)
        return true;
      if (p2 instanceof AST_PropAccess)
        return p2.expression === this;
      if (p2 instanceof AST_Template)
        return p2.tag === this;
    }
    PARENS(AST_Await, needs_parens_unary);
    PARENS(AST_Unary, needs_parens_unary);
    PARENS(AST_Sequence, function(output) {
      var p2 = output.parent();
      return p2 instanceof AST_Array || is_arrow(p2) && p2.value === this || p2 instanceof AST_Await || p2 instanceof AST_Binary || p2 instanceof AST_Call || p2 instanceof AST_Class || p2 instanceof AST_ClassProperty || p2 instanceof AST_Conditional || p2 instanceof AST_DefaultValue || p2 instanceof AST_DestructuredKeyVal || p2 instanceof AST_ExportDefault || p2 instanceof AST_ForOf || p2 instanceof AST_ObjectProperty || p2 instanceof AST_PropAccess && p2.expression === this || p2 instanceof AST_Spread || p2 instanceof AST_Template && p2.tag === this || p2 instanceof AST_Unary || p2 instanceof AST_VarDef || p2 instanceof AST_Yield;
    });
    PARENS(AST_Binary, function(output) {
      var p2 = output.parent();
      if (p2 instanceof AST_Await)
        return true;
      if (p2 instanceof AST_Binary) {
        var po = p2.operator, pp = PRECEDENCE[po];
        var so = this.operator, sp = PRECEDENCE[so];
        return pp > sp || po == "??" && (so == "&&" || so == "||") || pp == sp && this === p2[po == "**" ? "left" : "right"];
      }
      if (p2 instanceof AST_Call)
        return p2.expression === this;
      if (p2 instanceof AST_Class)
        return true;
      if (p2 instanceof AST_PropAccess)
        return p2.expression === this;
      if (p2 instanceof AST_Template)
        return p2.tag === this;
      if (p2 instanceof AST_Unary)
        return true;
    });
    function need_chain_parens(node, parent) {
      if (!node.terminal)
        return false;
      if (!(parent instanceof AST_Call || parent instanceof AST_PropAccess))
        return false;
      return parent.expression === node;
    }
    PARENS(AST_PropAccess, function(output) {
      var node = this;
      var p2 = output.parent();
      if (p2 instanceof AST_New && p2.expression === node && root_expr(node).TYPE == "Call")
        return true;
      return need_chain_parens(node, p2);
    });
    PARENS(AST_Call, function(output) {
      var node = this;
      var p2 = output.parent();
      if (p2 instanceof AST_New)
        return p2.expression === node;
      if (output.option("webkit") && node.expression instanceof AST_Function && p2 instanceof AST_PropAccess && p2.expression === node) {
        var g2 = output.parent(1);
        if (g2 instanceof AST_Assign && g2.left === p2)
          return true;
      }
      return need_chain_parens(node, p2);
    });
    PARENS(AST_New, function(output) {
      if (need_constructor_parens(this, output))
        return false;
      var p2 = output.parent();
      if (p2 instanceof AST_Call)
        return p2.expression === this;
      if (p2 instanceof AST_PropAccess)
        return true;
      if (p2 instanceof AST_Template)
        return p2.tag === this;
    });
    PARENS(AST_Number, function(output) {
      if (!output.option("galio"))
        return false;
      var p2 = output.parent();
      return p2 instanceof AST_PropAccess && p2.expression === this && /^0/.test(make_num(this.value));
    });
    function needs_parens_assign_cond(self, output) {
      var p2 = output.parent();
      if (p2 instanceof AST_Await)
        return true;
      if (p2 instanceof AST_Binary)
        return !(p2 instanceof AST_Assign);
      if (p2 instanceof AST_Call)
        return p2.expression === self;
      if (p2 instanceof AST_Class)
        return true;
      if (p2 instanceof AST_Conditional)
        return p2.condition === self;
      if (p2 instanceof AST_PropAccess)
        return p2.expression === self;
      if (p2 instanceof AST_Template)
        return p2.tag === self;
      if (p2 instanceof AST_Unary)
        return true;
    }
    PARENS(AST_Arrow, function(output) {
      return needs_parens_assign_cond(this, output);
    });
    PARENS(AST_Assign, function(output) {
      if (needs_parens_assign_cond(this, output))
        return true;
      if (output.option("v8"))
        return this.left instanceof AST_Destructured;
      if (this.left instanceof AST_DestructuredObject)
        return needs_parens_obj(output);
    });
    PARENS(AST_AsyncArrow, function(output) {
      return needs_parens_assign_cond(this, output);
    });
    PARENS(AST_Conditional, function(output) {
      return needs_parens_assign_cond(this, output) || output.option("extendscript") && output.parent() instanceof AST_Conditional;
    });
    PARENS(AST_Yield, function(output) {
      return needs_parens_assign_cond(this, output);
    });
    DEFPRINT(AST_Directive, function(output) {
      var quote = this.quote;
      var value = this.value;
      switch (output.option("quote_style")) {
        case 0:
        case 2:
          if (value.indexOf('"') == -1)
            quote = '"';
          break;
        case 1:
          if (value.indexOf("'") == -1)
            quote = "'";
          break;
      }
      output.print(quote + value + quote);
      output.semicolon();
    });
    DEFPRINT(AST_Debugger, function(output) {
      output.print("debugger");
      output.semicolon();
    });
    function display_body(body, is_toplevel, output, allow_directives) {
      var last = body.length - 1;
      var in_directive = allow_directives;
      var was_asm = use_asm;
      body.forEach(function(stmt, i) {
        if (in_directive) {
          if (stmt instanceof AST_Directive) {
            if (stmt.value == "use asm")
              use_asm = true;
          } else if (!(stmt instanceof AST_EmptyStatement)) {
            if (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {
              output.force_semicolon();
            }
            in_directive = false;
          }
        }
        if (stmt instanceof AST_EmptyStatement)
          return;
        output.indent();
        stmt.print(output);
        if (i == last && is_toplevel)
          return;
        output.newline();
        if (is_toplevel)
          output.newline();
      });
      use_asm = was_asm;
    }
    DEFPRINT(AST_Toplevel, function(output) {
      display_body(this.body, true, output, true);
      output.print("");
    });
    DEFPRINT(AST_LabeledStatement, function(output) {
      this.label.print(output);
      output.colon();
      this.body.print(output);
    });
    DEFPRINT(AST_SimpleStatement, function(output) {
      this.body.print(output);
      output.semicolon();
    });
    function print_braced_empty(self, output) {
      output.print("{");
      output.with_indent(function() {
        output.append_comments(self, true);
      });
      output.print("}");
    }
    function print_braced(self, output, allow_directives) {
      if (self.body.length > 0) {
        output.with_block(function() {
          display_body(self.body, false, output, allow_directives);
        }, self.end);
      } else
        print_braced_empty(self, output);
    }
    DEFPRINT(AST_BlockStatement, function(output) {
      print_braced(this, output);
    });
    DEFPRINT(AST_EmptyStatement, function(output) {
      output.semicolon();
    });
    DEFPRINT(AST_Do, function(output) {
      var self = this;
      output.print("do");
      make_block(self.body, output);
      output.space();
      output.print("while");
      output.space();
      output.with_parens(function() {
        self.condition.print(output);
      });
      output.semicolon();
    });
    DEFPRINT(AST_While, function(output) {
      var self = this;
      output.print("while");
      output.space();
      output.with_parens(function() {
        self.condition.print(output);
      });
      force_statement(self.body, output);
    });
    DEFPRINT(AST_For, function(output) {
      var self = this;
      output.print("for");
      output.space();
      output.with_parens(function() {
        if (self.init) {
          if (self.init instanceof AST_Definitions) {
            self.init.print(output);
          } else {
            parenthesize_for_no_in(self.init, output, true);
          }
          output.print(";");
          output.space();
        } else {
          output.print(";");
        }
        if (self.condition) {
          self.condition.print(output);
          output.print(";");
          output.space();
        } else {
          output.print(";");
        }
        if (self.step) {
          self.step.print(output);
        }
      });
      force_statement(self.body, output);
    });
    function print_for_enum(prefix, infix) {
      return function(output) {
        var self = this;
        output.print(prefix);
        output.space();
        output.with_parens(function() {
          self.init.print(output);
          output.space();
          output.print(infix);
          output.space();
          self.object.print(output);
        });
        force_statement(self.body, output);
      };
    }
    DEFPRINT(AST_ForAwaitOf, print_for_enum("for await", "of"));
    DEFPRINT(AST_ForIn, print_for_enum("for", "in"));
    DEFPRINT(AST_ForOf, print_for_enum("for", "of"));
    DEFPRINT(AST_With, function(output) {
      var self = this;
      output.print("with");
      output.space();
      output.with_parens(function() {
        self.expression.print(output);
      });
      force_statement(self.body, output);
    });
    DEFPRINT(AST_ExportDeclaration, function(output) {
      output.print("export");
      output.space();
      this.body.print(output);
    });
    DEFPRINT(AST_ExportDefault, function(output) {
      output.print("export");
      output.space();
      output.print("default");
      output.space();
      var body = this.body;
      body.print(output);
      if (body instanceof AST_ClassExpression) {
        if (!body.name)
          return;
      }
      if (body instanceof AST_DefClass)
        return;
      if (body instanceof AST_LambdaDefinition)
        return;
      if (body instanceof AST_LambdaExpression) {
        if (!body.name && !is_arrow(body))
          return;
      }
      output.semicolon();
    });
    function print_alias(alias, output) {
      var value = alias.value;
      if (value == "*" || is_identifier_string(value)) {
        output.print_name(value);
      } else {
        output.print_string(value, alias.quote);
      }
    }
    DEFPRINT(AST_ExportForeign, function(output) {
      var self = this;
      output.print("export");
      output.space();
      var len = self.keys.length;
      if (len == 0) {
        print_braced_empty(self, output);
      } else if (self.keys[0].value == "*") {
        print_entry(0);
      } else
        output.with_block(function() {
          output.indent();
          print_entry(0);
          for (var i = 1;i < len; i++) {
            output.print(",");
            output.newline();
            output.indent();
            print_entry(i);
          }
          output.newline();
        }, self.end);
      output.space();
      output.print("from");
      output.space();
      self.path.print(output);
      output.semicolon();
      function print_entry(index) {
        var alias = self.aliases[index];
        var key = self.keys[index];
        print_alias(key, output);
        if (alias.value != key.value) {
          output.space();
          output.print("as");
          output.space();
          print_alias(alias, output);
        }
      }
    });
    DEFPRINT(AST_ExportReferences, function(output) {
      var self = this;
      output.print("export");
      output.space();
      print_properties(self, output);
      output.semicolon();
    });
    DEFPRINT(AST_Import, function(output) {
      var self = this;
      output.print("import");
      output.space();
      if (self.default)
        self.default.print(output);
      if (self.all) {
        if (self.default)
          output.comma();
        self.all.print(output);
      }
      if (self.properties) {
        if (self.default)
          output.comma();
        print_properties(self, output);
      }
      if (self.all || self.default || self.properties) {
        output.space();
        output.print("from");
        output.space();
      }
      self.path.print(output);
      output.semicolon();
    });
    function print_funargs(self, output) {
      output.with_parens(function() {
        self.argnames.forEach(function(arg, i) {
          if (i)
            output.comma();
          arg.print(output);
        });
        if (self.rest) {
          if (self.argnames.length)
            output.comma();
          output.print("...");
          self.rest.print(output);
        }
      });
    }
    function print_arrow(self, output) {
      var argname = self.argnames.length == 1 && !self.rest && self.argnames[0];
      if (argname instanceof AST_SymbolFunarg && argname.name != "yield") {
        argname.print(output);
      } else {
        print_funargs(self, output);
      }
      output.space();
      output.print("=>");
      output.space();
      if (self.value) {
        self.value.print(output);
      } else {
        print_braced(self, output, true);
      }
    }
    DEFPRINT(AST_Arrow, function(output) {
      print_arrow(this, output);
    });
    DEFPRINT(AST_AsyncArrow, function(output) {
      output.print("async");
      output.space();
      print_arrow(this, output);
    });
    function print_lambda(self, output) {
      if (self.name) {
        output.space();
        self.name.print(output);
      }
      print_funargs(self, output);
      output.space();
      print_braced(self, output, true);
    }
    DEFPRINT(AST_Lambda, function(output) {
      output.print("function");
      print_lambda(this, output);
    });
    function print_async(output) {
      output.print("async");
      output.space();
      output.print("function");
      print_lambda(this, output);
    }
    DEFPRINT(AST_AsyncDefun, print_async);
    DEFPRINT(AST_AsyncFunction, print_async);
    function print_async_generator(output) {
      output.print("async");
      output.space();
      output.print("function*");
      print_lambda(this, output);
    }
    DEFPRINT(AST_AsyncGeneratorDefun, print_async_generator);
    DEFPRINT(AST_AsyncGeneratorFunction, print_async_generator);
    function print_generator(output) {
      output.print("function*");
      print_lambda(this, output);
    }
    DEFPRINT(AST_GeneratorDefun, print_generator);
    DEFPRINT(AST_GeneratorFunction, print_generator);
    DEFPRINT(AST_Class, function(output) {
      var self = this;
      output.print("class");
      if (self.name) {
        output.space();
        self.name.print(output);
      }
      if (self.extends) {
        output.space();
        output.print("extends");
        output.space();
        self.extends.print(output);
      }
      output.space();
      print_properties(self, output, true);
    });
    DEFPRINT(AST_ClassField, function(output) {
      var self = this;
      if (self.static) {
        output.print("static");
        output.space();
      }
      print_property_key(self, output);
      if (self.value) {
        output.space();
        output.print("=");
        output.space();
        self.value.print(output);
      }
      output.semicolon();
    });
    DEFPRINT(AST_ClassGetter, print_accessor("get"));
    DEFPRINT(AST_ClassSetter, print_accessor("set"));
    function print_method(self, output) {
      var fn = self.value;
      if (is_async(fn)) {
        output.print("async");
        output.space();
      }
      if (is_generator(fn))
        output.print("*");
      print_property_key(self, output);
      print_lambda(self.value, output);
    }
    DEFPRINT(AST_ClassMethod, function(output) {
      var self = this;
      if (self.static) {
        output.print("static");
        output.space();
      }
      print_method(self, output);
    });
    DEFPRINT(AST_ClassInit, function(output) {
      output.print("static");
      output.space();
      print_braced(this.value, output);
    });
    function print_jump(kind, prop) {
      return function(output) {
        output.print(kind);
        var target = this[prop];
        if (target) {
          output.space();
          target.print(output);
        }
        output.semicolon();
      };
    }
    DEFPRINT(AST_Return, print_jump("return", "value"));
    DEFPRINT(AST_Throw, print_jump("throw", "value"));
    DEFPRINT(AST_Break, print_jump("break", "label"));
    DEFPRINT(AST_Continue, print_jump("continue", "label"));
    function make_then(self, output) {
      var b5 = self.body;
      if (output.option("braces") && !(b5 instanceof AST_Const || b5 instanceof AST_Let) || output.option("ie") && b5 instanceof AST_Do)
        return make_block(b5, output);
      if (!b5)
        return output.force_semicolon();
      while (true) {
        if (b5 instanceof AST_If) {
          if (!b5.alternative) {
            make_block(self.body, output);
            return;
          }
          b5 = b5.alternative;
        } else if (b5 instanceof AST_StatementWithBody) {
          b5 = b5.body;
        } else
          break;
      }
      force_statement(self.body, output);
    }
    DEFPRINT(AST_If, function(output) {
      var self = this;
      output.print("if");
      output.space();
      output.with_parens(function() {
        self.condition.print(output);
      });
      if (self.alternative) {
        make_then(self, output);
        output.space();
        output.print("else");
        if (self.alternative instanceof AST_If) {
          output.space();
          self.alternative.print(output);
        } else {
          force_statement(self.alternative, output);
        }
      } else {
        force_statement(self.body, output);
      }
    });
    DEFPRINT(AST_Switch, function(output) {
      var self = this;
      output.print("switch");
      output.space();
      output.with_parens(function() {
        self.expression.print(output);
      });
      output.space();
      var last = self.body.length - 1;
      if (last < 0)
        print_braced_empty(self, output);
      else
        output.with_block(function() {
          self.body.forEach(function(branch, i) {
            output.indent(true);
            branch.print(output);
            if (i < last && branch.body.length > 0)
              output.newline();
          });
        }, self.end);
    });
    function print_branch_body(self, output) {
      output.newline();
      self.body.forEach(function(stmt) {
        output.indent();
        stmt.print(output);
        output.newline();
      });
    }
    DEFPRINT(AST_Default, function(output) {
      output.print("default:");
      print_branch_body(this, output);
    });
    DEFPRINT(AST_Case, function(output) {
      var self = this;
      output.print("case");
      output.space();
      self.expression.print(output);
      output.print(":");
      print_branch_body(self, output);
    });
    DEFPRINT(AST_Try, function(output) {
      var self = this;
      output.print("try");
      output.space();
      print_braced(self, output);
      if (self.bcatch) {
        output.space();
        self.bcatch.print(output);
      }
      if (self.bfinally) {
        output.space();
        self.bfinally.print(output);
      }
    });
    DEFPRINT(AST_Catch, function(output) {
      var self = this;
      output.print("catch");
      if (self.argname) {
        output.space();
        output.with_parens(function() {
          self.argname.print(output);
        });
      }
      output.space();
      print_braced(self, output);
    });
    DEFPRINT(AST_Finally, function(output) {
      output.print("finally");
      output.space();
      print_braced(this, output);
    });
    function print_definitions(type) {
      return function(output) {
        var self = this;
        output.print(type);
        output.space();
        self.definitions.forEach(function(def, i) {
          if (i)
            output.comma();
          def.print(output);
        });
        var p2 = output.parent();
        if (!(p2 instanceof AST_IterationStatement && p2.init === self))
          output.semicolon();
      };
    }
    DEFPRINT(AST_Const, print_definitions("const"));
    DEFPRINT(AST_Let, print_definitions("let"));
    DEFPRINT(AST_Var, print_definitions("var"));
    function parenthesize_for_no_in(node, output, no_in) {
      var parens = false;
      if (no_in)
        node.walk(new TreeWalker(function(node2) {
          if (parens)
            return true;
          if (node2 instanceof AST_Binary && node2.operator == "in")
            return parens = true;
          if (node2 instanceof AST_Scope && !(is_arrow(node2) && node2.value))
            return true;
        }));
      node.print(output, parens);
    }
    DEFPRINT(AST_VarDef, function(output) {
      var self = this;
      self.name.print(output);
      if (self.value) {
        output.space();
        output.print("=");
        output.space();
        var p2 = output.parent(1);
        var no_in = p2 instanceof AST_For || p2 instanceof AST_ForEnumeration;
        parenthesize_for_no_in(self.value, output, no_in);
      }
    });
    DEFPRINT(AST_DefaultValue, function(output) {
      var self = this;
      self.name.print(output);
      output.space();
      output.print("=");
      output.space();
      self.value.print(output);
    });
    function print_annotation(self, output) {
      if (!output.option("annotations"))
        return;
      if (!self.pure)
        return;
      var level = 0, parent = self, node;
      do {
        node = parent;
        parent = output.parent(level++);
        if (parent instanceof AST_Call && parent.expression === node)
          return;
      } while (parent instanceof AST_PropAccess && parent.expression === node);
      output.print("/*@__PURE__*/");
    }
    function print_call_args(self, output) {
      output.with_parens(function() {
        self.args.forEach(function(expr, i) {
          if (i)
            output.comma();
          expr.print(output);
        });
        output.add_mapping(self.end);
      });
    }
    DEFPRINT(AST_Call, function(output) {
      var self = this;
      print_annotation(self, output);
      self.expression.print(output);
      if (self.optional)
        output.print("?.");
      print_call_args(self, output);
    });
    DEFPRINT(AST_New, function(output) {
      var self = this;
      print_annotation(self, output);
      output.print("new");
      output.space();
      self.expression.print(output);
      if (need_constructor_parens(self, output))
        print_call_args(self, output);
    });
    DEFPRINT(AST_Sequence, function(output) {
      this.expressions.forEach(function(node, index) {
        if (index > 0) {
          output.comma();
          if (output.should_break()) {
            output.newline();
            output.indent();
          }
        }
        node.print(output);
      });
    });
    DEFPRINT(AST_Dot, function(output) {
      var self = this;
      var expr = self.expression;
      expr.print(output);
      var prop = self.property;
      if (output.option("ie") && RESERVED_WORDS[prop] || self.quoted && output.option("keep_quoted_props")) {
        if (self.optional)
          output.print("?.");
        output.with_square(function() {
          output.add_mapping(self.end);
          output.print_string(prop);
        });
      } else {
        if (expr instanceof AST_Number && !/[ex.)]/i.test(output.last()))
          output.print(".");
        output.print(self.optional ? "?." : ".");
        output.add_mapping(self.end);
        output.print_name(prop);
      }
    });
    DEFPRINT(AST_Sub, function(output) {
      var self = this;
      self.expression.print(output);
      if (self.optional)
        output.print("?.");
      output.with_square(function() {
        self.property.print(output);
      });
    });
    DEFPRINT(AST_Spread, function(output) {
      output.print("...");
      this.expression.print(output);
    });
    DEFPRINT(AST_UnaryPrefix, function(output) {
      var op = this.operator;
      var exp = this.expression;
      output.print(op);
      if (/^[a-z]/i.test(op) || /[+-]$/.test(op) && exp instanceof AST_UnaryPrefix && /^[+-]/.test(exp.operator)) {
        output.space();
      }
      exp.print(output);
    });
    DEFPRINT(AST_UnaryPostfix, function(output) {
      var self = this;
      self.expression.print(output);
      output.add_mapping(self.end);
      output.print(self.operator);
    });
    DEFPRINT(AST_Binary, function(output) {
      var self = this;
      self.left.print(output);
      output.space();
      output.print(self.operator);
      output.space();
      self.right.print(output);
    });
    DEFPRINT(AST_Conditional, function(output) {
      var self = this;
      self.condition.print(output);
      output.space();
      output.print("?");
      output.space();
      self.consequent.print(output);
      output.space();
      output.colon();
      self.alternative.print(output);
    });
    DEFPRINT(AST_Await, function(output) {
      output.print("await");
      output.space();
      this.expression.print(output);
    });
    DEFPRINT(AST_Yield, function(output) {
      output.print(this.nested ? "yield*" : "yield");
      if (this.expression) {
        output.space();
        this.expression.print(output);
      }
    });
    DEFPRINT(AST_Array, function(output) {
      var a2 = this.elements, len = a2.length;
      output.with_square(len > 0 ? function() {
        output.space();
        a2.forEach(function(exp, i) {
          if (i)
            output.comma();
          exp.print(output);
          if (i === len - 1 && exp instanceof AST_Hole)
            output.comma();
        });
        output.space();
      } : noop);
    });
    DEFPRINT(AST_DestructuredArray, function(output) {
      var a2 = this.elements, len = a2.length, rest = this.rest;
      output.with_square(len || rest ? function() {
        output.space();
        a2.forEach(function(exp, i) {
          if (i)
            output.comma();
          exp.print(output);
        });
        if (rest) {
          if (len)
            output.comma();
          output.print("...");
          rest.print(output);
        } else if (a2[len - 1] instanceof AST_Hole) {
          output.comma();
        }
        output.space();
      } : noop);
    });
    DEFPRINT(AST_DestructuredKeyVal, function(output) {
      var self = this;
      var key = print_property_key(self, output);
      var value = self.value;
      if (key) {
        if (value instanceof AST_DefaultValue) {
          if (value.name instanceof AST_Symbol && key == get_symbol_name(value.name)) {
            output.space();
            output.print("=");
            output.space();
            value.value.print(output);
            return;
          }
        } else if (value instanceof AST_Symbol) {
          if (key == get_symbol_name(value))
            return;
        }
      }
      output.colon();
      value.print(output);
    });
    DEFPRINT(AST_DestructuredObject, function(output) {
      var self = this;
      var props = self.properties, len = props.length, rest = self.rest;
      if (len || rest)
        output.with_block(function() {
          props.forEach(function(prop, i) {
            if (i) {
              output.print(",");
              output.newline();
            }
            output.indent();
            prop.print(output);
          });
          if (rest) {
            if (len) {
              output.print(",");
              output.newline();
            }
            output.indent();
            output.print("...");
            rest.print(output);
          }
          output.newline();
        }, self.end);
      else
        print_braced_empty(self, output);
    });
    function print_properties(self, output, no_comma) {
      var props = self.properties;
      if (props.length > 0)
        output.with_block(function() {
          props.forEach(function(prop, i) {
            if (i) {
              if (!no_comma)
                output.print(",");
              output.newline();
            }
            output.indent();
            prop.print(output);
          });
          output.newline();
        }, self.end);
      else
        print_braced_empty(self, output);
    }
    DEFPRINT(AST_Object, function(output) {
      print_properties(this, output);
    });
    function print_property_key(self, output) {
      var key = self.key;
      if (key instanceof AST_Node)
        return output.with_square(function() {
          key.print(output);
        });
      var quote = self.start && self.start.quote;
      if (output.option("quote_keys") || quote && output.option("keep_quoted_props")) {
        output.print_string(key, quote);
      } else if ("" + +key == key && key >= 0) {
        output.print(make_num(key));
      } else if (self.private) {
        output.print_name(key);
      } else if (RESERVED_WORDS[key] ? !output.option("ie") : is_identifier_string(key)) {
        output.print_name(key);
        return key;
      } else {
        output.print_string(key, quote);
      }
    }
    DEFPRINT(AST_ObjectKeyVal, function(output) {
      var self = this;
      print_property_key(self, output);
      output.colon();
      self.value.print(output);
    });
    DEFPRINT(AST_ObjectMethod, function(output) {
      print_method(this, output);
    });
    function print_accessor(type) {
      return function(output) {
        var self = this;
        if (self.static) {
          output.print("static");
          output.space();
        }
        output.print(type);
        output.space();
        print_property_key(self, output);
        print_lambda(self.value, output);
      };
    }
    DEFPRINT(AST_ObjectGetter, print_accessor("get"));
    DEFPRINT(AST_ObjectSetter, print_accessor("set"));
    function get_symbol_name(sym) {
      var def = sym.definition();
      return def && def.mangled_name || sym.name;
    }
    DEFPRINT(AST_Symbol, function(output) {
      output.print_name(get_symbol_name(this));
    });
    DEFPRINT(AST_SymbolExport, function(output) {
      var self = this;
      var name = get_symbol_name(self);
      output.print_name(name);
      var alias = self.alias;
      if (alias.value != name) {
        output.space();
        output.print("as");
        output.space();
        print_alias(alias, output);
      }
    });
    DEFPRINT(AST_SymbolImport, function(output) {
      var self = this;
      var name = get_symbol_name(self);
      var key = self.key;
      if (key.value && key.value != name) {
        print_alias(key, output);
        output.space();
        output.print("as");
        output.space();
      }
      output.print_name(name);
    });
    DEFPRINT(AST_Hole, noop);
    DEFPRINT(AST_Template, function(output) {
      var self = this;
      if (self.tag)
        self.tag.print(output);
      output.print("`");
      for (var i = 0;i < self.expressions.length; i++) {
        output.print(self.strings[i]);
        output.print("${");
        self.expressions[i].print(output);
        output.print("}");
      }
      output.print(self.strings[i]);
      output.print("`");
    });
    DEFPRINT(AST_Constant, function(output) {
      output.print("" + this.value);
    });
    DEFPRINT(AST_String, function(output) {
      output.print_string(this.value, this.quote);
    });
    DEFPRINT(AST_Number, function(output) {
      var start = this.start;
      if (use_asm && start && start.raw != null) {
        output.print(start.raw);
      } else {
        output.print(make_num(this.value));
      }
    });
    DEFPRINT(AST_RegExp, function(output) {
      var regexp = this.value;
      var str = regexp.toString();
      var end = str.lastIndexOf("/");
      if (regexp.raw_source) {
        str = "/" + regexp.raw_source + str.slice(end);
      } else if (end == 1) {
        str = "/(?:)" + str.slice(end);
      } else if (str.indexOf("/", 1) < end) {
        str = "/" + str.slice(1, end).replace(/\\\\|[^/]?\//g, function(match) {
          return match[0] == "\\" ? match : match.slice(0, -1) + "\\/";
        }) + str.slice(end);
      }
      output.print(output.to_utf8(str).replace(/\\(?:\0(?![0-9])|[^\0])/g, function(match) {
        switch (match[1]) {
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "\t":
            return "\t";
          case "\b":
            return "\b";
          case "\f":
            return "\f";
          case "\0":
            return "\0";
          case "\v":
            return "\v";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            return match;
        }
      }).replace(/[\n\r\u2028\u2029]/g, function(c2) {
        switch (c2) {
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
        }
      }));
    });
    function force_statement(stat, output) {
      if (output.option("braces") && !(stat instanceof AST_Const || stat instanceof AST_Let)) {
        make_block(stat, output);
      } else if (stat instanceof AST_EmptyStatement) {
        output.force_semicolon();
      } else {
        output.space();
        stat.print(output);
      }
    }
    function need_constructor_parens(self, output) {
      if (self.args.length > 0)
        return true;
      return output.option("beautify");
    }
    function best_of(a2) {
      var best = a2[0], len = best.length;
      for (var i = 1;i < a2.length; ++i) {
        if (a2[i].length < len) {
          best = a2[i];
          len = best.length;
        }
      }
      return best;
    }
    function make_num(num) {
      var str = num.toString(10).replace(/^0\./, ".").replace("e+", "e");
      var candidates = [str];
      if (Math.floor(num) === num) {
        if (num < 0) {
          candidates.push("-0x" + (-num).toString(16).toLowerCase());
        } else {
          candidates.push("0x" + num.toString(16).toLowerCase());
        }
      }
      var match, len, digits;
      if (match = /^\.0+/.exec(str)) {
        len = match[0].length;
        digits = str.slice(len);
        candidates.push(digits + "e-" + (digits.length + len - 1));
      } else if (match = /[^0]0+$/.exec(str)) {
        len = match[0].length - 1;
        candidates.push(str.slice(0, -len) + "e" + len);
      } else if (match = /^(\d)\.(\d+)e(-?\d+)$/.exec(str)) {
        candidates.push(match[1] + match[2] + "e" + (match[3] - match[2].length));
      }
      return best_of(candidates);
    }
    function make_block(stmt, output) {
      output.space();
      if (stmt instanceof AST_EmptyStatement) {
        print_braced_empty(stmt, output);
      } else if (stmt instanceof AST_BlockStatement) {
        stmt.print(output);
      } else
        output.with_block(function() {
          output.indent();
          stmt.print(output);
          output.newline();
        }, stmt.end);
    }
    function DEFMAP(nodetype, generator) {
      nodetype.forEach(function(nodetype2) {
        nodetype2.DEFMETHOD("add_source_map", generator);
      });
    }
    DEFMAP([
      AST_Node,
      AST_LabeledStatement
    ], noop);
    DEFMAP([
      AST_Array,
      AST_Await,
      AST_BlockStatement,
      AST_Catch,
      AST_Constant,
      AST_Debugger,
      AST_Definitions,
      AST_Destructured,
      AST_Directive,
      AST_Finally,
      AST_Jump,
      AST_Lambda,
      AST_New,
      AST_Object,
      AST_Spread,
      AST_StatementWithBody,
      AST_Symbol,
      AST_Switch,
      AST_SwitchBranch,
      AST_Try,
      AST_UnaryPrefix,
      AST_Yield
    ], function(output) {
      output.add_mapping(this.start);
    });
    DEFMAP([
      AST_ClassProperty,
      AST_DestructuredKeyVal,
      AST_ObjectProperty
    ], function(output) {
      if (typeof this.key == "string")
        output.add_mapping(this.start, this.key);
    });
  })();
});

// node_modules/uglify-js/lib/sourcemap.js
var exports_sourcemap = {};
var vlq_char, vlq_bits;
var init_sourcemap = __esm(() => {
  vlq_char = characters("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
  vlq_bits = vlq_char.reduce(function(map, ch, bits) {
    map[ch] = bits;
    return map;
  }, Object.create(null));
});

// node_modules/uglify-js/lib/mozilla-ast.js
var require_mozilla_ast = __commonJS((exports) => {
  (function() {
    var MOZ_TO_ME = {
      Program: function(M3) {
        return new AST_Toplevel({
          start: my_start_token(M3),
          end: my_end_token(M3),
          body: normalize_directives(M3.body.map(from_moz))
        });
      },
      ArrowFunctionExpression: function(M3) {
        var argnames = [], rest = null;
        M3.params.forEach(function(param) {
          if (param.type == "RestElement") {
            rest = from_moz(param.argument);
          } else {
            argnames.push(from_moz(param));
          }
        });
        var fn = new (M3.async ? AST_AsyncArrow : AST_Arrow)({
          start: my_start_token(M3),
          end: my_end_token(M3),
          argnames,
          rest
        });
        var node = from_moz(M3.body);
        if (node instanceof AST_BlockStatement) {
          fn.body = normalize_directives(node.body);
          fn.value = null;
        } else {
          fn.body = [];
          fn.value = node;
        }
        return fn;
      },
      FunctionDeclaration: function(M3) {
        var ctor;
        if (M3.async) {
          ctor = M3.generator ? AST_AsyncGeneratorDefun : AST_AsyncDefun;
        } else {
          ctor = M3.generator ? AST_GeneratorDefun : AST_Defun;
        }
        var argnames = [], rest = null;
        M3.params.forEach(function(param) {
          if (param.type == "RestElement") {
            rest = from_moz(param.argument);
          } else {
            argnames.push(from_moz(param));
          }
        });
        return new ctor({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: from_moz(M3.id),
          argnames,
          rest,
          body: normalize_directives(from_moz(M3.body).body)
        });
      },
      FunctionExpression: function(M3) {
        var ctor;
        if (M3.async) {
          ctor = M3.generator ? AST_AsyncGeneratorFunction : AST_AsyncFunction;
        } else {
          ctor = M3.generator ? AST_GeneratorFunction : AST_Function;
        }
        var argnames = [], rest = null;
        M3.params.forEach(function(param) {
          if (param.type == "RestElement") {
            rest = from_moz(param.argument);
          } else {
            argnames.push(from_moz(param));
          }
        });
        return new ctor({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: from_moz(M3.id),
          argnames,
          rest,
          body: normalize_directives(from_moz(M3.body).body)
        });
      },
      ClassDeclaration: function(M3) {
        return new AST_DefClass({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: from_moz(M3.id),
          extends: from_moz(M3.superClass),
          properties: M3.body.body.map(from_moz)
        });
      },
      ClassExpression: function(M3) {
        return new AST_ClassExpression({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: from_moz(M3.id),
          extends: from_moz(M3.superClass),
          properties: M3.body.body.map(from_moz)
        });
      },
      MethodDefinition: function(M3) {
        var key = M3.key, internal = false;
        if (M3.computed) {
          key = from_moz(key);
        } else if (key.type == "PrivateIdentifier") {
          internal = true;
          key = "#" + key.name;
        } else {
          key = read_name(key);
        }
        var ctor = AST_ClassMethod, value = from_moz(M3.value);
        switch (M3.kind) {
          case "get":
            ctor = AST_ClassGetter;
            value = new AST_Accessor(value);
            break;
          case "set":
            ctor = AST_ClassSetter;
            value = new AST_Accessor(value);
            break;
        }
        return new ctor({
          start: my_start_token(M3),
          end: my_end_token(M3),
          key,
          private: internal,
          static: M3.static,
          value
        });
      },
      PropertyDefinition: function(M3) {
        var key = M3.key, internal = false;
        if (M3.computed) {
          key = from_moz(key);
        } else if (key.type == "PrivateIdentifier") {
          internal = true;
          key = "#" + key.name;
        } else {
          key = read_name(key);
        }
        return new AST_ClassField({
          start: my_start_token(M3),
          end: my_end_token(M3),
          key,
          private: internal,
          static: M3.static,
          value: from_moz(M3.value)
        });
      },
      StaticBlock: function(M3) {
        var start = my_start_token(M3);
        var end = my_end_token(M3);
        return new AST_ClassInit({
          start,
          end,
          value: new AST_ClassInitBlock({
            start,
            end,
            body: normalize_directives(M3.body.map(from_moz))
          })
        });
      },
      ForOfStatement: function(M3) {
        return new (M3.await ? AST_ForAwaitOf : AST_ForOf)({
          start: my_start_token(M3),
          end: my_end_token(M3),
          init: from_moz(M3.left),
          object: from_moz(M3.right),
          body: from_moz(M3.body)
        });
      },
      TryStatement: function(M3) {
        var handlers = M3.handlers || [M3.handler];
        if (handlers.length > 1 || M3.guardedHandlers && M3.guardedHandlers.length) {
          throw new Error("Multiple catch clauses are not supported.");
        }
        return new AST_Try({
          start: my_start_token(M3),
          end: my_end_token(M3),
          body: from_moz(M3.block).body,
          bcatch: from_moz(handlers[0]),
          bfinally: M3.finalizer ? new AST_Finally(from_moz(M3.finalizer)) : null
        });
      },
      Property: function(M3) {
        var key = M3.computed ? from_moz(M3.key) : read_name(M3.key);
        var args = {
          start: my_start_token(M3),
          end: my_end_token(M3),
          key,
          value: from_moz(M3.value)
        };
        if (M3.kind == "init")
          return new (M3.method ? AST_ObjectMethod : AST_ObjectKeyVal)(args);
        args.value = new AST_Accessor(args.value);
        if (M3.kind == "get")
          return new AST_ObjectGetter(args);
        if (M3.kind == "set")
          return new AST_ObjectSetter(args);
      },
      ArrayExpression: function(M3) {
        return new AST_Array({
          start: my_start_token(M3),
          end: my_end_token(M3),
          elements: M3.elements.map(function(elem) {
            return elem === null ? new AST_Hole : from_moz(elem);
          })
        });
      },
      ArrayPattern: function(M3) {
        var elements = [], rest = null;
        M3.elements.forEach(function(el) {
          if (el === null) {
            elements.push(new AST_Hole);
          } else if (el.type == "RestElement") {
            rest = from_moz(el.argument);
          } else {
            elements.push(from_moz(el));
          }
        });
        return new AST_DestructuredArray({
          start: my_start_token(M3),
          end: my_end_token(M3),
          elements,
          rest
        });
      },
      ObjectPattern: function(M3) {
        var props = [], rest = null;
        M3.properties.forEach(function(prop) {
          if (prop.type == "RestElement") {
            rest = from_moz(prop.argument);
          } else {
            props.push(new AST_DestructuredKeyVal(from_moz(prop)));
          }
        });
        return new AST_DestructuredObject({
          start: my_start_token(M3),
          end: my_end_token(M3),
          properties: props,
          rest
        });
      },
      MemberExpression: function(M3) {
        return new (M3.computed ? AST_Sub : AST_Dot)({
          start: my_start_token(M3),
          end: my_end_token(M3),
          optional: M3.optional,
          expression: from_moz(M3.object),
          property: M3.computed ? from_moz(M3.property) : M3.property.name
        });
      },
      MetaProperty: function(M3) {
        var expr = from_moz(M3.meta);
        var prop = read_name(M3.property);
        if (expr.name == "new" && prop == "target")
          return new AST_NewTarget({
            start: my_start_token(M3),
            end: my_end_token(M3),
            name: "new.target"
          });
        return new AST_Dot({
          start: my_start_token(M3),
          end: my_end_token(M3),
          expression: expr,
          property: prop
        });
      },
      SwitchCase: function(M3) {
        return new (M3.test ? AST_Case : AST_Default)({
          start: my_start_token(M3),
          end: my_end_token(M3),
          expression: from_moz(M3.test),
          body: M3.consequent.map(from_moz)
        });
      },
      ExportAllDeclaration: function(M3) {
        var start = my_start_token(M3);
        var end = my_end_token(M3);
        return new AST_ExportForeign({
          start,
          end,
          aliases: [M3.exported ? from_moz_alias(M3.exported) : new AST_String({
            start,
            value: "*",
            end
          })],
          keys: [new AST_String({
            start,
            value: "*",
            end
          })],
          path: from_moz(M3.source)
        });
      },
      ExportDefaultDeclaration: function(M3) {
        var decl = from_moz(M3.declaration);
        if (!decl.name)
          switch (decl.CTOR) {
            case AST_AsyncDefun:
              decl = new AST_AsyncFunction(decl);
              break;
            case AST_AsyncGeneratorDefun:
              decl = new AST_AsyncGeneratorFunction(decl);
              break;
            case AST_DefClass:
              decl = new AST_ClassExpression(decl);
              break;
            case AST_Defun:
              decl = new AST_Function(decl);
              break;
            case AST_GeneratorDefun:
              decl = new AST_GeneratorFunction(decl);
              break;
          }
        return new AST_ExportDefault({
          start: my_start_token(M3),
          end: my_end_token(M3),
          body: decl
        });
      },
      ExportNamedDeclaration: function(M3) {
        if (M3.declaration)
          return new AST_ExportDeclaration({
            start: my_start_token(M3),
            end: my_end_token(M3),
            body: from_moz(M3.declaration)
          });
        if (M3.source) {
          var aliases = [], keys = [];
          M3.specifiers.forEach(function(prop) {
            aliases.push(from_moz_alias(prop.exported));
            keys.push(from_moz_alias(prop.local));
          });
          return new AST_ExportForeign({
            start: my_start_token(M3),
            end: my_end_token(M3),
            aliases,
            keys,
            path: from_moz(M3.source)
          });
        }
        return new AST_ExportReferences({
          start: my_start_token(M3),
          end: my_end_token(M3),
          properties: M3.specifiers.map(function(prop) {
            var sym = new AST_SymbolExport(from_moz(prop.local));
            sym.alias = from_moz_alias(prop.exported);
            return sym;
          })
        });
      },
      ImportDeclaration: function(M3) {
        var start = my_start_token(M3);
        var end = my_end_token(M3);
        var all2 = null, def = null, props = null;
        M3.specifiers.forEach(function(prop) {
          var sym = new AST_SymbolImport(from_moz(prop.local));
          switch (prop.type) {
            case "ImportDefaultSpecifier":
              def = sym;
              def.key = new AST_String({
                start,
                value: "",
                end
              });
              break;
            case "ImportNamespaceSpecifier":
              all2 = sym;
              all2.key = new AST_String({
                start,
                value: "*",
                end
              });
              break;
            default:
              sym.key = from_moz_alias(prop.imported);
              if (!props)
                props = [];
              props.push(sym);
              break;
          }
        });
        return new AST_Import({
          start,
          end,
          all: all2,
          default: def,
          properties: props,
          path: from_moz(M3.source)
        });
      },
      ImportExpression: function(M3) {
        var start = my_start_token(M3);
        var arg = from_moz(M3.source);
        return new AST_Call({
          start,
          end: my_end_token(M3),
          expression: new AST_SymbolRef({
            start,
            end: arg.start,
            name: "import"
          }),
          args: [arg]
        });
      },
      VariableDeclaration: function(M3) {
        return new ({
          const: AST_Const,
          let: AST_Let
        }[M3.kind] || AST_Var)({
          start: my_start_token(M3),
          end: my_end_token(M3),
          definitions: M3.declarations.map(from_moz)
        });
      },
      Literal: function(M3) {
        var args = {
          start: my_start_token(M3),
          end: my_end_token(M3)
        };
        if (M3.bigint) {
          args.value = M3.bigint.toLowerCase() + "n";
          return new AST_BigInt(args);
        }
        var val = M3.value;
        if (val === null)
          return new AST_Null(args);
        var rx = M3.regex;
        if (rx && rx.pattern) {
          args.value = new RegExp(rx.pattern, rx.flags);
          args.value.raw_source = rx.pattern;
          return new AST_RegExp(args);
        } else if (rx) {
          args.value = M3.regex && M3.raw ? M3.raw : val;
          return new AST_RegExp(args);
        }
        switch (typeof val) {
          case "string":
            args.value = val;
            return new AST_String(args);
          case "number":
            if (isNaN(val))
              return new AST_NaN(args);
            var negate, node;
            if (isFinite(val)) {
              negate = 1 / val < 0;
              args.value = negate ? -val : val;
              node = new AST_Number(args);
            } else {
              negate = val < 0;
              node = new AST_Infinity(args);
            }
            return negate ? new AST_UnaryPrefix({
              start: args.start,
              end: args.end,
              operator: "-",
              expression: node
            }) : node;
          case "boolean":
            return new (val ? AST_True : AST_False)(args);
        }
      },
      TemplateLiteral: function(M3) {
        return new AST_Template({
          start: my_start_token(M3),
          end: my_end_token(M3),
          expressions: M3.expressions.map(from_moz),
          strings: M3.quasis.map(function(el) {
            return el.value.raw;
          })
        });
      },
      TaggedTemplateExpression: function(M3) {
        var tmpl = from_moz(M3.quasi);
        tmpl.start = my_start_token(M3);
        tmpl.end = my_end_token(M3);
        tmpl.tag = from_moz(M3.tag);
        return tmpl;
      },
      Identifier: function(M3) {
        var p2, level = FROM_MOZ_STACK.length - 1;
        do {
          p2 = FROM_MOZ_STACK[--level];
        } while (p2.type == "ArrayPattern" || p2.type == "AssignmentPattern" && p2.left === FROM_MOZ_STACK[level + 1] || p2.type == "ObjectPattern" || p2.type == "Property" && p2.value === FROM_MOZ_STACK[level + 1] || p2.type == "VariableDeclarator" && p2.id === FROM_MOZ_STACK[level + 1]);
        var ctor = AST_SymbolRef;
        switch (p2.type) {
          case "ArrowFunctionExpression":
            if (p2.body !== FROM_MOZ_STACK[level + 1])
              ctor = AST_SymbolFunarg;
            break;
          case "BreakStatement":
          case "ContinueStatement":
            ctor = AST_LabelRef;
            break;
          case "CatchClause":
            ctor = AST_SymbolCatch;
            break;
          case "ClassDeclaration":
            if (p2.id === FROM_MOZ_STACK[level + 1])
              ctor = AST_SymbolDefClass;
            break;
          case "ClassExpression":
            if (p2.id === FROM_MOZ_STACK[level + 1])
              ctor = AST_SymbolClass;
            break;
          case "FunctionDeclaration":
            ctor = p2.id === FROM_MOZ_STACK[level + 1] ? AST_SymbolDefun : AST_SymbolFunarg;
            break;
          case "FunctionExpression":
            ctor = p2.id === FROM_MOZ_STACK[level + 1] ? AST_SymbolLambda : AST_SymbolFunarg;
            break;
          case "LabeledStatement":
            ctor = AST_Label;
            break;
          case "VariableDeclaration":
            ctor = {
              const: AST_SymbolConst,
              let: AST_SymbolLet
            }[p2.kind] || AST_SymbolVar;
            break;
        }
        return new ctor({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: M3.name
        });
      },
      Super: function(M3) {
        return new AST_Super({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: "super"
        });
      },
      ThisExpression: function(M3) {
        return new AST_This({
          start: my_start_token(M3),
          end: my_end_token(M3),
          name: "this"
        });
      },
      ParenthesizedExpression: function(M3) {
        var node = from_moz(M3.expression);
        if (!node.start.parens)
          node.start.parens = [];
        node.start.parens.push(my_start_token(M3));
        if (!node.end.parens)
          node.end.parens = [];
        node.end.parens.push(my_end_token(M3));
        return node;
      },
      ChainExpression: function(M3) {
        var node = from_moz(M3.expression);
        node.terminal = true;
        return node;
      }
    };
    MOZ_TO_ME.UpdateExpression = MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M3) {
      var prefix = "prefix" in M3 ? M3.prefix : M3.type == "UnaryExpression" ? true : false;
      return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({
        start: my_start_token(M3),
        end: my_end_token(M3),
        operator: M3.operator,
        expression: from_moz(M3.argument)
      });
    };
    map("EmptyStatement", AST_EmptyStatement);
    map("ExpressionStatement", AST_SimpleStatement, "expression>body");
    map("BlockStatement", AST_BlockStatement, "body@body");
    map("IfStatement", AST_If, "test>condition, consequent>body, alternate>alternative");
    map("LabeledStatement", AST_LabeledStatement, "label>label, body>body");
    map("BreakStatement", AST_Break, "label>label");
    map("ContinueStatement", AST_Continue, "label>label");
    map("WithStatement", AST_With, "object>expression, body>body");
    map("SwitchStatement", AST_Switch, "discriminant>expression, cases@body");
    map("ReturnStatement", AST_Return, "argument>value");
    map("ThrowStatement", AST_Throw, "argument>value");
    map("WhileStatement", AST_While, "test>condition, body>body");
    map("DoWhileStatement", AST_Do, "test>condition, body>body");
    map("ForStatement", AST_For, "init>init, test>condition, update>step, body>body");
    map("ForInStatement", AST_ForIn, "left>init, right>object, body>body");
    map("DebuggerStatement", AST_Debugger);
    map("VariableDeclarator", AST_VarDef, "id>name, init>value");
    map("CatchClause", AST_Catch, "param>argname, body%body");
    map("BinaryExpression", AST_Binary, "operator=operator, left>left, right>right");
    map("LogicalExpression", AST_Binary, "operator=operator, left>left, right>right");
    map("AssignmentExpression", AST_Assign, "operator=operator, left>left, right>right");
    map("AssignmentPattern", AST_DefaultValue, "left>name, right>value");
    map("ConditionalExpression", AST_Conditional, "test>condition, consequent>consequent, alternate>alternative");
    map("NewExpression", AST_New, "callee>expression, arguments@args, pure=pure");
    map("CallExpression", AST_Call, "callee>expression, arguments@args, optional=optional, pure=pure");
    map("SequenceExpression", AST_Sequence, "expressions@expressions");
    map("SpreadElement", AST_Spread, "argument>expression");
    map("ObjectExpression", AST_Object, "properties@properties");
    map("AwaitExpression", AST_Await, "argument>expression");
    map("YieldExpression", AST_Yield, "argument>expression, delegate=nested");
    def_to_moz(AST_Toplevel, function To_Moz_Program(M3) {
      return to_moz_scope("Program", M3);
    });
    def_to_moz(AST_LambdaDefinition, function To_Moz_FunctionDeclaration(M3) {
      var params = M3.argnames.map(to_moz);
      if (M3.rest)
        params.push({
          type: "RestElement",
          argument: to_moz(M3.rest)
        });
      return {
        type: "FunctionDeclaration",
        id: to_moz(M3.name),
        async: is_async(M3),
        generator: is_generator(M3),
        params,
        body: to_moz_scope("BlockStatement", M3)
      };
    });
    def_to_moz(AST_Lambda, function To_Moz_FunctionExpression(M3) {
      var params = M3.argnames.map(to_moz);
      if (M3.rest)
        params.push({
          type: "RestElement",
          argument: to_moz(M3.rest)
        });
      if (is_arrow(M3))
        return {
          type: "ArrowFunctionExpression",
          async: is_async(M3),
          params,
          body: M3.value ? to_moz(M3.value) : to_moz_scope("BlockStatement", M3)
        };
      return {
        type: "FunctionExpression",
        id: to_moz(M3.name),
        async: is_async(M3),
        generator: is_generator(M3),
        params,
        body: to_moz_scope("BlockStatement", M3)
      };
    });
    def_to_moz(AST_DefClass, function To_Moz_ClassDeclaration(M3) {
      return {
        type: "ClassDeclaration",
        id: to_moz(M3.name),
        superClass: to_moz(M3.extends),
        body: {
          type: "ClassBody",
          body: M3.properties.map(to_moz)
        }
      };
    });
    def_to_moz(AST_ClassExpression, function To_Moz_ClassExpression(M3) {
      return {
        type: "ClassExpression",
        id: to_moz(M3.name),
        superClass: to_moz(M3.extends),
        body: {
          type: "ClassBody",
          body: M3.properties.map(to_moz)
        }
      };
    });
    function To_Moz_MethodDefinition(kind) {
      return function(M3) {
        var computed = M3.key instanceof AST_Node;
        var key = computed ? to_moz(M3.key) : M3.private ? {
          type: "PrivateIdentifier",
          name: M3.key.slice(1)
        } : {
          type: "Literal",
          value: M3.key
        };
        return {
          type: "MethodDefinition",
          kind,
          computed,
          key,
          static: M3.static,
          value: to_moz(M3.value)
        };
      };
    }
    def_to_moz(AST_ClassGetter, To_Moz_MethodDefinition("get"));
    def_to_moz(AST_ClassSetter, To_Moz_MethodDefinition("set"));
    def_to_moz(AST_ClassMethod, To_Moz_MethodDefinition("method"));
    def_to_moz(AST_ClassField, function To_Moz_PropertyDefinition(M3) {
      var computed = M3.key instanceof AST_Node;
      var key = computed ? to_moz(M3.key) : M3.private ? {
        type: "PrivateIdentifier",
        name: M3.key.slice(1)
      } : {
        type: "Literal",
        value: M3.key
      };
      return {
        type: "PropertyDefinition",
        computed,
        key,
        static: M3.static,
        value: to_moz(M3.value)
      };
    });
    def_to_moz(AST_ClassInit, function To_Moz_StaticBlock(M3) {
      return to_moz_scope("StaticBlock", M3.value);
    });
    function To_Moz_ForOfStatement(is_await) {
      return function(M3) {
        return {
          type: "ForOfStatement",
          await: is_await,
          left: to_moz(M3.init),
          right: to_moz(M3.object),
          body: to_moz(M3.body)
        };
      };
    }
    def_to_moz(AST_ForAwaitOf, To_Moz_ForOfStatement(true));
    def_to_moz(AST_ForOf, To_Moz_ForOfStatement(false));
    def_to_moz(AST_Directive, function To_Moz_Directive(M3) {
      return {
        type: "ExpressionStatement",
        expression: set_moz_loc(M3, {
          type: "Literal",
          value: M3.value
        })
      };
    });
    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M3) {
      return {
        type: "SwitchCase",
        test: to_moz(M3.expression),
        consequent: M3.body.map(to_moz)
      };
    });
    def_to_moz(AST_Try, function To_Moz_TryStatement(M3) {
      return {
        type: "TryStatement",
        block: to_moz_block(M3),
        handler: to_moz(M3.bcatch),
        guardedHandlers: [],
        finalizer: to_moz(M3.bfinally)
      };
    });
    def_to_moz(AST_Catch, function To_Moz_CatchClause(M3) {
      return {
        type: "CatchClause",
        param: to_moz(M3.argname),
        guard: null,
        body: to_moz_block(M3)
      };
    });
    def_to_moz(AST_ExportDeclaration, function To_Moz_ExportNamedDeclaration_declaration(M3) {
      return {
        type: "ExportNamedDeclaration",
        declaration: to_moz(M3.body)
      };
    });
    def_to_moz(AST_ExportDefault, function To_Moz_ExportDefaultDeclaration(M3) {
      return {
        type: "ExportDefaultDeclaration",
        declaration: to_moz(M3.body)
      };
    });
    def_to_moz(AST_ExportForeign, function To_Moz_ExportAllDeclaration_ExportNamedDeclaration(M3) {
      if (M3.keys[0].value == "*")
        return {
          type: "ExportAllDeclaration",
          exported: M3.aliases[0].value == "*" ? null : to_moz_alias(M3.aliases[0]),
          source: to_moz(M3.path)
        };
      var specifiers = [];
      for (var i = 0;i < M3.aliases.length; i++) {
        specifiers.push(set_moz_loc({
          start: M3.keys[i].start,
          end: M3.aliases[i].end
        }, {
          type: "ExportSpecifier",
          local: to_moz_alias(M3.keys[i]),
          exported: to_moz_alias(M3.aliases[i])
        }));
      }
      return {
        type: "ExportNamedDeclaration",
        specifiers,
        source: to_moz(M3.path)
      };
    });
    def_to_moz(AST_ExportReferences, function To_Moz_ExportNamedDeclaration_specifiers(M3) {
      return {
        type: "ExportNamedDeclaration",
        specifiers: M3.properties.map(function(prop) {
          return set_moz_loc({
            start: prop.start,
            end: prop.alias.end
          }, {
            type: "ExportSpecifier",
            local: to_moz(prop),
            exported: to_moz_alias(prop.alias)
          });
        })
      };
    });
    def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M3) {
      var specifiers = M3.properties ? M3.properties.map(function(prop) {
        return set_moz_loc({
          start: prop.key.start,
          end: prop.end
        }, {
          type: "ImportSpecifier",
          local: to_moz(prop),
          imported: to_moz_alias(prop.key)
        });
      }) : [];
      if (M3.all)
        specifiers.unshift(set_moz_loc(M3.all, {
          type: "ImportNamespaceSpecifier",
          local: to_moz(M3.all)
        }));
      if (M3.default)
        specifiers.unshift(set_moz_loc(M3.default, {
          type: "ImportDefaultSpecifier",
          local: to_moz(M3.default)
        }));
      return {
        type: "ImportDeclaration",
        specifiers,
        source: to_moz(M3.path)
      };
    });
    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M3) {
      return {
        type: "VariableDeclaration",
        kind: M3.TYPE.toLowerCase(),
        declarations: M3.definitions.map(to_moz)
      };
    });
    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M3) {
      var computed = M3 instanceof AST_Sub;
      var expr = {
        type: "MemberExpression",
        object: to_moz(M3.expression),
        computed,
        optional: M3.optional,
        property: computed ? to_moz(M3.property) : {
          type: "Identifier",
          name: M3.property
        }
      };
      return M3.terminal ? {
        type: "ChainExpression",
        expression: expr
      } : expr;
    });
    def_to_moz(AST_Unary, function To_Moz_Unary(M3) {
      return {
        type: M3.operator == "++" || M3.operator == "--" ? "UpdateExpression" : "UnaryExpression",
        operator: M3.operator,
        prefix: M3 instanceof AST_UnaryPrefix,
        argument: to_moz(M3.expression)
      };
    });
    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M3) {
      return {
        type: M3.operator == "&&" || M3.operator == "||" ? "LogicalExpression" : "BinaryExpression",
        left: to_moz(M3.left),
        operator: M3.operator,
        right: to_moz(M3.right)
      };
    });
    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M3) {
      return {
        type: "ArrayExpression",
        elements: M3.elements.map(to_moz)
      };
    });
    def_to_moz(AST_DestructuredArray, function To_Moz_ArrayPattern(M3) {
      var elements = M3.elements.map(to_moz);
      if (M3.rest)
        elements.push({
          type: "RestElement",
          argument: to_moz(M3.rest)
        });
      return {
        type: "ArrayPattern",
        elements
      };
    });
    def_to_moz(AST_DestructuredKeyVal, function To_Moz_Property(M3) {
      var computed = M3.key instanceof AST_Node;
      var key = computed ? to_moz(M3.key) : {
        type: "Literal",
        value: M3.key
      };
      return {
        type: "Property",
        kind: "init",
        computed,
        key,
        value: to_moz(M3.value)
      };
    });
    def_to_moz(AST_DestructuredObject, function To_Moz_ObjectPattern(M3) {
      var props = M3.properties.map(to_moz);
      if (M3.rest)
        props.push({
          type: "RestElement",
          argument: to_moz(M3.rest)
        });
      return {
        type: "ObjectPattern",
        properties: props
      };
    });
    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M3) {
      var computed = M3.key instanceof AST_Node;
      var key = computed ? to_moz(M3.key) : {
        type: "Literal",
        value: M3.key
      };
      var kind;
      if (M3 instanceof AST_ObjectKeyVal) {
        kind = "init";
      } else if (M3 instanceof AST_ObjectGetter) {
        kind = "get";
      } else if (M3 instanceof AST_ObjectSetter) {
        kind = "set";
      }
      return {
        type: "Property",
        kind,
        computed,
        method: M3 instanceof AST_ObjectMethod,
        key,
        value: to_moz(M3.value)
      };
    });
    def_to_moz(AST_Symbol, function To_Moz_Identifier(M3) {
      var def = M3.definition();
      return {
        type: "Identifier",
        name: def && def.mangled_name || M3.name
      };
    });
    def_to_moz(AST_Super, function To_Moz_Super() {
      return { type: "Super" };
    });
    def_to_moz(AST_This, function To_Moz_ThisExpression() {
      return { type: "ThisExpression" };
    });
    def_to_moz(AST_NewTarget, function To_Moz_MetaProperty() {
      return {
        type: "MetaProperty",
        meta: {
          type: "Identifier",
          name: "new"
        },
        property: {
          type: "Identifier",
          name: "target"
        }
      };
    });
    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M3) {
      var flags = M3.value.toString().match(/\/([gimuy]*)$/)[1];
      var value = "/" + M3.value.raw_source + "/" + flags;
      return {
        type: "Literal",
        value,
        raw: value,
        regex: {
          pattern: M3.value.raw_source,
          flags
        }
      };
    });
    def_to_moz(AST_BigInt, function To_Moz_BigInt(M3) {
      var value = M3.value;
      return {
        type: "Literal",
        bigint: value.slice(0, -1),
        raw: value
      };
    });
    function To_Moz_Literal(M3) {
      var value = M3.value;
      if (typeof value === "number" && (value < 0 || value === 0 && 1 / value < 0)) {
        return {
          type: "UnaryExpression",
          operator: "-",
          prefix: true,
          argument: {
            type: "Literal",
            value: -value,
            raw: M3.start.raw
          }
        };
      }
      return {
        type: "Literal",
        value,
        raw: M3.start.raw
      };
    }
    def_to_moz(AST_Boolean, To_Moz_Literal);
    def_to_moz(AST_Constant, To_Moz_Literal);
    def_to_moz(AST_Null, To_Moz_Literal);
    def_to_moz(AST_Atom, function To_Moz_Atom(M3) {
      return {
        type: "Identifier",
        name: String(M3.value)
      };
    });
    def_to_moz(AST_Template, function To_Moz_TemplateLiteral_TaggedTemplateExpression(M3) {
      var last = M3.strings.length - 1;
      var tmpl = {
        type: "TemplateLiteral",
        expressions: M3.expressions.map(to_moz),
        quasis: M3.strings.map(function(str, index) {
          return {
            type: "TemplateElement",
            tail: index == last,
            value: { raw: str }
          };
        })
      };
      if (!M3.tag)
        return tmpl;
      return {
        type: "TaggedTemplateExpression",
        tag: to_moz(M3.tag),
        quasi: tmpl
      };
    });
    AST_Block.DEFMETHOD("to_mozilla_ast", AST_BlockStatement.prototype.to_mozilla_ast);
    AST_Hole.DEFMETHOD("to_mozilla_ast", return_null);
    AST_Node.DEFMETHOD("to_mozilla_ast", function() {
      throw new Error("Cannot convert AST_" + this.TYPE);
    });
    function normalize_directives(body) {
      for (var i = 0;i < body.length; i++) {
        var stat = body[i];
        if (!(stat instanceof AST_SimpleStatement))
          break;
        var node = stat.body;
        if (!(node instanceof AST_String))
          break;
        if (stat.start.pos !== node.start.pos)
          break;
        body[i] = new AST_Directive(node);
      }
      return body;
    }
    function raw_token(moznode) {
      if (moznode.type == "Literal") {
        return moznode.raw != null ? moznode.raw : moznode.value + "";
      }
    }
    function my_start_token(moznode) {
      var loc = moznode.loc, start = loc && loc.start;
      var range = moznode.range;
      return new AST_Token({
        file: loc && loc.source,
        line: start && start.line,
        col: start && start.column,
        pos: range ? range[0] : moznode.start,
        endline: start && start.line,
        endcol: start && start.column,
        endpos: range ? range[0] : moznode.start,
        raw: raw_token(moznode)
      });
    }
    function my_end_token(moznode) {
      var loc = moznode.loc, end = loc && loc.end;
      var range = moznode.range;
      return new AST_Token({
        file: loc && loc.source,
        line: end && end.line,
        col: end && end.column,
        pos: range ? range[1] : moznode.end,
        endline: end && end.line,
        endcol: end && end.column,
        endpos: range ? range[1] : moznode.end,
        raw: raw_token(moznode)
      });
    }
    function read_name(M3) {
      return "" + M3[M3.type == "Identifier" ? "name" : "value"];
    }
    function map(moztype, mytype, propmap) {
      var moz_to_me = [
        "start: my_start_token(M)",
        "end: my_end_token(M)"
      ];
      var me_to_moz = [
        "type: " + JSON.stringify(moztype)
      ];
      if (propmap)
        propmap.split(/\s*,\s*/).forEach(function(prop) {
          var m4 = /([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(prop);
          if (!m4)
            throw new Error("Can't understand property map: " + prop);
          var moz = m4[1], how = m4[2], my = m4[3];
          switch (how) {
            case "@":
              moz_to_me.push(my + ": M." + moz + ".map(from_moz)");
              me_to_moz.push(moz + ": M." + my + ".map(to_moz)");
              break;
            case ">":
              moz_to_me.push(my + ": from_moz(M." + moz + ")");
              me_to_moz.push(moz + ": to_moz(M." + my + ")");
              break;
            case "=":
              moz_to_me.push(my + ": M." + moz);
              me_to_moz.push(moz + ": M." + my);
              break;
            case "%":
              moz_to_me.push(my + ": from_moz(M." + moz + ").body");
              me_to_moz.push(moz + ": to_moz_block(M)");
              break;
            default:
              throw new Error("Can't understand operator in propmap: " + prop);
          }
        });
      MOZ_TO_ME[moztype] = new Function("U2", "my_start_token", "my_end_token", "from_moz", [
        "return function From_Moz_" + moztype + "(M) {",
        "    return new U2.AST_" + mytype.TYPE + "({",
        moz_to_me.join(",\n"),
        "    });",
        "};"
      ].join("\n"))(exports, my_start_token, my_end_token, from_moz);
      def_to_moz(mytype, new Function("to_moz", "to_moz_block", "to_moz_scope", [
        "return function To_Moz_" + moztype + "(M) {",
        "    return {",
        me_to_moz.join(",\n"),
        "    };",
        "};"
      ].join("\n"))(to_moz, to_moz_block, to_moz_scope));
    }
    var FROM_MOZ_STACK = null;
    function from_moz(moz) {
      FROM_MOZ_STACK.push(moz);
      var node = null;
      if (moz) {
        if (!HOP(MOZ_TO_ME, moz.type))
          throw new Error("Unsupported type: " + moz.type);
        node = MOZ_TO_ME[moz.type](moz);
      }
      FROM_MOZ_STACK.pop();
      return node;
    }
    function from_moz_alias(moz) {
      return new AST_String({
        start: my_start_token(moz),
        value: read_name(moz),
        end: my_end_token(moz)
      });
    }
    AST_Node.from_mozilla_ast = function(node) {
      var save_stack = FROM_MOZ_STACK;
      FROM_MOZ_STACK = [];
      var ast = from_moz(node);
      FROM_MOZ_STACK = save_stack;
      ast.walk(new TreeWalker(function(node2) {
        if (node2 instanceof AST_LabelRef) {
          for (var level = 0, parent;parent = this.parent(level); level++) {
            if (parent instanceof AST_Scope)
              break;
            if (parent instanceof AST_LabeledStatement && parent.label.name == node2.name) {
              node2.thedef = parent.label;
              break;
            }
          }
          if (!node2.thedef) {
            var s2 = node2.start;
            js_error("Undefined label " + node2.name, s2.file, s2.line, s2.col, s2.pos);
          }
        }
      }));
      return ast;
    };
    function set_moz_loc(mynode, moznode) {
      var start = mynode.start;
      var end = mynode.end;
      if (start.pos != null && end.endpos != null) {
        moznode.range = [start.pos, end.endpos];
      }
      if (start.line) {
        moznode.loc = {
          start: { line: start.line, column: start.col },
          end: end.endline ? { line: end.endline, column: end.endcol } : null
        };
        if (start.file) {
          moznode.loc.source = start.file;
        }
      }
      return moznode;
    }
    function def_to_moz(mytype, handler) {
      mytype.DEFMETHOD("to_mozilla_ast", function() {
        return set_moz_loc(this, handler(this));
      });
    }
    function to_moz(node) {
      return node != null ? node.to_mozilla_ast() : null;
    }
    function to_moz_alias(alias) {
      return is_identifier_string(alias.value) ? set_moz_loc(alias, {
        type: "Identifier",
        name: alias.value
      }) : to_moz(alias);
    }
    function to_moz_block(node) {
      return {
        type: "BlockStatement",
        body: node.body.map(to_moz)
      };
    }
    function to_moz_scope(type, node) {
      var body = node.body.map(to_moz);
      if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {
        body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));
      }
      return {
        type,
        body
      };
    }
  })();
});

// node_modules/uglify-js/lib/propmangle.js
var exports_propmangle = {};
var init_propmangle = __esm(() => {
});

// node_modules/uglify-js/lib/minify.js
var exports_minify = {};
var to_ascii, to_base64;
var init_minify = __esm(() => {
  if (typeof Buffer == "undefined") {
    to_ascii = atob;
    to_base64 = btoa;
  } else if (typeof Buffer.alloc == "undefined") {
    to_ascii = function(b64) {
      return new Buffer(b64, "base64").toString();
    };
    to_base64 = function(str) {
      return new Buffer(str).toString("base64");
    };
  } else {
    to_ascii = function(b64) {
      return Buffer.from(b64, "base64").toString();
    };
    to_base64 = function(str) {
      return Buffer.from(str).toString("base64");
    };
  }
});

// node_modules/uglify-js/tools/exports.js
var exports_exports = {};
__export(exports_exports, {
  push_uniq: () => {
    {
      return $push_uniq;
    }
  },
  parse: () => {
    {
      return $parse;
    }
  },
  minify: () => {
    {
      return $minify;
    }
  },
  is_statement: () => {
    {
      return $is_statement;
    }
  },
  TreeWalker: () => {
    {
      return $TreeWalker;
    }
  },
  TreeTransformer: () => {
    {
      return $TreeTransformer;
    }
  },
  List: () => {
    {
      return $List;
    }
  },
  Dictionary: () => {
    {
      return $Dictionary;
    }
  }
});
var $Dictionary, $is_statement, $List, $minify, $parse, $push_uniq, $TreeTransformer, $TreeWalker;
var init_exports = __esm(() => {
  $Dictionary = Dictionary;
  $is_statement = is_statement;
  $List = List;
  $minify = minify;
  $parse = parse;
  $push_uniq = push_uniq;
  $TreeTransformer = TreeTransformer;
  $TreeWalker = TreeWalker;
});

// node_modules/uglify-js/tools/domprops.json
var require_domprops = __commonJS((exports, module) => {
  module.exports = [
    "$&",
    "$'",
    "$*",
    "$+",
    "$1",
    "$2",
    "$3",
    "$4",
    "$5",
    "$6",
    "$7",
    "$8",
    "$9",
    "$_",
    "$`",
    "$input",
    "-moz-animation",
    "-moz-animation-delay",
    "-moz-animation-direction",
    "-moz-animation-duration",
    "-moz-animation-fill-mode",
    "-moz-animation-iteration-count",
    "-moz-animation-name",
    "-moz-animation-play-state",
    "-moz-animation-timing-function",
    "-moz-appearance",
    "-moz-backface-visibility",
    "-moz-binding",
    "-moz-border-end",
    "-moz-border-end-color",
    "-moz-border-end-style",
    "-moz-border-end-width",
    "-moz-border-image",
    "-moz-border-start",
    "-moz-border-start-color",
    "-moz-border-start-style",
    "-moz-border-start-width",
    "-moz-box-align",
    "-moz-box-direction",
    "-moz-box-flex",
    "-moz-box-ordinal-group",
    "-moz-box-orient",
    "-moz-box-pack",
    "-moz-box-sizing",
    "-moz-column-count",
    "-moz-column-fill",
    "-moz-column-gap",
    "-moz-column-rule",
    "-moz-column-rule-color",
    "-moz-column-rule-style",
    "-moz-column-rule-width",
    "-moz-column-width",
    "-moz-columns",
    "-moz-float-edge",
    "-moz-font-feature-settings",
    "-moz-font-language-override",
    "-moz-force-broken-image-icon",
    "-moz-hyphens",
    "-moz-image-region",
    "-moz-margin-end",
    "-moz-margin-start",
    "-moz-orient",
    "-moz-outline-radius",
    "-moz-outline-radius-bottomleft",
    "-moz-outline-radius-bottomright",
    "-moz-outline-radius-topleft",
    "-moz-outline-radius-topright",
    "-moz-padding-end",
    "-moz-padding-start",
    "-moz-perspective",
    "-moz-perspective-origin",
    "-moz-stack-sizing",
    "-moz-tab-size",
    "-moz-text-size-adjust",
    "-moz-transform",
    "-moz-transform-origin",
    "-moz-transform-style",
    "-moz-transition",
    "-moz-transition-delay",
    "-moz-transition-duration",
    "-moz-transition-property",
    "-moz-transition-timing-function",
    "-moz-user-focus",
    "-moz-user-input",
    "-moz-user-modify",
    "-moz-user-select",
    "-moz-window-dragging",
    "-webkit-align-content",
    "-webkit-align-items",
    "-webkit-align-self",
    "-webkit-animation",
    "-webkit-animation-delay",
    "-webkit-animation-direction",
    "-webkit-animation-duration",
    "-webkit-animation-fill-mode",
    "-webkit-animation-iteration-count",
    "-webkit-animation-name",
    "-webkit-animation-play-state",
    "-webkit-animation-timing-function",
    "-webkit-appearance",
    "-webkit-backface-visibility",
    "-webkit-background-clip",
    "-webkit-background-origin",
    "-webkit-background-size",
    "-webkit-border-bottom-left-radius",
    "-webkit-border-bottom-right-radius",
    "-webkit-border-image",
    "-webkit-border-radius",
    "-webkit-border-top-left-radius",
    "-webkit-border-top-right-radius",
    "-webkit-box-align",
    "-webkit-box-direction",
    "-webkit-box-flex",
    "-webkit-box-ordinal-group",
    "-webkit-box-orient",
    "-webkit-box-pack",
    "-webkit-box-shadow",
    "-webkit-box-sizing",
    "-webkit-filter",
    "-webkit-flex",
    "-webkit-flex-basis",
    "-webkit-flex-direction",
    "-webkit-flex-flow",
    "-webkit-flex-grow",
    "-webkit-flex-shrink",
    "-webkit-flex-wrap",
    "-webkit-justify-content",
    "-webkit-line-clamp",
    "-webkit-mask",
    "-webkit-mask-clip",
    "-webkit-mask-composite",
    "-webkit-mask-image",
    "-webkit-mask-origin",
    "-webkit-mask-position",
    "-webkit-mask-position-x",
    "-webkit-mask-position-y",
    "-webkit-mask-repeat",
    "-webkit-mask-size",
    "-webkit-order",
    "-webkit-perspective",
    "-webkit-perspective-origin",
    "-webkit-text-fill-color",
    "-webkit-text-size-adjust",
    "-webkit-text-stroke",
    "-webkit-text-stroke-color",
    "-webkit-text-stroke-width",
    "-webkit-transform",
    "-webkit-transform-origin",
    "-webkit-transform-style",
    "-webkit-transition",
    "-webkit-transition-delay",
    "-webkit-transition-duration",
    "-webkit-transition-property",
    "-webkit-transition-timing-function",
    "-webkit-user-select",
    "0",
    "1",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "2",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "3",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "4",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "5",
    "50",
    "51",
    "6",
    "7",
    "8",
    "9",
    "@@iterator",
    "ABORT_ERR",
    "ACTIVE",
    "ACTIVE_ATTRIBUTES",
    "ACTIVE_TEXTURE",
    "ACTIVE_UNIFORMS",
    "ACTIVE_UNIFORM_BLOCKS",
    "ADDITION",
    "ALIASED_LINE_WIDTH_RANGE",
    "ALIASED_POINT_SIZE_RANGE",
    "ALLOW_KEYBOARD_INPUT",
    "ALLPASS",
    "ALPHA",
    "ALPHA_BITS",
    "ALREADY_SIGNALED",
    "ALT_MASK",
    "ALWAYS",
    "ANDROID",
    "ANGLE_instanced_arrays",
    "ANY_SAMPLES_PASSED",
    "ANY_SAMPLES_PASSED_CONSERVATIVE",
    "ANY_TYPE",
    "ANY_UNORDERED_NODE_TYPE",
    "APP_UPDATE",
    "ARM",
    "ARRAY_BUFFER",
    "ARRAY_BUFFER_BINDING",
    "ATTACHED_SHADERS",
    "ATTRIBUTE_NODE",
    "AT_TARGET",
    "AbortController",
    "AbortSignal",
    "AbsoluteOrientationSensor",
    "AbstractRange",
    "Accelerometer",
    "ActiveXObject",
    "AddSearchProvider",
    "AesGcmEncryptResult",
    "AggregateError",
    "AnalyserNode",
    "Animation",
    "AnimationEffect",
    "AnimationEvent",
    "AnimationPlaybackEvent",
    "AnimationTimeline",
    "AnonXMLHttpRequest",
    "AppBannerPromptResult",
    "ApplicationCache",
    "ApplicationCacheErrorEvent",
    "Array",
    "ArrayBuffer",
    "Atomics",
    "Attr",
    "Audio",
    "AudioBuffer",
    "AudioBufferSourceNode",
    "AudioContext",
    "AudioDestinationNode",
    "AudioListener",
    "AudioNode",
    "AudioParam",
    "AudioParamMap",
    "AudioProcessingEvent",
    "AudioScheduledSourceNode",
    "AudioStreamTrack",
    "AudioTrack",
    "AudioTrackList",
    "AudioWorklet",
    "AudioWorkletNode",
    "AuthenticatorAssertionResponse",
    "AuthenticatorAttestationResponse",
    "AuthenticatorResponse",
    "AutocompleteErrorEvent",
    "BACK",
    "BAD_BOUNDARYPOINTS_ERR",
    "BAD_REQUEST",
    "BANDPASS",
    "BLEND",
    "BLEND_COLOR",
    "BLEND_DST_ALPHA",
    "BLEND_DST_RGB",
    "BLEND_EQUATION",
    "BLEND_EQUATION_ALPHA",
    "BLEND_EQUATION_RGB",
    "BLEND_SRC_ALPHA",
    "BLEND_SRC_RGB",
    "BLUE_BITS",
    "BLUR",
    "BOOL",
    "BOOLEAN_TYPE",
    "BOOL_VEC2",
    "BOOL_VEC3",
    "BOOL_VEC4",
    "BOTH",
    "BROWSER_DEFAULT_WEBGL",
    "BUBBLING_PHASE",
    "BUFFER_SIZE",
    "BUFFER_USAGE",
    "BYTE",
    "BYTES_PER_ELEMENT",
    "BackgroundFetchManager",
    "BackgroundFetchRecord",
    "BackgroundFetchRegistration",
    "BarProp",
    "BarcodeDetector",
    "BaseAudioContext",
    "BaseHref",
    "BatteryManager",
    "BeforeInstallPromptEvent",
    "BeforeLoadEvent",
    "BeforeUnloadEvent",
    "BigInt",
    "BigInt64Array",
    "BigUint64Array",
    "BiquadFilterNode",
    "Blob",
    "BlobEvent",
    "Bluetooth",
    "BluetoothCharacteristicProperties",
    "BluetoothDevice",
    "BluetoothRemoteGATTCharacteristic",
    "BluetoothRemoteGATTDescriptor",
    "BluetoothRemoteGATTServer",
    "BluetoothRemoteGATTService",
    "BluetoothUUID",
    "BookmarkCollection",
    "Boolean",
    "BroadcastChannel",
    "ByteLengthQueuingStrategy",
    "CANNOT_RUN",
    "CAPTURING_PHASE",
    "CCW",
    "CDATASection",
    "CDATA_SECTION_NODE",
    "CHANGE",
    "CHARSET_RULE",
    "CHECKING",
    "CHROME_UPDATE",
    "CLAMP_TO_EDGE",
    "CLICK",
    "CLOSED",
    "CLOSING",
    "COLOR",
    "COLOR_ATTACHMENT0",
    "COLOR_ATTACHMENT1",
    "COLOR_ATTACHMENT10",
    "COLOR_ATTACHMENT11",
    "COLOR_ATTACHMENT12",
    "COLOR_ATTACHMENT13",
    "COLOR_ATTACHMENT14",
    "COLOR_ATTACHMENT15",
    "COLOR_ATTACHMENT2",
    "COLOR_ATTACHMENT3",
    "COLOR_ATTACHMENT4",
    "COLOR_ATTACHMENT5",
    "COLOR_ATTACHMENT6",
    "COLOR_ATTACHMENT7",
    "COLOR_ATTACHMENT8",
    "COLOR_ATTACHMENT9",
    "COLOR_BUFFER_BIT",
    "COLOR_CLEAR_VALUE",
    "COLOR_WRITEMASK",
    "COMMENT_NODE",
    "COMPARE_REF_TO_TEXTURE",
    "COMPILE_STATUS",
    "COMPRESSED_RGBA_S3TC_DXT1_EXT",
    "COMPRESSED_RGBA_S3TC_DXT3_EXT",
    "COMPRESSED_RGBA_S3TC_DXT5_EXT",
    "COMPRESSED_RGB_S3TC_DXT1_EXT",
    "COMPRESSED_TEXTURE_FORMATS",
    "CONDITION_SATISFIED",
    "CONFIGURATION_UNSUPPORTED",
    "CONNECTING",
    "CONSTANT_ALPHA",
    "CONSTANT_COLOR",
    "CONSTRAINT_ERR",
    "CONTENT",
    "CONTEXT_LOST_WEBGL",
    "CONTROL_MASK",
    "COPY_READ_BUFFER",
    "COPY_READ_BUFFER_BINDING",
    "COPY_WRITE_BUFFER",
    "COPY_WRITE_BUFFER_BINDING",
    "COUNTER_STYLE_RULE",
    "CROS",
    "CSS",
    "CSS2Properties",
    "CSSAnimation",
    "CSSCharsetRule",
    "CSSConditionRule",
    "CSSCounterStyleRule",
    "CSSFontFaceRule",
    "CSSFontFeatureValuesRule",
    "CSSGroupingRule",
    "CSSImageValue",
    "CSSImportRule",
    "CSSKeyframeRule",
    "CSSKeyframesRule",
    "CSSKeywordValue",
    "CSSMathInvert",
    "CSSMathMax",
    "CSSMathMin",
    "CSSMathNegate",
    "CSSMathProduct",
    "CSSMathSum",
    "CSSMathValue",
    "CSSMatrixComponent",
    "CSSMediaRule",
    "CSSMozDocumentRule",
    "CSSNameSpaceRule",
    "CSSNamespaceRule",
    "CSSNumericArray",
    "CSSNumericValue",
    "CSSPageRule",
    "CSSPerspective",
    "CSSPositionValue",
    "CSSPrimitiveValue",
    "CSSRotate",
    "CSSRule",
    "CSSRuleList",
    "CSSScale",
    "CSSSkew",
    "CSSSkewX",
    "CSSSkewY",
    "CSSStyleDeclaration",
    "CSSStyleRule",
    "CSSStyleSheet",
    "CSSStyleValue",
    "CSSSupportsRule",
    "CSSTransformComponent",
    "CSSTransformValue",
    "CSSTransition",
    "CSSTranslate",
    "CSSUnitValue",
    "CSSUnknownRule",
    "CSSUnparsedValue",
    "CSSValue",
    "CSSValueList",
    "CSSVariableReferenceValue",
    "CSSVariablesDeclaration",
    "CSSVariablesRule",
    "CSSViewportRule",
    "CSS_ATTR",
    "CSS_CM",
    "CSS_COUNTER",
    "CSS_CUSTOM",
    "CSS_DEG",
    "CSS_DIMENSION",
    "CSS_EMS",
    "CSS_EXS",
    "CSS_FILTER_BLUR",
    "CSS_FILTER_BRIGHTNESS",
    "CSS_FILTER_CONTRAST",
    "CSS_FILTER_CUSTOM",
    "CSS_FILTER_DROP_SHADOW",
    "CSS_FILTER_GRAYSCALE",
    "CSS_FILTER_HUE_ROTATE",
    "CSS_FILTER_INVERT",
    "CSS_FILTER_OPACITY",
    "CSS_FILTER_REFERENCE",
    "CSS_FILTER_SATURATE",
    "CSS_FILTER_SEPIA",
    "CSS_GRAD",
    "CSS_HZ",
    "CSS_IDENT",
    "CSS_IN",
    "CSS_INHERIT",
    "CSS_KHZ",
    "CSS_MATRIX",
    "CSS_MATRIX3D",
    "CSS_MM",
    "CSS_MS",
    "CSS_NUMBER",
    "CSS_PC",
    "CSS_PERCENTAGE",
    "CSS_PERSPECTIVE",
    "CSS_PRIMITIVE_VALUE",
    "CSS_PT",
    "CSS_PX",
    "CSS_RAD",
    "CSS_RECT",
    "CSS_RGBCOLOR",
    "CSS_ROTATE",
    "CSS_ROTATE3D",
    "CSS_ROTATEX",
    "CSS_ROTATEY",
    "CSS_ROTATEZ",
    "CSS_S",
    "CSS_SCALE",
    "CSS_SCALE3D",
    "CSS_SCALEX",
    "CSS_SCALEY",
    "CSS_SCALEZ",
    "CSS_SKEW",
    "CSS_SKEWX",
    "CSS_SKEWY",
    "CSS_STRING",
    "CSS_TRANSLATE",
    "CSS_TRANSLATE3D",
    "CSS_TRANSLATEX",
    "CSS_TRANSLATEY",
    "CSS_TRANSLATEZ",
    "CSS_UNKNOWN",
    "CSS_URI",
    "CSS_VALUE_LIST",
    "CSS_VH",
    "CSS_VMAX",
    "CSS_VMIN",
    "CSS_VW",
    "CULL_FACE",
    "CULL_FACE_MODE",
    "CURRENT_PROGRAM",
    "CURRENT_QUERY",
    "CURRENT_VERTEX_ATTRIB",
    "CUSTOM",
    "CW",
    "Cache",
    "CacheStorage",
    "CanvasCaptureMediaStream",
    "CanvasCaptureMediaStreamTrack",
    "CanvasGradient",
    "CanvasPattern",
    "CanvasPixelArray",
    "CanvasRenderingContext2D",
    "CaretPosition",
    "ChannelMergerNode",
    "ChannelSplitterNode",
    "CharacterData",
    "Chrome PDF Plugin",
    "Chrome PDF Viewer",
    "ClientRect",
    "ClientRectList",
    "Clipboard",
    "ClipboardEvent",
    "ClipboardItem",
    "CloseEvent",
    "Collator",
    "CollectGarbage",
    "CommandEvent",
    "Comment",
    "CompileError",
    "CompositionEvent",
    "CompressionStream",
    "Console",
    "ConstantSourceNode",
    "ControlRangeCollection",
    "Controllers",
    "ConvolverNode",
    "Coordinates",
    "CountQueuingStrategy",
    "Counter",
    "Credential",
    "CredentialsContainer",
    "Crypto",
    "CryptoKey",
    "CryptoOperation",
    "CustomElementRegistry",
    "CustomEvent",
    "DATABASE_ERR",
    "DATA_CLONE_ERR",
    "DATA_ERR",
    "DBLCLICK",
    "DECR",
    "DECR_WRAP",
    "DELETE_STATUS",
    "DEPTH",
    "DEPTH24_STENCIL8",
    "DEPTH32F_STENCIL8",
    "DEPTH_ATTACHMENT",
    "DEPTH_BITS",
    "DEPTH_BUFFER_BIT",
    "DEPTH_CLEAR_VALUE",
    "DEPTH_COMPONENT",
    "DEPTH_COMPONENT16",
    "DEPTH_COMPONENT24",
    "DEPTH_COMPONENT32F",
    "DEPTH_FUNC",
    "DEPTH_RANGE",
    "DEPTH_STENCIL",
    "DEPTH_STENCIL_ATTACHMENT",
    "DEPTH_TEST",
    "DEPTH_WRITEMASK",
    "DEVICE_INELIGIBLE",
    "DIRECTION_DOWN",
    "DIRECTION_LEFT",
    "DIRECTION_RIGHT",
    "DIRECTION_UP",
    "DISABLED",
    "DISPATCH_REQUEST_ERR",
    "DITHER",
    "DOCUMENT_FRAGMENT_NODE",
    "DOCUMENT_NODE",
    "DOCUMENT_POSITION_CONTAINED_BY",
    "DOCUMENT_POSITION_CONTAINS",
    "DOCUMENT_POSITION_DISCONNECTED",
    "DOCUMENT_POSITION_FOLLOWING",
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
    "DOCUMENT_POSITION_PRECEDING",
    "DOCUMENT_TYPE_NODE",
    "DOMCursor",
    "DOMError",
    "DOMException",
    "DOMImplementation",
    "DOMImplementationLS",
    "DOMMatrix",
    "DOMMatrixReadOnly",
    "DOMParser",
    "DOMPoint",
    "DOMPointReadOnly",
    "DOMQuad",
    "DOMRect",
    "DOMRectList",
    "DOMRectReadOnly",
    "DOMRequest",
    "DOMSTRING_SIZE_ERR",
    "DOMSettableTokenList",
    "DOMStringList",
    "DOMStringMap",
    "DOMTokenList",
    "DOMTransactionEvent",
    "DOM_DELTA_LINE",
    "DOM_DELTA_PAGE",
    "DOM_DELTA_PIXEL",
    "DOM_INPUT_METHOD_DROP",
    "DOM_INPUT_METHOD_HANDWRITING",
    "DOM_INPUT_METHOD_IME",
    "DOM_INPUT_METHOD_KEYBOARD",
    "DOM_INPUT_METHOD_MULTIMODAL",
    "DOM_INPUT_METHOD_OPTION",
    "DOM_INPUT_METHOD_PASTE",
    "DOM_INPUT_METHOD_SCRIPT",
    "DOM_INPUT_METHOD_UNKNOWN",
    "DOM_INPUT_METHOD_VOICE",
    "DOM_KEY_LOCATION_JOYSTICK",
    "DOM_KEY_LOCATION_LEFT",
    "DOM_KEY_LOCATION_MOBILE",
    "DOM_KEY_LOCATION_NUMPAD",
    "DOM_KEY_LOCATION_RIGHT",
    "DOM_KEY_LOCATION_STANDARD",
    "DOM_VK_0",
    "DOM_VK_1",
    "DOM_VK_2",
    "DOM_VK_3",
    "DOM_VK_4",
    "DOM_VK_5",
    "DOM_VK_6",
    "DOM_VK_7",
    "DOM_VK_8",
    "DOM_VK_9",
    "DOM_VK_A",
    "DOM_VK_ACCEPT",
    "DOM_VK_ADD",
    "DOM_VK_ALT",
    "DOM_VK_ALTGR",
    "DOM_VK_AMPERSAND",
    "DOM_VK_ASTERISK",
    "DOM_VK_AT",
    "DOM_VK_ATTN",
    "DOM_VK_B",
    "DOM_VK_BACKSPACE",
    "DOM_VK_BACK_QUOTE",
    "DOM_VK_BACK_SLASH",
    "DOM_VK_BACK_SPACE",
    "DOM_VK_C",
    "DOM_VK_CANCEL",
    "DOM_VK_CAPS_LOCK",
    "DOM_VK_CIRCUMFLEX",
    "DOM_VK_CLEAR",
    "DOM_VK_CLOSE_BRACKET",
    "DOM_VK_CLOSE_CURLY_BRACKET",
    "DOM_VK_CLOSE_PAREN",
    "DOM_VK_COLON",
    "DOM_VK_COMMA",
    "DOM_VK_CONTEXT_MENU",
    "DOM_VK_CONTROL",
    "DOM_VK_CONVERT",
    "DOM_VK_CRSEL",
    "DOM_VK_CTRL",
    "DOM_VK_D",
    "DOM_VK_DECIMAL",
    "DOM_VK_DELETE",
    "DOM_VK_DIVIDE",
    "DOM_VK_DOLLAR",
    "DOM_VK_DOUBLE_QUOTE",
    "DOM_VK_DOWN",
    "DOM_VK_E",
    "DOM_VK_EISU",
    "DOM_VK_END",
    "DOM_VK_ENTER",
    "DOM_VK_EQUALS",
    "DOM_VK_EREOF",
    "DOM_VK_ESCAPE",
    "DOM_VK_EXCLAMATION",
    "DOM_VK_EXECUTE",
    "DOM_VK_EXSEL",
    "DOM_VK_F",
    "DOM_VK_F1",
    "DOM_VK_F10",
    "DOM_VK_F11",
    "DOM_VK_F12",
    "DOM_VK_F13",
    "DOM_VK_F14",
    "DOM_VK_F15",
    "DOM_VK_F16",
    "DOM_VK_F17",
    "DOM_VK_F18",
    "DOM_VK_F19",
    "DOM_VK_F2",
    "DOM_VK_F20",
    "DOM_VK_F21",
    "DOM_VK_F22",
    "DOM_VK_F23",
    "DOM_VK_F24",
    "DOM_VK_F25",
    "DOM_VK_F26",
    "DOM_VK_F27",
    "DOM_VK_F28",
    "DOM_VK_F29",
    "DOM_VK_F3",
    "DOM_VK_F30",
    "DOM_VK_F31",
    "DOM_VK_F32",
    "DOM_VK_F33",
    "DOM_VK_F34",
    "DOM_VK_F35",
    "DOM_VK_F36",
    "DOM_VK_F4",
    "DOM_VK_F5",
    "DOM_VK_F6",
    "DOM_VK_F7",
    "DOM_VK_F8",
    "DOM_VK_F9",
    "DOM_VK_FINAL",
    "DOM_VK_FRONT",
    "DOM_VK_G",
    "DOM_VK_GREATER_THAN",
    "DOM_VK_H",
    "DOM_VK_HANGUL",
    "DOM_VK_HANJA",
    "DOM_VK_HASH",
    "DOM_VK_HELP",
    "DOM_VK_HK_TOGGLE",
    "DOM_VK_HOME",
    "DOM_VK_HYPHEN_MINUS",
    "DOM_VK_I",
    "DOM_VK_INSERT",
    "DOM_VK_J",
    "DOM_VK_JUNJA",
    "DOM_VK_K",
    "DOM_VK_KANA",
    "DOM_VK_KANJI",
    "DOM_VK_L",
    "DOM_VK_LEFT",
    "DOM_VK_LEFT_TAB",
    "DOM_VK_LESS_THAN",
    "DOM_VK_M",
    "DOM_VK_META",
    "DOM_VK_MODECHANGE",
    "DOM_VK_MULTIPLY",
    "DOM_VK_N",
    "DOM_VK_NONCONVERT",
    "DOM_VK_NUMPAD0",
    "DOM_VK_NUMPAD1",
    "DOM_VK_NUMPAD2",
    "DOM_VK_NUMPAD3",
    "DOM_VK_NUMPAD4",
    "DOM_VK_NUMPAD5",
    "DOM_VK_NUMPAD6",
    "DOM_VK_NUMPAD7",
    "DOM_VK_NUMPAD8",
    "DOM_VK_NUMPAD9",
    "DOM_VK_NUM_LOCK",
    "DOM_VK_O",
    "DOM_VK_OEM_1",
    "DOM_VK_OEM_102",
    "DOM_VK_OEM_2",
    "DOM_VK_OEM_3",
    "DOM_VK_OEM_4",
    "DOM_VK_OEM_5",
    "DOM_VK_OEM_6",
    "DOM_VK_OEM_7",
    "DOM_VK_OEM_8",
    "DOM_VK_OEM_COMMA",
    "DOM_VK_OEM_MINUS",
    "DOM_VK_OEM_PERIOD",
    "DOM_VK_OEM_PLUS",
    "DOM_VK_OPEN_BRACKET",
    "DOM_VK_OPEN_CURLY_BRACKET",
    "DOM_VK_OPEN_PAREN",
    "DOM_VK_P",
    "DOM_VK_PA1",
    "DOM_VK_PAGEDOWN",
    "DOM_VK_PAGEUP",
    "DOM_VK_PAGE_DOWN",
    "DOM_VK_PAGE_UP",
    "DOM_VK_PAUSE",
    "DOM_VK_PERCENT",
    "DOM_VK_PERIOD",
    "DOM_VK_PIPE",
    "DOM_VK_PLAY",
    "DOM_VK_PLUS",
    "DOM_VK_PRINT",
    "DOM_VK_PRINTSCREEN",
    "DOM_VK_PROCESSKEY",
    "DOM_VK_PROPERITES",
    "DOM_VK_Q",
    "DOM_VK_QUESTION_MARK",
    "DOM_VK_QUOTE",
    "DOM_VK_R",
    "DOM_VK_REDO",
    "DOM_VK_RETURN",
    "DOM_VK_RIGHT",
    "DOM_VK_S",
    "DOM_VK_SCROLL_LOCK",
    "DOM_VK_SELECT",
    "DOM_VK_SEMICOLON",
    "DOM_VK_SEPARATOR",
    "DOM_VK_SHIFT",
    "DOM_VK_SLASH",
    "DOM_VK_SLEEP",
    "DOM_VK_SPACE",
    "DOM_VK_SUBTRACT",
    "DOM_VK_T",
    "DOM_VK_TAB",
    "DOM_VK_TILDE",
    "DOM_VK_U",
    "DOM_VK_UNDERSCORE",
    "DOM_VK_UNDO",
    "DOM_VK_UNICODE",
    "DOM_VK_UP",
    "DOM_VK_V",
    "DOM_VK_VOLUME_DOWN",
    "DOM_VK_VOLUME_MUTE",
    "DOM_VK_VOLUME_UP",
    "DOM_VK_W",
    "DOM_VK_WIN",
    "DOM_VK_WINDOW",
    "DOM_VK_WIN_ICO_00",
    "DOM_VK_WIN_ICO_CLEAR",
    "DOM_VK_WIN_ICO_HELP",
    "DOM_VK_WIN_OEM_ATTN",
    "DOM_VK_WIN_OEM_AUTO",
    "DOM_VK_WIN_OEM_BACKTAB",
    "DOM_VK_WIN_OEM_CLEAR",
    "DOM_VK_WIN_OEM_COPY",
    "DOM_VK_WIN_OEM_CUSEL",
    "DOM_VK_WIN_OEM_ENLW",
    "DOM_VK_WIN_OEM_FINISH",
    "DOM_VK_WIN_OEM_FJ_JISHO",
    "DOM_VK_WIN_OEM_FJ_LOYA",
    "DOM_VK_WIN_OEM_FJ_MASSHOU",
    "DOM_VK_WIN_OEM_FJ_ROYA",
    "DOM_VK_WIN_OEM_FJ_TOUROKU",
    "DOM_VK_WIN_OEM_JUMP",
    "DOM_VK_WIN_OEM_PA1",
    "DOM_VK_WIN_OEM_PA2",
    "DOM_VK_WIN_OEM_PA3",
    "DOM_VK_WIN_OEM_RESET",
    "DOM_VK_WIN_OEM_WSCTRL",
    "DOM_VK_X",
    "DOM_VK_XF86XK_ADD_FAVORITE",
    "DOM_VK_XF86XK_APPLICATION_LEFT",
    "DOM_VK_XF86XK_APPLICATION_RIGHT",
    "DOM_VK_XF86XK_AUDIO_CYCLE_TRACK",
    "DOM_VK_XF86XK_AUDIO_FORWARD",
    "DOM_VK_XF86XK_AUDIO_LOWER_VOLUME",
    "DOM_VK_XF86XK_AUDIO_MEDIA",
    "DOM_VK_XF86XK_AUDIO_MUTE",
    "DOM_VK_XF86XK_AUDIO_NEXT",
    "DOM_VK_XF86XK_AUDIO_PAUSE",
    "DOM_VK_XF86XK_AUDIO_PLAY",
    "DOM_VK_XF86XK_AUDIO_PREV",
    "DOM_VK_XF86XK_AUDIO_RAISE_VOLUME",
    "DOM_VK_XF86XK_AUDIO_RANDOM_PLAY",
    "DOM_VK_XF86XK_AUDIO_RECORD",
    "DOM_VK_XF86XK_AUDIO_REPEAT",
    "DOM_VK_XF86XK_AUDIO_REWIND",
    "DOM_VK_XF86XK_AUDIO_STOP",
    "DOM_VK_XF86XK_AWAY",
    "DOM_VK_XF86XK_BACK",
    "DOM_VK_XF86XK_BACK_FORWARD",
    "DOM_VK_XF86XK_BATTERY",
    "DOM_VK_XF86XK_BLUE",
    "DOM_VK_XF86XK_BLUETOOTH",
    "DOM_VK_XF86XK_BOOK",
    "DOM_VK_XF86XK_BRIGHTNESS_ADJUST",
    "DOM_VK_XF86XK_CALCULATOR",
    "DOM_VK_XF86XK_CALENDAR",
    "DOM_VK_XF86XK_CD",
    "DOM_VK_XF86XK_CLOSE",
    "DOM_VK_XF86XK_COMMUNITY",
    "DOM_VK_XF86XK_CONTRAST_ADJUST",
    "DOM_VK_XF86XK_COPY",
    "DOM_VK_XF86XK_CUT",
    "DOM_VK_XF86XK_CYCLE_ANGLE",
    "DOM_VK_XF86XK_DISPLAY",
    "DOM_VK_XF86XK_DOCUMENTS",
    "DOM_VK_XF86XK_DOS",
    "DOM_VK_XF86XK_EJECT",
    "DOM_VK_XF86XK_EXCEL",
    "DOM_VK_XF86XK_EXPLORER",
    "DOM_VK_XF86XK_FAVORITES",
    "DOM_VK_XF86XK_FINANCE",
    "DOM_VK_XF86XK_FORWARD",
    "DOM_VK_XF86XK_FRAME_BACK",
    "DOM_VK_XF86XK_FRAME_FORWARD",
    "DOM_VK_XF86XK_GAME",
    "DOM_VK_XF86XK_GO",
    "DOM_VK_XF86XK_GREEN",
    "DOM_VK_XF86XK_HIBERNATE",
    "DOM_VK_XF86XK_HISTORY",
    "DOM_VK_XF86XK_HOME_PAGE",
    "DOM_VK_XF86XK_HOT_LINKS",
    "DOM_VK_XF86XK_I_TOUCH",
    "DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN",
    "DOM_VK_XF86XK_KBD_BRIGHTNESS_UP",
    "DOM_VK_XF86XK_KBD_LIGHT_ON_OFF",
    "DOM_VK_XF86XK_LAUNCH0",
    "DOM_VK_XF86XK_LAUNCH1",
    "DOM_VK_XF86XK_LAUNCH2",
    "DOM_VK_XF86XK_LAUNCH3",
    "DOM_VK_XF86XK_LAUNCH4",
    "DOM_VK_XF86XK_LAUNCH5",
    "DOM_VK_XF86XK_LAUNCH6",
    "DOM_VK_XF86XK_LAUNCH7",
    "DOM_VK_XF86XK_LAUNCH8",
    "DOM_VK_XF86XK_LAUNCH9",
    "DOM_VK_XF86XK_LAUNCH_A",
    "DOM_VK_XF86XK_LAUNCH_B",
    "DOM_VK_XF86XK_LAUNCH_C",
    "DOM_VK_XF86XK_LAUNCH_D",
    "DOM_VK_XF86XK_LAUNCH_E",
    "DOM_VK_XF86XK_LAUNCH_F",
    "DOM_VK_XF86XK_LIGHT_BULB",
    "DOM_VK_XF86XK_LOG_OFF",
    "DOM_VK_XF86XK_MAIL",
    "DOM_VK_XF86XK_MAIL_FORWARD",
    "DOM_VK_XF86XK_MARKET",
    "DOM_VK_XF86XK_MEETING",
    "DOM_VK_XF86XK_MEMO",
    "DOM_VK_XF86XK_MENU_KB",
    "DOM_VK_XF86XK_MENU_PB",
    "DOM_VK_XF86XK_MESSENGER",
    "DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN",
    "DOM_VK_XF86XK_MON_BRIGHTNESS_UP",
    "DOM_VK_XF86XK_MUSIC",
    "DOM_VK_XF86XK_MY_COMPUTER",
    "DOM_VK_XF86XK_MY_SITES",
    "DOM_VK_XF86XK_NEW",
    "DOM_VK_XF86XK_NEWS",
    "DOM_VK_XF86XK_OFFICE_HOME",
    "DOM_VK_XF86XK_OPEN",
    "DOM_VK_XF86XK_OPEN_URL",
    "DOM_VK_XF86XK_OPTION",
    "DOM_VK_XF86XK_PASTE",
    "DOM_VK_XF86XK_PHONE",
    "DOM_VK_XF86XK_PICTURES",
    "DOM_VK_XF86XK_POWER_DOWN",
    "DOM_VK_XF86XK_POWER_OFF",
    "DOM_VK_XF86XK_RED",
    "DOM_VK_XF86XK_REFRESH",
    "DOM_VK_XF86XK_RELOAD",
    "DOM_VK_XF86XK_REPLY",
    "DOM_VK_XF86XK_ROCKER_DOWN",
    "DOM_VK_XF86XK_ROCKER_ENTER",
    "DOM_VK_XF86XK_ROCKER_UP",
    "DOM_VK_XF86XK_ROTATE_WINDOWS",
    "DOM_VK_XF86XK_ROTATION_KB",
    "DOM_VK_XF86XK_ROTATION_PB",
    "DOM_VK_XF86XK_SAVE",
    "DOM_VK_XF86XK_SCREEN_SAVER",
    "DOM_VK_XF86XK_SCROLL_CLICK",
    "DOM_VK_XF86XK_SCROLL_DOWN",
    "DOM_VK_XF86XK_SCROLL_UP",
    "DOM_VK_XF86XK_SEARCH",
    "DOM_VK_XF86XK_SEND",
    "DOM_VK_XF86XK_SHOP",
    "DOM_VK_XF86XK_SPELL",
    "DOM_VK_XF86XK_SPLIT_SCREEN",
    "DOM_VK_XF86XK_STANDBY",
    "DOM_VK_XF86XK_START",
    "DOM_VK_XF86XK_STOP",
    "DOM_VK_XF86XK_SUBTITLE",
    "DOM_VK_XF86XK_SUPPORT",
    "DOM_VK_XF86XK_SUSPEND",
    "DOM_VK_XF86XK_TASK_PANE",
    "DOM_VK_XF86XK_TERMINAL",
    "DOM_VK_XF86XK_TIME",
    "DOM_VK_XF86XK_TOOLS",
    "DOM_VK_XF86XK_TOP_MENU",
    "DOM_VK_XF86XK_TO_DO_LIST",
    "DOM_VK_XF86XK_TRAVEL",
    "DOM_VK_XF86XK_USER1KB",
    "DOM_VK_XF86XK_USER2KB",
    "DOM_VK_XF86XK_USER_PB",
    "DOM_VK_XF86XK_UWB",
    "DOM_VK_XF86XK_VENDOR_HOME",
    "DOM_VK_XF86XK_VIDEO",
    "DOM_VK_XF86XK_VIEW",
    "DOM_VK_XF86XK_WAKE_UP",
    "DOM_VK_XF86XK_WEB_CAM",
    "DOM_VK_XF86XK_WHEEL_BUTTON",
    "DOM_VK_XF86XK_WLAN",
    "DOM_VK_XF86XK_WORD",
    "DOM_VK_XF86XK_WWW",
    "DOM_VK_XF86XK_XFER",
    "DOM_VK_XF86XK_YELLOW",
    "DOM_VK_XF86XK_ZOOM_IN",
    "DOM_VK_XF86XK_ZOOM_OUT",
    "DOM_VK_Y",
    "DOM_VK_Z",
    "DOM_VK_ZOOM",
    "DONE",
    "DONT_CARE",
    "DOWNLOADING",
    "DRAGDROP",
    "DRAW_BUFFER0",
    "DRAW_BUFFER1",
    "DRAW_BUFFER10",
    "DRAW_BUFFER11",
    "DRAW_BUFFER12",
    "DRAW_BUFFER13",
    "DRAW_BUFFER14",
    "DRAW_BUFFER15",
    "DRAW_BUFFER2",
    "DRAW_BUFFER3",
    "DRAW_BUFFER4",
    "DRAW_BUFFER5",
    "DRAW_BUFFER6",
    "DRAW_BUFFER7",
    "DRAW_BUFFER8",
    "DRAW_BUFFER9",
    "DRAW_FRAMEBUFFER",
    "DRAW_FRAMEBUFFER_BINDING",
    "DST_ALPHA",
    "DST_COLOR",
    "DYNAMIC_COPY",
    "DYNAMIC_DRAW",
    "DYNAMIC_READ",
    "DataChannel",
    "DataCue",
    "DataTransfer",
    "DataTransferItem",
    "DataTransferItemList",
    "DataView",
    "Database",
    "Date",
    "DateTimeFormat",
    "Debug",
    "DecompressionStream",
    "Default Browser Helper",
    "DelayNode",
    "DesktopNotification",
    "DesktopNotificationCenter",
    "DeviceAcceleration",
    "DeviceLightEvent",
    "DeviceMotionEvent",
    "DeviceMotionEventAcceleration",
    "DeviceMotionEventRotationRate",
    "DeviceOrientationEvent",
    "DeviceProximityEvent",
    "DeviceRotationRate",
    "DeviceStorage",
    "DeviceStorageChangeEvent",
    "Directory",
    "DisplayNames",
    "Document",
    "DocumentFragment",
    "DocumentTimeline",
    "DocumentType",
    "DragEvent",
    "DynamicsCompressorNode",
    "E",
    "ELEMENT_ARRAY_BUFFER",
    "ELEMENT_ARRAY_BUFFER_BINDING",
    "ELEMENT_NODE",
    "EMPTY",
    "ENCODING_ERR",
    "ENDED",
    "END_TO_END",
    "END_TO_START",
    "ENTITY_NODE",
    "ENTITY_REFERENCE_NODE",
    "EPSILON",
    "EQUAL",
    "EQUALPOWER",
    "ERROR",
    "EXPONENTIAL_DISTANCE",
    "EXT_texture_filter_anisotropic",
    "Element",
    "ElementInternals",
    "ElementQuery",
    "EnterPictureInPictureEvent",
    "Entity",
    "EntityReference",
    "Enumerator",
    "Error",
    "ErrorEvent",
    "EvalError",
    "Event",
    "EventException",
    "EventSource",
    "EventTarget",
    "External",
    "FASTEST",
    "FIDOSDK",
    "FILTER_ACCEPT",
    "FILTER_INTERRUPT",
    "FILTER_REJECT",
    "FILTER_SKIP",
    "FINISHED_STATE",
    "FIRST_ORDERED_NODE_TYPE",
    "FLOAT",
    "FLOAT_32_UNSIGNED_INT_24_8_REV",
    "FLOAT_MAT2",
    "FLOAT_MAT2x3",
    "FLOAT_MAT2x4",
    "FLOAT_MAT3",
    "FLOAT_MAT3x2",
    "FLOAT_MAT3x4",
    "FLOAT_MAT4",
    "FLOAT_MAT4x2",
    "FLOAT_MAT4x3",
    "FLOAT_VEC2",
    "FLOAT_VEC3",
    "FLOAT_VEC4",
    "FOCUS",
    "FONT_FACE_RULE",
    "FONT_FEATURE_VALUES_RULE",
    "FRAGMENT_SHADER",
    "FRAGMENT_SHADER_DERIVATIVE_HINT",
    "FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
    "FRAMEBUFFER",
    "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
    "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
    "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
    "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
    "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
    "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
    "FRAMEBUFFER_ATTACHMENT_RED_SIZE",
    "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
    "FRAMEBUFFER_BINDING",
    "FRAMEBUFFER_COMPLETE",
    "FRAMEBUFFER_DEFAULT",
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
    "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
    "FRAMEBUFFER_UNSUPPORTED",
    "FRONT",
    "FRONT_AND_BACK",
    "FRONT_FACE",
    "FUNC_ADD",
    "FUNC_REVERSE_SUBTRACT",
    "FUNC_SUBTRACT",
    "FeaturePolicy",
    "FederatedCredential",
    "Feed",
    "FeedEntry",
    "File",
    "FileError",
    "FileList",
    "FileReader",
    "FileSystem",
    "FileSystemDirectoryEntry",
    "FileSystemDirectoryReader",
    "FileSystemEntry",
    "FileSystemFileEntry",
    "FinalizationRegistry",
    "FindInPage",
    "Float32Array",
    "Float64Array",
    "FocusEvent",
    "FontFace",
    "FontFaceSet",
    "FontFaceSetLoadEvent",
    "FormData",
    "FormDataEvent",
    "FragmentDirective",
    "Function",
    "GENERATE_MIPMAP_HINT",
    "GEQUAL",
    "GREATER",
    "GREEN_BITS",
    "GainNode",
    "Gamepad",
    "GamepadButton",
    "GamepadEvent",
    "GamepadHapticActuator",
    "GamepadPose",
    "Geolocation",
    "GeolocationCoordinates",
    "GeolocationPosition",
    "GeolocationPositionError",
    "GestureEvent",
    "Global",
    "Gyroscope",
    "HALF_FLOAT",
    "HAVE_CURRENT_DATA",
    "HAVE_ENOUGH_DATA",
    "HAVE_FUTURE_DATA",
    "HAVE_METADATA",
    "HAVE_NOTHING",
    "HEADERS_RECEIVED",
    "HIDDEN",
    "HIERARCHY_REQUEST_ERR",
    "HIGHPASS",
    "HIGHSHELF",
    "HIGH_FLOAT",
    "HIGH_INT",
    "HORIZONTAL",
    "HORIZONTAL_AXIS",
    "HRTF",
    "HTMLAllCollection",
    "HTMLAnchorElement",
    "HTMLAppletElement",
    "HTMLAreaElement",
    "HTMLAreasCollection",
    "HTMLAudioElement",
    "HTMLBGSoundElement",
    "HTMLBRElement",
    "HTMLBaseElement",
    "HTMLBaseFontElement",
    "HTMLBlockElement",
    "HTMLBlockquoteElement",
    "HTMLBodyElement",
    "HTMLButtonElement",
    "HTMLCanvasElement",
    "HTMLCollection",
    "HTMLCommandElement",
    "HTMLContentElement",
    "HTMLDDElement",
    "HTMLDListElement",
    "HTMLDTElement",
    "HTMLDataElement",
    "HTMLDataListElement",
    "HTMLDetailsElement",
    "HTMLDialogElement",
    "HTMLDirectoryElement",
    "HTMLDivElement",
    "HTMLDocument",
    "HTMLElement",
    "HTMLEmbedElement",
    "HTMLFieldSetElement",
    "HTMLFontElement",
    "HTMLFormControlsCollection",
    "HTMLFormElement",
    "HTMLFrameElement",
    "HTMLFrameSetElement",
    "HTMLHRElement",
    "HTMLHeadElement",
    "HTMLHeadingElement",
    "HTMLHtmlElement",
    "HTMLIFrameElement",
    "HTMLImageElement",
    "HTMLInputElement",
    "HTMLIsIndexElement",
    "HTMLKeygenElement",
    "HTMLLIElement",
    "HTMLLabelElement",
    "HTMLLegendElement",
    "HTMLLinkElement",
    "HTMLMapElement",
    "HTMLMarqueeElement",
    "HTMLMediaElement",
    "HTMLMenuElement",
    "HTMLMenuItemElement",
    "HTMLMetaElement",
    "HTMLMeterElement",
    "HTMLModElement",
    "HTMLNextIdElement",
    "HTMLOListElement",
    "HTMLObjectElement",
    "HTMLOptGroupElement",
    "HTMLOptionElement",
    "HTMLOptionsCollection",
    "HTMLOutputElement",
    "HTMLParagraphElement",
    "HTMLParamElement",
    "HTMLPhraseElement",
    "HTMLPictureElement",
    "HTMLPreElement",
    "HTMLProgressElement",
    "HTMLPropertiesCollection",
    "HTMLQuoteElement",
    "HTMLScriptElement",
    "HTMLSelectElement",
    "HTMLShadowElement",
    "HTMLSlotElement",
    "HTMLSourceElement",
    "HTMLSpanElement",
    "HTMLStyleElement",
    "HTMLTableCaptionElement",
    "HTMLTableCellElement",
    "HTMLTableColElement",
    "HTMLTableDataCellElement",
    "HTMLTableElement",
    "HTMLTableHeaderCellElement",
    "HTMLTableRowElement",
    "HTMLTableSectionElement",
    "HTMLTemplateElement",
    "HTMLTextAreaElement",
    "HTMLTimeElement",
    "HTMLTitleElement",
    "HTMLTrackElement",
    "HTMLUListElement",
    "HTMLUnknownElement",
    "HTMLVideoElement",
    "HashChangeEvent",
    "Headers",
    "History",
    "Hz",
    "ICE_CHECKING",
    "ICE_CLOSED",
    "ICE_COMPLETED",
    "ICE_CONNECTED",
    "ICE_FAILED",
    "ICE_GATHERING",
    "ICE_WAITING",
    "IDBCursor",
    "IDBCursorWithValue",
    "IDBDatabase",
    "IDBDatabaseException",
    "IDBFactory",
    "IDBFileHandle",
    "IDBFileRequest",
    "IDBIndex",
    "IDBKeyRange",
    "IDBMutableFile",
    "IDBObjectStore",
    "IDBOpenDBRequest",
    "IDBRequest",
    "IDBTransaction",
    "IDBVersionChangeEvent",
    "IDLE",
    "IIRFilterNode",
    "IMPLEMENTATION_COLOR_READ_FORMAT",
    "IMPLEMENTATION_COLOR_READ_TYPE",
    "IMPORT_RULE",
    "INCR",
    "INCR_WRAP",
    "INDEX_SIZE_ERR",
    "INSTALL",
    "INSTALLED",
    "INT",
    "INTERLEAVED_ATTRIBS",
    "INT_2_10_10_10_REV",
    "INT_SAMPLER_2D",
    "INT_SAMPLER_2D_ARRAY",
    "INT_SAMPLER_3D",
    "INT_SAMPLER_CUBE",
    "INT_VEC2",
    "INT_VEC3",
    "INT_VEC4",
    "INUSE_ATTRIBUTE_ERR",
    "INVALID_ACCESS_ERR",
    "INVALID_CHARACTER_ERR",
    "INVALID_ENUM",
    "INVALID_EXPRESSION_ERR",
    "INVALID_FRAMEBUFFER_OPERATION",
    "INVALID_INDEX",
    "INVALID_MODIFICATION_ERR",
    "INVALID_NODE_TYPE_ERR",
    "INVALID_OPERATION",
    "INVALID_STATE_ERR",
    "INVALID_VALUE",
    "INVERSE_DISTANCE",
    "INVERT",
    "IceCandidate",
    "IdleDeadline",
    "Image",
    "ImageBitmap",
    "ImageBitmapRenderingContext",
    "ImageCapture",
    "ImageData",
    "Infinity",
    "InputDeviceCapabilities",
    "InputDeviceInfo",
    "InputEvent",
    "InputMethodContext",
    "InstallState",
    "InstallTrigger",
    "Instance",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Intent",
    "InternalError",
    "IntersectionObserver",
    "IntersectionObserverEntry",
    "Intl",
    "IsSearchProviderInstalled",
    "Iterator",
    "JSON",
    "Java Deployment Toolkit 7.0.250.17",
    "Java(TM) Platform SE 7 U25",
    "KEEP",
    "KEYDOWN",
    "KEYFRAMES_RULE",
    "KEYFRAME_RULE",
    "KEYPRESS",
    "KEYUP",
    "Key",
    "KeyEvent",
    "KeyOperation",
    "KeyPair",
    "Keyboard",
    "KeyboardEvent",
    "KeyboardLayoutMap",
    "KeyframeEffect",
    "LENGTHADJUST_SPACING",
    "LENGTHADJUST_SPACINGANDGLYPHS",
    "LENGTHADJUST_UNKNOWN",
    "LEQUAL",
    "LESS",
    "LINEAR",
    "LINEAR_DISTANCE",
    "LINEAR_MIPMAP_LINEAR",
    "LINEAR_MIPMAP_NEAREST",
    "LINES",
    "LINE_LOOP",
    "LINE_STRIP",
    "LINE_WIDTH",
    "LINK_STATUS",
    "LINUX",
    "LIVE",
    "LN10",
    "LN2",
    "LOADED",
    "LOADING",
    "LOCALE",
    "LOG10E",
    "LOG2E",
    "LOWPASS",
    "LOWSHELF",
    "LOW_FLOAT",
    "LOW_INT",
    "LSException",
    "LSParserFilter",
    "LUMINANCE",
    "LUMINANCE_ALPHA",
    "LargestContentfulPaint",
    "LayoutShift",
    "LayoutShiftAttribution",
    "LinearAccelerationSensor",
    "LinkError",
    "ListFormat",
    "LocalMediaStream",
    "Locale",
    "Location",
    "Lock",
    "LockManager",
    "MAC",
    "MAX",
    "MAX_3D_TEXTURE_SIZE",
    "MAX_ARRAY_TEXTURE_LAYERS",
    "MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
    "MAX_COLOR_ATTACHMENTS",
    "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
    "MAX_COMBINED_UNIFORM_BLOCKS",
    "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
    "MAX_CUBE_MAP_TEXTURE_SIZE",
    "MAX_DRAW_BUFFERS",
    "MAX_ELEMENTS_INDICES",
    "MAX_ELEMENTS_VERTICES",
    "MAX_ELEMENT_INDEX",
    "MAX_FRAGMENT_INPUT_COMPONENTS",
    "MAX_FRAGMENT_UNIFORM_BLOCKS",
    "MAX_FRAGMENT_UNIFORM_COMPONENTS",
    "MAX_FRAGMENT_UNIFORM_VECTORS",
    "MAX_PROGRAM_TEXEL_OFFSET",
    "MAX_RENDERBUFFER_SIZE",
    "MAX_SAFE_INTEGER",
    "MAX_SAMPLES",
    "MAX_SERVER_WAIT_TIMEOUT",
    "MAX_TEXTURE_IMAGE_UNITS",
    "MAX_TEXTURE_LOD_BIAS",
    "MAX_TEXTURE_MAX_ANISOTROPY_EXT",
    "MAX_TEXTURE_SIZE",
    "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
    "MAX_UNIFORM_BLOCK_SIZE",
    "MAX_UNIFORM_BUFFER_BINDINGS",
    "MAX_VALUE",
    "MAX_VARYING_COMPONENTS",
    "MAX_VARYING_VECTORS",
    "MAX_VERTEX_ATTRIBS",
    "MAX_VERTEX_OUTPUT_COMPONENTS",
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
    "MAX_VERTEX_UNIFORM_BLOCKS",
    "MAX_VERTEX_UNIFORM_COMPONENTS",
    "MAX_VERTEX_UNIFORM_VECTORS",
    "MAX_VIEWPORT_DIMS",
    "MEDIA_ERR_ABORTED",
    "MEDIA_ERR_DECODE",
    "MEDIA_ERR_ENCRYPTED",
    "MEDIA_ERR_NETWORK",
    "MEDIA_ERR_SRC_NOT_SUPPORTED",
    "MEDIA_KEYERR_CLIENT",
    "MEDIA_KEYERR_DOMAIN",
    "MEDIA_KEYERR_HARDWARECHANGE",
    "MEDIA_KEYERR_OUTPUT",
    "MEDIA_KEYERR_SERVICE",
    "MEDIA_KEYERR_UNKNOWN",
    "MEDIA_RULE",
    "MEDIUM_FLOAT",
    "MEDIUM_INT",
    "META_MASK",
    "MIDIAccess",
    "MIDIConnectionEvent",
    "MIDIInput",
    "MIDIInputMap",
    "MIDIMessageEvent",
    "MIDIOutput",
    "MIDIOutputMap",
    "MIDIPort",
    "MIN",
    "MIN_PROGRAM_TEXEL_OFFSET",
    "MIN_SAFE_INTEGER",
    "MIN_VALUE",
    "MIRRORED_REPEAT",
    "MODE_ASYNCHRONOUS",
    "MODE_SYNCHRONOUS",
    "MODIFICATION",
    "MOUSEDOWN",
    "MOUSEDRAG",
    "MOUSEMOVE",
    "MOUSEOUT",
    "MOUSEOVER",
    "MOUSEUP",
    "MOZ_KEYFRAMES_RULE",
    "MOZ_KEYFRAME_RULE",
    "MOZ_SOURCE_CURSOR",
    "MOZ_SOURCE_ERASER",
    "MOZ_SOURCE_KEYBOARD",
    "MOZ_SOURCE_MOUSE",
    "MOZ_SOURCE_PEN",
    "MOZ_SOURCE_TOUCH",
    "MOZ_SOURCE_UNKNOWN",
    "MSBehaviorUrnsCollection",
    "MSBlobBuilder",
    "MSCSSMatrix",
    "MSCSSProperties",
    "MSCSSRuleList",
    "MSCompatibleInfo",
    "MSCompatibleInfoCollection",
    "MSCurrentStyleCSSProperties",
    "MSEventObj",
    "MSGESTURE_FLAG_BEGIN",
    "MSGESTURE_FLAG_CANCEL",
    "MSGESTURE_FLAG_END",
    "MSGESTURE_FLAG_INERTIA",
    "MSGESTURE_FLAG_NONE",
    "MSGesture",
    "MSGestureEvent",
    "MSGraphicsTrust",
    "MSInputMethodContext",
    "MSManipulationEvent",
    "MSMediaKeyError",
    "MSMediaKeyMessageEvent",
    "MSMediaKeyNeededEvent",
    "MSMediaKeySession",
    "MSMediaKeys",
    "MSMimeTypesCollection",
    "MSPOINTER_TYPE_MOUSE",
    "MSPOINTER_TYPE_PEN",
    "MSPOINTER_TYPE_TOUCH",
    "MSPluginsCollection",
    "MSPointerEvent",
    "MSRangeCollection",
    "MSSiteModeEvent",
    "MSStream",
    "MSStreamReader",
    "MSStyleCSSProperties",
    "MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE",
    "MS_ASYNC_CALLBACK_STATUS_CANCEL",
    "MS_ASYNC_CALLBACK_STATUS_CHOOSEANY",
    "MS_ASYNC_CALLBACK_STATUS_ERROR",
    "MS_ASYNC_CALLBACK_STATUS_JOIN",
    "MS_ASYNC_OP_STATUS_CANCELED",
    "MS_ASYNC_OP_STATUS_ERROR",
    "MS_ASYNC_OP_STATUS_SUCCESS",
    "MS_MANIPULATION_STATE_ACTIVE",
    "MS_MANIPULATION_STATE_CANCELLED",
    "MS_MANIPULATION_STATE_COMMITTED",
    "MS_MANIPULATION_STATE_DRAGGING",
    "MS_MANIPULATION_STATE_INERTIA",
    "MS_MANIPULATION_STATE_PRESELECT",
    "MS_MANIPULATION_STATE_SELECTING",
    "MS_MANIPULATION_STATE_STOPPED",
    "MS_MEDIA_ERR_ENCRYPTED",
    "MS_MEDIA_KEYERR_CLIENT",
    "MS_MEDIA_KEYERR_DOMAIN",
    "MS_MEDIA_KEYERR_HARDWARECHANGE",
    "MS_MEDIA_KEYERR_OUTPUT",
    "MS_MEDIA_KEYERR_SERVICE",
    "MS_MEDIA_KEYERR_UNKNOWN",
    "Map",
    "Math",
    "MathMLElement",
    "MediaCapabilities",
    "MediaCapabilitiesInfo",
    "MediaController",
    "MediaDeviceInfo",
    "MediaDevices",
    "MediaElementAudioSourceNode",
    "MediaEncryptedEvent",
    "MediaError",
    "MediaKeyError",
    "MediaKeyEvent",
    "MediaKeyMessageEvent",
    "MediaKeyNeededEvent",
    "MediaKeySession",
    "MediaKeyStatusMap",
    "MediaKeySystemAccess",
    "MediaKeys",
    "MediaList",
    "MediaMetadata",
    "MediaQueryList",
    "MediaQueryListEvent",
    "MediaRecorder",
    "MediaRecorderErrorEvent",
    "MediaSession",
    "MediaSettingsRange",
    "MediaSource",
    "MediaStream",
    "MediaStreamAudioDestinationNode",
    "MediaStreamAudioSourceNode",
    "MediaStreamEvent",
    "MediaStreamTrack",
    "MediaStreamTrackAudioSourceNode",
    "MediaStreamTrackEvent",
    "Memory",
    "MessageChannel",
    "MessageEvent",
    "MessagePort",
    "Methods",
    "Microsoft\xAE DRM",
    "MimeType",
    "MimeTypeArray",
    "Module",
    "MouseEvent",
    "MouseScrollEvent",
    "MouseWheelEvent",
    "MozAnimation",
    "MozAnimationDelay",
    "MozAnimationDirection",
    "MozAnimationDuration",
    "MozAnimationFillMode",
    "MozAnimationIterationCount",
    "MozAnimationName",
    "MozAnimationPlayState",
    "MozAnimationTimingFunction",
    "MozAppearance",
    "MozBackfaceVisibility",
    "MozBinding",
    "MozBorderBottomColors",
    "MozBorderEnd",
    "MozBorderEndColor",
    "MozBorderEndStyle",
    "MozBorderEndWidth",
    "MozBorderImage",
    "MozBorderLeftColors",
    "MozBorderRightColors",
    "MozBorderStart",
    "MozBorderStartColor",
    "MozBorderStartStyle",
    "MozBorderStartWidth",
    "MozBorderTopColors",
    "MozBoxAlign",
    "MozBoxDirection",
    "MozBoxFlex",
    "MozBoxOrdinalGroup",
    "MozBoxOrient",
    "MozBoxPack",
    "MozBoxSizing",
    "MozCSSKeyframeRule",
    "MozCSSKeyframesRule",
    "MozColumnCount",
    "MozColumnFill",
    "MozColumnGap",
    "MozColumnRule",
    "MozColumnRuleColor",
    "MozColumnRuleStyle",
    "MozColumnRuleWidth",
    "MozColumnWidth",
    "MozColumns",
    "MozContactChangeEvent",
    "MozFloatEdge",
    "MozFontFeatureSettings",
    "MozFontLanguageOverride",
    "MozForceBrokenImageIcon",
    "MozHyphens",
    "MozImageRegion",
    "MozMarginEnd",
    "MozMarginStart",
    "MozMmsEvent",
    "MozMmsMessage",
    "MozMobileMessageThread",
    "MozOSXFontSmoothing",
    "MozOrient",
    "MozOutlineRadius",
    "MozOutlineRadiusBottomleft",
    "MozOutlineRadiusBottomright",
    "MozOutlineRadiusTopleft",
    "MozOutlineRadiusTopright",
    "MozPaddingEnd",
    "MozPaddingStart",
    "MozPerspective",
    "MozPerspectiveOrigin",
    "MozPowerManager",
    "MozSettingsEvent",
    "MozSmsEvent",
    "MozSmsMessage",
    "MozStackSizing",
    "MozTabSize",
    "MozTextAlignLast",
    "MozTextDecorationColor",
    "MozTextDecorationLine",
    "MozTextDecorationStyle",
    "MozTextSizeAdjust",
    "MozTransform",
    "MozTransformOrigin",
    "MozTransformStyle",
    "MozTransition",
    "MozTransitionDelay",
    "MozTransitionDuration",
    "MozTransitionProperty",
    "MozTransitionTimingFunction",
    "MozUserFocus",
    "MozUserInput",
    "MozUserModify",
    "MozUserSelect",
    "MozWindowDragging",
    "MozWindowShadow",
    "MutationEvent",
    "MutationObserver",
    "MutationRecord",
    "NAMESPACE_ERR",
    "NAMESPACE_RULE",
    "NEAREST",
    "NEAREST_MIPMAP_LINEAR",
    "NEAREST_MIPMAP_NEAREST",
    "NEGATIVE_INFINITY",
    "NETWORK_EMPTY",
    "NETWORK_ERR",
    "NETWORK_IDLE",
    "NETWORK_LOADED",
    "NETWORK_LOADING",
    "NETWORK_NO_SOURCE",
    "NEVER",
    "NEW",
    "NEXT",
    "NEXT_NO_DUPLICATE",
    "NICEST",
    "NODE_AFTER",
    "NODE_BEFORE",
    "NODE_BEFORE_AND_AFTER",
    "NODE_INSIDE",
    "NONE",
    "NON_TRANSIENT_ERR",
    "NOTATION_NODE",
    "NOTCH",
    "NOTEQUAL",
    "NOT_ALLOWED_ERR",
    "NOT_FOUND_ERR",
    "NOT_INSTALLED",
    "NOT_READABLE_ERR",
    "NOT_SUPPORTED_ERR",
    "NO_DATA_ALLOWED_ERR",
    "NO_ERR",
    "NO_ERROR",
    "NO_MODIFICATION_ALLOWED_ERR",
    "NO_UPDATE",
    "NUMBER_TYPE",
    "NUM_COMPRESSED_TEXTURE_FORMATS",
    "NaN",
    "NamedNodeMap",
    "Native Client",
    "NavigationPreloadManager",
    "Navigator",
    "NearbyLinks",
    "NetworkInformation",
    "Node",
    "NodeFilter",
    "NodeIterator",
    "NodeList",
    "Notation",
    "Notification",
    "NotifyPaintEvent",
    "Number",
    "NumberFormat",
    "OBJECT_TYPE",
    "OBSOLETE",
    "OES_element_index_uint",
    "OES_standard_derivatives",
    "OES_texture_float",
    "OES_texture_float_linear",
    "OK",
    "ONE",
    "ONE_MINUS_CONSTANT_ALPHA",
    "ONE_MINUS_CONSTANT_COLOR",
    "ONE_MINUS_DST_ALPHA",
    "ONE_MINUS_DST_COLOR",
    "ONE_MINUS_SRC_ALPHA",
    "ONE_MINUS_SRC_COLOR",
    "OPEN",
    "OPENBSD",
    "OPENED",
    "OPENING",
    "ORDERED_NODE_ITERATOR_TYPE",
    "ORDERED_NODE_SNAPSHOT_TYPE",
    "OS_UPDATE",
    "OTHER_ERROR",
    "OUT_OF_MEMORY",
    "Object",
    "OfflineAudioCompletionEvent",
    "OfflineAudioContext",
    "OfflineResourceList",
    "OffscreenCanvas",
    "OffscreenCanvasRenderingContext2D",
    "OnInstalledReason",
    "OnRestartRequiredReason",
    "Option",
    "OrientationSensor",
    "OscillatorNode",
    "OverconstrainedError",
    "OverconstrainedErrorEvent",
    "OverflowEvent",
    "PACKAGE",
    "PACK_ALIGNMENT",
    "PACK_ROW_LENGTH",
    "PACK_SKIP_PIXELS",
    "PACK_SKIP_ROWS",
    "PAGE_RULE",
    "PARSE_ERR",
    "PATHSEG_ARC_ABS",
    "PATHSEG_ARC_REL",
    "PATHSEG_CLOSEPATH",
    "PATHSEG_CURVETO_CUBIC_ABS",
    "PATHSEG_CURVETO_CUBIC_REL",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
    "PATHSEG_CURVETO_QUADRATIC_ABS",
    "PATHSEG_CURVETO_QUADRATIC_REL",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
    "PATHSEG_LINETO_ABS",
    "PATHSEG_LINETO_HORIZONTAL_ABS",
    "PATHSEG_LINETO_HORIZONTAL_REL",
    "PATHSEG_LINETO_REL",
    "PATHSEG_LINETO_VERTICAL_ABS",
    "PATHSEG_LINETO_VERTICAL_REL",
    "PATHSEG_MOVETO_ABS",
    "PATHSEG_MOVETO_REL",
    "PATHSEG_UNKNOWN",
    "PATH_EXISTS_ERR",
    "PEAKING",
    "PERIODIC",
    "PERMISSION_DENIED",
    "PERSISTENT",
    "PI",
    "PIXEL_PACK_BUFFER",
    "PIXEL_PACK_BUFFER_BINDING",
    "PIXEL_UNPACK_BUFFER",
    "PIXEL_UNPACK_BUFFER_BINDING",
    "PLAYING_STATE",
    "POINTS",
    "POLYGON_OFFSET_FACTOR",
    "POLYGON_OFFSET_FILL",
    "POLYGON_OFFSET_UNITS",
    "POSITION_UNAVAILABLE",
    "POSITIVE_INFINITY",
    "PREV",
    "PREV_NO_DUPLICATE",
    "PROCESSING_INSTRUCTION_NODE",
    "PageChangeEvent",
    "PageTransitionEvent",
    "PaintRequest",
    "PaintRequestList",
    "PannerNode",
    "PasswordCredential",
    "Path2D",
    "PaymentAddress",
    "PaymentInstruments",
    "PaymentManager",
    "PaymentMethodChangeEvent",
    "PaymentRequest",
    "PaymentRequestUpdateEvent",
    "PaymentResponse",
    "Performance",
    "PerformanceElementTiming",
    "PerformanceEntry",
    "PerformanceEventTiming",
    "PerformanceLongTaskTiming",
    "PerformanceMark",
    "PerformanceMeasure",
    "PerformanceNavigation",
    "PerformanceNavigationTiming",
    "PerformanceObserver",
    "PerformanceObserverEntryList",
    "PerformancePaintTiming",
    "PerformanceResourceTiming",
    "PerformanceServerTiming",
    "PerformanceTiming",
    "PeriodicSyncManager",
    "PeriodicWave",
    "PermissionStatus",
    "Permissions",
    "PhotoCapabilities",
    "PictureInPictureWindow",
    "PlatformArch",
    "PlatformNaclArch",
    "PlatformOs",
    "Plugin",
    "PluginArray",
    "PluralRules",
    "PointerEvent",
    "PopStateEvent",
    "PopupBlockedEvent",
    "Position",
    "PositionError",
    "Presentation",
    "PresentationAvailability",
    "PresentationConnection",
    "PresentationConnectionAvailableEvent",
    "PresentationConnectionCloseEvent",
    "PresentationConnectionList",
    "PresentationReceiver",
    "PresentationRequest",
    "ProcessingInstruction",
    "ProgressEvent",
    "Promise",
    "PromiseRejectionEvent",
    "PropertyNodeList",
    "Proxy",
    "PublicKeyCredential",
    "PushManager",
    "PushSubscription",
    "PushSubscriptionOptions",
    "Q",
    "QUERY_RESULT",
    "QUERY_RESULT_AVAILABLE",
    "QUOTA_ERR",
    "QUOTA_EXCEEDED_ERR",
    "QueryInterface",
    "R11F_G11F_B10F",
    "R16F",
    "R16I",
    "R16UI",
    "R32F",
    "R32I",
    "R32UI",
    "R8",
    "R8I",
    "R8UI",
    "R8_SNORM",
    "RASTERIZER_DISCARD",
    "READY_TO_RUN",
    "READ_BUFFER",
    "READ_FRAMEBUFFER",
    "READ_FRAMEBUFFER_BINDING",
    "READ_ONLY",
    "READ_ONLY_ERR",
    "READ_WRITE",
    "RED",
    "RED_BITS",
    "RED_INTEGER",
    "REMOVAL",
    "RENDERBUFFER",
    "RENDERBUFFER_ALPHA_SIZE",
    "RENDERBUFFER_BINDING",
    "RENDERBUFFER_BLUE_SIZE",
    "RENDERBUFFER_DEPTH_SIZE",
    "RENDERBUFFER_GREEN_SIZE",
    "RENDERBUFFER_HEIGHT",
    "RENDERBUFFER_INTERNAL_FORMAT",
    "RENDERBUFFER_RED_SIZE",
    "RENDERBUFFER_SAMPLES",
    "RENDERBUFFER_STENCIL_SIZE",
    "RENDERBUFFER_WIDTH",
    "RENDERER",
    "RENDERING_INTENT_ABSOLUTE_COLORIMETRIC",
    "RENDERING_INTENT_AUTO",
    "RENDERING_INTENT_PERCEPTUAL",
    "RENDERING_INTENT_RELATIVE_COLORIMETRIC",
    "RENDERING_INTENT_SATURATION",
    "RENDERING_INTENT_UNKNOWN",
    "REPEAT",
    "REPLACE",
    "RG",
    "RG16F",
    "RG16I",
    "RG16UI",
    "RG32F",
    "RG32I",
    "RG32UI",
    "RG8",
    "RG8I",
    "RG8UI",
    "RG8_SNORM",
    "RGB",
    "RGB10_A2",
    "RGB10_A2UI",
    "RGB16F",
    "RGB16I",
    "RGB16UI",
    "RGB32F",
    "RGB32I",
    "RGB32UI",
    "RGB565",
    "RGB5_A1",
    "RGB8",
    "RGB8I",
    "RGB8UI",
    "RGB8_SNORM",
    "RGB9_E5",
    "RGBA",
    "RGBA16F",
    "RGBA16I",
    "RGBA16UI",
    "RGBA32F",
    "RGBA32I",
    "RGBA32UI",
    "RGBA4",
    "RGBA8",
    "RGBA8I",
    "RGBA8UI",
    "RGBA8_SNORM",
    "RGBA_INTEGER",
    "RGBColor",
    "RGB_INTEGER",
    "RG_INTEGER",
    "ROTATION_CLOCKWISE",
    "ROTATION_COUNTERCLOCKWISE",
    "RTCCertificate",
    "RTCDTMFSender",
    "RTCDTMFToneChangeEvent",
    "RTCDataChannel",
    "RTCDataChannelEvent",
    "RTCDtlsTransport",
    "RTCError",
    "RTCErrorEvent",
    "RTCIceCandidate",
    "RTCIceTransport",
    "RTCPeerConnection",
    "RTCPeerConnectionIceErrorEvent",
    "RTCPeerConnectionIceEvent",
    "RTCRtpReceiver",
    "RTCRtpSender",
    "RTCRtpTransceiver",
    "RTCSctpTransport",
    "RTCSessionDescription",
    "RTCStatsReport",
    "RTCTrackEvent",
    "RUNNING",
    "RadioNodeList",
    "Range",
    "RangeError",
    "RangeException",
    "ReadableByteStream",
    "ReadableStream",
    "ReadableStreamDefaultReader",
    "RecordErrorEvent",
    "Rect",
    "ReferenceError",
    "Reflect",
    "RegExp",
    "RelativeOrientationSensor",
    "RelativeTimeFormat",
    "RemotePlayback",
    "ReportingObserver",
    "Request",
    "RequestUpdateCheckStatus",
    "ResizeObserver",
    "ResizeObserverEntry",
    "ResizeObserverSize",
    "Response",
    "RunningState",
    "RuntimeError",
    "SAMPLER_2D",
    "SAMPLER_2D_ARRAY",
    "SAMPLER_2D_ARRAY_SHADOW",
    "SAMPLER_2D_SHADOW",
    "SAMPLER_3D",
    "SAMPLER_BINDING",
    "SAMPLER_CUBE",
    "SAMPLER_CUBE_SHADOW",
    "SAMPLES",
    "SAMPLE_ALPHA_TO_COVERAGE",
    "SAMPLE_BUFFERS",
    "SAMPLE_COVERAGE",
    "SAMPLE_COVERAGE_INVERT",
    "SAMPLE_COVERAGE_VALUE",
    "SAWTOOTH",
    "SCHEDULED_STATE",
    "SCISSOR_BOX",
    "SCISSOR_TEST",
    "SCROLL_PAGE_DOWN",
    "SCROLL_PAGE_UP",
    "SDP_ANSWER",
    "SDP_OFFER",
    "SDP_PRANSWER",
    "SECURITY_ERR",
    "SELECT",
    "SEPARATE_ATTRIBS",
    "SERIALIZE_ERR",
    "SEVERITY_ERROR",
    "SEVERITY_FATAL_ERROR",
    "SEVERITY_WARNING",
    "SHADER_COMPILER",
    "SHADER_TYPE",
    "SHADING_LANGUAGE_VERSION",
    "SHARED_MODULE_UPDATE",
    "SHIFT_MASK",
    "SHORT",
    "SHOWING",
    "SHOW_ALL",
    "SHOW_ATTRIBUTE",
    "SHOW_CDATA_SECTION",
    "SHOW_COMMENT",
    "SHOW_DOCUMENT",
    "SHOW_DOCUMENT_FRAGMENT",
    "SHOW_DOCUMENT_TYPE",
    "SHOW_ELEMENT",
    "SHOW_ENTITY",
    "SHOW_ENTITY_REFERENCE",
    "SHOW_NOTATION",
    "SHOW_PROCESSING_INSTRUCTION",
    "SHOW_TEXT",
    "SIGNALED",
    "SIGNED_NORMALIZED",
    "SINE",
    "SKIN",
    "SOUNDFIELD",
    "SQLError",
    "SQLException",
    "SQLResultSet",
    "SQLResultSetRowList",
    "SQLTransaction",
    "SQRT1_2",
    "SQRT2",
    "SQUARE",
    "SRC_ALPHA",
    "SRC_ALPHA_SATURATE",
    "SRC_COLOR",
    "SRGB",
    "SRGB8",
    "SRGB8_ALPHA8",
    "START_TO_END",
    "START_TO_START",
    "STATIC_COPY",
    "STATIC_DRAW",
    "STATIC_READ",
    "STENCIL",
    "STENCIL_ATTACHMENT",
    "STENCIL_BACK_FAIL",
    "STENCIL_BACK_FUNC",
    "STENCIL_BACK_PASS_DEPTH_FAIL",
    "STENCIL_BACK_PASS_DEPTH_PASS",
    "STENCIL_BACK_REF",
    "STENCIL_BACK_VALUE_MASK",
    "STENCIL_BACK_WRITEMASK",
    "STENCIL_BITS",
    "STENCIL_BUFFER_BIT",
    "STENCIL_CLEAR_VALUE",
    "STENCIL_FAIL",
    "STENCIL_FUNC",
    "STENCIL_INDEX",
    "STENCIL_INDEX8",
    "STENCIL_PASS_DEPTH_FAIL",
    "STENCIL_PASS_DEPTH_PASS",
    "STENCIL_REF",
    "STENCIL_TEST",
    "STENCIL_VALUE_MASK",
    "STENCIL_WRITEMASK",
    "STREAM_COPY",
    "STREAM_DRAW",
    "STREAM_READ",
    "STRING_TYPE",
    "STYLE_RULE",
    "SUBPIXEL_BITS",
    "SUPPORTS_RULE",
    "SVGAElement",
    "SVGAltGlyphDefElement",
    "SVGAltGlyphElement",
    "SVGAltGlyphItemElement",
    "SVGAngle",
    "SVGAnimateColorElement",
    "SVGAnimateElement",
    "SVGAnimateMotionElement",
    "SVGAnimateTransformElement",
    "SVGAnimatedAngle",
    "SVGAnimatedBoolean",
    "SVGAnimatedEnumeration",
    "SVGAnimatedInteger",
    "SVGAnimatedLength",
    "SVGAnimatedLengthList",
    "SVGAnimatedNumber",
    "SVGAnimatedNumberList",
    "SVGAnimatedPreserveAspectRatio",
    "SVGAnimatedRect",
    "SVGAnimatedString",
    "SVGAnimatedTransformList",
    "SVGAnimationElement",
    "SVGCircleElement",
    "SVGClipPathElement",
    "SVGColor",
    "SVGComponentTransferFunctionElement",
    "SVGCursorElement",
    "SVGDefsElement",
    "SVGDescElement",
    "SVGDiscardElement",
    "SVGDocument",
    "SVGElement",
    "SVGElementInstance",
    "SVGElementInstanceList",
    "SVGEllipseElement",
    "SVGException",
    "SVGFEBlendElement",
    "SVGFEColorMatrixElement",
    "SVGFEComponentTransferElement",
    "SVGFECompositeElement",
    "SVGFEConvolveMatrixElement",
    "SVGFEDiffuseLightingElement",
    "SVGFEDisplacementMapElement",
    "SVGFEDistantLightElement",
    "SVGFEDropShadowElement",
    "SVGFEFloodElement",
    "SVGFEFuncAElement",
    "SVGFEFuncBElement",
    "SVGFEFuncGElement",
    "SVGFEFuncRElement",
    "SVGFEGaussianBlurElement",
    "SVGFEImageElement",
    "SVGFEMergeElement",
    "SVGFEMergeNodeElement",
    "SVGFEMorphologyElement",
    "SVGFEOffsetElement",
    "SVGFEPointLightElement",
    "SVGFESpecularLightingElement",
    "SVGFESpotLightElement",
    "SVGFETileElement",
    "SVGFETurbulenceElement",
    "SVGFilterElement",
    "SVGFontElement",
    "SVGFontFaceElement",
    "SVGFontFaceFormatElement",
    "SVGFontFaceNameElement",
    "SVGFontFaceSrcElement",
    "SVGFontFaceUriElement",
    "SVGForeignObjectElement",
    "SVGGElement",
    "SVGGeometryElement",
    "SVGGlyphElement",
    "SVGGlyphRefElement",
    "SVGGradientElement",
    "SVGGraphicsElement",
    "SVGHKernElement",
    "SVGImageElement",
    "SVGLength",
    "SVGLengthList",
    "SVGLineElement",
    "SVGLinearGradientElement",
    "SVGMPathElement",
    "SVGMarkerElement",
    "SVGMaskElement",
    "SVGMatrix",
    "SVGMetadataElement",
    "SVGMissingGlyphElement",
    "SVGNumber",
    "SVGNumberList",
    "SVGPaint",
    "SVGPathElement",
    "SVGPathSeg",
    "SVGPathSegArcAbs",
    "SVGPathSegArcRel",
    "SVGPathSegClosePath",
    "SVGPathSegCurvetoCubicAbs",
    "SVGPathSegCurvetoCubicRel",
    "SVGPathSegCurvetoCubicSmoothAbs",
    "SVGPathSegCurvetoCubicSmoothRel",
    "SVGPathSegCurvetoQuadraticAbs",
    "SVGPathSegCurvetoQuadraticRel",
    "SVGPathSegCurvetoQuadraticSmoothAbs",
    "SVGPathSegCurvetoQuadraticSmoothRel",
    "SVGPathSegLinetoAbs",
    "SVGPathSegLinetoHorizontalAbs",
    "SVGPathSegLinetoHorizontalRel",
    "SVGPathSegLinetoRel",
    "SVGPathSegLinetoVerticalAbs",
    "SVGPathSegLinetoVerticalRel",
    "SVGPathSegList",
    "SVGPathSegMovetoAbs",
    "SVGPathSegMovetoRel",
    "SVGPatternElement",
    "SVGPoint",
    "SVGPointList",
    "SVGPolygonElement",
    "SVGPolylineElement",
    "SVGPreserveAspectRatio",
    "SVGRadialGradientElement",
    "SVGRect",
    "SVGRectElement",
    "SVGRenderingIntent",
    "SVGSVGElement",
    "SVGScriptElement",
    "SVGSetElement",
    "SVGStopElement",
    "SVGStringList",
    "SVGStyleElement",
    "SVGSwitchElement",
    "SVGSymbolElement",
    "SVGTRefElement",
    "SVGTSpanElement",
    "SVGTextContentElement",
    "SVGTextElement",
    "SVGTextPathElement",
    "SVGTextPositioningElement",
    "SVGTitleElement",
    "SVGTransform",
    "SVGTransformList",
    "SVGUnitTypes",
    "SVGUseElement",
    "SVGVKernElement",
    "SVGViewElement",
    "SVGViewSpec",
    "SVGZoomAndPan",
    "SVGZoomEvent",
    "SVG_ANGLETYPE_DEG",
    "SVG_ANGLETYPE_GRAD",
    "SVG_ANGLETYPE_RAD",
    "SVG_ANGLETYPE_UNKNOWN",
    "SVG_ANGLETYPE_UNSPECIFIED",
    "SVG_CHANNEL_A",
    "SVG_CHANNEL_B",
    "SVG_CHANNEL_G",
    "SVG_CHANNEL_R",
    "SVG_CHANNEL_UNKNOWN",
    "SVG_COLORTYPE_CURRENTCOLOR",
    "SVG_COLORTYPE_RGBCOLOR",
    "SVG_COLORTYPE_RGBCOLOR_ICCCOLOR",
    "SVG_COLORTYPE_UNKNOWN",
    "SVG_EDGEMODE_DUPLICATE",
    "SVG_EDGEMODE_NONE",
    "SVG_EDGEMODE_UNKNOWN",
    "SVG_EDGEMODE_WRAP",
    "SVG_FEBLEND_MODE_COLOR",
    "SVG_FEBLEND_MODE_COLOR_BURN",
    "SVG_FEBLEND_MODE_COLOR_DODGE",
    "SVG_FEBLEND_MODE_DARKEN",
    "SVG_FEBLEND_MODE_DIFFERENCE",
    "SVG_FEBLEND_MODE_EXCLUSION",
    "SVG_FEBLEND_MODE_HARD_LIGHT",
    "SVG_FEBLEND_MODE_HUE",
    "SVG_FEBLEND_MODE_LIGHTEN",
    "SVG_FEBLEND_MODE_LUMINOSITY",
    "SVG_FEBLEND_MODE_MULTIPLY",
    "SVG_FEBLEND_MODE_NORMAL",
    "SVG_FEBLEND_MODE_OVERLAY",
    "SVG_FEBLEND_MODE_SATURATION",
    "SVG_FEBLEND_MODE_SCREEN",
    "SVG_FEBLEND_MODE_SOFT_LIGHT",
    "SVG_FEBLEND_MODE_UNKNOWN",
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE",
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
    "SVG_FECOLORMATRIX_TYPE_MATRIX",
    "SVG_FECOLORMATRIX_TYPE_SATURATE",
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN",
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
    "SVG_FECOMPOSITE_OPERATOR_ATOP",
    "SVG_FECOMPOSITE_OPERATOR_IN",
    "SVG_FECOMPOSITE_OPERATOR_OUT",
    "SVG_FECOMPOSITE_OPERATOR_OVER",
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
    "SVG_FECOMPOSITE_OPERATOR_XOR",
    "SVG_INVALID_VALUE_ERR",
    "SVG_LENGTHTYPE_CM",
    "SVG_LENGTHTYPE_EMS",
    "SVG_LENGTHTYPE_EXS",
    "SVG_LENGTHTYPE_IN",
    "SVG_LENGTHTYPE_MM",
    "SVG_LENGTHTYPE_NUMBER",
    "SVG_LENGTHTYPE_PC",
    "SVG_LENGTHTYPE_PERCENTAGE",
    "SVG_LENGTHTYPE_PT",
    "SVG_LENGTHTYPE_PX",
    "SVG_LENGTHTYPE_UNKNOWN",
    "SVG_MARKERUNITS_STROKEWIDTH",
    "SVG_MARKERUNITS_UNKNOWN",
    "SVG_MARKERUNITS_USERSPACEONUSE",
    "SVG_MARKER_ORIENT_ANGLE",
    "SVG_MARKER_ORIENT_AUTO",
    "SVG_MARKER_ORIENT_UNKNOWN",
    "SVG_MASKTYPE_ALPHA",
    "SVG_MASKTYPE_LUMINANCE",
    "SVG_MATRIX_NOT_INVERTABLE",
    "SVG_MEETORSLICE_MEET",
    "SVG_MEETORSLICE_SLICE",
    "SVG_MEETORSLICE_UNKNOWN",
    "SVG_MORPHOLOGY_OPERATOR_DILATE",
    "SVG_MORPHOLOGY_OPERATOR_ERODE",
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
    "SVG_PAINTTYPE_CURRENTCOLOR",
    "SVG_PAINTTYPE_NONE",
    "SVG_PAINTTYPE_RGBCOLOR",
    "SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR",
    "SVG_PAINTTYPE_UNKNOWN",
    "SVG_PAINTTYPE_URI",
    "SVG_PAINTTYPE_URI_CURRENTCOLOR",
    "SVG_PAINTTYPE_URI_NONE",
    "SVG_PAINTTYPE_URI_RGBCOLOR",
    "SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR",
    "SVG_PRESERVEASPECTRATIO_NONE",
    "SVG_PRESERVEASPECTRATIO_UNKNOWN",
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
    "SVG_PRESERVEASPECTRATIO_XMAXYMID",
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
    "SVG_PRESERVEASPECTRATIO_XMIDYMID",
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
    "SVG_PRESERVEASPECTRATIO_XMINYMAX",
    "SVG_PRESERVEASPECTRATIO_XMINYMID",
    "SVG_PRESERVEASPECTRATIO_XMINYMIN",
    "SVG_SPREADMETHOD_PAD",
    "SVG_SPREADMETHOD_REFLECT",
    "SVG_SPREADMETHOD_REPEAT",
    "SVG_SPREADMETHOD_UNKNOWN",
    "SVG_STITCHTYPE_NOSTITCH",
    "SVG_STITCHTYPE_STITCH",
    "SVG_STITCHTYPE_UNKNOWN",
    "SVG_TRANSFORM_MATRIX",
    "SVG_TRANSFORM_ROTATE",
    "SVG_TRANSFORM_SCALE",
    "SVG_TRANSFORM_SKEWX",
    "SVG_TRANSFORM_SKEWY",
    "SVG_TRANSFORM_TRANSLATE",
    "SVG_TRANSFORM_UNKNOWN",
    "SVG_TURBULENCE_TYPE_FRACTALNOISE",
    "SVG_TURBULENCE_TYPE_TURBULENCE",
    "SVG_TURBULENCE_TYPE_UNKNOWN",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
    "SVG_UNIT_TYPE_UNKNOWN",
    "SVG_UNIT_TYPE_USERSPACEONUSE",
    "SVG_WRONG_TYPE_ERR",
    "SVG_ZOOMANDPAN_DISABLE",
    "SVG_ZOOMANDPAN_MAGNIFY",
    "SVG_ZOOMANDPAN_UNKNOWN",
    "SYNC_CONDITION",
    "SYNC_FENCE",
    "SYNC_FLAGS",
    "SYNC_FLUSH_COMMANDS_BIT",
    "SYNC_GPU_COMMANDS_COMPLETE",
    "SYNC_STATUS",
    "SYNTAX_ERR",
    "SavedPages",
    "Screen",
    "ScreenOrientation",
    "Script",
    "ScriptEngine",
    "ScriptEngineBuildVersion",
    "ScriptEngineMajorVersion",
    "ScriptEngineMinorVersion",
    "ScriptProcessorNode",
    "ScrollAreaEvent",
    "SecurityPolicyViolationEvent",
    "Selection",
    "Sensor",
    "SensorErrorEvent",
    "ServiceWorker",
    "ServiceWorkerContainer",
    "ServiceWorkerMessageEvent",
    "ServiceWorkerRegistration",
    "SessionDescription",
    "Set",
    "ShadowRoot",
    "SharedArrayBuffer",
    "SharedWorker",
    "SimpleGestureEvent",
    "SourceBuffer",
    "SourceBufferList",
    "SpeechSynthesis",
    "SpeechSynthesisErrorEvent",
    "SpeechSynthesisEvent",
    "SpeechSynthesisUtterance",
    "SpeechSynthesisVoice",
    "StaticRange",
    "StereoPannerNode",
    "StopIteration",
    "Storage",
    "StorageEvent",
    "StorageManager",
    "String",
    "StyleMedia",
    "StylePropertyMap",
    "StylePropertyMapReadOnly",
    "StyleSheet",
    "StyleSheetList",
    "StyleSheetPageList",
    "SubmitEvent",
    "SubtleCrypto",
    "Symbol",
    "SyncManager",
    "SyntaxError",
    "TEMPORARY",
    "TEXTPATH_METHODTYPE_ALIGN",
    "TEXTPATH_METHODTYPE_STRETCH",
    "TEXTPATH_METHODTYPE_UNKNOWN",
    "TEXTPATH_SPACINGTYPE_AUTO",
    "TEXTPATH_SPACINGTYPE_EXACT",
    "TEXTPATH_SPACINGTYPE_UNKNOWN",
    "TEXTURE",
    "TEXTURE0",
    "TEXTURE1",
    "TEXTURE10",
    "TEXTURE11",
    "TEXTURE12",
    "TEXTURE13",
    "TEXTURE14",
    "TEXTURE15",
    "TEXTURE16",
    "TEXTURE17",
    "TEXTURE18",
    "TEXTURE19",
    "TEXTURE2",
    "TEXTURE20",
    "TEXTURE21",
    "TEXTURE22",
    "TEXTURE23",
    "TEXTURE24",
    "TEXTURE25",
    "TEXTURE26",
    "TEXTURE27",
    "TEXTURE28",
    "TEXTURE29",
    "TEXTURE3",
    "TEXTURE30",
    "TEXTURE31",
    "TEXTURE4",
    "TEXTURE5",
    "TEXTURE6",
    "TEXTURE7",
    "TEXTURE8",
    "TEXTURE9",
    "TEXTURE_2D",
    "TEXTURE_2D_ARRAY",
    "TEXTURE_3D",
    "TEXTURE_BASE_LEVEL",
    "TEXTURE_BINDING_2D",
    "TEXTURE_BINDING_2D_ARRAY",
    "TEXTURE_BINDING_3D",
    "TEXTURE_BINDING_CUBE_MAP",
    "TEXTURE_COMPARE_FUNC",
    "TEXTURE_COMPARE_MODE",
    "TEXTURE_CUBE_MAP",
    "TEXTURE_CUBE_MAP_NEGATIVE_X",
    "TEXTURE_CUBE_MAP_NEGATIVE_Y",
    "TEXTURE_CUBE_MAP_NEGATIVE_Z",
    "TEXTURE_CUBE_MAP_POSITIVE_X",
    "TEXTURE_CUBE_MAP_POSITIVE_Y",
    "TEXTURE_CUBE_MAP_POSITIVE_Z",
    "TEXTURE_IMMUTABLE_FORMAT",
    "TEXTURE_IMMUTABLE_LEVELS",
    "TEXTURE_MAG_FILTER",
    "TEXTURE_MAX_ANISOTROPY_EXT",
    "TEXTURE_MAX_LEVEL",
    "TEXTURE_MAX_LOD",
    "TEXTURE_MIN_FILTER",
    "TEXTURE_MIN_LOD",
    "TEXTURE_WRAP_R",
    "TEXTURE_WRAP_S",
    "TEXTURE_WRAP_T",
    "TEXT_NODE",
    "THROTTLED",
    "TIMEOUT",
    "TIMEOUT_ERR",
    "TIMEOUT_EXPIRED",
    "TIMEOUT_IGNORED",
    "TOO_LARGE_ERR",
    "TRANSACTION_INACTIVE_ERR",
    "TRANSFORM_FEEDBACK",
    "TRANSFORM_FEEDBACK_ACTIVE",
    "TRANSFORM_FEEDBACK_BINDING",
    "TRANSFORM_FEEDBACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER_BINDING",
    "TRANSFORM_FEEDBACK_BUFFER_MODE",
    "TRANSFORM_FEEDBACK_BUFFER_SIZE",
    "TRANSFORM_FEEDBACK_BUFFER_START",
    "TRANSFORM_FEEDBACK_PAUSED",
    "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
    "TRANSFORM_FEEDBACK_VARYINGS",
    "TRIANGLE",
    "TRIANGLES",
    "TRIANGLE_FAN",
    "TRIANGLE_STRIP",
    "TYPE_BACK_FORWARD",
    "TYPE_ERR",
    "TYPE_MISMATCH_ERR",
    "TYPE_NAVIGATE",
    "TYPE_RELOAD",
    "TYPE_RESERVED",
    "Table",
    "TaskAttributionTiming",
    "Text",
    "TextDecoder",
    "TextDecoderStream",
    "TextEncoder",
    "TextEncoderStream",
    "TextEvent",
    "TextMetrics",
    "TextRange",
    "TextRangeCollection",
    "TextTrack",
    "TextTrackCue",
    "TextTrackCueList",
    "TextTrackList",
    "TimeEvent",
    "TimeRanges",
    "Touch",
    "TouchEvent",
    "TouchList",
    "TrackEvent",
    "TransformStream",
    "TransitionEvent",
    "TreeWalker",
    "TrustedHTML",
    "TrustedScript",
    "TrustedScriptURL",
    "TrustedTypePolicy",
    "TrustedTypePolicyFactory",
    "TypeError",
    "U2F",
    "UIEvent",
    "UNCACHED",
    "UNIFORM_ARRAY_STRIDE",
    "UNIFORM_BLOCK_ACTIVE_UNIFORMS",
    "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
    "UNIFORM_BLOCK_BINDING",
    "UNIFORM_BLOCK_DATA_SIZE",
    "UNIFORM_BLOCK_INDEX",
    "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
    "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
    "UNIFORM_BUFFER",
    "UNIFORM_BUFFER_BINDING",
    "UNIFORM_BUFFER_OFFSET_ALIGNMENT",
    "UNIFORM_BUFFER_SIZE",
    "UNIFORM_BUFFER_START",
    "UNIFORM_IS_ROW_MAJOR",
    "UNIFORM_MATRIX_STRIDE",
    "UNIFORM_OFFSET",
    "UNIFORM_SIZE",
    "UNIFORM_TYPE",
    "UNKNOWN_ERR",
    "UNKNOWN_RULE",
    "UNMASKED_RENDERER_WEBGL",
    "UNMASKED_VENDOR_WEBGL",
    "UNORDERED_NODE_ITERATOR_TYPE",
    "UNORDERED_NODE_SNAPSHOT_TYPE",
    "UNPACK_ALIGNMENT",
    "UNPACK_COLORSPACE_CONVERSION_WEBGL",
    "UNPACK_FLIP_Y_WEBGL",
    "UNPACK_IMAGE_HEIGHT",
    "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
    "UNPACK_ROW_LENGTH",
    "UNPACK_SKIP_IMAGES",
    "UNPACK_SKIP_PIXELS",
    "UNPACK_SKIP_ROWS",
    "UNSCHEDULED_STATE",
    "UNSENT",
    "UNSIGNALED",
    "UNSIGNED_BYTE",
    "UNSIGNED_INT",
    "UNSIGNED_INT_10F_11F_11F_REV",
    "UNSIGNED_INT_24_8",
    "UNSIGNED_INT_2_10_10_10_REV",
    "UNSIGNED_INT_5_9_9_9_REV",
    "UNSIGNED_INT_SAMPLER_2D",
    "UNSIGNED_INT_SAMPLER_2D_ARRAY",
    "UNSIGNED_INT_SAMPLER_3D",
    "UNSIGNED_INT_SAMPLER_CUBE",
    "UNSIGNED_INT_VEC2",
    "UNSIGNED_INT_VEC3",
    "UNSIGNED_INT_VEC4",
    "UNSIGNED_NORMALIZED",
    "UNSIGNED_SHORT",
    "UNSIGNED_SHORT_4_4_4_4",
    "UNSIGNED_SHORT_5_5_5_1",
    "UNSIGNED_SHORT_5_6_5",
    "UNSPECIFIED_EVENT_TYPE_ERR",
    "UPDATE",
    "UPDATEREADY",
    "UPDATE_AVAILABLE",
    "URIError",
    "URL",
    "URLSearchParams",
    "URLUnencoded",
    "URL_MISMATCH_ERR",
    "USB",
    "USBAlternateInterface",
    "USBConfiguration",
    "USBConnectionEvent",
    "USBDevice",
    "USBEndpoint",
    "USBInTransferResult",
    "USBInterface",
    "USBIsochronousInTransferPacket",
    "USBIsochronousInTransferResult",
    "USBIsochronousOutTransferPacket",
    "USBIsochronousOutTransferResult",
    "USBOutTransferResult",
    "UTC",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "UserActivation",
    "UserMessageHandler",
    "UserMessageHandlersNamespace",
    "UserProximityEvent",
    "VALIDATE_STATUS",
    "VALIDATION_ERR",
    "VARIABLES_RULE",
    "VBArray",
    "VENDOR",
    "VERSION",
    "VERSION_CHANGE",
    "VERSION_ERR",
    "VERTEX_ARRAY_BINDING",
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
    "VERTEX_ATTRIB_ARRAY_DIVISOR",
    "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
    "VERTEX_ATTRIB_ARRAY_ENABLED",
    "VERTEX_ATTRIB_ARRAY_INTEGER",
    "VERTEX_ATTRIB_ARRAY_NORMALIZED",
    "VERTEX_ATTRIB_ARRAY_POINTER",
    "VERTEX_ATTRIB_ARRAY_SIZE",
    "VERTEX_ATTRIB_ARRAY_STRIDE",
    "VERTEX_ATTRIB_ARRAY_TYPE",
    "VERTEX_SHADER",
    "VERTICAL",
    "VERTICAL_AXIS",
    "VER_ERR",
    "VIEWPORT",
    "VIEWPORT_RULE",
    "VRDisplay",
    "VRDisplayCapabilities",
    "VRDisplayEvent",
    "VREyeParameters",
    "VRFieldOfView",
    "VRFrameData",
    "VRPose",
    "VRStageParameters",
    "VTTCue",
    "VTTRegion",
    "ValidityState",
    "VideoPlaybackQuality",
    "VideoStreamTrack",
    "VideoTrack",
    "VideoTrackList",
    "VisualViewport",
    "WAIT_FAILED",
    "WEBGL_compressed_texture_s3tc",
    "WEBGL_debug_renderer_info",
    "WEBKIT_FILTER_RULE",
    "WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN",
    "WEBKIT_FORCE_AT_MOUSE_DOWN",
    "WEBKIT_KEYFRAMES_RULE",
    "WEBKIT_KEYFRAME_RULE",
    "WEBKIT_REGION_RULE",
    "WIN",
    "WRONG_DOCUMENT_ERR",
    "WakeLock",
    "WakeLockSentinel",
    "WaveShaperNode",
    "WeakMap",
    "WeakRef",
    "WeakSet",
    "WebAssembly",
    "WebGL2RenderingContext",
    "WebGLActiveInfo",
    "WebGLBuffer",
    "WebGLContextEvent",
    "WebGLFramebuffer",
    "WebGLObject",
    "WebGLProgram",
    "WebGLQuery",
    "WebGLRenderbuffer",
    "WebGLRenderingContext",
    "WebGLSampler",
    "WebGLShader",
    "WebGLShaderPrecisionFormat",
    "WebGLSync",
    "WebGLTexture",
    "WebGLTransformFeedback",
    "WebGLUniformLocation",
    "WebGLVertexArray",
    "WebGLVertexArrayObject",
    "WebKit built-in PDF",
    "WebKitAnimationEvent",
    "WebKitBlobBuilder",
    "WebKitCSSFilterRule",
    "WebKitCSSFilterValue",
    "WebKitCSSKeyframeRule",
    "WebKitCSSKeyframesRule",
    "WebKitCSSMatrix",
    "WebKitCSSRegionRule",
    "WebKitCSSTransformValue",
    "WebKitDataCue",
    "WebKitGamepad",
    "WebKitMediaKeyError",
    "WebKitMediaKeyMessageEvent",
    "WebKitMediaKeyNeededEvent",
    "WebKitMediaKeySession",
    "WebKitMediaKeys",
    "WebKitMediaSource",
    "WebKitMutationObserver",
    "WebKitNamespace",
    "WebKitPlaybackTargetAvailabilityEvent",
    "WebKitPoint",
    "WebKitShadowRoot",
    "WebKitSourceBuffer",
    "WebKitSourceBufferList",
    "WebKitTransitionEvent",
    "WebSocket",
    "WebkitAlignContent",
    "WebkitAlignItems",
    "WebkitAlignSelf",
    "WebkitAnimation",
    "WebkitAnimationDelay",
    "WebkitAnimationDirection",
    "WebkitAnimationDuration",
    "WebkitAnimationFillMode",
    "WebkitAnimationIterationCount",
    "WebkitAnimationName",
    "WebkitAnimationPlayState",
    "WebkitAnimationTimingFunction",
    "WebkitAppearance",
    "WebkitBackfaceVisibility",
    "WebkitBackgroundClip",
    "WebkitBackgroundOrigin",
    "WebkitBackgroundSize",
    "WebkitBorderBottomLeftRadius",
    "WebkitBorderBottomRightRadius",
    "WebkitBorderImage",
    "WebkitBorderRadius",
    "WebkitBorderTopLeftRadius",
    "WebkitBorderTopRightRadius",
    "WebkitBoxAlign",
    "WebkitBoxDirection",
    "WebkitBoxFlex",
    "WebkitBoxOrdinalGroup",
    "WebkitBoxOrient",
    "WebkitBoxPack",
    "WebkitBoxShadow",
    "WebkitBoxSizing",
    "WebkitFilter",
    "WebkitFlex",
    "WebkitFlexBasis",
    "WebkitFlexDirection",
    "WebkitFlexFlow",
    "WebkitFlexGrow",
    "WebkitFlexShrink",
    "WebkitFlexWrap",
    "WebkitJustifyContent",
    "WebkitLineClamp",
    "WebkitMask",
    "WebkitMaskClip",
    "WebkitMaskComposite",
    "WebkitMaskImage",
    "WebkitMaskOrigin",
    "WebkitMaskPosition",
    "WebkitMaskPositionX",
    "WebkitMaskPositionY",
    "WebkitMaskRepeat",
    "WebkitMaskSize",
    "WebkitOrder",
    "WebkitPerspective",
    "WebkitPerspectiveOrigin",
    "WebkitTextFillColor",
    "WebkitTextSizeAdjust",
    "WebkitTextStroke",
    "WebkitTextStrokeColor",
    "WebkitTextStrokeWidth",
    "WebkitTransform",
    "WebkitTransformOrigin",
    "WebkitTransformStyle",
    "WebkitTransition",
    "WebkitTransitionDelay",
    "WebkitTransitionDuration",
    "WebkitTransitionProperty",
    "WebkitTransitionTimingFunction",
    "WebkitUserSelect",
    "WheelEvent",
    "Window",
    "Windows Media Player Plug-in Dynamic Link Library",
    "Windows Presentation Foundation",
    "Worker",
    "Worklet",
    "WritableStream",
    "WritableStreamDefaultWriter",
    "X86_32",
    "X86_64",
    "XMLDocument",
    "XMLHttpRequest",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestException",
    "XMLHttpRequestProgressEvent",
    "XMLHttpRequestUpload",
    "XMLSerializer",
    "XMLStylesheetProcessingInstruction",
    "XPathEvaluator",
    "XPathException",
    "XPathExpression",
    "XPathNSResolver",
    "XPathResult",
    "XR",
    "XRBoundedReferenceSpace",
    "XRDOMOverlayState",
    "XRFrame",
    "XRHitTestResult",
    "XRHitTestSource",
    "XRInputSource",
    "XRInputSourceArray",
    "XRInputSourceEvent",
    "XRInputSourcesChangeEvent",
    "XRLayer",
    "XRPose",
    "XRRay",
    "XRReferenceSpace",
    "XRReferenceSpaceEvent",
    "XRRenderState",
    "XRRigidTransform",
    "XRSession",
    "XRSessionEvent",
    "XRSpace",
    "XRSystem",
    "XRTransientInputHitTestResult",
    "XRTransientInputHitTestSource",
    "XRView",
    "XRViewerPose",
    "XRViewport",
    "XRWebGLLayer",
    "XSLTProcessor",
    "ZERO",
    "_XD0M_",
    "_YD0M_",
    "__defineGetter__",
    "__defineSetter__",
    "__lookupGetter__",
    "__lookupSetter__",
    "__opera",
    "__proto__",
    "__relevantExtensionKeys",
    "_browserjsran",
    "a",
    "aLink",
    "abbr",
    "abort",
    "aborted",
    "abs",
    "absolute",
    "acceleration",
    "accelerationIncludingGravity",
    "accelerator",
    "accept",
    "acceptCharset",
    "acceptNode",
    "accessKey",
    "accessKeyLabel",
    "accuracy",
    "acos",
    "acosh",
    "action",
    "actionURL",
    "actions",
    "activated",
    "active",
    "activeCues",
    "activeElement",
    "activeSourceBuffers",
    "activeSourceCount",
    "activeTexture",
    "activeVRDisplays",
    "actualBoundingBoxAscent",
    "actualBoundingBoxDescent",
    "actualBoundingBoxLeft",
    "actualBoundingBoxRight",
    "add",
    "addAll",
    "addBehavior",
    "addCandidate",
    "addColorStop",
    "addCue",
    "addElement",
    "addEventListener",
    "addFilter",
    "addFromString",
    "addFromUri",
    "addIceCandidate",
    "addImport",
    "addListener",
    "addModule",
    "addNamed",
    "addPageRule",
    "addPath",
    "addPointer",
    "addRange",
    "addRegion",
    "addRule",
    "addRules",
    "addSearchEngine",
    "addSourceBuffer",
    "addStream",
    "addTextTrack",
    "addTrack",
    "addTransceiver",
    "addWakeLockListener",
    "added",
    "addedNodes",
    "additionalName",
    "additiveSymbols",
    "addons",
    "address",
    "addressLine",
    "adoptNode",
    "adoptText",
    "adoptedCallback",
    "adoptedStyleSheets",
    "adr",
    "advance",
    "after",
    "album",
    "alert",
    "algorithm",
    "align",
    "align-content",
    "align-items",
    "align-self",
    "alignContent",
    "alignItems",
    "alignSelf",
    "alignmentBaseline",
    "alinkColor",
    "all",
    "allSettled",
    "allow",
    "allowFullscreen",
    "allowPaymentRequest",
    "allowTransparency",
    "allowedDirections",
    "allowedFeatures",
    "allowsFeature",
    "alpha",
    "alphabeticBaseline",
    "alt",
    "altGraphKey",
    "altHtml",
    "altKey",
    "altLeft",
    "alternate",
    "alternateSetting",
    "alternates",
    "altitude",
    "altitudeAccuracy",
    "amplitude",
    "ancestorOrigins",
    "anchor",
    "anchorNode",
    "anchorOffset",
    "anchors",
    "and",
    "angle",
    "angularAcceleration",
    "angularVelocity",
    "animVal",
    "animate",
    "animatedInstanceRoot",
    "animatedNormalizedPathSegList",
    "animatedPathSegList",
    "animatedPoints",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "animationDelay",
    "animationDirection",
    "animationDuration",
    "animationFillMode",
    "animationIterationCount",
    "animationName",
    "animationPlayState",
    "animationStartTime",
    "animationTimingFunction",
    "animationsPaused",
    "anniversary",
    "antialias",
    "any",
    "app",
    "appCodeName",
    "appMinorVersion",
    "appName",
    "appNotifications",
    "appVersion",
    "appearance",
    "append",
    "appendBuffer",
    "appendChild",
    "appendData",
    "appendItem",
    "appendMedium",
    "appendNamed",
    "appendRule",
    "appendStream",
    "appendWindowEnd",
    "appendWindowStart",
    "appleTrailingWord",
    "applets",
    "application/apple-default-browser",
    "application/asx",
    "application/java-deployment-toolkit",
    "application/pdf",
    "application/postscript",
    "application/x-drm",
    "application/x-drm-v2",
    "application/x-google-chrome-pdf",
    "application/x-java-applet",
    "application/x-java-applet;deploy=10.25.2",
    "application/x-java-applet;javafx=2.2.25",
    "application/x-java-applet;jpi-version=1.7.0_25",
    "application/x-java-applet;version=1.1",
    "application/x-java-applet;version=1.1.1",
    "application/x-java-applet;version=1.1.2",
    "application/x-java-applet;version=1.1.3",
    "application/x-java-applet;version=1.2",
    "application/x-java-applet;version=1.2.1",
    "application/x-java-applet;version=1.2.2",
    "application/x-java-applet;version=1.3",
    "application/x-java-applet;version=1.3.1",
    "application/x-java-applet;version=1.4",
    "application/x-java-applet;version=1.4.1",
    "application/x-java-applet;version=1.4.2",
    "application/x-java-applet;version=1.5",
    "application/x-java-applet;version=1.6",
    "application/x-java-applet;version=1.7",
    "application/x-java-bean",
    "application/x-java-bean;jpi-version=1.7.0_25",
    "application/x-java-bean;version=1.1",
    "application/x-java-bean;version=1.1.1",
    "application/x-java-bean;version=1.1.2",
    "application/x-java-bean;version=1.1.3",
    "application/x-java-bean;version=1.2",
    "application/x-java-bean;version=1.2.1",
    "application/x-java-bean;version=1.2.2",
    "application/x-java-bean;version=1.3",
    "application/x-java-bean;version=1.3.1",
    "application/x-java-bean;version=1.4",
    "application/x-java-bean;version=1.4.1",
    "application/x-java-bean;version=1.4.2",
    "application/x-java-bean;version=1.5",
    "application/x-java-bean;version=1.6",
    "application/x-java-bean;version=1.7",
    "application/x-java-vm",
    "application/x-java-vm-npruntime",
    "application/x-mplayer2",
    "application/x-ms-xbap",
    "application/x-nacl",
    "application/x-pnacl",
    "application/xaml+xml",
    "applicationCache",
    "applicationServerKey",
    "apply",
    "applyConstraints",
    "applyElement",
    "arc",
    "arcTo",
    "archive",
    "areas",
    "arguments",
    "aria-activedescendant",
    "aria-busy",
    "aria-checked",
    "aria-controls",
    "aria-describedby",
    "aria-disabled",
    "aria-expanded",
    "aria-flowto",
    "aria-haspopup",
    "aria-hidden",
    "aria-invalid",
    "aria-labelledby",
    "aria-level",
    "aria-live",
    "aria-multiselectable",
    "aria-owns",
    "aria-posinset",
    "aria-pressed",
    "aria-readonly",
    "aria-relevant",
    "aria-required",
    "aria-secret",
    "aria-selected",
    "aria-setsize",
    "aria-valuemax",
    "aria-valuemin",
    "aria-valuenow",
    "ariaAtomic",
    "ariaAutoComplete",
    "ariaBusy",
    "ariaChecked",
    "ariaColCount",
    "ariaColIndex",
    "ariaColSpan",
    "ariaCurrent",
    "ariaDescription",
    "ariaDisabled",
    "ariaExpanded",
    "ariaHasPopup",
    "ariaHidden",
    "ariaKeyShortcuts",
    "ariaLabel",
    "ariaLevel",
    "ariaLive",
    "ariaModal",
    "ariaMultiLine",
    "ariaMultiSelectable",
    "ariaOrientation",
    "ariaPlaceholder",
    "ariaPosInSet",
    "ariaPressed",
    "ariaReadOnly",
    "ariaRelevant",
    "ariaRequired",
    "ariaRoleDescription",
    "ariaRowCount",
    "ariaRowIndex",
    "ariaRowSpan",
    "ariaSelected",
    "ariaSetSize",
    "ariaSort",
    "ariaValueMax",
    "ariaValueMin",
    "ariaValueNow",
    "ariaValueText",
    "arrayBuffer",
    "artist",
    "artwork",
    "as",
    "asIntN",
    "asUintN",
    "asin",
    "asinh",
    "assert",
    "assign",
    "assignedElements",
    "assignedNodes",
    "assignedSlot",
    "async",
    "asyncIterator",
    "atEnd",
    "atan",
    "atan2",
    "atanh",
    "atob",
    "atomic",
    "attachEvent",
    "attachInternals",
    "attachShader",
    "attachShadow",
    "attachments",
    "attack",
    "attestationObject",
    "attrChange",
    "attrName",
    "attributeChangedCallback",
    "attributeFilter",
    "attributeName",
    "attributeNamespace",
    "attributeOldValue",
    "attributeStyleMap",
    "attributes",
    "attribution",
    "audio/x-ms-wax",
    "audio/x-ms-wma",
    "audioBitsPerSecond",
    "audioTracks",
    "audioWorklet",
    "authenticatedSignedWrites",
    "authenticatorData",
    "autoIncrement",
    "autobuffer",
    "autocapitalize",
    "autocomplete",
    "autocorrect",
    "autofocus",
    "automationRate",
    "autoplay",
    "availHeight",
    "availLeft",
    "availTop",
    "availWidth",
    "availability",
    "available",
    "aversion",
    "ax",
    "axes",
    "axis",
    "ay",
    "azimuth",
    "b",
    "back",
    "backdropFilter",
    "backface-visibility",
    "backfaceVisibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "backgroundAttachment",
    "backgroundBlendMode",
    "backgroundClip",
    "backgroundColor",
    "backgroundFetch",
    "backgroundImage",
    "backgroundOrigin",
    "backgroundPosition",
    "backgroundPositionX",
    "backgroundPositionY",
    "backgroundRepeat",
    "backgroundRepeatX",
    "backgroundRepeatY",
    "backgroundSize",
    "badInput",
    "badge",
    "balance",
    "baseFrequencyX",
    "baseFrequencyY",
    "baseLatency",
    "baseLayer",
    "baseName",
    "baseNode",
    "baseOffset",
    "baseURI",
    "baseVal",
    "baselineShift",
    "battery",
    "bday",
    "before",
    "beginElement",
    "beginElementAt",
    "beginPath",
    "beginQuery",
    "beginTransformFeedback",
    "behavior",
    "behaviorCookie",
    "behaviorPart",
    "behaviorUrns",
    "beta",
    "bezierCurveTo",
    "bgColor",
    "bgProperties",
    "bias",
    "big",
    "binaryType",
    "bind",
    "bindAttribLocation",
    "bindBuffer",
    "bindBufferBase",
    "bindBufferRange",
    "bindFramebuffer",
    "bindRenderbuffer",
    "bindSampler",
    "bindTexture",
    "bindTransformFeedback",
    "bindVertexArray",
    "blendColor",
    "blendEquation",
    "blendEquationSeparate",
    "blendFunc",
    "blendFuncSeparate",
    "blink",
    "blitFramebuffer",
    "blob",
    "block-size",
    "blockDirection",
    "blockSize",
    "blockedURI",
    "blue",
    "bluetooth",
    "blur",
    "body",
    "bodyUsed",
    "bold",
    "bookmarks",
    "booleanValue",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "borderBlock",
    "borderBlockColor",
    "borderBlockEnd",
    "borderBlockEndColor",
    "borderBlockEndStyle",
    "borderBlockEndWidth",
    "borderBlockStart",
    "borderBlockStartColor",
    "borderBlockStartStyle",
    "borderBlockStartWidth",
    "borderBlockStyle",
    "borderBlockWidth",
    "borderBottom",
    "borderBottomColor",
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderBottomStyle",
    "borderBottomWidth",
    "borderBoxSize",
    "borderCollapse",
    "borderColor",
    "borderColorDark",
    "borderColorLight",
    "borderEndEndRadius",
    "borderEndStartRadius",
    "borderImage",
    "borderImageOutset",
    "borderImageRepeat",
    "borderImageSlice",
    "borderImageSource",
    "borderImageWidth",
    "borderInline",
    "borderInlineColor",
    "borderInlineEnd",
    "borderInlineEndColor",
    "borderInlineEndStyle",
    "borderInlineEndWidth",
    "borderInlineStart",
    "borderInlineStartColor",
    "borderInlineStartStyle",
    "borderInlineStartWidth",
    "borderInlineStyle",
    "borderInlineWidth",
    "borderLeft",
    "borderLeftColor",
    "borderLeftStyle",
    "borderLeftWidth",
    "borderRadius",
    "borderRight",
    "borderRightColor",
    "borderRightStyle",
    "borderRightWidth",
    "borderSpacing",
    "borderStartEndRadius",
    "borderStartStartRadius",
    "borderStyle",
    "borderTop",
    "borderTopColor",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderTopStyle",
    "borderTopWidth",
    "borderWidth",
    "bottom",
    "bottomMargin",
    "bound",
    "boundElements",
    "boundingClientRect",
    "boundingHeight",
    "boundingLeft",
    "boundingTop",
    "boundingWidth",
    "bounds",
    "boundsGeometry",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "boxDecorationBreak",
    "boxShadow",
    "boxSizing",
    "break-after",
    "break-before",
    "break-inside",
    "breakAfter",
    "breakBefore",
    "breakInside",
    "breakType",
    "broadcast",
    "browserLanguage",
    "btoa",
    "bubbles",
    "buffer",
    "bufferData",
    "bufferDepth",
    "bufferSize",
    "bufferSubData",
    "buffered",
    "bufferedAmount",
    "bufferedAmountLowThreshold",
    "bufferedRendering",
    "buildID",
    "buildNumber",
    "button",
    "buttonID",
    "buttons",
    "byteLength",
    "byteOffset",
    "bytesWritten",
    "c",
    "cache",
    "caches",
    "calendar",
    "call",
    "caller",
    "canBeFormatted",
    "canBeMounted",
    "canBeShared",
    "canHaveChildren",
    "canHaveHTML",
    "canInsertDTMF",
    "canMakePayment",
    "canPlayType",
    "canPresent",
    "canTrickleIceCandidates",
    "cancel",
    "cancelAndHoldAtTime",
    "cancelAnimationFrame",
    "cancelBubble",
    "cancelIdleCallback",
    "cancelScheduledValues",
    "cancelVideoFrameCallback",
    "cancelWatchAvailability",
    "cancelable",
    "candidate",
    "canonicalUUID",
    "canvas",
    "capabilities",
    "caption",
    "caption-side",
    "captionSide",
    "capture",
    "captureEvents",
    "captureStackTrace",
    "captureStream",
    "caret-color",
    "caretBidiLevel",
    "caretColor",
    "caretPositionFromPoint",
    "caretRangeFromPoint",
    "caseFirst",
    "cast",
    "catch",
    "category",
    "cbrt",
    "cd",
    "ceil",
    "cellIndex",
    "cellPadding",
    "cellSpacing",
    "cells",
    "ch",
    "chOff",
    "chain",
    "challenge",
    "changeType",
    "changeVersion",
    "changedTouches",
    "channel",
    "channelCount",
    "channelCountMode",
    "channelInterpretation",
    "char",
    "charAt",
    "charCode",
    "charCodeAt",
    "charIndex",
    "charLength",
    "characterData",
    "characterDataOldValue",
    "characterSet",
    "characteristic",
    "charging",
    "chargingTime",
    "charset",
    "check",
    "checkEnclosure",
    "checkFramebufferStatus",
    "checkInstalled",
    "checkIntersection",
    "checkValidity",
    "checked",
    "childElementCount",
    "childList",
    "childNodes",
    "children",
    "chrome",
    "ciphertext",
    "cite",
    "city",
    "claimInterface",
    "claimed",
    "classList",
    "className",
    "classid",
    "clear",
    "clearAppBadge",
    "clearAttributes",
    "clearBufferfi",
    "clearBufferfv",
    "clearBufferiv",
    "clearBufferuiv",
    "clearColor",
    "clearData",
    "clearDepth",
    "clearHalt",
    "clearImmediate",
    "clearInterval",
    "clearLiveSeekableRange",
    "clearMarks",
    "clearMeasures",
    "clearParameters",
    "clearRect",
    "clearResourceTimings",
    "clearShadow",
    "clearStencil",
    "clearTimeout",
    "clearWatch",
    "click",
    "clickCount",
    "clientDataJSON",
    "clientHeight",
    "clientInformation",
    "clientLeft",
    "clientRect",
    "clientRects",
    "clientTop",
    "clientWaitSync",
    "clientWidth",
    "clientX",
    "clientY",
    "clip",
    "clip-path",
    "clip-rule",
    "clipBottom",
    "clipLeft",
    "clipPath",
    "clipPathUnits",
    "clipRight",
    "clipRule",
    "clipTop",
    "clipboard",
    "clipboardData",
    "clone",
    "cloneContents",
    "cloneNode",
    "cloneRange",
    "close",
    "closePath",
    "closed",
    "closest",
    "clz",
    "clz32",
    "cm",
    "cmp",
    "code",
    "codeBase",
    "codePointAt",
    "codeType",
    "colSpan",
    "collapse",
    "collapseToEnd",
    "collapseToStart",
    "collapsed",
    "collation",
    "collect",
    "colno",
    "color",
    "color-adjust",
    "color-interpolation",
    "color-interpolation-filters",
    "colorAdjust",
    "colorDepth",
    "colorInterpolation",
    "colorInterpolationFilters",
    "colorMask",
    "colorProfile",
    "colorRendering",
    "colorScheme",
    "colorType",
    "cols",
    "column",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columnCount",
    "columnFill",
    "columnGap",
    "columnNumber",
    "columnRule",
    "columnRuleColor",
    "columnRuleStyle",
    "columnRuleWidth",
    "columnSpan",
    "columnWidth",
    "columns",
    "command",
    "commit",
    "commitLoadTime",
    "commitPreferences",
    "commitStyles",
    "commonAncestorContainer",
    "compact",
    "compare",
    "compareBoundaryPoints",
    "compareDocumentPosition",
    "compareEndPoints",
    "compareExchange",
    "compareNode",
    "comparePoint",
    "compatMode",
    "compatible",
    "compile",
    "compileShader",
    "compileStreaming",
    "complete",
    "component",
    "componentFromPoint",
    "composed",
    "composedPath",
    "composite",
    "compositionEndOffset",
    "compositionStartOffset",
    "compressedTexImage2D",
    "compressedTexImage3D",
    "compressedTexSubImage2D",
    "compressedTexSubImage3D",
    "computedStyleMap",
    "concat",
    "conditionText",
    "coneInnerAngle",
    "coneOuterAngle",
    "coneOuterGain",
    "configuration",
    "configurationName",
    "configurationValue",
    "configurations",
    "confirm",
    "confirmComposition",
    "confirmSiteSpecificTrackingException",
    "confirmWebWideTrackingException",
    "connect",
    "connectEnd",
    "connectStart",
    "connected",
    "connectedCallback",
    "connection",
    "connectionInfo",
    "connectionList",
    "connectionSpeed",
    "connectionState",
    "connections",
    "console",
    "consoleHistory",
    "consolidate",
    "constraint",
    "constrictionActive",
    "construct",
    "constructor",
    "contactID",
    "contain",
    "containIntrinsicSize",
    "containerId",
    "containerName",
    "containerSrc",
    "containerType",
    "contains",
    "containsNode",
    "content",
    "contentBoxSize",
    "contentDocument",
    "contentEditable",
    "contentHint",
    "contentOverflow",
    "contentRect",
    "contentScriptType",
    "contentStyleType",
    "contentType",
    "contentWindow",
    "context",
    "contextMenu",
    "contextmenu",
    "continue",
    "continuePrimaryKey",
    "continuous",
    "control",
    "controlTransferIn",
    "controlTransferOut",
    "controller",
    "controls",
    "controlsList",
    "convertToBlob",
    "convertToSpecifiedUnits",
    "cookie",
    "cookieEnabled",
    "coords",
    "copyBufferSubData",
    "copyFromChannel",
    "copyTexImage2D",
    "copyTexSubImage2D",
    "copyTexSubImage3D",
    "copyToChannel",
    "copyWithin",
    "correspondingElement",
    "correspondingUseElement",
    "corruptedVideoFrames",
    "cos",
    "cosh",
    "count",
    "countReset",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "counterIncrement",
    "counterReset",
    "counterSet",
    "country",
    "cpuClass",
    "cpuSleepAllowed",
    "create",
    "createAnalyser",
    "createAnswer",
    "createAttribute",
    "createAttributeNS",
    "createBiquadFilter",
    "createBuffer",
    "createBufferSource",
    "createCDATASection",
    "createCSSStyleSheet",
    "createCaption",
    "createChannelMerger",
    "createChannelSplitter",
    "createComment",
    "createConstantSource",
    "createContextualFragment",
    "createControlRange",
    "createConvolver",
    "createDTMFSender",
    "createDataChannel",
    "createDelay",
    "createDelayNode",
    "createDocument",
    "createDocumentFragment",
    "createDocumentType",
    "createDynamicsCompressor",
    "createElement",
    "createElementNS",
    "createEntityReference",
    "createEvent",
    "createEventObject",
    "createExpression",
    "createFramebuffer",
    "createFunction",
    "createGain",
    "createGainNode",
    "createHTML",
    "createHTMLDocument",
    "createIIRFilter",
    "createImageBitmap",
    "createImageData",
    "createIndex",
    "createJavaScriptNode",
    "createLinearGradient",
    "createMediaElementSource",
    "createMediaKeys",
    "createMediaStreamDestination",
    "createMediaStreamSource",
    "createMediaStreamTrackSource",
    "createMutableFile",
    "createNSResolver",
    "createNodeIterator",
    "createNotification",
    "createObjectStore",
    "createObjectURL",
    "createOffer",
    "createOscillator",
    "createPanner",
    "createPattern",
    "createPeriodicWave",
    "createPolicy",
    "createPopup",
    "createProcessingInstruction",
    "createProgram",
    "createQuery",
    "createRadialGradient",
    "createRange",
    "createRangeCollection",
    "createReader",
    "createRenderbuffer",
    "createSVGAngle",
    "createSVGLength",
    "createSVGMatrix",
    "createSVGNumber",
    "createSVGPathSegArcAbs",
    "createSVGPathSegArcRel",
    "createSVGPathSegClosePath",
    "createSVGPathSegCurvetoCubicAbs",
    "createSVGPathSegCurvetoCubicRel",
    "createSVGPathSegCurvetoCubicSmoothAbs",
    "createSVGPathSegCurvetoCubicSmoothRel",
    "createSVGPathSegCurvetoQuadraticAbs",
    "createSVGPathSegCurvetoQuadraticRel",
    "createSVGPathSegCurvetoQuadraticSmoothAbs",
    "createSVGPathSegCurvetoQuadraticSmoothRel",
    "createSVGPathSegLinetoAbs",
    "createSVGPathSegLinetoHorizontalAbs",
    "createSVGPathSegLinetoHorizontalRel",
    "createSVGPathSegLinetoRel",
    "createSVGPathSegLinetoVerticalAbs",
    "createSVGPathSegLinetoVerticalRel",
    "createSVGPathSegMovetoAbs",
    "createSVGPathSegMovetoRel",
    "createSVGPoint",
    "createSVGRect",
    "createSVGTransform",
    "createSVGTransformFromMatrix",
    "createSampler",
    "createScript",
    "createScriptProcessor",
    "createScriptURL",
    "createSession",
    "createShader",
    "createShadowRoot",
    "createStereoPanner",
    "createStyleSheet",
    "createTBody",
    "createTFoot",
    "createTHead",
    "createTextNode",
    "createTextRange",
    "createTexture",
    "createTouch",
    "createTouchList",
    "createTransformFeedback",
    "createTreeWalker",
    "createVertexArray",
    "createWaveShaper",
    "creationTime",
    "credentials",
    "crossOrigin",
    "crossOriginIsolated",
    "crypto",
    "csi",
    "csp",
    "cssFloat",
    "cssRules",
    "cssText",
    "cssValueType",
    "ctrlKey",
    "ctrlLeft",
    "cues",
    "cullFace",
    "currency",
    "currencyDisplay",
    "current",
    "currentDirection",
    "currentLocalDescription",
    "currentNode",
    "currentPage",
    "currentRect",
    "currentRemoteDescription",
    "currentScale",
    "currentScript",
    "currentSrc",
    "currentState",
    "currentStyle",
    "currentTarget",
    "currentTime",
    "currentTranslate",
    "currentView",
    "cursor",
    "curve",
    "customElements",
    "customError",
    "customSections",
    "cx",
    "cy",
    "d",
    "data",
    "dataFld",
    "dataFormatAs",
    "dataLoss",
    "dataLossMessage",
    "dataPageSize",
    "dataSrc",
    "dataTransfer",
    "database",
    "databases",
    "dataset",
    "dateTime",
    "day",
    "db",
    "debug",
    "debuggerEnabled",
    "declare",
    "decode",
    "decodeAudioData",
    "decodeURI",
    "decodeURIComponent",
    "decodedBodySize",
    "decoding",
    "decodingInfo",
    "decrypt",
    "default",
    "defaultCharset",
    "defaultChecked",
    "defaultMuted",
    "defaultPlaybackRate",
    "defaultPolicy",
    "defaultPrevented",
    "defaultRequest",
    "defaultSelected",
    "defaultStatus",
    "defaultURL",
    "defaultValue",
    "defaultView",
    "defaultstatus",
    "defer",
    "define",
    "defineMagicFunction",
    "defineMagicVariable",
    "defineProperties",
    "defineProperty",
    "deg",
    "delay",
    "delayTime",
    "delegatesFocus",
    "delete",
    "deleteBuffer",
    "deleteCaption",
    "deleteCell",
    "deleteContents",
    "deleteData",
    "deleteDatabase",
    "deleteFramebuffer",
    "deleteFromDocument",
    "deleteIndex",
    "deleteMedium",
    "deleteObjectStore",
    "deleteProgram",
    "deleteProperty",
    "deleteQuery",
    "deleteRenderbuffer",
    "deleteRow",
    "deleteRule",
    "deleteSampler",
    "deleteShader",
    "deleteSync",
    "deleteTFoot",
    "deleteTHead",
    "deleteTexture",
    "deleteTransformFeedback",
    "deleteVertexArray",
    "deliverChangeRecords",
    "delivery",
    "deliveryInfo",
    "deliveryStatus",
    "deliveryTimestamp",
    "delta",
    "deltaMode",
    "deltaX",
    "deltaY",
    "deltaZ",
    "dependentLocality",
    "depthFar",
    "depthFunc",
    "depthMask",
    "depthNear",
    "depthRange",
    "deref",
    "deriveBits",
    "deriveKey",
    "description",
    "deselectAll",
    "designMode",
    "desiredSize",
    "destination",
    "destinationURL",
    "detach",
    "detachEvent",
    "detachShader",
    "detail",
    "details",
    "detect",
    "detune",
    "device",
    "deviceClass",
    "deviceId",
    "deviceMemory",
    "devicePixelContentBoxSize",
    "devicePixelRatio",
    "deviceProtocol",
    "deviceSessionId",
    "deviceSubclass",
    "deviceVersionMajor",
    "deviceVersionMinor",
    "deviceVersionSubminor",
    "deviceXDPI",
    "deviceYDPI",
    "didTimeout",
    "diffuseConstant",
    "digest",
    "dimensions",
    "dir",
    "dirName",
    "dirXml",
    "direction",
    "dirxml",
    "disable",
    "disablePictureInPicture",
    "disableRemotePlayback",
    "disableVertexAttribArray",
    "disabled",
    "dischargingTime",
    "disconnect",
    "disconnectedCallback",
    "dispatch",
    "dispatchEvent",
    "dispatchToListener",
    "display",
    "displayId",
    "displayName",
    "disposition",
    "distanceModel",
    "div",
    "divisor",
    "djsapi",
    "djsproxy",
    "doImport",
    "doNotTrack",
    "doScroll",
    "doctype",
    "document",
    "documentElement",
    "documentMode",
    "documentURI",
    "dolphin",
    "dolphinGameCenter",
    "dolphininfo",
    "dolphinmeta",
    "domComplete",
    "domContentLoadedEventEnd",
    "domContentLoadedEventStart",
    "domInteractive",
    "domLoading",
    "domOverlayState",
    "domain",
    "domainLookupEnd",
    "domainLookupStart",
    "dominant-baseline",
    "dominantBaseline",
    "done",
    "dopplerFactor",
    "dotAll",
    "downDegrees",
    "downlink",
    "download",
    "downloadTotal",
    "downloaded",
    "dpcm",
    "dpi",
    "dppx",
    "dragDrop",
    "draggable",
    "drawArrays",
    "drawArraysInstanced",
    "drawArraysInstancedANGLE",
    "drawBuffers",
    "drawCustomFocusRing",
    "drawElements",
    "drawElementsInstanced",
    "drawElementsInstancedANGLE",
    "drawFocusIfNeeded",
    "drawImage",
    "drawImageFromRect",
    "drawRangeElements",
    "drawSystemFocusRing",
    "drawingBufferHeight",
    "drawingBufferWidth",
    "dropEffect",
    "droppedVideoFrames",
    "dropzone",
    "dtmf",
    "dump",
    "duplicate",
    "durability",
    "duration",
    "dvname",
    "dvnum",
    "dx",
    "dy",
    "dynsrc",
    "e",
    "edgeMode",
    "effect",
    "effectAllowed",
    "effectiveDirective",
    "effectiveType",
    "elapsedTime",
    "element",
    "elementFromPoint",
    "elementTiming",
    "elements",
    "elementsFromPoint",
    "elevation",
    "ellipse",
    "em",
    "emHeightAscent",
    "emHeightDescent",
    "email",
    "embeds",
    "emma",
    "empty",
    "empty-cells",
    "emptyCells",
    "emptyHTML",
    "emptyScript",
    "emulatedPosition",
    "enable",
    "enableBackground",
    "enableDelegations",
    "enableStyleSheetsForSet",
    "enableVertexAttribArray",
    "enabled",
    "enabledPlugin",
    "encode",
    "encodeInto",
    "encodeURI",
    "encodeURIComponent",
    "encodedBodySize",
    "encoding",
    "encodingInfo",
    "encrypt",
    "enctype",
    "end",
    "endContainer",
    "endElement",
    "endElementAt",
    "endOfStream",
    "endOffset",
    "endQuery",
    "endTime",
    "endTransformFeedback",
    "ended",
    "endpoint",
    "endpointNumber",
    "endpoints",
    "endsWith",
    "enterKeyHint",
    "entities",
    "entries",
    "entryType",
    "enumerate",
    "enumerateDevices",
    "enumerateEditable",
    "environmentBlendMode",
    "epubCaptionSide",
    "epubTextCombine",
    "epubTextEmphasis",
    "epubTextEmphasisColor",
    "epubTextEmphasisStyle",
    "epubTextOrientation",
    "epubTextTransform",
    "epubWordBreak",
    "epubWritingMode",
    "equals",
    "era",
    "error",
    "errorCode",
    "errorDetail",
    "errorText",
    "escape",
    "estimate",
    "eval",
    "evaluate",
    "event",
    "eventPhase",
    "every",
    "ex",
    "exception",
    "exchange",
    "exec",
    "execCommand",
    "execCommandShowHelp",
    "execScript",
    "executeSql",
    "exitFullscreen",
    "exitPictureInPicture",
    "exitPointerLock",
    "exitPresent",
    "exp",
    "expand",
    "expandEntityReferences",
    "expando",
    "expansion",
    "expiration",
    "expirationTime",
    "expires",
    "expiryDate",
    "explicitOriginalTarget",
    "expm1",
    "exponent",
    "exponentialRampToValueAtTime",
    "exportKey",
    "exports",
    "extend",
    "extensions",
    "extentNode",
    "extentOffset",
    "external",
    "externalResourcesRequired",
    "extractContents",
    "extractable",
    "eye",
    "f",
    "face",
    "factoryReset",
    "failureReason",
    "fallback",
    "family",
    "familyName",
    "farthestViewportElement",
    "fastSeek",
    "fatal",
    "featurePolicy",
    "featureSettings",
    "features",
    "fenceSync",
    "fetch",
    "fetchStart",
    "fftSize",
    "fgColor",
    "fieldOfView",
    "file",
    "fileCreatedDate",
    "fileHandle",
    "fileModifiedDate",
    "fileName",
    "fileSize",
    "fileUpdatedDate",
    "filename",
    "files",
    "filesystem",
    "fill",
    "fill-opacity",
    "fill-rule",
    "fillLightMode",
    "fillOpacity",
    "fillRect",
    "fillRule",
    "fillStyle",
    "fillText",
    "filter",
    "filterResX",
    "filterResY",
    "filterUnits",
    "filters",
    "finally",
    "find",
    "findIndex",
    "findRule",
    "findText",
    "finish",
    "finishDocumentLoadTime",
    "finishLoadTime",
    "finished",
    "fireEvent",
    "firesTouchEvents",
    "first",
    "firstChild",
    "firstElementChild",
    "firstPage",
    "firstPaintAfterLoadTime",
    "firstPaintTime",
    "fixed",
    "flags",
    "flat",
    "flatMap",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "flexBasis",
    "flexDirection",
    "flexFlow",
    "flexGrow",
    "flexShrink",
    "flexWrap",
    "flipX",
    "flipY",
    "float",
    "flood-color",
    "flood-opacity",
    "floodColor",
    "floodOpacity",
    "floor",
    "flush",
    "focus",
    "focusNode",
    "focusOffset",
    "font",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-weight",
    "fontBoundingBoxAscent",
    "fontBoundingBoxDescent",
    "fontDisplay",
    "fontFamily",
    "fontFeatureSettings",
    "fontKerning",
    "fontLanguageOverride",
    "fontOpticalSizing",
    "fontSize",
    "fontSizeAdjust",
    "fontSmoothingEnabled",
    "fontStretch",
    "fontStyle",
    "fontSynthesis",
    "fontVariant",
    "fontVariantAlternates",
    "fontVariantCaps",
    "fontVariantEastAsian",
    "fontVariantLigatures",
    "fontVariantNumeric",
    "fontVariantPosition",
    "fontVariationSettings",
    "fontWeight",
    "fontcolor",
    "fontfaces",
    "fonts",
    "fontsize",
    "for",
    "forEach",
    "force",
    "forceRedraw",
    "form",
    "formAction",
    "formData",
    "formEnctype",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "format",
    "formatRange",
    "formatRangeToParts",
    "formatToParts",
    "forms",
    "forward",
    "forwardX",
    "forwardY",
    "forwardZ",
    "foundation",
    "fr",
    "fragmentDirective",
    "frame",
    "frameBorder",
    "frameElement",
    "frameSpacing",
    "framebuffer",
    "framebufferHeight",
    "framebufferRenderbuffer",
    "framebufferTexture2D",
    "framebufferTextureLayer",
    "framebufferWidth",
    "frames",
    "freeSpace",
    "freeze",
    "frequency",
    "frequencyBinCount",
    "from",
    "fromCharCode",
    "fromCodePoint",
    "fromElement",
    "fromEntries",
    "fromFloat32Array",
    "fromFloat64Array",
    "fromMatrix",
    "fromPoint",
    "fromQuad",
    "fromRect",
    "frontFace",
    "fround",
    "fullPath",
    "fullScreen",
    "fullscreen",
    "fullscreenElement",
    "fullscreenEnabled",
    "fx",
    "fy",
    "gain",
    "gamepad",
    "gamma",
    "gap",
    "gatheringState",
    "gatt",
    "genderIdentity",
    "generateCertificate",
    "generateKey",
    "generateMipmap",
    "generateRequest",
    "geolocation",
    "gestureObject",
    "get",
    "getActiveAttrib",
    "getActiveUniform",
    "getActiveUniformBlockName",
    "getActiveUniformBlockParameter",
    "getActiveUniforms",
    "getAdditionalLanguages",
    "getAdjacentText",
    "getAll",
    "getAllKeys",
    "getAllResponseHeaders",
    "getAllowlistForFeature",
    "getAnimations",
    "getAsFile",
    "getAsString",
    "getAttachedShaders",
    "getAttribLocation",
    "getAttribute",
    "getAttributeNS",
    "getAttributeNames",
    "getAttributeNode",
    "getAttributeNodeNS",
    "getAttributeType",
    "getAudioTracks",
    "getAvailability",
    "getBBox",
    "getBattery",
    "getBigInt64",
    "getBigUint64",
    "getBlob",
    "getBookmark",
    "getBoundingClientRect",
    "getBounds",
    "getBufferParameter",
    "getBufferSubData",
    "getByteFrequencyData",
    "getByteTimeDomainData",
    "getCSSCanvasContext",
    "getCTM",
    "getCandidateWindowClientRect",
    "getCanonicalLocales",
    "getCapabilities",
    "getChannelData",
    "getCharNumAtPosition",
    "getCharacteristic",
    "getCharacteristics",
    "getClientExtensionResults",
    "getClientRect",
    "getClientRects",
    "getCoalescedEvents",
    "getCompositionAlternatives",
    "getComputedStyle",
    "getComputedTextLength",
    "getComputedTiming",
    "getConfiguration",
    "getConstraints",
    "getContext",
    "getContextAttributes",
    "getContributingSources",
    "getCount",
    "getCounterValue",
    "getCueAsHTML",
    "getCueById",
    "getCurrentPosition",
    "getCurrentTime",
    "getData",
    "getDatabaseNames",
    "getDate",
    "getDay",
    "getDefaultComputedStyle",
    "getDescriptor",
    "getDescriptors",
    "getDestinationInsertionPoints",
    "getDetails",
    "getDevices",
    "getDirectory",
    "getDisplayMedia",
    "getDistributedNodes",
    "getEditable",
    "getElementById",
    "getElementsByClassName",
    "getElementsByName",
    "getElementsByTagName",
    "getElementsByTagNameNS",
    "getEnclosureList",
    "getEndPositionOfChar",
    "getEntries",
    "getEntriesByName",
    "getEntriesByType",
    "getError",
    "getExtension",
    "getExtentOfChar",
    "getEyeParameters",
    "getFeature",
    "getFile",
    "getFiles",
    "getFilesAndDirectories",
    "getFingerprints",
    "getFloat32",
    "getFloat64",
    "getFloatFrequencyData",
    "getFloatTimeDomainData",
    "getFloatValue",
    "getFragDataLocation",
    "getFrameData",
    "getFramebufferAttachmentParameter",
    "getFrequencyResponse",
    "getFullYear",
    "getGamepads",
    "getHitTestResults",
    "getHitTestResultsForTransientInput",
    "getHours",
    "getIdentityAssertion",
    "getIds",
    "getImageData",
    "getIndexedParameter",
    "getInstalled",
    "getInstalledRelatedApps",
    "getInt16",
    "getInt32",
    "getInt8",
    "getInternalformatParameter",
    "getIntersectionList",
    "getIsInstalled",
    "getItem",
    "getItems",
    "getKey",
    "getKeyframes",
    "getLayers",
    "getLayoutMap",
    "getLineDash",
    "getLocalCandidates",
    "getLocalParameters",
    "getLocalStreams",
    "getLocalizationResource",
    "getMarks",
    "getMatchedCSSRules",
    "getMeasures",
    "getMetadata",
    "getMilliseconds",
    "getMinutes",
    "getModifierState",
    "getMonth",
    "getNamedItem",
    "getNamedItemNS",
    "getNativeFramebufferScaleFactor",
    "getNotifications",
    "getNotifier",
    "getNumberOfChars",
    "getOffsetReferenceSpace",
    "getOutputTimestamp",
    "getOverrideHistoryNavigationMode",
    "getOverrideStyle",
    "getOwnPropertyDescriptor",
    "getOwnPropertyDescriptors",
    "getOwnPropertyNames",
    "getOwnPropertySymbols",
    "getParameter",
    "getParameters",
    "getParent",
    "getPathSegAtLength",
    "getPhotoCapabilities",
    "getPhotoSettings",
    "getPointAtLength",
    "getPose",
    "getPredictedEvents",
    "getPreference",
    "getPreferenceDefault",
    "getPresentationAttribute",
    "getPreventDefault",
    "getPrimaryService",
    "getPrimaryServices",
    "getProgramInfoLog",
    "getProgramParameter",
    "getPropertyCSSValue",
    "getPropertyPriority",
    "getPropertyShorthand",
    "getPropertyType",
    "getPropertyValue",
    "getPrototypeOf",
    "getQuery",
    "getQueryParameter",
    "getRGBColorValue",
    "getRandomValues",
    "getRangeAt",
    "getReader",
    "getReceivers",
    "getRectValue",
    "getRegistration",
    "getRegistrations",
    "getRemoteCandidates",
    "getRemoteCertificates",
    "getRemoteParameters",
    "getRemoteStreams",
    "getRenderbufferParameter",
    "getResponseHeader",
    "getRevision",
    "getRoot",
    "getRootNode",
    "getRotationOfChar",
    "getRules",
    "getSVGDocument",
    "getSamplerParameter",
    "getScreenCTM",
    "getSeconds",
    "getSelectedCandidatePair",
    "getSelection",
    "getSelf",
    "getSenders",
    "getService",
    "getSettings",
    "getShaderInfoLog",
    "getShaderParameter",
    "getShaderPrecisionFormat",
    "getShaderSource",
    "getSimpleDuration",
    "getSiteIcons",
    "getSources",
    "getSpeculativeParserUrls",
    "getStartDate",
    "getStartPositionOfChar",
    "getStartTime",
    "getState",
    "getStats",
    "getStatusForPolicy",
    "getStorageUpdates",
    "getStreamById",
    "getStringValue",
    "getSubStringLength",
    "getSubscription",
    "getSupportedConstraints",
    "getSupportedExtensions",
    "getSupportedFormats",
    "getSyncParameter",
    "getSynchronizationSources",
    "getTags",
    "getTargetRanges",
    "getTexParameter",
    "getTime",
    "getTimezoneOffset",
    "getTiming",
    "getTotalLength",
    "getTrackById",
    "getTracks",
    "getTransceivers",
    "getTransform",
    "getTransformFeedbackVarying",
    "getTransformToElement",
    "getTransports",
    "getType",
    "getTypeMapping",
    "getUTCDate",
    "getUTCDay",
    "getUTCFullYear",
    "getUTCHours",
    "getUTCMilliseconds",
    "getUTCMinutes",
    "getUTCMonth",
    "getUTCSeconds",
    "getUint16",
    "getUint32",
    "getUint8",
    "getUniform",
    "getUniformBlockIndex",
    "getUniformIndices",
    "getUniformLocation",
    "getUserMedia",
    "getVRDisplays",
    "getValues",
    "getVarDate",
    "getVariableValue",
    "getVertexAttrib",
    "getVertexAttribOffset",
    "getVideoPlaybackQuality",
    "getVideoTracks",
    "getViewerPose",
    "getViewport",
    "getVoices",
    "getWakeLockState",
    "getWriter",
    "getYear",
    "givenName",
    "global",
    "globalAlpha",
    "globalCompositeOperation",
    "globalThis",
    "glyphOrientationHorizontal",
    "glyphOrientationVertical",
    "glyphRef",
    "go",
    "grabFrame",
    "grad",
    "gradientTransform",
    "gradientUnits",
    "grammars",
    "green",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-gap",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-gap",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "gridArea",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridColumn",
    "gridColumnEnd",
    "gridColumnGap",
    "gridColumnStart",
    "gridGap",
    "gridRow",
    "gridRowEnd",
    "gridRowGap",
    "gridRowStart",
    "gridTemplate",
    "gridTemplateAreas",
    "gridTemplateColumns",
    "gridTemplateRows",
    "gripSpace",
    "group",
    "groupCollapsed",
    "groupEnd",
    "groupId",
    "grow",
    "hadRecentInput",
    "hand",
    "handedness",
    "hangingBaseline",
    "hangingPunctuation",
    "hapticActuators",
    "hardwareConcurrency",
    "has",
    "hasAttribute",
    "hasAttributeNS",
    "hasAttributes",
    "hasBeenActive",
    "hasChildNodes",
    "hasComposition",
    "hasEnrolledInstrument",
    "hasExtension",
    "hasExternalDisplay",
    "hasFeature",
    "hasFocus",
    "hasInstance",
    "hasLayout",
    "hasListener",
    "hasListeners",
    "hasOrientation",
    "hasOwnProperty",
    "hasPointerCapture",
    "hasPosition",
    "hasReading",
    "hasStorageAccess",
    "hash",
    "head",
    "headers",
    "heading",
    "height",
    "hidden",
    "hide",
    "hideFocus",
    "high",
    "highWaterMark",
    "hint",
    "history",
    "honorificPrefix",
    "honorificSuffix",
    "horizontalOverflow",
    "host",
    "hostCandidate",
    "hostname",
    "hour",
    "hour12",
    "hourCycle",
    "href",
    "hrefTranslate",
    "hreflang",
    "hspace",
    "html5TagCheckInerface",
    "htmlFor",
    "htmlText",
    "httpEquiv",
    "httpRequestStatusCode",
    "hwTimestamp",
    "hyphens",
    "hypot",
    "iccId",
    "iceConnectionState",
    "iceGatheringState",
    "iceTransport",
    "icon",
    "iconURL",
    "id",
    "identifier",
    "identity",
    "ideographicBaseline",
    "idpLoginUrl",
    "ignoreBOM",
    "ignoreCase",
    "ignoreDepthValues",
    "ignoreMutedMedia",
    "ignorePunctuation",
    "image-orientation",
    "image-rendering",
    "imageHeight",
    "imageOrientation",
    "imageRendering",
    "imageSizes",
    "imageSmoothingEnabled",
    "imageSmoothingQuality",
    "imageSrcset",
    "imageWidth",
    "images",
    "ime-mode",
    "imeMode",
    "implementation",
    "import",
    "importKey",
    "importNode",
    "importStylesheet",
    "imports",
    "impp",
    "imul",
    "in",
    "in1",
    "in2",
    "inBandMetadataTrackDispatchType",
    "inRange",
    "includes",
    "incremental",
    "indeterminate",
    "index",
    "indexNames",
    "indexOf",
    "indexedDB",
    "indicate",
    "inertiaDestinationX",
    "inertiaDestinationY",
    "info",
    "init",
    "initAnimationEvent",
    "initBeforeLoadEvent",
    "initClipboardEvent",
    "initCloseEvent",
    "initCommandEvent",
    "initCompositionEvent",
    "initCustomEvent",
    "initData",
    "initDataType",
    "initDeviceMotionEvent",
    "initDeviceOrientationEvent",
    "initDragEvent",
    "initErrorEvent",
    "initEvent",
    "initFocusEvent",
    "initGestureEvent",
    "initHashChangeEvent",
    "initKeyEvent",
    "initKeyboardEvent",
    "initMSManipulationEvent",
    "initMessageEvent",
    "initMouseEvent",
    "initMouseScrollEvent",
    "initMouseWheelEvent",
    "initMutationEvent",
    "initNSMouseEvent",
    "initOverflowEvent",
    "initPageEvent",
    "initPageTransitionEvent",
    "initPointerEvent",
    "initPopStateEvent",
    "initProgressEvent",
    "initScrollAreaEvent",
    "initSimpleGestureEvent",
    "initStorageEvent",
    "initTextEvent",
    "initTimeEvent",
    "initTouchEvent",
    "initTransitionEvent",
    "initUIEvent",
    "initWebKitAnimationEvent",
    "initWebKitTransitionEvent",
    "initWebKitWheelEvent",
    "initWheelEvent",
    "initialTime",
    "initialize",
    "initiatorType",
    "inline-size",
    "inlineSize",
    "inlineVerticalFieldOfView",
    "inner",
    "innerHTML",
    "innerHeight",
    "innerText",
    "innerWidth",
    "input",
    "inputBuffer",
    "inputEncoding",
    "inputMethod",
    "inputMode",
    "inputSource",
    "inputSources",
    "inputType",
    "inputs",
    "insertAdjacentElement",
    "insertAdjacentHTML",
    "insertAdjacentText",
    "insertBefore",
    "insertCell",
    "insertDTMF",
    "insertData",
    "insertId",
    "insertItemBefore",
    "insertNode",
    "insertRow",
    "insertRule",
    "inset",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "insetBlock",
    "insetBlockEnd",
    "insetBlockStart",
    "insetInline",
    "insetInlineEnd",
    "insetInlineStart",
    "install",
    "installChrome",
    "installPackage",
    "installState",
    "installing",
    "instanceRoot",
    "instantiate",
    "instantiateStreaming",
    "instruments",
    "integrity",
    "interactionMode",
    "intercept",
    "interfaceClass",
    "interfaceName",
    "interfaceNumber",
    "interfaceProtocol",
    "interfaceSubclass",
    "interfaces",
    "interimResults",
    "internalSubset",
    "interpretation",
    "intersectionRatio",
    "intersectionRect",
    "intersectsNode",
    "interval",
    "invalidIteratorState",
    "invalidateFramebuffer",
    "invalidateSubFramebuffer",
    "inverse",
    "invertSelf",
    "is",
    "is2D",
    "isActive",
    "isAlternate",
    "isArray",
    "isBingCurrentSearchDefault",
    "isBuffer",
    "isCandidateWindowVisible",
    "isChar",
    "isCollapsed",
    "isComposing",
    "isConcatSpreadable",
    "isConnected",
    "isContentEditable",
    "isContentHandlerRegistered",
    "isContextLost",
    "isDefaultNamespace",
    "isDirectory",
    "isDisabled",
    "isEnabled",
    "isEqual",
    "isEqualNode",
    "isExtensible",
    "isExternalCTAP2SecurityKeySupported",
    "isFile",
    "isFinite",
    "isFramebuffer",
    "isFrozen",
    "isGenerator",
    "isHTML",
    "isHistoryNavigation",
    "isId",
    "isIdentity",
    "isInjected",
    "isInstalled",
    "isInteger",
    "isIntersecting",
    "isLockFree",
    "isMap",
    "isMultiLine",
    "isNaN",
    "isOpen",
    "isPointInFill",
    "isPointInPath",
    "isPointInRange",
    "isPointInStroke",
    "isPrefAlternate",
    "isPresenting",
    "isPrimary",
    "isProgram",
    "isPropertyImplicit",
    "isProtocolHandlerRegistered",
    "isPrototypeOf",
    "isQuery",
    "isRenderbuffer",
    "isSafeInteger",
    "isSameNode",
    "isSampler",
    "isScript",
    "isScriptURL",
    "isSealed",
    "isSecureContext",
    "isSessionSupported",
    "isShader",
    "isSupported",
    "isSync",
    "isTextEdit",
    "isTexture",
    "isTransformFeedback",
    "isTrusted",
    "isTypeSupported",
    "isTypeSupportedWithFeatures",
    "isUserVerifyingPlatformAuthenticatorAvailable",
    "isVertexArray",
    "isView",
    "isVisible",
    "isochronousTransferIn",
    "isochronousTransferOut",
    "isolation",
    "italics",
    "item",
    "itemId",
    "itemProp",
    "itemRef",
    "itemScope",
    "itemType",
    "itemValue",
    "items",
    "iterateNext",
    "iterator",
    "javaEnabled",
    "jobTitle",
    "join",
    "jsHeapSizeLimit",
    "json",
    "justify-content",
    "justify-items",
    "justify-self",
    "justifyContent",
    "justifyItems",
    "justifySelf",
    "k1",
    "k2",
    "k3",
    "k4",
    "kHz",
    "keepalive",
    "kernelMatrix",
    "kernelUnitLengthX",
    "kernelUnitLengthY",
    "kerning",
    "key",
    "keyCode",
    "keyFor",
    "keyIdentifier",
    "keyLightEnabled",
    "keyLocation",
    "keyPath",
    "keyStatuses",
    "keySystem",
    "keyText",
    "keyUsage",
    "keyboard",
    "keys",
    "keytype",
    "kind",
    "knee",
    "label",
    "labels",
    "lang",
    "language",
    "languages",
    "largeArcFlag",
    "lastActivePanel",
    "lastChild",
    "lastElementChild",
    "lastEventId",
    "lastIndex",
    "lastIndexOf",
    "lastInputTime",
    "lastMatch",
    "lastMessageSubject",
    "lastMessageType",
    "lastModified",
    "lastModifiedDate",
    "lastPage",
    "lastParen",
    "lastState",
    "lastStyleSheetSet",
    "latitude",
    "layerX",
    "layerY",
    "layoutFlow",
    "layoutGrid",
    "layoutGridChar",
    "layoutGridLine",
    "layoutGridMode",
    "layoutGridType",
    "lbound",
    "left",
    "leftContext",
    "leftDegrees",
    "leftMargin",
    "leftProjectionMatrix",
    "leftViewMatrix",
    "length",
    "lengthAdjust",
    "lengthComputable",
    "letter-spacing",
    "letterSpacing",
    "level",
    "lighting-color",
    "lightingColor",
    "limitingConeAngle",
    "line",
    "line-break",
    "line-height",
    "lineAlign",
    "lineBreak",
    "lineCap",
    "lineDashOffset",
    "lineHeight",
    "lineJoin",
    "lineNumber",
    "lineTo",
    "lineWidth",
    "linearAcceleration",
    "linearRampToValueAtTime",
    "linearVelocity",
    "lineno",
    "lines",
    "link",
    "linkColor",
    "linkProgram",
    "links",
    "list",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "listStyle",
    "listStyleImage",
    "listStylePosition",
    "listStyleType",
    "listener",
    "load",
    "loadEventEnd",
    "loadEventStart",
    "loadTime",
    "loadTimes",
    "loaded",
    "loading",
    "localDescription",
    "localName",
    "localService",
    "localStorage",
    "locale",
    "localeCompare",
    "location",
    "locationbar",
    "lock",
    "locked",
    "lockedFile",
    "locks",
    "log",
    "log10",
    "log1p",
    "log2",
    "logicalXDPI",
    "logicalYDPI",
    "longDesc",
    "longitude",
    "lookupNamespaceURI",
    "lookupPrefix",
    "loop",
    "loopEnd",
    "loopStart",
    "looping",
    "low",
    "lower",
    "lowerBound",
    "lowerOpen",
    "lowsrc",
    "m11",
    "m12",
    "m13",
    "m14",
    "m21",
    "m22",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "m41",
    "m42",
    "m43",
    "m44",
    "makeXRCompatible",
    "manifest",
    "manufacturer",
    "manufacturerName",
    "map",
    "mapping",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marginBlock",
    "marginBlockEnd",
    "marginBlockStart",
    "marginBottom",
    "marginHeight",
    "marginInline",
    "marginInlineEnd",
    "marginInlineStart",
    "marginLeft",
    "marginRight",
    "marginTop",
    "marginWidth",
    "mark",
    "markTimeline",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-offset",
    "marker-start",
    "markerEnd",
    "markerHeight",
    "markerMid",
    "markerOffset",
    "markerStart",
    "markerUnits",
    "markerWidth",
    "marks",
    "mask",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-position-x",
    "mask-position-y",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "maskClip",
    "maskComposite",
    "maskContentUnits",
    "maskImage",
    "maskMode",
    "maskOrigin",
    "maskPosition",
    "maskPositionX",
    "maskPositionY",
    "maskRepeat",
    "maskSize",
    "maskType",
    "maskUnits",
    "match",
    "matchAll",
    "matchMedia",
    "matchMedium",
    "matches",
    "matrix",
    "matrixTransform",
    "max",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "maxActions",
    "maxAlternatives",
    "maxBlockSize",
    "maxChannelCount",
    "maxChannels",
    "maxConnectionsPerServer",
    "maxDecibels",
    "maxDistance",
    "maxHeight",
    "maxInlineSize",
    "maxLayers",
    "maxLength",
    "maxMessageSize",
    "maxPacketLifeTime",
    "maxRetransmits",
    "maxTouchPoints",
    "maxValue",
    "maxWidth",
    "maxZoom",
    "maximize",
    "maximumFractionDigits",
    "measure",
    "measureText",
    "media",
    "mediaCapabilities",
    "mediaDevices",
    "mediaElement",
    "mediaGroup",
    "mediaKeys",
    "mediaSession",
    "mediaStream",
    "mediaText",
    "meetOrSlice",
    "memory",
    "menubar",
    "mergeAttributes",
    "message",
    "messageClass",
    "messageHandlers",
    "messageType",
    "metaKey",
    "metadata",
    "method",
    "methodDetails",
    "methodName",
    "mid",
    "mimeType",
    "mimeTypes",
    "min",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "minBlockSize",
    "minDecibels",
    "minHeight",
    "minInlineSize",
    "minLength",
    "minValue",
    "minWidth",
    "minZoom",
    "minimize",
    "minimumFractionDigits",
    "minimumIntegerDigits",
    "minute",
    "miterLimit",
    "mix-blend-mode",
    "mixBlendMode",
    "mm",
    "mode",
    "modify",
    "month",
    "motion",
    "motionOffset",
    "motionPath",
    "motionRotation",
    "mount",
    "move",
    "moveBy",
    "moveEnd",
    "moveFirst",
    "moveFocusDown",
    "moveFocusLeft",
    "moveFocusRight",
    "moveFocusUp",
    "moveNext",
    "moveRow",
    "moveStart",
    "moveTo",
    "moveToBookmark",
    "moveToElementText",
    "moveToPoint",
    "movementX",
    "movementY",
    "mozAdd",
    "mozAnimationStartTime",
    "mozAnon",
    "mozApps",
    "mozAudioCaptured",
    "mozAudioChannelType",
    "mozAutoplayEnabled",
    "mozCancelAnimationFrame",
    "mozCancelFullScreen",
    "mozCancelRequestAnimationFrame",
    "mozCaptureStream",
    "mozCaptureStreamUntilEnded",
    "mozClearDataAt",
    "mozContact",
    "mozContacts",
    "mozCreateFileHandle",
    "mozCurrentTransform",
    "mozCurrentTransformInverse",
    "mozCursor",
    "mozDash",
    "mozDashOffset",
    "mozDecodedFrames",
    "mozExitPointerLock",
    "mozFillRule",
    "mozFragmentEnd",
    "mozFrameDelay",
    "mozFullScreen",
    "mozFullScreenElement",
    "mozFullScreenEnabled",
    "mozGetAll",
    "mozGetAllKeys",
    "mozGetAsFile",
    "mozGetDataAt",
    "mozGetMetadata",
    "mozGetUserMedia",
    "mozHasAudio",
    "mozHasItem",
    "mozHidden",
    "mozImageSmoothingEnabled",
    "mozIndexedDB",
    "mozInnerScreenX",
    "mozInnerScreenY",
    "mozInputSource",
    "mozIsTextField",
    "mozItem",
    "mozItemCount",
    "mozItems",
    "mozLength",
    "mozLockOrientation",
    "mozMatchesSelector",
    "mozMovementX",
    "mozMovementY",
    "mozOpaque",
    "mozOrientation",
    "mozPaintCount",
    "mozPaintedFrames",
    "mozParsedFrames",
    "mozPay",
    "mozPointerLockElement",
    "mozPresentedFrames",
    "mozPreservesPitch",
    "mozPressure",
    "mozPrintCallback",
    "mozRTCIceCandidate",
    "mozRTCPeerConnection",
    "mozRTCSessionDescription",
    "mozRemove",
    "mozRequestAnimationFrame",
    "mozRequestFullScreen",
    "mozRequestPointerLock",
    "mozSetDataAt",
    "mozSetImageElement",
    "mozSourceNode",
    "mozSrcObject",
    "mozSystem",
    "mozTCPSocket",
    "mozTextStyle",
    "mozTypesAt",
    "mozUnlockOrientation",
    "mozUserCancelled",
    "mozVisibilityState",
    "ms",
    "msAnimation",
    "msAnimationDelay",
    "msAnimationDirection",
    "msAnimationDuration",
    "msAnimationFillMode",
    "msAnimationIterationCount",
    "msAnimationName",
    "msAnimationPlayState",
    "msAnimationStartTime",
    "msAnimationTimingFunction",
    "msBackfaceVisibility",
    "msBlockProgression",
    "msCSSOMElementFloatMetrics",
    "msCaching",
    "msCachingEnabled",
    "msCancelRequestAnimationFrame",
    "msCapsLockWarningOff",
    "msClearImmediate",
    "msClose",
    "msContentZoomChaining",
    "msContentZoomFactor",
    "msContentZoomLimit",
    "msContentZoomLimitMax",
    "msContentZoomLimitMin",
    "msContentZoomSnap",
    "msContentZoomSnapPoints",
    "msContentZoomSnapType",
    "msContentZooming",
    "msConvertURL",
    "msCrypto",
    "msDoNotTrack",
    "msElementsFromPoint",
    "msElementsFromRect",
    "msExitFullscreen",
    "msExtendedCode",
    "msFillRule",
    "msFirstPaint",
    "msFlex",
    "msFlexAlign",
    "msFlexDirection",
    "msFlexFlow",
    "msFlexItemAlign",
    "msFlexLinePack",
    "msFlexNegative",
    "msFlexOrder",
    "msFlexPack",
    "msFlexPositive",
    "msFlexPreferredSize",
    "msFlexWrap",
    "msFlowFrom",
    "msFlowInto",
    "msFontFeatureSettings",
    "msFullscreenElement",
    "msFullscreenEnabled",
    "msGetInputContext",
    "msGetRegionContent",
    "msGetUntransformedBounds",
    "msGraphicsTrustStatus",
    "msGridColumn",
    "msGridColumnAlign",
    "msGridColumnSpan",
    "msGridColumns",
    "msGridRow",
    "msGridRowAlign",
    "msGridRowSpan",
    "msGridRows",
    "msHidden",
    "msHighContrastAdjust",
    "msHyphenateLimitChars",
    "msHyphenateLimitLines",
    "msHyphenateLimitZone",
    "msHyphens",
    "msImageSmoothingEnabled",
    "msImeAlign",
    "msIndexedDB",
    "msInterpolationMode",
    "msIsStaticHTML",
    "msKeySystem",
    "msKeys",
    "msLaunchUri",
    "msLockOrientation",
    "msManipulationViewsEnabled",
    "msMatchMedia",
    "msMatchesSelector",
    "msMaxTouchPoints",
    "msOrientation",
    "msOverflowStyle",
    "msPerspective",
    "msPerspectiveOrigin",
    "msPlayToDisabled",
    "msPlayToPreferredSourceUri",
    "msPlayToPrimary",
    "msPointerEnabled",
    "msRegionOverflow",
    "msReleasePointerCapture",
    "msRequestAnimationFrame",
    "msRequestFullscreen",
    "msSaveBlob",
    "msSaveOrOpenBlob",
    "msScrollChaining",
    "msScrollLimit",
    "msScrollLimitXMax",
    "msScrollLimitXMin",
    "msScrollLimitYMax",
    "msScrollLimitYMin",
    "msScrollRails",
    "msScrollSnapPointsX",
    "msScrollSnapPointsY",
    "msScrollSnapType",
    "msScrollSnapX",
    "msScrollSnapY",
    "msScrollTranslation",
    "msSetImmediate",
    "msSetMediaKeys",
    "msSetPointerCapture",
    "msTextCombineHorizontal",
    "msTextSizeAdjust",
    "msToBlob",
    "msTouchAction",
    "msTouchSelect",
    "msTraceAsyncCallbackCompleted",
    "msTraceAsyncCallbackStarting",
    "msTraceAsyncOperationCompleted",
    "msTraceAsyncOperationStarting",
    "msTransform",
    "msTransformOrigin",
    "msTransformStyle",
    "msTransition",
    "msTransitionDelay",
    "msTransitionDuration",
    "msTransitionProperty",
    "msTransitionTimingFunction",
    "msUnlockOrientation",
    "msUpdateAsyncCallbackRelation",
    "msUserSelect",
    "msVisibilityState",
    "msWrapFlow",
    "msWrapMargin",
    "msWrapThrough",
    "msWriteProfilerMark",
    "msZoom",
    "msZoomTo",
    "mt",
    "mul",
    "multiEntry",
    "multiSelectionObj",
    "multiline",
    "multiple",
    "multiply",
    "multiplySelf",
    "mutableFile",
    "muted",
    "n",
    "name",
    "nameProp",
    "namedItem",
    "namedRecordset",
    "names",
    "namespaceURI",
    "namespaces",
    "naturalHeight",
    "naturalWidth",
    "navigate",
    "navigation",
    "navigationMode",
    "navigationPreload",
    "navigationStart",
    "navigationType",
    "navigator",
    "near",
    "nearestViewportElement",
    "negative",
    "negotiated",
    "netscape",
    "networkState",
    "newScale",
    "newTranslate",
    "newURL",
    "newValue",
    "newValueSpecifiedUnits",
    "newVersion",
    "newhome",
    "next",
    "nextElementSibling",
    "nextHopProtocol",
    "nextNode",
    "nextPage",
    "nextSibling",
    "nickname",
    "noHref",
    "noModule",
    "noResize",
    "noShade",
    "noValidate",
    "noWrap",
    "node",
    "nodeName",
    "nodeType",
    "nodeValue",
    "nonce",
    "normalize",
    "normalizedPathSegList",
    "notationName",
    "notations",
    "note",
    "noteGrainOn",
    "noteOff",
    "noteOn",
    "notify",
    "now",
    "npnNegotiatedProtocol",
    "numOctaves",
    "number",
    "numberOfChannels",
    "numberOfInputs",
    "numberOfItems",
    "numberOfOutputs",
    "numberValue",
    "numberingSystem",
    "numeric",
    "oMatchesSelector",
    "object",
    "object-fit",
    "object-position",
    "objectFit",
    "objectPosition",
    "objectStore",
    "objectStoreNames",
    "observe",
    "observedAttributes",
    "of",
    "offscreenBuffering",
    "offset",
    "offset-anchor",
    "offset-block-end",
    "offset-block-start",
    "offset-distance",
    "offset-inline-end",
    "offset-inline-start",
    "offset-path",
    "offset-rotate",
    "offsetAnchor",
    "offsetBlockEnd",
    "offsetBlockStart",
    "offsetDistance",
    "offsetHeight",
    "offsetInlineEnd",
    "offsetInlineStart",
    "offsetLeft",
    "offsetNode",
    "offsetParent",
    "offsetPath",
    "offsetRotate",
    "offsetTop",
    "offsetWidth",
    "offsetX",
    "offsetY",
    "ok",
    "oldURL",
    "oldValue",
    "oldVersion",
    "olderShadowRoot",
    "onDownloadProgress",
    "onInstallStageChanged",
    "onLine",
    "onabort",
    "onabsolutedeviceorientation",
    "onactivate",
    "onactive",
    "onaddsourcebuffer",
    "onaddstream",
    "onaddtrack",
    "onafterprint",
    "onafterscriptexecute",
    "onafterupdate",
    "onanimationcancel",
    "onanimationend",
    "onanimationiteration",
    "onanimationstart",
    "onappinstalled",
    "onaudioend",
    "onaudioprocess",
    "onaudiostart",
    "onautocomplete",
    "onautocompleteerror",
    "onauxclick",
    "onbeforeactivate",
    "onbeforecopy",
    "onbeforecut",
    "onbeforedeactivate",
    "onbeforeeditfocus",
    "onbeforeinput",
    "onbeforeinstallprompt",
    "onbeforeload",
    "onbeforepaste",
    "onbeforeprint",
    "onbeforescriptexecute",
    "onbeforeunload",
    "onbeforeupdate",
    "onbeforexrselect",
    "onbegin",
    "onblocked",
    "onblur",
    "onbounce",
    "onboundary",
    "onbufferedamountlow",
    "oncached",
    "oncancel",
    "oncandidatewindowhide",
    "oncandidatewindowshow",
    "oncandidatewindowupdate",
    "oncanplay",
    "oncanplaythrough",
    "once",
    "oncellchange",
    "onchange",
    "oncharacteristicvaluechanged",
    "onchargingchange",
    "onchargingtimechange",
    "onchecking",
    "onclick",
    "onclose",
    "onclosing",
    "oncompassneedscalibration",
    "oncomplete",
    "onconnect",
    "onconnecting",
    "onconnectionavailable",
    "onconnectionstatechange",
    "oncontactchange",
    "oncontextmenu",
    "oncontrollerchange",
    "oncontrolselect",
    "oncopy",
    "oncuechange",
    "oncut",
    "ondataavailable",
    "ondatachannel",
    "ondatasetchanged",
    "ondatasetcomplete",
    "ondblclick",
    "ondeactivate",
    "ondevicechange",
    "ondevicelight",
    "ondevicemotion",
    "ondeviceorientation",
    "ondeviceorientationabsolute",
    "ondeviceproximity",
    "ondischargingtimechange",
    "ondisconnect",
    "ondisplay",
    "ondownloading",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragexit",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onencrypted",
    "onend",
    "onended",
    "onenter",
    "onenterpictureinpicture",
    "onerror",
    "onerrorupdate",
    "onexit",
    "onfilterchange",
    "onfinish",
    "onfocus",
    "onfocusin",
    "onfocusout",
    "onformdata",
    "onfreeze",
    "onfullscreenchange",
    "onfullscreenerror",
    "ongatheringstatechange",
    "ongattserverdisconnected",
    "ongesturechange",
    "ongestureend",
    "ongesturestart",
    "ongotpointercapture",
    "onhashchange",
    "onhelp",
    "onicecandidate",
    "onicecandidateerror",
    "oniceconnectionstatechange",
    "onicegatheringstatechange",
    "oninactive",
    "oninput",
    "oninputsourceschange",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeystatuseschange",
    "onkeyup",
    "onlanguagechange",
    "onlayoutcomplete",
    "onleavepictureinpicture",
    "onlevelchange",
    "onload",
    "onloadT",
    "onloadeddata",
    "onloadedmetadata",
    "onloadend",
    "onloading",
    "onloadingdone",
    "onloadingerror",
    "onloadstart",
    "onlosecapture",
    "onlostpointercapture",
    "only",
    "onmark",
    "onmessage",
    "onmessageerror",
    "onmidimessage",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onmousewheel",
    "onmove",
    "onmoveend",
    "onmovestart",
    "onmozfullscreenchange",
    "onmozfullscreenerror",
    "onmozorientationchange",
    "onmozpointerlockchange",
    "onmozpointerlockerror",
    "onmscontentzoom",
    "onmsfullscreenchange",
    "onmsfullscreenerror",
    "onmsgesturechange",
    "onmsgesturedoubletap",
    "onmsgestureend",
    "onmsgesturehold",
    "onmsgesturestart",
    "onmsgesturetap",
    "onmsgotpointercapture",
    "onmsinertiastart",
    "onmslostpointercapture",
    "onmsmanipulationstatechanged",
    "onmsneedkey",
    "onmsorientationchange",
    "onmspointercancel",
    "onmspointerdown",
    "onmspointerenter",
    "onmspointerhover",
    "onmspointerleave",
    "onmspointermove",
    "onmspointerout",
    "onmspointerover",
    "onmspointerup",
    "onmssitemodejumplistitemremoved",
    "onmsthumbnailclick",
    "onmute",
    "onnegotiationneeded",
    "onnomatch",
    "onnoupdate",
    "onobsolete",
    "onoffline",
    "ononline",
    "onopen",
    "onorientationchange",
    "onoverconstrained",
    "onpage",
    "onpagechange",
    "onpagehide",
    "onpageshow",
    "onpaste",
    "onpause",
    "onpayerdetailchange",
    "onpaymentmethodchange",
    "onplay",
    "onplaying",
    "onpluginstreamstart",
    "onpointercancel",
    "onpointerdown",
    "onpointerenter",
    "onpointerleave",
    "onpointerlockchange",
    "onpointerlockerror",
    "onpointermove",
    "onpointerout",
    "onpointerover",
    "onpointerrawupdate",
    "onpointerup",
    "onpopstate",
    "onprocessorerror",
    "onprogress",
    "onpropertychange",
    "onratechange",
    "onreading",
    "onreadystatechange",
    "onrejectionhandled",
    "onrelease",
    "onremove",
    "onremovesourcebuffer",
    "onremovestream",
    "onremovetrack",
    "onrepeat",
    "onreset",
    "onresize",
    "onresizeend",
    "onresizestart",
    "onresourcetimingbufferfull",
    "onresult",
    "onresume",
    "onrowenter",
    "onrowexit",
    "onrowsdelete",
    "onrowsinserted",
    "onscroll",
    "onsearch",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onselectedcandidatepairchange",
    "onselectend",
    "onselectionchange",
    "onselectstart",
    "onshippingaddresschange",
    "onshippingoptionchange",
    "onshow",
    "onsignalingstatechange",
    "onsoundend",
    "onsoundstart",
    "onsourceclose",
    "onsourceclosed",
    "onsourceended",
    "onsourceopen",
    "onspeechend",
    "onspeechstart",
    "onsqueeze",
    "onsqueezeend",
    "onsqueezestart",
    "onstalled",
    "onstart",
    "onstatechange",
    "onstop",
    "onstorage",
    "onstoragecommit",
    "onsubmit",
    "onsuccess",
    "onsuspend",
    "onterminate",
    "ontextinput",
    "ontimeout",
    "ontimeupdate",
    "ontoggle",
    "ontonechange",
    "ontouchcancel",
    "ontouchend",
    "ontouchmove",
    "ontouchstart",
    "ontrack",
    "ontransitioncancel",
    "ontransitionend",
    "ontransitionrun",
    "ontransitionstart",
    "onunhandledrejection",
    "onunload",
    "onunmute",
    "onupdate",
    "onupdateend",
    "onupdatefound",
    "onupdateready",
    "onupdatestart",
    "onupgradeneeded",
    "onuserproximity",
    "onversionchange",
    "onvisibilitychange",
    "onvoiceschanged",
    "onvolumechange",
    "onvrdisplayactivate",
    "onvrdisplayconnect",
    "onvrdisplaydeactivate",
    "onvrdisplaydisconnect",
    "onvrdisplaypresentchange",
    "onwaiting",
    "onwaitingforkey",
    "onwarning",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkitcurrentplaybacktargetiswirelesschanged",
    "onwebkitfullscreenchange",
    "onwebkitfullscreenerror",
    "onwebkitkeyadded",
    "onwebkitkeyerror",
    "onwebkitkeymessage",
    "onwebkitmouseforcechanged",
    "onwebkitmouseforcedown",
    "onwebkitmouseforceup",
    "onwebkitmouseforcewillbegin",
    "onwebkitneedkey",
    "onwebkitorientationchange",
    "onwebkitplaybacktargetavailabilitychanged",
    "onwebkitpointerlockchange",
    "onwebkitpointerlockerror",
    "onwebkitresourcetimingbufferfull",
    "onwebkittransitionend",
    "onwheel",
    "onzoom",
    "opacity",
    "open",
    "openCursor",
    "openDatabase",
    "openKeyCursor",
    "opened",
    "opener",
    "opera",
    "operationType",
    "operator",
    "opr",
    "opsProfile",
    "optimum",
    "options",
    "or",
    "order",
    "orderX",
    "orderY",
    "ordered",
    "org",
    "organization",
    "orient",
    "orientAngle",
    "orientType",
    "orientation",
    "orientationX",
    "orientationY",
    "orientationZ",
    "origin",
    "originalPolicy",
    "originalTarget",
    "orphans",
    "oscpu",
    "outcome",
    "outerHTML",
    "outerHeight",
    "outerText",
    "outerWidth",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "outlineColor",
    "outlineOffset",
    "outlineStyle",
    "outlineWidth",
    "outputBuffer",
    "outputLatency",
    "outputs",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overflowAnchor",
    "overflowBlock",
    "overflowInline",
    "overflowWrap",
    "overflowX",
    "overflowY",
    "overrideMimeType",
    "oversample",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "overscrollBehavior",
    "overscrollBehaviorBlock",
    "overscrollBehaviorInline",
    "overscrollBehaviorX",
    "overscrollBehaviorY",
    "ownKeys",
    "ownerDocument",
    "ownerElement",
    "ownerNode",
    "ownerRule",
    "ownerSVGElement",
    "owningElement",
    "p1",
    "p2",
    "p3",
    "p4",
    "packetSize",
    "packets",
    "pad",
    "padEnd",
    "padStart",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "paddingBlock",
    "paddingBlockEnd",
    "paddingBlockStart",
    "paddingBottom",
    "paddingInline",
    "paddingInlineEnd",
    "paddingInlineStart",
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pageBreakAfter",
    "pageBreakBefore",
    "pageBreakInside",
    "pageCount",
    "pageLeft",
    "pageT",
    "pageTop",
    "pageX",
    "pageXOffset",
    "pageY",
    "pageYOffset",
    "pages",
    "paint-order",
    "paintOrder",
    "paintRequests",
    "paintType",
    "paintWorklet",
    "palette",
    "pan",
    "panningModel",
    "parameters",
    "parent",
    "parentElement",
    "parentNode",
    "parentRule",
    "parentStyleSheet",
    "parentTextEdit",
    "parentWindow",
    "parse",
    "parseAll",
    "parseFloat",
    "parseFromString",
    "parseInt",
    "part",
    "participants",
    "passive",
    "password",
    "pasteHTML",
    "path",
    "pathLength",
    "pathSegList",
    "pathSegType",
    "pathSegTypeAsLetter",
    "pathname",
    "pattern",
    "patternContentUnits",
    "patternMismatch",
    "patternTransform",
    "patternUnits",
    "pause",
    "pauseAnimations",
    "pauseOnExit",
    "pauseTransformFeedback",
    "paused",
    "payerEmail",
    "payerName",
    "payerPhone",
    "paymentManager",
    "pc",
    "peerIdentity",
    "pending",
    "pendingLocalDescription",
    "pendingRemoteDescription",
    "percent",
    "performance",
    "periodicSync",
    "permission",
    "permissionState",
    "permissions",
    "persist",
    "persisted",
    "personalbar",
    "perspective",
    "perspective-origin",
    "perspectiveOrigin",
    "perspectiveOriginX",
    "perspectiveOriginY",
    "phone",
    "phoneticFamilyName",
    "phoneticGivenName",
    "photo",
    "pictureInPictureElement",
    "pictureInPictureEnabled",
    "pictureInPictureWindow",
    "ping",
    "pipeThrough",
    "pipeTo",
    "pitch",
    "pixelBottom",
    "pixelDepth",
    "pixelHeight",
    "pixelLeft",
    "pixelRight",
    "pixelStorei",
    "pixelTop",
    "pixelUnitToMillimeterX",
    "pixelUnitToMillimeterY",
    "pixelWidth",
    "place-content",
    "place-items",
    "place-self",
    "placeContent",
    "placeItems",
    "placeSelf",
    "placeholder",
    "platform",
    "platforms",
    "play",
    "playEffect",
    "playState",
    "playbackRate",
    "playbackState",
    "playbackTime",
    "played",
    "playoutDelayHint",
    "playsInline",
    "plugins",
    "pluginspage",
    "pname",
    "pointer-events",
    "pointerBeforeReferenceNode",
    "pointerEnabled",
    "pointerEvents",
    "pointerId",
    "pointerLockElement",
    "pointerType",
    "points",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "polygonOffset",
    "pop",
    "populateMatrix",
    "popupWindowFeatures",
    "popupWindowName",
    "popupWindowURI",
    "port",
    "port1",
    "port2",
    "ports",
    "posBottom",
    "posHeight",
    "posLeft",
    "posRight",
    "posTop",
    "posWidth",
    "pose",
    "position",
    "positionAlign",
    "positionX",
    "positionY",
    "positionZ",
    "postError",
    "postMessage",
    "postalCode",
    "poster",
    "pow",
    "powerEfficient",
    "powerOff",
    "preMultiplySelf",
    "precision",
    "preferredStyleSheetSet",
    "preferredStylesheetSet",
    "prefix",
    "preload",
    "prepend",
    "presentation",
    "preserveAlpha",
    "preserveAspectRatio",
    "preserveAspectRatioString",
    "pressed",
    "pressure",
    "prevValue",
    "preventDefault",
    "preventExtensions",
    "preventSilentAccess",
    "previousElementSibling",
    "previousNode",
    "previousPage",
    "previousRect",
    "previousScale",
    "previousSibling",
    "previousTranslate",
    "primaryKey",
    "primitiveType",
    "primitiveUnits",
    "principals",
    "print",
    "priority",
    "privateKey",
    "probablySupportsContext",
    "process",
    "processIceMessage",
    "processingEnd",
    "processingStart",
    "product",
    "productId",
    "productName",
    "productSub",
    "profile",
    "profileEnd",
    "profiles",
    "projectionMatrix",
    "promise",
    "prompt",
    "properties",
    "propertyIsEnumerable",
    "propertyName",
    "protocol",
    "protocolLong",
    "prototype",
    "provider",
    "pseudoClass",
    "pseudoElement",
    "pt",
    "publicId",
    "publicKey",
    "published",
    "pulse",
    "push",
    "pushManager",
    "pushNotification",
    "pushState",
    "put",
    "putImageData",
    "px",
    "quadraticCurveTo",
    "qualifier",
    "quaternion",
    "query",
    "queryCommandEnabled",
    "queryCommandIndeterm",
    "queryCommandState",
    "queryCommandSupported",
    "queryCommandText",
    "queryCommandValue",
    "querySelector",
    "querySelectorAll",
    "queryUsageAndQuota",
    "queueMicrotask",
    "quote",
    "quotes",
    "r",
    "r1",
    "r2",
    "race",
    "rad",
    "radiogroup",
    "radiusX",
    "radiusY",
    "random",
    "range",
    "rangeCount",
    "rangeMax",
    "rangeMin",
    "rangeOffset",
    "rangeOverflow",
    "rangeParent",
    "rangeUnderflow",
    "rate",
    "ratio",
    "raw",
    "rawId",
    "read",
    "readAsArrayBuffer",
    "readAsBinaryString",
    "readAsBlob",
    "readAsDataURL",
    "readAsText",
    "readBuffer",
    "readEntries",
    "readOnly",
    "readPixels",
    "readReportRequested",
    "readText",
    "readTransaction",
    "readValue",
    "readable",
    "ready",
    "readyState",
    "reason",
    "reboot",
    "receivedAlert",
    "receivedTime",
    "receiver",
    "receivers",
    "recipient",
    "reconnect",
    "record",
    "recordEnd",
    "recordNumber",
    "recordsAvailable",
    "recordset",
    "rect",
    "red",
    "redEyeReduction",
    "redirect",
    "redirectCount",
    "redirectEnd",
    "redirectStart",
    "redirected",
    "reduce",
    "reduceRight",
    "reduction",
    "refDistance",
    "refX",
    "refY",
    "referenceNode",
    "referenceSpace",
    "referrer",
    "referrerPolicy",
    "refresh",
    "region",
    "regionAnchorX",
    "regionAnchorY",
    "regionId",
    "regions",
    "register",
    "registerContentHandler",
    "registerElement",
    "registerProperty",
    "registerProtocolHandler",
    "reject",
    "rel",
    "relList",
    "relatedAddress",
    "relatedNode",
    "relatedPort",
    "relatedTarget",
    "release",
    "releaseCapture",
    "releaseEvents",
    "releaseInterface",
    "releaseLock",
    "releasePointerCapture",
    "releaseShaderCompiler",
    "reliable",
    "reliableWrite",
    "reload",
    "rem",
    "remainingSpace",
    "remote",
    "remoteDescription",
    "remove",
    "removeAllRanges",
    "removeAttribute",
    "removeAttributeNS",
    "removeAttributeNode",
    "removeBehavior",
    "removeChild",
    "removeCue",
    "removeEventListener",
    "removeFilter",
    "removeImport",
    "removeItem",
    "removeListener",
    "removeNamedItem",
    "removeNamedItemNS",
    "removeNode",
    "removeParameter",
    "removeProperty",
    "removeRange",
    "removeRegion",
    "removeRule",
    "removeRules",
    "removeSiteSpecificTrackingException",
    "removeSourceBuffer",
    "removeStream",
    "removeTrack",
    "removeVariable",
    "removeWakeLockListener",
    "removeWebWideTrackingException",
    "removed",
    "removedNodes",
    "renderHeight",
    "renderState",
    "renderTime",
    "renderWidth",
    "renderbufferStorage",
    "renderbufferStorageMultisample",
    "renderedBuffer",
    "renderingMode",
    "renotify",
    "repeat",
    "replace",
    "replaceAdjacentText",
    "replaceAll",
    "replaceChild",
    "replaceChildren",
    "replaceData",
    "replaceId",
    "replaceItem",
    "replaceNode",
    "replaceState",
    "replaceSync",
    "replaceTrack",
    "replaceWholeText",
    "replaceWith",
    "reportValidity",
    "request",
    "requestAnimationFrame",
    "requestAutocomplete",
    "requestData",
    "requestDevice",
    "requestFrame",
    "requestFullscreen",
    "requestHitTestSource",
    "requestHitTestSourceForTransientInput",
    "requestId",
    "requestIdleCallback",
    "requestMIDIAccess",
    "requestMediaKeySystemAccess",
    "requestPermission",
    "requestPictureInPicture",
    "requestPointerLock",
    "requestPresent",
    "requestQuota",
    "requestReferenceSpace",
    "requestSession",
    "requestStart",
    "requestStorageAccess",
    "requestSubmit",
    "requestTime",
    "requestVideoFrameCallback",
    "requestedLocale",
    "requestingWindow",
    "requireInteraction",
    "required",
    "requiredExtensions",
    "requiredFeatures",
    "reset",
    "resetPose",
    "resetTransform",
    "resize",
    "resizeBy",
    "resizeTo",
    "resolve",
    "resolved",
    "resolvedOptions",
    "resource-history",
    "resourcesFramesExpanded",
    "response",
    "responseBody",
    "responseEnd",
    "responseReady",
    "responseStart",
    "responseText",
    "responseType",
    "responseURL",
    "responseXML",
    "restartIce",
    "restore",
    "result",
    "resultIndex",
    "resultType",
    "results",
    "resume",
    "resumeTransformFeedback",
    "retry",
    "returnValue",
    "rev",
    "reverse",
    "reversed",
    "revocable",
    "revokeObjectURL",
    "rgbColor",
    "right",
    "rightContext",
    "rightDegrees",
    "rightMargin",
    "rightProjectionMatrix",
    "rightViewMatrix",
    "role",
    "rolloffFactor",
    "root",
    "rootBounds",
    "rootElement",
    "rootMargin",
    "rotate",
    "rotateAxisAngle",
    "rotateAxisAngleSelf",
    "rotateFromVector",
    "rotateFromVectorSelf",
    "rotateSelf",
    "rotation",
    "rotationAngle",
    "rotationRate",
    "round",
    "row-gap",
    "rowGap",
    "rowIndex",
    "rowSpan",
    "rows",
    "rowsAffected",
    "rtcpTransport",
    "rtt",
    "ruby-align",
    "ruby-position",
    "rubyAlign",
    "rubyOverhang",
    "rubyPosition",
    "rules",
    "runningState",
    "runtime",
    "runtimeStyle",
    "rx",
    "ry",
    "s",
    "safari",
    "sample",
    "sampleCoverage",
    "sampleRate",
    "samplerParameterf",
    "samplerParameteri",
    "sandbox",
    "save",
    "saveData",
    "scale",
    "scale3d",
    "scale3dSelf",
    "scaleNonUniform",
    "scaleNonUniformSelf",
    "scaleSelf",
    "scheme",
    "scissor",
    "scope",
    "scopeName",
    "scoped",
    "screen",
    "screenBrightness",
    "screenEnabled",
    "screenLeft",
    "screenPixelToMillimeterX",
    "screenPixelToMillimeterY",
    "screenTop",
    "screenX",
    "screenY",
    "script",
    "scriptURL",
    "scripts",
    "scroll",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-coordinate",
    "scroll-snap-destination",
    "scroll-snap-points-x",
    "scroll-snap-points-y",
    "scroll-snap-type",
    "scroll-snap-type-x",
    "scroll-snap-type-y",
    "scrollAmount",
    "scrollBehavior",
    "scrollBy",
    "scrollByLines",
    "scrollByPages",
    "scrollDelay",
    "scrollHeight",
    "scrollIntoView",
    "scrollIntoViewIfNeeded",
    "scrollLeft",
    "scrollLeftMax",
    "scrollMargin",
    "scrollMarginBlock",
    "scrollMarginBlockEnd",
    "scrollMarginBlockStart",
    "scrollMarginBottom",
    "scrollMarginInline",
    "scrollMarginInlineEnd",
    "scrollMarginInlineStart",
    "scrollMarginLeft",
    "scrollMarginRight",
    "scrollMarginTop",
    "scrollMaxX",
    "scrollMaxY",
    "scrollPadding",
    "scrollPaddingBlock",
    "scrollPaddingBlockEnd",
    "scrollPaddingBlockStart",
    "scrollPaddingBottom",
    "scrollPaddingInline",
    "scrollPaddingInlineEnd",
    "scrollPaddingInlineStart",
    "scrollPaddingLeft",
    "scrollPaddingRight",
    "scrollPaddingTop",
    "scrollRestoration",
    "scrollSnapAlign",
    "scrollSnapCoordinate",
    "scrollSnapDestination",
    "scrollSnapMargin",
    "scrollSnapMarginBottom",
    "scrollSnapMarginLeft",
    "scrollSnapMarginRight",
    "scrollSnapMarginTop",
    "scrollSnapPointsX",
    "scrollSnapPointsY",
    "scrollSnapStop",
    "scrollSnapType",
    "scrollSnapTypeX",
    "scrollSnapTypeY",
    "scrollTo",
    "scrollTop",
    "scrollTopMax",
    "scrollWidth",
    "scrollX",
    "scrollY",
    "scrollbar-color",
    "scrollbar-width",
    "scrollbar3dLightColor",
    "scrollbarArrowColor",
    "scrollbarBaseColor",
    "scrollbarColor",
    "scrollbarDarkShadowColor",
    "scrollbarFaceColor",
    "scrollbarHighlightColor",
    "scrollbarShadowColor",
    "scrollbarTrackColor",
    "scrollbarWidth",
    "scrollbars",
    "scrolling",
    "scrollingElement",
    "sctp",
    "sctpCauseCode",
    "sdp",
    "sdpLineNumber",
    "sdpMLineIndex",
    "sdpMid",
    "seal",
    "search",
    "searchBox",
    "searchBoxJavaBridge_",
    "searchParams",
    "second",
    "sectionRowIndex",
    "secureConnectionStart",
    "security",
    "seed",
    "seekToNextFrame",
    "seekable",
    "seeking",
    "select",
    "selectAllChildren",
    "selectAlternateInterface",
    "selectConfiguration",
    "selectNode",
    "selectNodeContents",
    "selectNodes",
    "selectSingleNode",
    "selectSubString",
    "selected",
    "selectedIndex",
    "selectedOption",
    "selectedOptions",
    "selectedStyleSheetSet",
    "selectedStylesheetSet",
    "selection",
    "selectionDirection",
    "selectionEnd",
    "selectionStart",
    "selector",
    "selectorText",
    "self",
    "send",
    "sendAsBinary",
    "sendBeacon",
    "sendMessage",
    "sender",
    "sensitivity",
    "sentAlert",
    "sentTimestamp",
    "separator",
    "serialNumber",
    "serializeToString",
    "serverTiming",
    "service",
    "serviceWorker",
    "session",
    "sessionId",
    "sessionStorage",
    "set",
    "setActionHandler",
    "setActive",
    "setAlpha",
    "setAppBadge",
    "setAttribute",
    "setAttributeNS",
    "setAttributeNode",
    "setAttributeNodeNS",
    "setBaseAndExtent",
    "setBigInt64",
    "setBigUint64",
    "setBingCurrentSearchDefault",
    "setCapture",
    "setCodecPreferences",
    "setColor",
    "setCompositeOperation",
    "setConfiguration",
    "setCurrentTime",
    "setCustomValidity",
    "setData",
    "setDate",
    "setDirection",
    "setDragImage",
    "setEnd",
    "setEndAfter",
    "setEndBefore",
    "setEndPoint",
    "setFillColor",
    "setFilterRes",
    "setFloat32",
    "setFloat64",
    "setFloatValue",
    "setFormValue",
    "setFullYear",
    "setHeaderValue",
    "setHours",
    "setIdentityProvider",
    "setImmediate",
    "setInt16",
    "setInt32",
    "setInt8",
    "setInterval",
    "setItem",
    "setKeyframes",
    "setLineCap",
    "setLineDash",
    "setLineJoin",
    "setLineWidth",
    "setLiveSeekableRange",
    "setLocalDescription",
    "setMatrix",
    "setMatrixValue",
    "setMediaKeys",
    "setMilliseconds",
    "setMinutes",
    "setMiterLimit",
    "setMonth",
    "setNamedItem",
    "setNamedItemNS",
    "setNonUserCodeExceptions",
    "setOrientToAngle",
    "setOrientToAuto",
    "setOrientation",
    "setOverrideHistoryNavigationMode",
    "setPaint",
    "setParameter",
    "setParameters",
    "setPeriodicWave",
    "setPointerCapture",
    "setPosition",
    "setPositionState",
    "setPreference",
    "setProperty",
    "setPrototypeOf",
    "setRGBColor",
    "setRGBColorICCColor",
    "setRadius",
    "setRangeText",
    "setRemoteDescription",
    "setRequestHeader",
    "setResizable",
    "setResourceTimingBufferSize",
    "setRotate",
    "setScale",
    "setSeconds",
    "setSelectionRange",
    "setServerCertificate",
    "setShadow",
    "setSinkId",
    "setSkewX",
    "setSkewY",
    "setStart",
    "setStartAfter",
    "setStartBefore",
    "setStdDeviation",
    "setStreams",
    "setStringValue",
    "setStrokeColor",
    "setSuggestResult",
    "setTargetAtTime",
    "setTargetValueAtTime",
    "setTime",
    "setTimeout",
    "setTransform",
    "setTranslate",
    "setUTCDate",
    "setUTCFullYear",
    "setUTCHours",
    "setUTCMilliseconds",
    "setUTCMinutes",
    "setUTCMonth",
    "setUTCSeconds",
    "setUint16",
    "setUint32",
    "setUint8",
    "setUri",
    "setValidity",
    "setValueAtTime",
    "setValueCurveAtTime",
    "setVariable",
    "setVelocity",
    "setVersion",
    "setYear",
    "settingName",
    "settingValue",
    "sex",
    "shaderSource",
    "shadowBlur",
    "shadowColor",
    "shadowOffsetX",
    "shadowOffsetY",
    "shadowRoot",
    "shape",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "shapeImageThreshold",
    "shapeMargin",
    "shapeOutside",
    "shapeRendering",
    "sheet",
    "shift",
    "shiftKey",
    "shiftLeft",
    "shippingAddress",
    "shippingOption",
    "shippingType",
    "show",
    "showHelp",
    "showModal",
    "showModalDialog",
    "showModelessDialog",
    "showNotification",
    "sidebar",
    "sign",
    "signal",
    "signalingState",
    "signature",
    "silent",
    "sin",
    "singleNodeValue",
    "sinh",
    "sinkId",
    "sittingToStandingTransform",
    "size",
    "sizeToContent",
    "sizeX",
    "sizeZ",
    "sizes",
    "skewX",
    "skewXSelf",
    "skewY",
    "skewYSelf",
    "slice",
    "slope",
    "slot",
    "small",
    "smil",
    "smooth",
    "smoothingTimeConstant",
    "snapToLines",
    "snapshotItem",
    "snapshotLength",
    "some",
    "sort",
    "sortingCode",
    "source",
    "sourceBuffer",
    "sourceBuffers",
    "sourceCapabilities",
    "sourceFile",
    "sourceIndex",
    "sourceURL",
    "sources",
    "spacing",
    "span",
    "speak",
    "speakAs",
    "speaking",
    "species",
    "specified",
    "specularConstant",
    "specularExponent",
    "speechSynthesis",
    "speed",
    "speedOfSound",
    "spellcheck",
    "splice",
    "split",
    "splitText",
    "spreadMethod",
    "sqrt",
    "src",
    "srcElement",
    "srcFilter",
    "srcObject",
    "srcUrn",
    "srcdoc",
    "srclang",
    "srcset",
    "stack",
    "stackTraceLimit",
    "stacktrace",
    "stageParameters",
    "standalone",
    "standby",
    "start",
    "startContainer",
    "startE",
    "startIce",
    "startLoadTime",
    "startMessages",
    "startNotifications",
    "startOffset",
    "startRendering",
    "startSoftwareUpdate",
    "startTime",
    "startsWith",
    "state",
    "status",
    "statusCode",
    "statusMessage",
    "statusText",
    "statusbar",
    "stdDeviationX",
    "stdDeviationY",
    "stencilFunc",
    "stencilFuncSeparate",
    "stencilMask",
    "stencilMaskSeparate",
    "stencilOp",
    "stencilOpSeparate",
    "step",
    "stepDown",
    "stepMismatch",
    "stepUp",
    "sticky",
    "stitchTiles",
    "stop",
    "stop-color",
    "stop-opacity",
    "stopColor",
    "stopImmediatePropagation",
    "stopNotifications",
    "stopOpacity",
    "stopPropagation",
    "stopped",
    "storage",
    "storageArea",
    "storageName",
    "storageStatus",
    "store",
    "storeSiteSpecificTrackingException",
    "storeWebWideTrackingException",
    "stpVersion",
    "stream",
    "streams",
    "strength",
    "stretch",
    "strike",
    "stringValue",
    "stringify",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "strokeColor",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeLinecap",
    "strokeLinejoin",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeRect",
    "strokeStyle",
    "strokeText",
    "strokeWidth",
    "style",
    "styleFloat",
    "styleMap",
    "styleMedia",
    "styleSheet",
    "styleSheetSets",
    "styleSheets",
    "sub",
    "subarray",
    "subject",
    "submit",
    "submitFrame",
    "submitter",
    "subscribe",
    "substr",
    "substring",
    "substringData",
    "subtle",
    "subtree",
    "suffix",
    "suffixes",
    "summary",
    "sup",
    "supported",
    "supportedContentEncodings",
    "supportedEntryTypes",
    "supportedLocalesOf",
    "supports",
    "supportsSession",
    "surfaceScale",
    "surroundContents",
    "suspend",
    "suspendRedraw",
    "swapCache",
    "swapNode",
    "sweepFlag",
    "symbols",
    "sync",
    "sysexEnabled",
    "system",
    "systemCode",
    "systemId",
    "systemLanguage",
    "systemXDPI",
    "systemYDPI",
    "tBodies",
    "tFoot",
    "tHead",
    "tabIndex",
    "tabSize",
    "table",
    "table-layout",
    "tableLayout",
    "tableValues",
    "tag",
    "tagName",
    "tagUrn",
    "tags",
    "taintEnabled",
    "takeHeapSnapshot",
    "takePhoto",
    "takeRecords",
    "tan",
    "tangentialPressure",
    "tanh",
    "target",
    "targetElement",
    "targetRayMode",
    "targetRaySpace",
    "targetTouches",
    "targetX",
    "targetY",
    "tcpType",
    "tee",
    "tel",
    "terminate",
    "test",
    "texImage2D",
    "texImage3D",
    "texParameterf",
    "texParameteri",
    "texStorage2D",
    "texStorage3D",
    "texSubImage2D",
    "texSubImage3D",
    "text",
    "text-align",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text/pdf",
    "textAlign",
    "textAlignLast",
    "textAnchor",
    "textAutospace",
    "textBaseline",
    "textCombineUpright",
    "textContent",
    "textDecoration",
    "textDecorationBlink",
    "textDecorationColor",
    "textDecorationLine",
    "textDecorationLineThrough",
    "textDecorationNone",
    "textDecorationOverline",
    "textDecorationSkipInk",
    "textDecorationStyle",
    "textDecorationThickness",
    "textDecorationUnderline",
    "textEmphasis",
    "textEmphasisColor",
    "textEmphasisPosition",
    "textEmphasisStyle",
    "textIndent",
    "textJustify",
    "textJustifyTrim",
    "textKashida",
    "textKashidaSpace",
    "textLength",
    "textOrientation",
    "textOverflow",
    "textRendering",
    "textShadow",
    "textSizeAdjust",
    "textTracks",
    "textTransform",
    "textUnderlineOffset",
    "textUnderlinePosition",
    "then",
    "threadId",
    "threshold",
    "thresholds",
    "tiltX",
    "tiltY",
    "time",
    "timeEnd",
    "timeLog",
    "timeOrigin",
    "timeRemaining",
    "timeStamp",
    "timeZone",
    "timeZoneName",
    "timecode",
    "timeline",
    "timelineEnd",
    "timelineTime",
    "timeout",
    "timestamp",
    "timestampOffset",
    "timing",
    "title",
    "to",
    "toArray",
    "toBlob",
    "toDataURL",
    "toDateString",
    "toElement",
    "toExponential",
    "toFixed",
    "toFloat32Array",
    "toFloat64Array",
    "toGMTString",
    "toISOString",
    "toJSON",
    "toLocaleDateString",
    "toLocaleFormat",
    "toLocaleLowerCase",
    "toLocaleString",
    "toLocaleTimeString",
    "toLocaleUpperCase",
    "toLowerCase",
    "toMatrix",
    "toMethod",
    "toPrecision",
    "toPrimitive",
    "toSdp",
    "toSource",
    "toStaticHTML",
    "toString",
    "toStringTag",
    "toSum",
    "toTimeString",
    "toUTCString",
    "toUpperCase",
    "toggle",
    "toggleAttribute",
    "toggleLongPressEnabled",
    "tone",
    "toneBuffer",
    "tooLong",
    "tooShort",
    "toolbar",
    "top",
    "topMargin",
    "total",
    "totalFrameDelay",
    "totalJSHeapSize",
    "totalSize",
    "totalVideoFrames",
    "touch-action",
    "touchAction",
    "touched",
    "touches",
    "trace",
    "track",
    "trackVisibility",
    "tran",
    "transaction",
    "transactions",
    "transceiver",
    "transferControlToOffscreen",
    "transferFromImageBitmap",
    "transferImageBitmap",
    "transferIn",
    "transferOut",
    "transferSize",
    "transferToImageBitmap",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transformBox",
    "transformFeedbackVaryings",
    "transformOrigin",
    "transformOriginX",
    "transformOriginY",
    "transformOriginZ",
    "transformPoint",
    "transformString",
    "transformStyle",
    "transformToDocument",
    "transformToFragment",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "transitionDelay",
    "transitionDuration",
    "transitionProperty",
    "transitionTimingFunction",
    "translate",
    "translateSelf",
    "translationX",
    "translationY",
    "transport",
    "trim",
    "trimEnd",
    "trimLeft",
    "trimRight",
    "trimStart",
    "trueSpeed",
    "trunc",
    "truncate",
    "trustedTypes",
    "turn",
    "twist",
    "type",
    "typeDetail",
    "typeMismatch",
    "typeMustMatch",
    "types",
    "tz",
    "u2f",
    "ubound",
    "undefined",
    "unescape",
    "uneval",
    "unicode",
    "unicode-bidi",
    "unicodeBidi",
    "unicodeRange",
    "uniform1f",
    "uniform1fv",
    "uniform1i",
    "uniform1iv",
    "uniform1ui",
    "uniform1uiv",
    "uniform2f",
    "uniform2fv",
    "uniform2i",
    "uniform2iv",
    "uniform2ui",
    "uniform2uiv",
    "uniform3f",
    "uniform3fv",
    "uniform3i",
    "uniform3iv",
    "uniform3ui",
    "uniform3uiv",
    "uniform4f",
    "uniform4fv",
    "uniform4i",
    "uniform4iv",
    "uniform4ui",
    "uniform4uiv",
    "uniformBlockBinding",
    "uniformMatrix2fv",
    "uniformMatrix2x3fv",
    "uniformMatrix2x4fv",
    "uniformMatrix3fv",
    "uniformMatrix3x2fv",
    "uniformMatrix3x4fv",
    "uniformMatrix4fv",
    "uniformMatrix4x2fv",
    "uniformMatrix4x3fv",
    "unique",
    "uniqueID",
    "uniqueNumber",
    "unit",
    "unitType",
    "units",
    "unloadEventEnd",
    "unloadEventStart",
    "unlock",
    "unmount",
    "unobserve",
    "unpause",
    "unpauseAnimations",
    "unreadCount",
    "unregister",
    "unregisterContentHandler",
    "unregisterProtocolHandler",
    "unscopables",
    "unselectable",
    "unshift",
    "unsubscribe",
    "unsuspendRedraw",
    "unsuspendRedrawAll",
    "unwatch",
    "unwrapKey",
    "upDegrees",
    "upX",
    "upY",
    "upZ",
    "update",
    "updateCommands",
    "updateEnabled",
    "updateIce",
    "updateInterval",
    "updatePlaybackRate",
    "updateRenderState",
    "updateSettings",
    "updateTiming",
    "updateViaCache",
    "updateWith",
    "updated",
    "updating",
    "upgrade",
    "upload",
    "uploadTotal",
    "uploaded",
    "upper",
    "upperBound",
    "upperOpen",
    "uri",
    "url",
    "urn",
    "urns",
    "usage",
    "usages",
    "usb",
    "usbVersionMajor",
    "usbVersionMinor",
    "usbVersionSubminor",
    "useCurrentView",
    "useGrouping",
    "useMap",
    "useProgram",
    "usedJSHeapSize",
    "usedSpace",
    "user-select",
    "userActivation",
    "userAgent",
    "userChoice",
    "userHandle",
    "userHint",
    "userLanguage",
    "userProfile",
    "userSelect",
    "userVisibleOnly",
    "userZoom",
    "username",
    "usernameFragment",
    "utterance",
    "uuid",
    "v8BreakIterator",
    "v8Parse",
    "vAlign",
    "vLink",
    "valid",
    "validate",
    "validateProgram",
    "validationMessage",
    "validity",
    "value",
    "valueAsDate",
    "valueAsNumber",
    "valueAsString",
    "valueInSpecifiedUnits",
    "valueMissing",
    "valueOf",
    "valueText",
    "valueType",
    "values",
    "variable",
    "variant",
    "vector-effect",
    "vectorEffect",
    "velocityAngular",
    "velocityExpansion",
    "velocityX",
    "velocityY",
    "vendor",
    "vendorId",
    "vendorSub",
    "verify",
    "version",
    "vertexAttrib1f",
    "vertexAttrib1fv",
    "vertexAttrib2f",
    "vertexAttrib2fv",
    "vertexAttrib3f",
    "vertexAttrib3fv",
    "vertexAttrib4f",
    "vertexAttrib4fv",
    "vertexAttribDivisor",
    "vertexAttribDivisorANGLE",
    "vertexAttribI4i",
    "vertexAttribI4iv",
    "vertexAttribI4ui",
    "vertexAttribI4uiv",
    "vertexAttribIPointer",
    "vertexAttribPointer",
    "vertical",
    "vertical-align",
    "verticalAlign",
    "verticalOverflow",
    "vh",
    "vibrate",
    "vibrationActuator",
    "video/x-ms-asf",
    "video/x-ms-asf-plugin",
    "video/x-ms-wm",
    "video/x-ms-wmv",
    "video/x-ms-wvx",
    "videoBitsPerSecond",
    "videoHeight",
    "videoTracks",
    "videoWidth",
    "view",
    "viewBox",
    "viewBoxString",
    "viewTarget",
    "viewTargetString",
    "viewport",
    "viewportAnchorX",
    "viewportAnchorY",
    "viewportElement",
    "views",
    "violatedDirective",
    "visibility",
    "visibilityState",
    "visible",
    "visualViewport",
    "vlinkColor",
    "vmax",
    "vmin",
    "voice",
    "voiceURI",
    "volume",
    "vrml",
    "vspace",
    "vw",
    "w",
    "wait",
    "waitSync",
    "waiting",
    "wake",
    "wakeLock",
    "wand",
    "warn",
    "wasAlternateProtocolAvailable",
    "wasClean",
    "wasDiscarded",
    "wasFetchedViaSpdy",
    "wasNpnNegotiated",
    "watch",
    "watchAvailability",
    "watchPosition",
    "webdriver",
    "webkitAddKey",
    "webkitAlignContent",
    "webkitAlignItems",
    "webkitAlignSelf",
    "webkitAnimation",
    "webkitAnimationDelay",
    "webkitAnimationDirection",
    "webkitAnimationDuration",
    "webkitAnimationFillMode",
    "webkitAnimationIterationCount",
    "webkitAnimationName",
    "webkitAnimationPlayState",
    "webkitAnimationTimingFunction",
    "webkitAppRegion",
    "webkitAppearance",
    "webkitAspectRatio",
    "webkitAudioContext",
    "webkitAudioDecodedByteCount",
    "webkitAudioPannerNode",
    "webkitBackdropFilter",
    "webkitBackfaceVisibility",
    "webkitBackground",
    "webkitBackgroundAttachment",
    "webkitBackgroundClip",
    "webkitBackgroundColor",
    "webkitBackgroundComposite",
    "webkitBackgroundImage",
    "webkitBackgroundOrigin",
    "webkitBackgroundPosition",
    "webkitBackgroundPositionX",
    "webkitBackgroundPositionY",
    "webkitBackgroundRepeat",
    "webkitBackgroundSize",
    "webkitBackingStorePixelRatio",
    "webkitBorderAfter",
    "webkitBorderAfterColor",
    "webkitBorderAfterStyle",
    "webkitBorderAfterWidth",
    "webkitBorderBefore",
    "webkitBorderBeforeColor",
    "webkitBorderBeforeStyle",
    "webkitBorderBeforeWidth",
    "webkitBorderBottomLeftRadius",
    "webkitBorderBottomRightRadius",
    "webkitBorderEnd",
    "webkitBorderEndColor",
    "webkitBorderEndStyle",
    "webkitBorderEndWidth",
    "webkitBorderFit",
    "webkitBorderHorizontalSpacing",
    "webkitBorderImage",
    "webkitBorderImageOutset",
    "webkitBorderImageRepeat",
    "webkitBorderImageSlice",
    "webkitBorderImageSource",
    "webkitBorderImageWidth",
    "webkitBorderRadius",
    "webkitBorderStart",
    "webkitBorderStartColor",
    "webkitBorderStartStyle",
    "webkitBorderStartWidth",
    "webkitBorderTopLeftRadius",
    "webkitBorderTopRightRadius",
    "webkitBorderVerticalSpacing",
    "webkitBoxAlign",
    "webkitBoxDecorationBreak",
    "webkitBoxDirection",
    "webkitBoxFlex",
    "webkitBoxFlexGroup",
    "webkitBoxLines",
    "webkitBoxOrdinalGroup",
    "webkitBoxOrient",
    "webkitBoxPack",
    "webkitBoxReflect",
    "webkitBoxShadow",
    "webkitBoxSizing",
    "webkitCancelAnimationFrame",
    "webkitCancelFullScreen",
    "webkitCancelKeyRequest",
    "webkitCancelRequestAnimationFrame",
    "webkitClearResourceTimings",
    "webkitClipPath",
    "webkitClosedCaptionsVisible",
    "webkitColumnAxis",
    "webkitColumnBreakAfter",
    "webkitColumnBreakBefore",
    "webkitColumnBreakInside",
    "webkitColumnCount",
    "webkitColumnGap",
    "webkitColumnProgression",
    "webkitColumnRule",
    "webkitColumnRuleColor",
    "webkitColumnRuleStyle",
    "webkitColumnRuleWidth",
    "webkitColumnSpan",
    "webkitColumnWidth",
    "webkitColumns",
    "webkitConvertPointFromNodeToPage",
    "webkitConvertPointFromPageToNode",
    "webkitCreateShadowRoot",
    "webkitCurrentFullScreenElement",
    "webkitCurrentPlaybackTargetIsWireless",
    "webkitCursorVisibility",
    "webkitDashboardRegion",
    "webkitDecodedFrameCount",
    "webkitDirectionInvertedFromDevice",
    "webkitDisplayingFullscreen",
    "webkitDroppedFrameCount",
    "webkitEnterFullScreen",
    "webkitEnterFullscreen",
    "webkitEntries",
    "webkitExitFullScreen",
    "webkitExitFullscreen",
    "webkitExitPointerLock",
    "webkitFilter",
    "webkitFlex",
    "webkitFlexBasis",
    "webkitFlexDirection",
    "webkitFlexFlow",
    "webkitFlexGrow",
    "webkitFlexShrink",
    "webkitFlexWrap",
    "webkitFontFeatureSettings",
    "webkitFontKerning",
    "webkitFontSizeDelta",
    "webkitFontSmoothing",
    "webkitForce",
    "webkitFullScreenKeyboardInputAllowed",
    "webkitFullscreenElement",
    "webkitFullscreenEnabled",
    "webkitGenerateKeyRequest",
    "webkitGetAsEntry",
    "webkitGetDatabaseNames",
    "webkitGetEntries",
    "webkitGetEntriesByName",
    "webkitGetEntriesByType",
    "webkitGetFlowByName",
    "webkitGetGamepads",
    "webkitGetImageDataHD",
    "webkitGetNamedFlows",
    "webkitGetRegionFlowRanges",
    "webkitGetUserMedia",
    "webkitHasClosedCaptions",
    "webkitHidden",
    "webkitHighlight",
    "webkitHyphenateCharacter",
    "webkitHyphenateLimitAfter",
    "webkitHyphenateLimitBefore",
    "webkitHyphenateLimitLines",
    "webkitHyphens",
    "webkitIDBCursor",
    "webkitIDBDatabase",
    "webkitIDBDatabaseError",
    "webkitIDBDatabaseException",
    "webkitIDBFactory",
    "webkitIDBIndex",
    "webkitIDBKeyRange",
    "webkitIDBObjectStore",
    "webkitIDBRequest",
    "webkitIDBTransaction",
    "webkitImageSmoothingEnabled",
    "webkitIndexedDB",
    "webkitInitMessageEvent",
    "webkitInitialLetter",
    "webkitIsFullScreen",
    "webkitJustifyContent",
    "webkitKeys",
    "webkitLineAlign",
    "webkitLineBoxContain",
    "webkitLineBreak",
    "webkitLineClamp",
    "webkitLineDash",
    "webkitLineDashOffset",
    "webkitLineGrid",
    "webkitLineSnap",
    "webkitLocale",
    "webkitLockOrientation",
    "webkitLogicalHeight",
    "webkitLogicalWidth",
    "webkitMarginAfter",
    "webkitMarginAfterCollapse",
    "webkitMarginBefore",
    "webkitMarginBeforeCollapse",
    "webkitMarginBottomCollapse",
    "webkitMarginCollapse",
    "webkitMarginEnd",
    "webkitMarginStart",
    "webkitMarginTopCollapse",
    "webkitMarquee",
    "webkitMarqueeDirection",
    "webkitMarqueeIncrement",
    "webkitMarqueeRepetition",
    "webkitMarqueeSpeed",
    "webkitMarqueeStyle",
    "webkitMask",
    "webkitMaskBoxImage",
    "webkitMaskBoxImageOutset",
    "webkitMaskBoxImageRepeat",
    "webkitMaskBoxImageSlice",
    "webkitMaskBoxImageSource",
    "webkitMaskBoxImageWidth",
    "webkitMaskClip",
    "webkitMaskComposite",
    "webkitMaskImage",
    "webkitMaskOrigin",
    "webkitMaskPosition",
    "webkitMaskPositionX",
    "webkitMaskPositionY",
    "webkitMaskRepeat",
    "webkitMaskRepeatX",
    "webkitMaskRepeatY",
    "webkitMaskSize",
    "webkitMaskSourceType",
    "webkitMatchesSelector",
    "webkitMaxLogicalHeight",
    "webkitMaxLogicalWidth",
    "webkitMediaStream",
    "webkitMinLogicalHeight",
    "webkitMinLogicalWidth",
    "webkitNbspMode",
    "webkitNotifications",
    "webkitOfflineAudioContext",
    "webkitOpacity",
    "webkitOrder",
    "webkitOrientation",
    "webkitPaddingAfter",
    "webkitPaddingBefore",
    "webkitPaddingEnd",
    "webkitPaddingStart",
    "webkitPeerConnection00",
    "webkitPersistentStorage",
    "webkitPerspective",
    "webkitPerspectiveOrigin",
    "webkitPerspectiveOriginX",
    "webkitPerspectiveOriginY",
    "webkitPointerLockElement",
    "webkitPostMessage",
    "webkitPreservesPitch",
    "webkitPrintColorAdjust",
    "webkitPutImageDataHD",
    "webkitRTCPeerConnection",
    "webkitRegionOverset",
    "webkitRelativePath",
    "webkitRequestAnimationFrame",
    "webkitRequestFileSystem",
    "webkitRequestFullScreen",
    "webkitRequestFullscreen",
    "webkitRequestPointerLock",
    "webkitResolveLocalFileSystemURL",
    "webkitRtlOrdering",
    "webkitRubyPosition",
    "webkitSetMediaKeys",
    "webkitSetResourceTimingBufferSize",
    "webkitShadowRoot",
    "webkitShapeImageThreshold",
    "webkitShapeMargin",
    "webkitShapeOutside",
    "webkitShowPlaybackTargetPicker",
    "webkitSlice",
    "webkitSpeechGrammar",
    "webkitSpeechGrammarList",
    "webkitSpeechRecognition",
    "webkitSpeechRecognitionError",
    "webkitSpeechRecognitionEvent",
    "webkitStorageInfo",
    "webkitSupportsFullscreen",
    "webkitSvgShadow",
    "webkitTapHighlightColor",
    "webkitTemporaryStorage",
    "webkitTextCombine",
    "webkitTextDecoration",
    "webkitTextDecorationColor",
    "webkitTextDecorationLine",
    "webkitTextDecorationSkip",
    "webkitTextDecorationStyle",
    "webkitTextDecorationsInEffect",
    "webkitTextEmphasis",
    "webkitTextEmphasisColor",
    "webkitTextEmphasisPosition",
    "webkitTextEmphasisStyle",
    "webkitTextFillColor",
    "webkitTextOrientation",
    "webkitTextSecurity",
    "webkitTextSizeAdjust",
    "webkitTextStroke",
    "webkitTextStrokeColor",
    "webkitTextStrokeWidth",
    "webkitTextUnderlinePosition",
    "webkitTextZoom",
    "webkitTransform",
    "webkitTransformOrigin",
    "webkitTransformOriginX",
    "webkitTransformOriginY",
    "webkitTransformOriginZ",
    "webkitTransformStyle",
    "webkitTransition",
    "webkitTransitionDelay",
    "webkitTransitionDuration",
    "webkitTransitionProperty",
    "webkitTransitionTimingFunction",
    "webkitURL",
    "webkitUnlockOrientation",
    "webkitUserDrag",
    "webkitUserModify",
    "webkitUserSelect",
    "webkitVideoDecodedByteCount",
    "webkitVisibilityState",
    "webkitWirelessVideoPlaybackDisabled",
    "webkitWritingMode",
    "webkitdirectory",
    "webkitdropzone",
    "webstore",
    "weekday",
    "weight",
    "whatToShow",
    "wheelDelta",
    "wheelDeltaX",
    "wheelDeltaY",
    "whenDefined",
    "which",
    "white-space",
    "whiteSpace",
    "wholeText",
    "widows",
    "width",
    "will-change",
    "willChange",
    "willValidate",
    "window",
    "withCredentials",
    "word-break",
    "word-spacing",
    "word-wrap",
    "wordBreak",
    "wordSpacing",
    "wordWrap",
    "workerStart",
    "wrap",
    "wrapKey",
    "writable",
    "writableAuxiliaries",
    "write",
    "writeText",
    "writeValue",
    "writeWithoutResponse",
    "writeln",
    "writing-mode",
    "writingMode",
    "x",
    "x1",
    "x2",
    "xChannelSelector",
    "xmlEncoding",
    "xmlStandalone",
    "xmlVersion",
    "xmlbase",
    "xmllang",
    "xmlspace",
    "xor",
    "xr",
    "y",
    "y1",
    "y2",
    "yChannelSelector",
    "yandex",
    "year",
    "z",
    "z-index",
    "zIndex",
    "zoom",
    "zoomAndPan",
    "zoomRectScreen"
  ];
});

// node_modules/uglify-js/tools/node.js
var require_node = __commonJS((exports) => {
  var to_comment = function(value) {
    if (typeof value != "string")
      value = JSON.stringify(value, function(key, value2) {
        return typeof value2 == "function" ? "<[ " + value2 + " ]>" : value2;
      }, 2);
    return "// " + value.replace(/\n/g, "\n// ");
  };
  var describe_ast = function() {
    var out = OutputStream({ beautify: true });
    doitem(AST_Node);
    return out.get() + "\n";
    function doitem(ctor) {
      out.print("AST_" + ctor.TYPE);
      var props = ctor.SELF_PROPS.filter(function(prop) {
        return !/^\$/.test(prop);
      });
      if (props.length > 0) {
        out.space();
        out.with_parens(function() {
          props.forEach(function(prop, i) {
            if (i)
              out.space();
            out.print(prop);
          });
        });
      }
      if (ctor.documentation) {
        out.space();
        out.print_string(ctor.documentation);
      }
      if (ctor.SUBCLASSES.length > 0) {
        out.space();
        out.with_block(function() {
          ctor.SUBCLASSES.sort(function(a2, b5) {
            return a2.TYPE < b5.TYPE ? -1 : 1;
          }).forEach(function(ctor2, i) {
            out.indent();
            doitem(ctor2);
            out.newline();
          });
        });
      }
    }
  };
  var infer_options = function(options) {
    var result = exports.minify("", options);
    return result.error && result.error.defs;
  };
  var fs = (()=>({}));
  exports.FILES = [
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/utils.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/ast.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/transform.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/parse.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/scope.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/compress.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/output.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/sourcemap.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/mozilla-ast.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/propmangle.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/lib/minify.js"),
    __require.resolve("/Users/macbook-pro/Works/hummingbun/node_modules/uglify-js/tools/exports.js")
  ];
  new Function("domprops", "exports", function() {
    var code = exports.FILES.map(function(file) {
      return fs.readFileSync(file, "utf8");
    });
    code.push("exports.describe_ast = " + describe_ast.toString());
    return code.join("\n\n");
  }())(require_domprops(), exports);
  if (+process.env["UGLIFY_BUG_REPORT"]) {
    var $minify2 = function(files, options) {
      if (typeof options == "undefined")
        options = "<<undefined>>";
      var code = [
        "// UGLIFY_BUG_REPORT",
        to_comment(options)
      ];
      if (typeof files == "string") {
        code.push("");
        code.push("//-------------------------------------------------------------");
        code.push("// INPUT CODE", files);
      } else
        for (var name in files) {
          code.push("");
          code.push("//-------------------------------------------------------------");
          code.push(to_comment(name), files[name]);
        }
      if (options.sourceMap && options.sourceMap.url) {
        code.push("");
        code.push("//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9");
      }
      var result = { code: code.join("\n") };
      if (options.sourceMap)
        result.map = '{"version":3,"sources":[],"names":[],"mappings":""}';
      return result;
    };

    export { $minify2 as minify };
  }
  exports.default_options = function() {
    var defs = infer_options({ 0: 0 });
    Object.keys(defs).forEach(function(component) {
      var options = {};
      options[component] = { 0: 0 };
      if (options = infer_options(options)) {
        defs[component] = options;
      }
    });
    return defs;
  };
});

// node_modules/html-minifier/src/htmlminifier.js
var require_htmlminifier = __commonJS((exports) => {
  var trimWhitespace = function(str) {
    return str && str.replace(/^[ \n\r\t\f]+/, "").replace(/[ \n\r\t\f]+$/, "");
  };
  var collapseWhitespaceAll = function(str) {
    return str && str.replace(/[ \n\r\t\f\xA0]+/g, function(spaces) {
      return spaces === "\t" ? "\t" : spaces.replace(/(^|\xA0+)[^\xA0]+/g, "$1 ");
    });
  };
  var collapseWhitespace = function(str, options, trimLeft, trimRight, collapseAll) {
    var lineBreakBefore = "", lineBreakAfter = "";
    if (options.preserveLineBreaks) {
      str = str.replace(/^[ \n\r\t\f]*?[\n\r][ \n\r\t\f]*/, function() {
        lineBreakBefore = "\n";
        return "";
      }).replace(/[ \n\r\t\f]*?[\n\r][ \n\r\t\f]*$/, function() {
        lineBreakAfter = "\n";
        return "";
      });
    }
    if (trimLeft) {
      str = str.replace(/^[ \n\r\t\f\xA0]+/, function(spaces) {
        var conservative = !lineBreakBefore && options.conservativeCollapse;
        if (conservative && spaces === "\t") {
          return "\t";
        }
        return spaces.replace(/^[^\xA0]+/, "").replace(/(\xA0+)[^\xA0]+/g, "$1 ") || (conservative ? " " : "");
      });
    }
    if (trimRight) {
      str = str.replace(/[ \n\r\t\f\xA0]+$/, function(spaces) {
        var conservative = !lineBreakAfter && options.conservativeCollapse;
        if (conservative && spaces === "\t") {
          return "\t";
        }
        return spaces.replace(/[^\xA0]+(\xA0+)/g, " $1").replace(/[^\xA0]+$/, "") || (conservative ? " " : "");
      });
    }
    if (collapseAll) {
      str = collapseWhitespaceAll(str);
    }
    return lineBreakBefore + str + lineBreakAfter;
  };
  var collapseWhitespaceSmart = function(str, prevTag, nextTag, options) {
    var trimLeft = prevTag && !selfClosingInlineTags(prevTag);
    if (trimLeft && !options.collapseInlineTagWhitespace) {
      trimLeft = prevTag.charAt(0) === "/" ? !inlineTags(prevTag.slice(1)) : !inlineTextTags(prevTag);
    }
    var trimRight = nextTag && !selfClosingInlineTags(nextTag);
    if (trimRight && !options.collapseInlineTagWhitespace) {
      trimRight = nextTag.charAt(0) === "/" ? !inlineTextTags(nextTag.slice(1)) : !inlineTags(nextTag);
    }
    return collapseWhitespace(str, options, trimLeft, trimRight, prevTag && nextTag);
  };
  var isConditionalComment = function(text) {
    return /^\[if\s[^\]]+]|\[endif]$/.test(text);
  };
  var isIgnoredComment = function(text, options) {
    for (var i = 0, len = options.ignoreCustomComments.length;i < len; i++) {
      if (options.ignoreCustomComments[i].test(text)) {
        return true;
      }
    }
    return false;
  };
  var isEventAttribute = function(attrName, options) {
    var patterns = options.customEventAttributes;
    if (patterns) {
      for (var i = patterns.length;i--; ) {
        if (patterns[i].test(attrName)) {
          return true;
        }
      }
      return false;
    }
    return /^on[a-z]{3,}$/.test(attrName);
  };
  var canRemoveAttributeQuotes = function(value) {
    return /^[^ \t\n\f\r"'`=<>]+$/.test(value);
  };
  var attributesInclude = function(attributes, attribute) {
    for (var i = attributes.length;i--; ) {
      if (attributes[i].name.toLowerCase() === attribute) {
        return true;
      }
    }
    return false;
  };
  var isAttributeRedundant = function(tag, attrName, attrValue, attrs) {
    attrValue = attrValue ? trimWhitespace(attrValue.toLowerCase()) : "";
    return tag === "script" && attrName === "language" && attrValue === "javascript" || tag === "form" && attrName === "method" && attrValue === "get" || tag === "input" && attrName === "type" && attrValue === "text" || tag === "script" && attrName === "charset" && !attributesInclude(attrs, "src") || tag === "a" && attrName === "name" && attributesInclude(attrs, "id") || tag === "area" && attrName === "shape" && attrValue === "rect";
  };
  var isScriptTypeAttribute = function(attrValue) {
    attrValue = trimWhitespace(attrValue.split(/;/, 2)[0]).toLowerCase();
    return attrValue === "" || executableScriptsMimetypes(attrValue);
  };
  var isExecutableScript = function(tag, attrs) {
    if (tag !== "script") {
      return false;
    }
    for (var i = 0, len = attrs.length;i < len; i++) {
      var attrName = attrs[i].name.toLowerCase();
      if (attrName === "type") {
        return isScriptTypeAttribute(attrs[i].value);
      }
    }
    return true;
  };
  var isStyleLinkTypeAttribute = function(attrValue) {
    attrValue = trimWhitespace(attrValue).toLowerCase();
    return attrValue === "" || attrValue === "text/css";
  };
  var isStyleSheet = function(tag, attrs) {
    if (tag !== "style") {
      return false;
    }
    for (var i = 0, len = attrs.length;i < len; i++) {
      var attrName = attrs[i].name.toLowerCase();
      if (attrName === "type") {
        return isStyleLinkTypeAttribute(attrs[i].value);
      }
    }
    return true;
  };
  var isBooleanAttribute = function(attrName, attrValue) {
    return isSimpleBoolean(attrName) || attrName === "draggable" && !isBooleanValue(attrValue);
  };
  var isUriTypeAttribute = function(attrName, tag) {
    return /^(?:a|area|link|base)$/.test(tag) && attrName === "href" || tag === "img" && /^(?:src|longdesc|usemap)$/.test(attrName) || tag === "object" && /^(?:classid|codebase|data|usemap)$/.test(attrName) || tag === "q" && attrName === "cite" || tag === "blockquote" && attrName === "cite" || (tag === "ins" || tag === "del") && attrName === "cite" || tag === "form" && attrName === "action" || tag === "input" && (attrName === "src" || attrName === "usemap") || tag === "head" && attrName === "profile" || tag === "script" && (attrName === "src" || attrName === "for");
  };
  var isNumberTypeAttribute = function(attrName, tag) {
    return /^(?:a|area|object|button)$/.test(tag) && attrName === "tabindex" || tag === "input" && (attrName === "maxlength" || attrName === "tabindex") || tag === "select" && (attrName === "size" || attrName === "tabindex") || tag === "textarea" && /^(?:rows|cols|tabindex)$/.test(attrName) || tag === "colgroup" && attrName === "span" || tag === "col" && attrName === "span" || (tag === "th" || tag === "td") && (attrName === "rowspan" || attrName === "colspan");
  };
  var isLinkType = function(tag, attrs, value) {
    if (tag !== "link") {
      return false;
    }
    for (var i = 0, len = attrs.length;i < len; i++) {
      if (attrs[i].name === "rel" && attrs[i].value === value) {
        return true;
      }
    }
  };
  var isMediaQuery = function(tag, attrs, attrName) {
    return attrName === "media" && (isLinkType(tag, attrs, "stylesheet") || isStyleSheet(tag, attrs));
  };
  var isSrcset = function(attrName, tag) {
    return attrName === "srcset" && srcsetTags(tag);
  };
  var cleanAttributeValue = function(tag, attrName, attrValue, options, attrs) {
    if (isEventAttribute(attrName, options)) {
      attrValue = trimWhitespace(attrValue).replace(/^javascript:\s*/i, "");
      return options.minifyJS(attrValue, true);
    } else if (attrName === "class") {
      attrValue = trimWhitespace(attrValue);
      if (options.sortClassName) {
        attrValue = options.sortClassName(attrValue);
      } else {
        attrValue = collapseWhitespaceAll(attrValue);
      }
      return attrValue;
    } else if (isUriTypeAttribute(attrName, tag)) {
      attrValue = trimWhitespace(attrValue);
      return isLinkType(tag, attrs, "canonical") ? attrValue : options.minifyURLs(attrValue);
    } else if (isNumberTypeAttribute(attrName, tag)) {
      return trimWhitespace(attrValue);
    } else if (attrName === "style") {
      attrValue = trimWhitespace(attrValue);
      if (attrValue) {
        if (/;$/.test(attrValue) && !/&#?[0-9a-zA-Z]+;$/.test(attrValue)) {
          attrValue = attrValue.replace(/\s*;$/, ";");
        }
        attrValue = options.minifyCSS(attrValue, "inline");
      }
      return attrValue;
    } else if (isSrcset(attrName, tag)) {
      attrValue = trimWhitespace(attrValue).split(/\s+,\s*|\s*,\s+/).map(function(candidate) {
        var url = candidate;
        var descriptor = "";
        var match = candidate.match(/\s+([1-9][0-9]*w|[0-9]+(?:\.[0-9]+)?x)$/);
        if (match) {
          url = url.slice(0, -match[0].length);
          var num = +match[1].slice(0, -1);
          var suffix = match[1].slice(-1);
          if (num !== 1 || suffix !== "x") {
            descriptor = " " + num + suffix;
          }
        }
        return options.minifyURLs(url) + descriptor;
      }).join(", ");
    } else if (isMetaViewport(tag, attrs) && attrName === "content") {
      attrValue = attrValue.replace(/\s+/g, "").replace(/[0-9]+\.[0-9]+/g, function(numString) {
        return (+numString).toString();
      });
    } else if (isContentSecurityPolicy(tag, attrs) && attrName.toLowerCase() === "content") {
      return collapseWhitespaceAll(attrValue);
    } else if (options.customAttrCollapse && options.customAttrCollapse.test(attrName)) {
      attrValue = attrValue.replace(/\n+|\r+|\s{2,}/g, "");
    } else if (tag === "script" && attrName === "type") {
      attrValue = trimWhitespace(attrValue.replace(/\s*;\s*/g, ";"));
    } else if (isMediaQuery(tag, attrs, attrName)) {
      attrValue = trimWhitespace(attrValue);
      return options.minifyCSS(attrValue, "media");
    }
    return attrValue;
  };
  var isMetaViewport = function(tag, attrs) {
    if (tag !== "meta") {
      return false;
    }
    for (var i = 0, len = attrs.length;i < len; i++) {
      if (attrs[i].name === "name" && attrs[i].value === "viewport") {
        return true;
      }
    }
  };
  var isContentSecurityPolicy = function(tag, attrs) {
    if (tag !== "meta") {
      return false;
    }
    for (var i = 0, len = attrs.length;i < len; i++) {
      if (attrs[i].name.toLowerCase() === "http-equiv" && attrs[i].value.toLowerCase() === "content-security-policy") {
        return true;
      }
    }
  };
  var ignoreCSS = function(id) {
    return "/* clean-css ignore:start */" + id + "/* clean-css ignore:end */";
  };
  var wrapCSS = function(text, type) {
    switch (type) {
      case "inline":
        return "*{" + text + "}";
      case "media":
        return "@media " + text + "{a{top:0}}";
      default:
        return text;
    }
  };
  var unwrapCSS = function(text, type) {
    var matches;
    switch (type) {
      case "inline":
        matches = text.match(/^\*\{([\s\S]*)\}$/);
        break;
      case "media":
        matches = text.match(/^@media ([\s\S]*?)\s*{[\s\S]*}$/);
        break;
    }
    return matches ? matches[1] : text;
  };
  var cleanConditionalComment = function(comment, options) {
    return options.processConditionalComments ? comment.replace(/^(\[if\s[^\]]+]>)([\s\S]*?)(<!\[endif])$/, function(match, prefix, text, suffix) {
      return prefix + minify2(text, options, true) + suffix;
    }) : comment;
  };
  var processScript = function(text, options, currentAttrs) {
    for (var i = 0, len = currentAttrs.length;i < len; i++) {
      if (currentAttrs[i].name.toLowerCase() === "type" && options.processScripts.indexOf(currentAttrs[i].value) > -1) {
        return minify2(text, options);
      }
    }
    return text;
  };
  var canRemoveParentTag = function(optionalStartTag, tag) {
    switch (optionalStartTag) {
      case "html":
      case "head":
        return true;
      case "body":
        return !headerTags(tag);
      case "colgroup":
        return tag === "col";
      case "tbody":
        return tag === "tr";
    }
    return false;
  };
  var isStartTagMandatory = function(optionalEndTag, tag) {
    switch (tag) {
      case "colgroup":
        return optionalEndTag === "colgroup";
      case "tbody":
        return tableSectionTags(optionalEndTag);
    }
    return false;
  };
  var canRemovePrecedingTag = function(optionalEndTag, tag) {
    switch (optionalEndTag) {
      case "html":
      case "head":
      case "body":
      case "colgroup":
      case "caption":
        return true;
      case "li":
      case "optgroup":
      case "tr":
        return tag === optionalEndTag;
      case "dt":
      case "dd":
        return descriptionTags(tag);
      case "p":
        return pBlockTags(tag);
      case "rb":
      case "rt":
      case "rp":
        return rubyTags(tag);
      case "rtc":
        return rtcTag(tag);
      case "option":
        return optionTag(tag);
      case "thead":
      case "tbody":
        return tableContentTags(tag);
      case "tfoot":
        return tag === "tbody";
      case "td":
      case "th":
        return cellTags(tag);
    }
    return false;
  };
  var canDeleteEmptyAttribute = function(tag, attrName, attrValue, options) {
    var isValueEmpty = !attrValue || /^\s*$/.test(attrValue);
    if (!isValueEmpty) {
      return false;
    }
    if (typeof options.removeEmptyAttributes === "function") {
      return options.removeEmptyAttributes(attrName, tag);
    }
    return tag === "input" && attrName === "value" || reEmptyAttribute.test(attrName);
  };
  var hasAttrName = function(name, attrs) {
    for (var i = attrs.length - 1;i >= 0; i--) {
      if (attrs[i].name === name) {
        return true;
      }
    }
    return false;
  };
  var canRemoveElement = function(tag, attrs) {
    switch (tag) {
      case "textarea":
        return false;
      case "audio":
      case "script":
      case "video":
        if (hasAttrName("src", attrs)) {
          return false;
        }
        break;
      case "iframe":
        if (hasAttrName("src", attrs) || hasAttrName("srcdoc", attrs)) {
          return false;
        }
        break;
      case "object":
        if (hasAttrName("data", attrs)) {
          return false;
        }
        break;
      case "applet":
        if (hasAttrName("code", attrs)) {
          return false;
        }
        break;
    }
    return true;
  };
  var canCollapseWhitespace = function(tag) {
    return !/^(?:script|style|pre|textarea)$/.test(tag);
  };
  var canTrimWhitespace = function(tag) {
    return !/^(?:pre|textarea)$/.test(tag);
  };
  var normalizeAttr = function(attr, attrs, tag, options) {
    var attrName = options.name(attr.name), attrValue = attr.value;
    if (options.decodeEntities && attrValue) {
      attrValue = decode(attrValue, { isAttributeValue: true });
    }
    if (options.removeRedundantAttributes && isAttributeRedundant(tag, attrName, attrValue, attrs) || options.removeScriptTypeAttributes && tag === "script" && attrName === "type" && isScriptTypeAttribute(attrValue) || options.removeStyleLinkTypeAttributes && (tag === "style" || tag === "link") && attrName === "type" && isStyleLinkTypeAttribute(attrValue)) {
      return;
    }
    if (attrValue) {
      attrValue = cleanAttributeValue(tag, attrName, attrValue, options, attrs);
    }
    if (options.removeEmptyAttributes && canDeleteEmptyAttribute(tag, attrName, attrValue, options)) {
      return;
    }
    if (options.decodeEntities && attrValue) {
      attrValue = attrValue.replace(/&(#?[0-9a-zA-Z]+;)/g, "&amp;$1");
    }
    return {
      attr,
      name: attrName,
      value: attrValue
    };
  };
  var buildAttr = function(normalized, hasUnarySlash, options, isLast, uidAttr) {
    var { name: attrName, value: attrValue, attr } = normalized, attrQuote = attr.quote, attrFragment, emittedAttrValue;
    if (typeof attrValue !== "undefined" && (!options.removeAttributeQuotes || ~attrValue.indexOf(uidAttr) || !canRemoveAttributeQuotes(attrValue))) {
      if (!options.preventAttributesEscaping) {
        if (typeof options.quoteCharacter === "undefined") {
          var apos = (attrValue.match(/'/g) || []).length;
          var quot = (attrValue.match(/"/g) || []).length;
          attrQuote = apos < quot ? "\'" : '"';
        } else {
          attrQuote = options.quoteCharacter === "\'" ? "\'" : '"';
        }
        if (attrQuote === '"') {
          attrValue = attrValue.replace(/"/g, "&#34;");
        } else {
          attrValue = attrValue.replace(/'/g, "&#39;");
        }
      }
      emittedAttrValue = attrQuote + attrValue + attrQuote;
      if (!isLast && !options.removeTagWhitespace) {
        emittedAttrValue += " ";
      }
    } else if (isLast && !hasUnarySlash && !/\/$/.test(attrValue)) {
      emittedAttrValue = attrValue;
    } else {
      emittedAttrValue = attrValue + " ";
    }
    if (typeof attrValue === "undefined" || options.collapseBooleanAttributes && isBooleanAttribute(attrName.toLowerCase(), attrValue.toLowerCase())) {
      attrFragment = attrName;
      if (!isLast) {
        attrFragment += " ";
      }
    } else {
      attrFragment = attrName + attr.customAssign + emittedAttrValue;
    }
    return attr.customOpen + attrFragment + attr.customClose;
  };
  var identity = function(value) {
    return value;
  };
  var processOptions = function(values) {
    var options = {
      name: function(name) {
        return name.toLowerCase();
      },
      canCollapseWhitespace,
      canTrimWhitespace,
      html5: true,
      ignoreCustomComments: [/^!/],
      ignoreCustomFragments: [
        /<%[\s\S]*?%>/,
        /<\?[\s\S]*?\?>/
      ],
      includeAutoGeneratedTags: true,
      log: identity,
      minifyCSS: identity,
      minifyJS: identity,
      minifyURLs: identity
    };
    Object.keys(values).forEach(function(key) {
      var value = values[key];
      if (key === "caseSensitive") {
        if (value) {
          options.name = identity;
        }
      } else if (key === "log") {
        if (typeof value === "function") {
          options.log = value;
        }
      } else if (key === "minifyCSS" && typeof value !== "function") {
        if (!value) {
          return;
        }
        if (typeof value !== "object") {
          value = {};
        }
        options.minifyCSS = function(text, type) {
          text = text.replace(/(url\s*\(\s*)("|'|)(.*?)\2(\s*\))/ig, function(match, prefix, quote, url, suffix) {
            return prefix + quote + options.minifyURLs(url) + quote + suffix;
          });
          var cleanCssOutput = new CleanCSS(value).minify(wrapCSS(text, type));
          if (cleanCssOutput.errors.length > 0) {
            cleanCssOutput.errors.forEach(options.log);
            return text;
          }
          return unwrapCSS(cleanCssOutput.styles, type);
        };
      } else if (key === "minifyJS" && typeof value !== "function") {
        if (!value) {
          return;
        }
        if (typeof value !== "object") {
          value = {};
        }
        (value.parse || (value.parse = {})).bare_returns = false;
        options.minifyJS = function(text, inline) {
          var start = text.match(/^\s*<!--.*/);
          var code = start ? text.slice(start[0].length).replace(/\n\s*-->\s*$/, "") : text;
          value.parse.bare_returns = inline;
          var result = UglifyJS.minify(code, value);
          if (result.error) {
            options.log(result.error);
            return text;
          }
          return result.code.replace(/;$/, "");
        };
      } else if (key === "minifyURLs" && typeof value !== "function") {
        if (!value) {
          return;
        }
        if (typeof value === "string") {
          value = { site: value };
        } else if (typeof value !== "object") {
          value = {};
        }
        options.minifyURLs = function(text) {
          try {
            return RelateUrl.relate(text, value);
          } catch (err) {
            options.log(err);
            return text;
          }
        };
      } else {
        options[key] = value;
      }
    });
    return options;
  };
  var uniqueId = function(value) {
    var id;
    do {
      id = Math.random().toString(36).replace(/^0\.[0-9]*/, "");
    } while (~value.indexOf(id));
    return id;
  };
  var createSortFns = function(value, options, uidIgnore, uidAttr) {
    var attrChains = options.sortAttributes && Object.create(null);
    var classChain = options.sortClassName && new TokenChain;
    function attrNames(attrs) {
      return attrs.map(function(attr) {
        return options.name(attr.name);
      });
    }
    function shouldSkipUID(token, uid) {
      return !uid || token.indexOf(uid) === -1;
    }
    function shouldSkipUIDs(token) {
      return shouldSkipUID(token, uidIgnore) && shouldSkipUID(token, uidAttr);
    }
    function scan(input) {
      var currentTag, currentType;
      new HTMLParser(input, {
        start: function(tag2, attrs) {
          if (attrChains) {
            if (!attrChains[tag2]) {
              attrChains[tag2] = new TokenChain;
            }
            attrChains[tag2].add(attrNames(attrs).filter(shouldSkipUIDs));
          }
          for (var i = 0, len = attrs.length;i < len; i++) {
            var attr = attrs[i];
            if (classChain && attr.value && options.name(attr.name) === "class") {
              classChain.add(trimWhitespace(attr.value).split(/[ \t\n\f\r]+/).filter(shouldSkipUIDs));
            } else if (options.processScripts && attr.name.toLowerCase() === "type") {
              currentTag = tag2;
              currentType = attr.value;
            }
          }
        },
        end: function() {
          currentTag = "";
        },
        chars: function(text) {
          if (options.processScripts && specialContentTags(currentTag) && options.processScripts.indexOf(currentType) > -1) {
            scan(text);
          }
        }
      });
    }
    var log = options.log;
    options.log = identity;
    options.sortAttributes = false;
    options.sortClassName = false;
    scan(minify2(value, options));
    options.log = log;
    if (attrChains) {
      var attrSorters = Object.create(null);
      for (var tag in attrChains) {
        attrSorters[tag] = attrChains[tag].createSorter();
      }
      options.sortAttributes = function(tag2, attrs) {
        var sorter2 = attrSorters[tag2];
        if (sorter2) {
          var attrMap = Object.create(null);
          var names = attrNames(attrs);
          names.forEach(function(name, index) {
            (attrMap[name] || (attrMap[name] = [])).push(attrs[index]);
          });
          sorter2.sort(names).forEach(function(name, index) {
            attrs[index] = attrMap[name].shift();
          });
        }
      };
    }
    if (classChain) {
      var sorter = classChain.createSorter();
      options.sortClassName = function(value2) {
        return sorter.sort(value2.split(/[ \n\f\r]+/)).join(" ");
      };
    }
  };
  var minify2 = function(value, options, partialMarkup) {
    if (options.collapseWhitespace) {
      value = collapseWhitespace(value, options, true, true);
    }
    var buffer = [], charsPrevTag, currentChars = "", hasChars, currentTag = "", currentAttrs = [], stackNoTrimWhitespace = [], stackNoCollapseWhitespace = [], optionalStartTag = "", optionalEndTag = "", ignoredMarkupChunks = [], ignoredCustomMarkupChunks = [], uidIgnore, uidAttr, uidPattern;
    value = value.replace(/<!-- htmlmin:ignore -->([\s\S]*?)<!-- htmlmin:ignore -->/g, function(match, group1) {
      if (!uidIgnore) {
        uidIgnore = uniqueId(value);
        var pattern = new RegExp("^" + uidIgnore + "([0-9]+)$");
        if (options.ignoreCustomComments) {
          options.ignoreCustomComments = options.ignoreCustomComments.slice();
        } else {
          options.ignoreCustomComments = [];
        }
        options.ignoreCustomComments.push(pattern);
      }
      var token = "<!--" + uidIgnore + ignoredMarkupChunks.length + "-->";
      ignoredMarkupChunks.push(group1);
      return token;
    });
    var customFragments = options.ignoreCustomFragments.map(function(re) {
      return re.source;
    });
    if (customFragments.length) {
      var reCustomIgnore = new RegExp("\\s*(?:" + customFragments.join("|") + ")+\\s*", "g");
      value = value.replace(reCustomIgnore, function(match) {
        if (!uidAttr) {
          uidAttr = uniqueId(value);
          uidPattern = new RegExp("(\\s*)" + uidAttr + "([0-9]+)" + uidAttr + "(\\s*)", "g");
          if (options.minifyCSS) {
            options.minifyCSS = function(fn) {
              return function(text, type) {
                text = text.replace(uidPattern, function(match2, prefix, index) {
                  var chunks = ignoredCustomMarkupChunks[+index];
                  return chunks[1] + uidAttr + index + uidAttr + chunks[2];
                });
                var ids = [];
                new CleanCSS().minify(wrapCSS(text, type)).warnings.forEach(function(warning) {
                  var match2 = uidPattern.exec(warning);
                  if (match2) {
                    var id = uidAttr + match2[2] + uidAttr;
                    text = text.replace(id, ignoreCSS(id));
                    ids.push(id);
                  }
                });
                text = fn(text, type);
                ids.forEach(function(id) {
                  text = text.replace(ignoreCSS(id), id);
                });
                return text;
              };
            }(options.minifyCSS);
          }
          if (options.minifyJS) {
            options.minifyJS = function(fn) {
              return function(text, type) {
                return fn(text.replace(uidPattern, function(match2, prefix, index) {
                  var chunks = ignoredCustomMarkupChunks[+index];
                  return chunks[1] + uidAttr + index + uidAttr + chunks[2];
                }), type);
              };
            }(options.minifyJS);
          }
        }
        var token = uidAttr + ignoredCustomMarkupChunks.length + uidAttr;
        ignoredCustomMarkupChunks.push(/^(\s*)[\s\S]*?(\s*)$/.exec(match));
        return "\t" + token + "\t";
      });
    }
    if (options.sortAttributes && typeof options.sortAttributes !== "function" || options.sortClassName && typeof options.sortClassName !== "function") {
      createSortFns(value, options, uidIgnore, uidAttr);
    }
    function _canCollapseWhitespace(tag, attrs) {
      return options.canCollapseWhitespace(tag, attrs, canCollapseWhitespace);
    }
    function _canTrimWhitespace(tag, attrs) {
      return options.canTrimWhitespace(tag, attrs, canTrimWhitespace);
    }
    function removeStartTag() {
      var index = buffer.length - 1;
      while (index > 0 && !/^<[^/!]/.test(buffer[index])) {
        index--;
      }
      buffer.length = Math.max(0, index);
    }
    function removeEndTag() {
      var index = buffer.length - 1;
      while (index > 0 && !/^<\//.test(buffer[index])) {
        index--;
      }
      buffer.length = Math.max(0, index);
    }
    function trimTrailingWhitespace(index, nextTag) {
      for (var endTag = null;index >= 0 && _canTrimWhitespace(endTag); index--) {
        var str = buffer[index];
        var match = str.match(/^<\/([\w:-]+)>$/);
        if (match) {
          endTag = match[1];
        } else if (/>$/.test(str) || (buffer[index] = collapseWhitespaceSmart(str, null, nextTag, options))) {
          break;
        }
      }
    }
    function squashTrailingWhitespace(nextTag) {
      var charsIndex = buffer.length - 1;
      if (buffer.length > 1) {
        var item = buffer[buffer.length - 1];
        if (/^(?:<!|$)/.test(item) && item.indexOf(uidIgnore) === -1) {
          charsIndex--;
        }
      }
      trimTrailingWhitespace(charsIndex, nextTag);
    }
    new HTMLParser(value, {
      partialMarkup,
      continueOnParseError: options.continueOnParseError,
      customAttrAssign: options.customAttrAssign,
      customAttrSurround: options.customAttrSurround,
      html5: options.html5,
      start: function(tag, attrs, unary, unarySlash, autoGenerated) {
        if (tag.toLowerCase() === "svg") {
          options = Object.create(options);
          options.caseSensitive = true;
          options.keepClosingSlash = true;
          options.name = identity;
        }
        tag = options.name(tag);
        currentTag = tag;
        charsPrevTag = tag;
        if (!inlineTextTags(tag)) {
          currentChars = "";
        }
        hasChars = false;
        currentAttrs = attrs;
        var optional = options.removeOptionalTags;
        if (optional) {
          var htmlTag = htmlTags(tag);
          if (htmlTag && canRemoveParentTag(optionalStartTag, tag)) {
            removeStartTag();
          }
          optionalStartTag = "";
          if (htmlTag && canRemovePrecedingTag(optionalEndTag, tag)) {
            removeEndTag();
            optional = !isStartTagMandatory(optionalEndTag, tag);
          }
          optionalEndTag = "";
        }
        if (options.collapseWhitespace) {
          if (!stackNoTrimWhitespace.length) {
            squashTrailingWhitespace(tag);
          }
          if (!unary) {
            if (!_canTrimWhitespace(tag, attrs) || stackNoTrimWhitespace.length) {
              stackNoTrimWhitespace.push(tag);
            }
            if (!_canCollapseWhitespace(tag, attrs) || stackNoCollapseWhitespace.length) {
              stackNoCollapseWhitespace.push(tag);
            }
          }
        }
        var openTag = "<" + tag;
        var hasUnarySlash = unarySlash && options.keepClosingSlash;
        buffer.push(openTag);
        if (options.sortAttributes) {
          options.sortAttributes(tag, attrs);
        }
        var parts = [];
        for (var i = attrs.length, isLast = true;--i >= 0; ) {
          var normalized = normalizeAttr(attrs[i], attrs, tag, options);
          if (normalized) {
            parts.unshift(buildAttr(normalized, hasUnarySlash, options, isLast, uidAttr));
            isLast = false;
          }
        }
        if (parts.length > 0) {
          buffer.push(" ");
          buffer.push.apply(buffer, parts);
        } else if (optional && optionalStartTags(tag)) {
          optionalStartTag = tag;
        }
        buffer.push(buffer.pop() + (hasUnarySlash ? "/" : "") + ">");
        if (autoGenerated && !options.includeAutoGeneratedTags) {
          removeStartTag();
          optionalStartTag = "";
        }
      },
      end: function(tag, attrs, autoGenerated) {
        if (tag.toLowerCase() === "svg") {
          options = Object.getPrototypeOf(options);
        }
        tag = options.name(tag);
        if (options.collapseWhitespace) {
          if (stackNoTrimWhitespace.length) {
            if (tag === stackNoTrimWhitespace[stackNoTrimWhitespace.length - 1]) {
              stackNoTrimWhitespace.pop();
            }
          } else {
            squashTrailingWhitespace("/" + tag);
          }
          if (stackNoCollapseWhitespace.length && tag === stackNoCollapseWhitespace[stackNoCollapseWhitespace.length - 1]) {
            stackNoCollapseWhitespace.pop();
          }
        }
        var isElementEmpty = false;
        if (tag === currentTag) {
          currentTag = "";
          isElementEmpty = !hasChars;
        }
        if (options.removeOptionalTags) {
          if (isElementEmpty && topLevelTags(optionalStartTag)) {
            removeStartTag();
          }
          optionalStartTag = "";
          if (htmlTags(tag) && optionalEndTag && !trailingTags(optionalEndTag) && (optionalEndTag !== "p" || !pInlineTags(tag))) {
            removeEndTag();
          }
          optionalEndTag = optionalEndTags(tag) ? tag : "";
        }
        if (options.removeEmptyElements && isElementEmpty && canRemoveElement(tag, attrs)) {
          removeStartTag();
          optionalStartTag = "";
          optionalEndTag = "";
        } else {
          if (autoGenerated && !options.includeAutoGeneratedTags) {
            optionalEndTag = "";
          } else {
            buffer.push("</" + tag + ">");
          }
          charsPrevTag = "/" + tag;
          if (!inlineTags(tag)) {
            currentChars = "";
          } else if (isElementEmpty) {
            currentChars += "|";
          }
        }
      },
      chars: function(text, prevTag, nextTag) {
        prevTag = prevTag === "" ? "comment" : prevTag;
        nextTag = nextTag === "" ? "comment" : nextTag;
        if (options.decodeEntities && text && !specialContentTags(currentTag)) {
          text = decode(text);
        }
        if (options.collapseWhitespace) {
          if (!stackNoTrimWhitespace.length) {
            if (prevTag === "comment") {
              var prevComment = buffer[buffer.length - 1];
              if (prevComment.indexOf(uidIgnore) === -1) {
                if (!prevComment) {
                  prevTag = charsPrevTag;
                }
                if (buffer.length > 1 && (!prevComment || !options.conservativeCollapse && / $/.test(currentChars))) {
                  var charsIndex = buffer.length - 2;
                  buffer[charsIndex] = buffer[charsIndex].replace(/\s+$/, function(trailingSpaces) {
                    text = trailingSpaces + text;
                    return "";
                  });
                }
              }
            }
            if (prevTag) {
              if (prevTag === "/nobr" || prevTag === "wbr") {
                if (/^\s/.test(text)) {
                  var tagIndex = buffer.length - 1;
                  while (tagIndex > 0 && buffer[tagIndex].lastIndexOf("<" + prevTag) !== 0) {
                    tagIndex--;
                  }
                  trimTrailingWhitespace(tagIndex - 1, "br");
                }
              } else if (inlineTextTags(prevTag.charAt(0) === "/" ? prevTag.slice(1) : prevTag)) {
                text = collapseWhitespace(text, options, /(?:^|\s)$/.test(currentChars));
              }
            }
            if (prevTag || nextTag) {
              text = collapseWhitespaceSmart(text, prevTag, nextTag, options);
            } else {
              text = collapseWhitespace(text, options, true, true);
            }
            if (!text && /\s$/.test(currentChars) && prevTag && prevTag.charAt(0) === "/") {
              trimTrailingWhitespace(buffer.length - 1, nextTag);
            }
          }
          if (!stackNoCollapseWhitespace.length && nextTag !== "html" && !(prevTag && nextTag)) {
            text = collapseWhitespace(text, options, false, false, true);
          }
        }
        if (options.processScripts && specialContentTags(currentTag)) {
          text = processScript(text, options, currentAttrs);
        }
        if (isExecutableScript(currentTag, currentAttrs)) {
          text = options.minifyJS(text);
        }
        if (isStyleSheet(currentTag, currentAttrs)) {
          text = options.minifyCSS(text);
        }
        if (options.removeOptionalTags && text) {
          if (optionalStartTag === "html" || optionalStartTag === "body" && !/^\s/.test(text)) {
            removeStartTag();
          }
          optionalStartTag = "";
          if (compactTags(optionalEndTag) || looseTags(optionalEndTag) && !/^\s/.test(text)) {
            removeEndTag();
          }
          optionalEndTag = "";
        }
        charsPrevTag = /^\s*$/.test(text) ? prevTag : "comment";
        if (options.decodeEntities && text && !specialContentTags(currentTag)) {
          text = text.replace(/&((?:Iacute|aacute|uacute|plusmn|Otilde|otilde|agrave|Agrave|Yacute|yacute|Oslash|oslash|atilde|Atilde|brvbar|ccedil|Ccedil|Ograve|curren|divide|eacute|Eacute|ograve|Oacute|egrave|Egrave|Ugrave|frac12|frac14|frac34|ugrave|oacute|iacute|Ntilde|ntilde|Uacute|middot|igrave|Igrave|iquest|Aacute|cedil|laquo|micro|iexcl|Icirc|icirc|acirc|Ucirc|Ecirc|ocirc|Ocirc|ecirc|ucirc|Aring|aring|AElig|aelig|acute|pound|raquo|Acirc|times|THORN|szlig|thorn|COPY|auml|ordf|ordm|Uuml|macr|uuml|Auml|ouml|Ouml|para|nbsp|euml|quot|QUOT|Euml|yuml|cent|sect|copy|sup1|sup2|sup3|iuml|Iuml|ETH|shy|reg|not|yen|amp|AMP|REG|uml|eth|deg|gt|GT|LT|lt)(?!;)|(?:#?[0-9a-zA-Z]+;))/g, "&amp$1").replace(/</g, "&lt;");
        }
        if (uidPattern && options.collapseWhitespace && stackNoTrimWhitespace.length) {
          text = text.replace(uidPattern, function(match, prefix, index) {
            return ignoredCustomMarkupChunks[+index][0];
          });
        }
        currentChars += text;
        if (text) {
          hasChars = true;
        }
        buffer.push(text);
      },
      comment: function(text, nonStandard) {
        var prefix = nonStandard ? "<!" : "<!--";
        var suffix = nonStandard ? ">" : "-->";
        if (isConditionalComment(text)) {
          text = prefix + cleanConditionalComment(text, options) + suffix;
        } else if (options.removeComments) {
          if (isIgnoredComment(text, options)) {
            text = "<!--" + text + "-->";
          } else {
            text = "";
          }
        } else {
          text = prefix + text + suffix;
        }
        if (options.removeOptionalTags && text) {
          optionalStartTag = "";
          optionalEndTag = "";
        }
        buffer.push(text);
      },
      doctype: function(doctype) {
        buffer.push(options.useShortDoctype ? "<!doctype" + (options.removeTagWhitespace ? "" : " ") + "html>" : collapseWhitespaceAll(doctype));
      }
    });
    if (options.removeOptionalTags) {
      if (topLevelTags(optionalStartTag)) {
        removeStartTag();
      }
      if (optionalEndTag && !trailingTags(optionalEndTag)) {
        removeEndTag();
      }
    }
    if (options.collapseWhitespace) {
      squashTrailingWhitespace("br");
    }
    return joinResultSegments(buffer, options, uidPattern ? function(str) {
      return str.replace(uidPattern, function(match, prefix, index, suffix) {
        var chunk = ignoredCustomMarkupChunks[+index][0];
        if (options.collapseWhitespace) {
          if (prefix !== "\t") {
            chunk = prefix + chunk;
          }
          if (suffix !== "\t") {
            chunk += suffix;
          }
          return collapseWhitespace(chunk, {
            preserveLineBreaks: options.preserveLineBreaks,
            conservativeCollapse: !options.trimCustomFragments
          }, /^[ \n\r\t\f]/.test(chunk), /[ \n\r\t\f]$/.test(chunk));
        }
        return chunk;
      });
    } : identity, uidIgnore ? function(str) {
      return str.replace(new RegExp("<!--" + uidIgnore + "([0-9]+)-->", "g"), function(match, index) {
        return ignoredMarkupChunks[+index];
      });
    } : identity);
  };
  var joinResultSegments = function(results, options, restoreCustom, restoreIgnore) {
    var str;
    var maxLineLength = options.maxLineLength;
    if (maxLineLength) {
      var line = "", lines = [];
      while (results.length) {
        var len = line.length;
        var end = results[0].indexOf("\n");
        if (end < 0) {
          line += restoreIgnore(restoreCustom(results.shift()));
        } else {
          line += restoreIgnore(restoreCustom(results[0].slice(0, end)));
          results[0] = results[0].slice(end + 1);
        }
        if (len > 0 && line.length > maxLineLength) {
          lines.push(line.slice(0, len));
          line = line.slice(len);
        } else if (end >= 0) {
          lines.push(line);
          line = "";
        }
      }
      if (line) {
        lines.push(line);
      }
      str = lines.join("\n");
    } else {
      str = restoreIgnore(restoreCustom(results.join("")));
    }
    return options.collapseWhitespace ? collapseWhitespace(str, options, true, true) : str;
  };
  var CleanCSS = require_clean();
  var decode = require_he().decode;
  var HTMLParser = require_htmlparser().HTMLParser;
  var RelateUrl = require_lib();
  var TokenChain = require_tokenchain();
  var UglifyJS = require_node();
  var utils = require_utils();
  var createMapFromString = utils.createMapFromString;
  var inlineTags = createMapFromString("a,abbr,acronym,b,bdi,bdo,big,button,cite,code,del,dfn,em,font,i,ins,kbd,label,mark,math,nobr,object,q,rp,rt,rtc,ruby,s,samp,select,small,span,strike,strong,sub,sup,svg,textarea,time,tt,u,var");
  var inlineTextTags = createMapFromString("a,abbr,acronym,b,big,del,em,font,i,ins,kbd,mark,nobr,rp,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var");
  var selfClosingInlineTags = createMapFromString("comment,img,input,wbr");
  var executableScriptsMimetypes = utils.createMap([
    "text/javascript",
    "text/ecmascript",
    "text/jscript",
    "application/javascript",
    "application/x-javascript",
    "application/ecmascript"
  ]);
  var isSimpleBoolean = createMapFromString("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
  var isBooleanValue = createMapFromString("true,false");
  var srcsetTags = createMapFromString("img,source");
  var optionalStartTags = createMapFromString("html,head,body,colgroup,tbody");
  var optionalEndTags = createMapFromString("html,head,body,li,dt,dd,p,rb,rt,rtc,rp,optgroup,option,colgroup,caption,thead,tbody,tfoot,tr,td,th");
  var headerTags = createMapFromString("meta,link,script,style,template,noscript");
  var descriptionTags = createMapFromString("dt,dd");
  var pBlockTags = createMapFromString("address,article,aside,blockquote,details,div,dl,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,main,menu,nav,ol,p,pre,section,table,ul");
  var pInlineTags = createMapFromString("a,audio,del,ins,map,noscript,video");
  var rubyTags = createMapFromString("rb,rt,rtc,rp");
  var rtcTag = createMapFromString("rb,rtc,rp");
  var optionTag = createMapFromString("option,optgroup");
  var tableContentTags = createMapFromString("tbody,tfoot");
  var tableSectionTags = createMapFromString("thead,tbody,tfoot");
  var cellTags = createMapFromString("td,th");
  var topLevelTags = createMapFromString("html,head,body");
  var compactTags = createMapFromString("html,body");
  var looseTags = createMapFromString("head,colgroup,caption");
  var trailingTags = createMapFromString("dt,thead");
  var htmlTags = createMapFromString("a,abbr,acronym,address,applet,area,article,aside,audio,b,base,basefont,bdi,bdo,bgsound,big,blink,blockquote,body,br,button,canvas,caption,center,cite,code,col,colgroup,command,content,data,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,element,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,image,img,input,ins,isindex,kbd,keygen,label,legend,li,link,listing,main,map,mark,marquee,menu,menuitem,meta,meter,multicol,nav,nobr,noembed,noframes,noscript,object,ol,optgroup,option,output,p,param,picture,plaintext,pre,progress,q,rb,rp,rt,rtc,ruby,s,samp,script,section,select,shadow,small,source,spacer,span,strike,strong,style,sub,summary,sup,table,tbody,td,template,textarea,tfoot,th,thead,time,title,tr,track,tt,u,ul,var,video,wbr,xmp");
  var reEmptyAttribute = new RegExp("^(?:class|id|style|title|lang|dir|on(?:focus|blur|change|click|dblclick|mouse(?:down|up|over|move|out)|key(?:press|down|up)))$");
  var specialContentTags = createMapFromString("script,style");
  exports.minify = function(value, options) {
    var start = Date.now();
    options = processOptions(options || {});
    var result = minify2(value, options);
    options.log("minified in: " + (Date.now() - start) + "ms");
    return result;
  };
});

// node_modules/highlight.js/lib/core.js
var require_core = __commonJS((exports, module) => {
  var deepFreeze = function(obj) {
    if (obj instanceof Map) {
      obj.clear = obj.delete = obj.set = function() {
        throw new Error("map is read-only");
      };
    } else if (obj instanceof Set) {
      obj.add = obj.clear = obj.delete = function() {
        throw new Error("set is read-only");
      };
    }
    Object.freeze(obj);
    Object.getOwnPropertyNames(obj).forEach((name) => {
      const prop = obj[name];
      const type = typeof prop;
      if ((type === "object" || type === "function") && !Object.isFrozen(prop)) {
        deepFreeze(prop);
      }
    });
    return obj;
  };
  var escapeHTML = function(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
  };
  var inherit$1 = function(original, ...objects) {
    const result = Object.create(null);
    for (const key in original) {
      result[key] = original[key];
    }
    objects.forEach(function(obj) {
      for (const key in obj) {
        result[key] = obj[key];
      }
    });
    return result;
  };
  var source = function(re2) {
    if (!re2)
      return null;
    if (typeof re2 === "string")
      return re2;
    return re2.source;
  };
  var lookahead = function(re2) {
    return concat("(?=", re2, ")");
  };
  var anyNumberOfTimes = function(re2) {
    return concat("(?:", re2, ")*");
  };
  var optional = function(re2) {
    return concat("(?:", re2, ")?");
  };
  var concat = function(...args) {
    const joined = args.map((x2) => source(x2)).join("");
    return joined;
  };
  var stripOptionsFromArgs = function(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  };
  var either = function(...args) {
    const opts = stripOptionsFromArgs(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x2) => source(x2)).join("|") + ")";
    return joined;
  };
  var countMatchGroups = function(re2) {
    return new RegExp(re2.toString() + "|").exec("").length - 1;
  };
  var startsWith = function(re2, lexeme) {
    const match2 = re2 && re2.exec(lexeme);
    return match2 && match2.index === 0;
  };
  var _rewriteBackreferences = function(regexps, { joinWith }) {
    let numCaptures = 0;
    return regexps.map((regex6) => {
      numCaptures += 1;
      const offset = numCaptures;
      let re2 = source(regex6);
      let out = "";
      while (re2.length > 0) {
        const match2 = BACKREF_RE.exec(re2);
        if (!match2) {
          out += re2;
          break;
        }
        out += re2.substring(0, match2.index);
        re2 = re2.substring(match2.index + match2[0].length);
        if (match2[0][0] === "\\" && match2[1]) {
          out += "\\" + String(Number(match2[1]) + offset);
        } else {
          out += match2[0];
          if (match2[0] === "(") {
            numCaptures++;
          }
        }
      }
      return out;
    }).map((re2) => `(${re2})`).join(joinWith);
  };
  var skipIfHasPrecedingDot = function(match2, response) {
    const before = match2.input[match2.index - 1];
    if (before === ".") {
      response.ignoreMatch();
    }
  };
  var scopeClassName = function(mode, _parent) {
    if (mode.className !== undefined) {
      mode.scope = mode.className;
      delete mode.className;
    }
  };
  var beginKeywords = function(mode, parent) {
    if (!parent)
      return;
    if (!mode.beginKeywords)
      return;
    mode.begin = "\\b(" + mode.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)";
    mode.__beforeBegin = skipIfHasPrecedingDot;
    mode.keywords = mode.keywords || mode.beginKeywords;
    delete mode.beginKeywords;
    if (mode.relevance === undefined)
      mode.relevance = 0;
  };
  var compileIllegal = function(mode, _parent) {
    if (!Array.isArray(mode.illegal))
      return;
    mode.illegal = either(...mode.illegal);
  };
  var compileMatch = function(mode, _parent) {
    if (!mode.match)
      return;
    if (mode.begin || mode.end)
      throw new Error("begin & end are not supported with match");
    mode.begin = mode.match;
    delete mode.match;
  };
  var compileRelevance = function(mode, _parent) {
    if (mode.relevance === undefined)
      mode.relevance = 1;
  };
  var compileKeywords = function(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
    const compiledKeywords = Object.create(null);
    if (typeof rawKeywords === "string") {
      compileList(scopeName, rawKeywords.split(" "));
    } else if (Array.isArray(rawKeywords)) {
      compileList(scopeName, rawKeywords);
    } else {
      Object.keys(rawKeywords).forEach(function(scopeName2) {
        Object.assign(compiledKeywords, compileKeywords(rawKeywords[scopeName2], caseInsensitive, scopeName2));
      });
    }
    return compiledKeywords;
    function compileList(scopeName2, keywordList) {
      if (caseInsensitive) {
        keywordList = keywordList.map((x2) => x2.toLowerCase());
      }
      keywordList.forEach(function(keyword) {
        const pair = keyword.split("|");
        compiledKeywords[pair[0]] = [scopeName2, scoreForKeyword(pair[0], pair[1])];
      });
    }
  };
  var scoreForKeyword = function(keyword, providedScore) {
    if (providedScore) {
      return Number(providedScore);
    }
    return commonKeyword(keyword) ? 0 : 1;
  };
  var commonKeyword = function(keyword) {
    return COMMON_KEYWORDS.includes(keyword.toLowerCase());
  };
  var remapScopeNames = function(mode, regexes, { key }) {
    let offset = 0;
    const scopeNames = mode[key];
    const emit = {};
    const positions = {};
    for (let i = 1;i <= regexes.length; i++) {
      positions[i + offset] = scopeNames[i];
      emit[i + offset] = true;
      offset += countMatchGroups(regexes[i - 1]);
    }
    mode[key] = positions;
    mode[key]._emit = emit;
    mode[key]._multi = true;
  };
  var beginMultiClass = function(mode) {
    if (!Array.isArray(mode.begin))
      return;
    if (mode.skip || mode.excludeBegin || mode.returnBegin) {
      error2("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
      throw MultiClassError;
    }
    if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
      error2("beginScope must be object");
      throw MultiClassError;
    }
    remapScopeNames(mode, mode.begin, { key: "beginScope" });
    mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
  };
  var endMultiClass = function(mode) {
    if (!Array.isArray(mode.end))
      return;
    if (mode.skip || mode.excludeEnd || mode.returnEnd) {
      error2("skip, excludeEnd, returnEnd not compatible with endScope: {}");
      throw MultiClassError;
    }
    if (typeof mode.endScope !== "object" || mode.endScope === null) {
      error2("endScope must be object");
      throw MultiClassError;
    }
    remapScopeNames(mode, mode.end, { key: "endScope" });
    mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
  };
  var scopeSugar = function(mode) {
    if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
      mode.beginScope = mode.scope;
      delete mode.scope;
    }
  };
  var MultiClass = function(mode) {
    scopeSugar(mode);
    if (typeof mode.beginScope === "string") {
      mode.beginScope = { _wrap: mode.beginScope };
    }
    if (typeof mode.endScope === "string") {
      mode.endScope = { _wrap: mode.endScope };
    }
    beginMultiClass(mode);
    endMultiClass(mode);
  };
  var compileLanguage = function(language) {
    function langRe(value, global2) {
      return new RegExp(source(value), "m" + (language.case_insensitive ? "i" : "") + (language.unicodeRegex ? "u" : "") + (global2 ? "g" : ""));
    }

    class MultiRegex {
      constructor() {
        this.matchIndexes = {};
        this.regexes = [];
        this.matchAt = 1;
        this.position = 0;
      }
      addRule(re2, opts) {
        opts.position = this.position++;
        this.matchIndexes[this.matchAt] = opts;
        this.regexes.push([opts, re2]);
        this.matchAt += countMatchGroups(re2) + 1;
      }
      compile() {
        if (this.regexes.length === 0) {
          this.exec = () => null;
        }
        const terminators = this.regexes.map((el) => el[1]);
        this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: "|" }), true);
        this.lastIndex = 0;
      }
      exec(s2) {
        this.matcherRe.lastIndex = this.lastIndex;
        const match2 = this.matcherRe.exec(s2);
        if (!match2) {
          return null;
        }
        const i = match2.findIndex((el, i2) => i2 > 0 && el !== undefined);
        const matchData = this.matchIndexes[i];
        match2.splice(0, i);
        return Object.assign(match2, matchData);
      }
    }

    class ResumableMultiRegex {
      constructor() {
        this.rules = [];
        this.multiRegexes = [];
        this.count = 0;
        this.lastIndex = 0;
        this.regexIndex = 0;
      }
      getMatcher(index) {
        if (this.multiRegexes[index])
          return this.multiRegexes[index];
        const matcher = new MultiRegex;
        this.rules.slice(index).forEach(([re2, opts]) => matcher.addRule(re2, opts));
        matcher.compile();
        this.multiRegexes[index] = matcher;
        return matcher;
      }
      resumingScanAtSamePosition() {
        return this.regexIndex !== 0;
      }
      considerAll() {
        this.regexIndex = 0;
      }
      addRule(re2, opts) {
        this.rules.push([re2, opts]);
        if (opts.type === "begin")
          this.count++;
      }
      exec(s2) {
        const m4 = this.getMatcher(this.regexIndex);
        m4.lastIndex = this.lastIndex;
        let result = m4.exec(s2);
        if (this.resumingScanAtSamePosition()) {
          if (result && result.index === this.lastIndex)
            ;
          else {
            const m22 = this.getMatcher(0);
            m22.lastIndex = this.lastIndex + 1;
            result = m22.exec(s2);
          }
        }
        if (result) {
          this.regexIndex += result.position + 1;
          if (this.regexIndex === this.count) {
            this.considerAll();
          }
        }
        return result;
      }
    }
    function buildModeRegex(mode) {
      const mm = new ResumableMultiRegex;
      mode.contains.forEach((term) => mm.addRule(term.begin, { rule: term, type: "begin" }));
      if (mode.terminatorEnd) {
        mm.addRule(mode.terminatorEnd, { type: "end" });
      }
      if (mode.illegal) {
        mm.addRule(mode.illegal, { type: "illegal" });
      }
      return mm;
    }
    function compileMode(mode, parent) {
      const cmode = mode;
      if (mode.isCompiled)
        return cmode;
      [
        scopeClassName,
        compileMatch,
        MultiClass,
        beforeMatchExt
      ].forEach((ext) => ext(mode, parent));
      language.compilerExtensions.forEach((ext) => ext(mode, parent));
      mode.__beforeBegin = null;
      [
        beginKeywords,
        compileIllegal,
        compileRelevance
      ].forEach((ext) => ext(mode, parent));
      mode.isCompiled = true;
      let keywordPattern = null;
      if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
        mode.keywords = Object.assign({}, mode.keywords);
        keywordPattern = mode.keywords.$pattern;
        delete mode.keywords.$pattern;
      }
      keywordPattern = keywordPattern || /\w+/;
      if (mode.keywords) {
        mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
      }
      cmode.keywordPatternRe = langRe(keywordPattern, true);
      if (parent) {
        if (!mode.begin)
          mode.begin = /\B|\b/;
        cmode.beginRe = langRe(cmode.begin);
        if (!mode.end && !mode.endsWithParent)
          mode.end = /\B|\b/;
        if (mode.end)
          cmode.endRe = langRe(cmode.end);
        cmode.terminatorEnd = source(cmode.end) || "";
        if (mode.endsWithParent && parent.terminatorEnd) {
          cmode.terminatorEnd += (mode.end ? "|" : "") + parent.terminatorEnd;
        }
      }
      if (mode.illegal)
        cmode.illegalRe = langRe(mode.illegal);
      if (!mode.contains)
        mode.contains = [];
      mode.contains = [].concat(...mode.contains.map(function(c2) {
        return expandOrCloneMode(c2 === "self" ? mode : c2);
      }));
      mode.contains.forEach(function(c2) {
        compileMode(c2, cmode);
      });
      if (mode.starts) {
        compileMode(mode.starts, parent);
      }
      cmode.matcher = buildModeRegex(cmode);
      return cmode;
    }
    if (!language.compilerExtensions)
      language.compilerExtensions = [];
    if (language.contains && language.contains.includes("self")) {
      throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
    }
    language.classNameAliases = inherit$1(language.classNameAliases || {});
    return compileMode(language);
  };
  var dependencyOnParent = function(mode) {
    if (!mode)
      return false;
    return mode.endsWithParent || dependencyOnParent(mode.starts);
  };
  var expandOrCloneMode = function(mode) {
    if (mode.variants && !mode.cachedVariants) {
      mode.cachedVariants = mode.variants.map(function(variant) {
        return inherit$1(mode, { variants: null }, variant);
      });
    }
    if (mode.cachedVariants) {
      return mode.cachedVariants;
    }
    if (dependencyOnParent(mode)) {
      return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
    }
    if (Object.isFrozen(mode)) {
      return inherit$1(mode);
    }
    return mode;
  };

  class Response2 {
    constructor(mode) {
      if (mode.data === undefined)
        mode.data = {};
      this.data = mode.data;
      this.isMatchIgnored = false;
    }
    ignoreMatch() {
      this.isMatchIgnored = true;
    }
  }
  var SPAN_CLOSE = "</span>";
  var emitsWrappingTags = (node) => {
    return !!node.scope;
  };
  var scopeToCSSClass = (name, { prefix }) => {
    if (name.startsWith("language:")) {
      return name.replace("language:", "language-");
    }
    if (name.includes(".")) {
      const pieces = name.split(".");
      return [
        `${prefix}${pieces.shift()}`,
        ...pieces.map((x2, i) => `${x2}${"_".repeat(i + 1)}`)
      ].join(" ");
    }
    return `${prefix}${name}`;
  };

  class HTMLRenderer {
    constructor(parseTree, options) {
      this.buffer = "";
      this.classPrefix = options.classPrefix;
      parseTree.walk(this);
    }
    addText(text3) {
      this.buffer += escapeHTML(text3);
    }
    openNode(node) {
      if (!emitsWrappingTags(node))
        return;
      const className = scopeToCSSClass(node.scope, { prefix: this.classPrefix });
      this.span(className);
    }
    closeNode(node) {
      if (!emitsWrappingTags(node))
        return;
      this.buffer += SPAN_CLOSE;
    }
    value() {
      return this.buffer;
    }
    span(className) {
      this.buffer += `<span class="${className}">`;
    }
  }
  var newNode = (opts = {}) => {
    const result = { children: [] };
    Object.assign(result, opts);
    return result;
  };

  class TokenTree {
    constructor() {
      this.rootNode = newNode();
      this.stack = [this.rootNode];
    }
    get top() {
      return this.stack[this.stack.length - 1];
    }
    get root() {
      return this.rootNode;
    }
    add(node) {
      this.top.children.push(node);
    }
    openNode(scope) {
      const node = newNode({ scope });
      this.add(node);
      this.stack.push(node);
    }
    closeNode() {
      if (this.stack.length > 1) {
        return this.stack.pop();
      }
      return;
    }
    closeAllNodes() {
      while (this.closeNode())
        ;
    }
    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }
    walk(builder) {
      return this.constructor._walk(builder, this.rootNode);
    }
    static _walk(builder, node) {
      if (typeof node === "string") {
        builder.addText(node);
      } else if (node.children) {
        builder.openNode(node);
        node.children.forEach((child) => this._walk(builder, child));
        builder.closeNode(node);
      }
      return builder;
    }
    static _collapse(node) {
      if (typeof node === "string")
        return;
      if (!node.children)
        return;
      if (node.children.every((el) => typeof el === "string")) {
        node.children = [node.children.join("")];
      } else {
        node.children.forEach((child) => {
          TokenTree._collapse(child);
        });
      }
    }
  }

  class TokenTreeEmitter extends TokenTree {
    constructor(options) {
      super();
      this.options = options;
    }
    addText(text3) {
      if (text3 === "") {
        return;
      }
      this.add(text3);
    }
    startScope(scope) {
      this.openNode(scope);
    }
    endScope() {
      this.closeNode();
    }
    __addSublanguage(emitter, name) {
      const node = emitter.root;
      if (name)
        node.scope = `language:${name}`;
      this.add(node);
    }
    toHTML() {
      const renderer2 = new HTMLRenderer(this, this.options);
      return renderer2.value();
    }
    finalize() {
      this.closeAllNodes();
      return true;
    }
  }
  var BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
  var MATCH_NOTHING_RE = /\b\B/;
  var IDENT_RE = "[a-zA-Z]\\w*";
  var UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
  var NUMBER_RE = "\\b\\d+(\\.\\d+)?";
  var C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
  var BINARY_NUMBER_RE = "\\b(0b[01]+)";
  var RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
  var SHEBANG = (opts = {}) => {
    const beginShebang = /^#![ ]*\//;
    if (opts.binary) {
      opts.begin = concat(beginShebang, /.*\b/, opts.binary, /\b.*/);
    }
    return inherit$1({
      scope: "meta",
      begin: beginShebang,
      end: /$/,
      relevance: 0,
      "on:begin": (m4, resp) => {
        if (m4.index !== 0)
          resp.ignoreMatch();
      }
    }, opts);
  };
  var BACKSLASH_ESCAPE = {
    begin: "\\\\[\\s\\S]",
    relevance: 0
  };
  var APOS_STRING_MODE = {
    scope: "string",
    begin: "\'",
    end: "\'",
    illegal: "\\n",
    contains: [BACKSLASH_ESCAPE]
  };
  var QUOTE_STRING_MODE = {
    scope: "string",
    begin: '"',
    end: '"',
    illegal: "\\n",
    contains: [BACKSLASH_ESCAPE]
  };
  var PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  };
  var COMMENT = function(begin, end, modeOptions = {}) {
    const mode = inherit$1({
      scope: "comment",
      begin,
      end,
      contains: []
    }, modeOptions);
    mode.contains.push({
      scope: "doctag",
      begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: true,
      relevance: 0
    });
    const ENGLISH_WORD = either("I", "a", "is", "so", "us", "to", "at", "if", "in", "it", "on", /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/);
    mode.contains.push({
      begin: concat(/[ ]+/, "(", ENGLISH_WORD, /[.]?[:]?([.][ ]|[ ])/, "){3}")
    });
    return mode;
  };
  var C_LINE_COMMENT_MODE = COMMENT("//", "$");
  var C_BLOCK_COMMENT_MODE = COMMENT("/\\*", "\\*/");
  var HASH_COMMENT_MODE = COMMENT("#", "$");
  var NUMBER_MODE = {
    scope: "number",
    begin: NUMBER_RE,
    relevance: 0
  };
  var C_NUMBER_MODE = {
    scope: "number",
    begin: C_NUMBER_RE,
    relevance: 0
  };
  var BINARY_NUMBER_MODE = {
    scope: "number",
    begin: BINARY_NUMBER_RE,
    relevance: 0
  };
  var REGEXP_MODE = {
    scope: "regexp",
    begin: /\/(?=[^/\n]*\/)/,
    end: /\/[gimuy]*/,
    contains: [
      BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [BACKSLASH_ESCAPE]
      }
    ]
  };
  var TITLE_MODE = {
    scope: "title",
    begin: IDENT_RE,
    relevance: 0
  };
  var UNDERSCORE_TITLE_MODE = {
    scope: "title",
    begin: UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  var METHOD_GUARD = {
    begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  var END_SAME_AS_BEGIN = function(mode) {
    return Object.assign(mode, {
      "on:begin": (m4, resp) => {
        resp.data._beginMatch = m4[1];
      },
      "on:end": (m4, resp) => {
        if (resp.data._beginMatch !== m4[1])
          resp.ignoreMatch();
      }
    });
  };
  var MODES = Object.freeze({
    __proto__: null,
    APOS_STRING_MODE,
    BACKSLASH_ESCAPE,
    BINARY_NUMBER_MODE,
    BINARY_NUMBER_RE,
    COMMENT,
    C_BLOCK_COMMENT_MODE,
    C_LINE_COMMENT_MODE,
    C_NUMBER_MODE,
    C_NUMBER_RE,
    END_SAME_AS_BEGIN,
    HASH_COMMENT_MODE,
    IDENT_RE,
    MATCH_NOTHING_RE,
    METHOD_GUARD,
    NUMBER_MODE,
    NUMBER_RE,
    PHRASAL_WORDS_MODE,
    QUOTE_STRING_MODE,
    REGEXP_MODE,
    RE_STARTERS_RE,
    SHEBANG,
    TITLE_MODE,
    UNDERSCORE_IDENT_RE,
    UNDERSCORE_TITLE_MODE
  });
  var beforeMatchExt = (mode, parent) => {
    if (!mode.beforeMatch)
      return;
    if (mode.starts)
      throw new Error("beforeMatch cannot be used with starts");
    const originalMode = Object.assign({}, mode);
    Object.keys(mode).forEach((key) => {
      delete mode[key];
    });
    mode.keywords = originalMode.keywords;
    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
    mode.starts = {
      relevance: 0,
      contains: [
        Object.assign(originalMode, { endsParent: true })
      ]
    };
    mode.relevance = 0;
    delete originalMode.beforeMatch;
  };
  var COMMON_KEYWORDS = [
    "of",
    "and",
    "for",
    "in",
    "not",
    "or",
    "if",
    "then",
    "parent",
    "list",
    "value"
  ];
  var DEFAULT_KEYWORD_SCOPE = "keyword";
  var seenDeprecations = {};
  var error2 = (message) => {
    console.error(message);
  };
  var warn = (message, ...args) => {
    console.log(`WARN: ${message}`, ...args);
  };
  var deprecated = (version2, message) => {
    if (seenDeprecations[`${version2}/${message}`])
      return;
    console.log(`Deprecated as of ${version2}. ${message}`);
    seenDeprecations[`${version2}/${message}`] = true;
  };
  var MultiClassError = new Error;
  var version = "11.9.0";

  class HTMLInjectionError extends Error {
    constructor(reason, html) {
      super(reason);
      this.name = "HTMLInjectionError";
      this.html = html;
    }
  }
  var escape4 = escapeHTML;
  var inherit = inherit$1;
  var NO_MATCH = Symbol("nomatch");
  var MAX_KEYWORD_HITS = 7;
  var HLJS = function(hljs) {
    const languages = Object.create(null);
    const aliases = Object.create(null);
    const plugins = [];
    let SAFE_MODE = true;
    const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
    const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: "Plain text", contains: [] };
    let options = {
      ignoreUnescapedHTML: false,
      throwUnescapedHTML: false,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: "hljs-",
      cssSelector: "pre code",
      languages: null,
      __emitter: TokenTreeEmitter
    };
    function shouldNotHighlight(languageName) {
      return options.noHighlightRe.test(languageName);
    }
    function blockLanguage(block3) {
      let classes = block3.className + " ";
      classes += block3.parentNode ? block3.parentNode.className : "";
      const match2 = options.languageDetectRe.exec(classes);
      if (match2) {
        const language = getLanguage(match2[1]);
        if (!language) {
          warn(LANGUAGE_NOT_FOUND.replace("{}", match2[1]));
          warn("Falling back to no-highlight mode for this block.", block3);
        }
        return language ? match2[1] : "no-highlight";
      }
      return classes.split(/\s+/).find((_class3) => shouldNotHighlight(_class3) || getLanguage(_class3));
    }
    function highlight2(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
      let code3 = "";
      let languageName = "";
      if (typeof optionsOrCode === "object") {
        code3 = codeOrLanguageName;
        ignoreIllegals = optionsOrCode.ignoreIllegals;
        languageName = optionsOrCode.language;
      } else {
        deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
        deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
        languageName = codeOrLanguageName;
        code3 = optionsOrCode;
      }
      if (ignoreIllegals === undefined) {
        ignoreIllegals = true;
      }
      const context = {
        code: code3,
        language: languageName
      };
      fire("before:highlight", context);
      const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);
      result.code = context.code;
      fire("after:highlight", result);
      return result;
    }
    function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
      const keywordHits = Object.create(null);
      function keywordData(mode, matchText) {
        return mode.keywords[matchText];
      }
      function processKeywords() {
        if (!top.keywords) {
          emitter.addText(modeBuffer);
          return;
        }
        let lastIndex = 0;
        top.keywordPatternRe.lastIndex = 0;
        let match2 = top.keywordPatternRe.exec(modeBuffer);
        let buf = "";
        while (match2) {
          buf += modeBuffer.substring(lastIndex, match2.index);
          const word = language.case_insensitive ? match2[0].toLowerCase() : match2[0];
          const data = keywordData(top, word);
          if (data) {
            const [kind, keywordRelevance] = data;
            emitter.addText(buf);
            buf = "";
            keywordHits[word] = (keywordHits[word] || 0) + 1;
            if (keywordHits[word] <= MAX_KEYWORD_HITS)
              relevance += keywordRelevance;
            if (kind.startsWith("_")) {
              buf += match2[0];
            } else {
              const cssClass = language.classNameAliases[kind] || kind;
              emitKeyword(match2[0], cssClass);
            }
          } else {
            buf += match2[0];
          }
          lastIndex = top.keywordPatternRe.lastIndex;
          match2 = top.keywordPatternRe.exec(modeBuffer);
        }
        buf += modeBuffer.substring(lastIndex);
        emitter.addText(buf);
      }
      function processSubLanguage() {
        if (modeBuffer === "")
          return;
        let result2 = null;
        if (typeof top.subLanguage === "string") {
          if (!languages[top.subLanguage]) {
            emitter.addText(modeBuffer);
            return;
          }
          result2 = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
          continuations[top.subLanguage] = result2._top;
        } else {
          result2 = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
        }
        if (top.relevance > 0) {
          relevance += result2.relevance;
        }
        emitter.__addSublanguage(result2._emitter, result2.language);
      }
      function processBuffer() {
        if (top.subLanguage != null) {
          processSubLanguage();
        } else {
          processKeywords();
        }
        modeBuffer = "";
      }
      function emitKeyword(keyword, scope) {
        if (keyword === "")
          return;
        emitter.startScope(scope);
        emitter.addText(keyword);
        emitter.endScope();
      }
      function emitMultiClass(scope, match2) {
        let i = 1;
        const max = match2.length - 1;
        while (i <= max) {
          if (!scope._emit[i]) {
            i++;
            continue;
          }
          const klass = language.classNameAliases[scope[i]] || scope[i];
          const text3 = match2[i];
          if (klass) {
            emitKeyword(text3, klass);
          } else {
            modeBuffer = text3;
            processKeywords();
            modeBuffer = "";
          }
          i++;
        }
      }
      function startNewMode(mode, match2) {
        if (mode.scope && typeof mode.scope === "string") {
          emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
        }
        if (mode.beginScope) {
          if (mode.beginScope._wrap) {
            emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
            modeBuffer = "";
          } else if (mode.beginScope._multi) {
            emitMultiClass(mode.beginScope, match2);
            modeBuffer = "";
          }
        }
        top = Object.create(mode, { parent: { value: top } });
        return top;
      }
      function endOfMode(mode, match2, matchPlusRemainder) {
        let matched = startsWith(mode.endRe, matchPlusRemainder);
        if (matched) {
          if (mode["on:end"]) {
            const resp = new Response2(mode);
            mode["on:end"](match2, resp);
            if (resp.isMatchIgnored)
              matched = false;
          }
          if (matched) {
            while (mode.endsParent && mode.parent) {
              mode = mode.parent;
            }
            return mode;
          }
        }
        if (mode.endsWithParent) {
          return endOfMode(mode.parent, match2, matchPlusRemainder);
        }
      }
      function doIgnore(lexeme) {
        if (top.matcher.regexIndex === 0) {
          modeBuffer += lexeme[0];
          return 1;
        } else {
          resumeScanAtSamePosition = true;
          return 0;
        }
      }
      function doBeginMatch(match2) {
        const lexeme = match2[0];
        const newMode = match2.rule;
        const resp = new Response2(newMode);
        const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
        for (const cb of beforeCallbacks) {
          if (!cb)
            continue;
          cb(match2, resp);
          if (resp.isMatchIgnored)
            return doIgnore(lexeme);
        }
        if (newMode.skip) {
          modeBuffer += lexeme;
        } else {
          if (newMode.excludeBegin) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (!newMode.returnBegin && !newMode.excludeBegin) {
            modeBuffer = lexeme;
          }
        }
        startNewMode(newMode, match2);
        return newMode.returnBegin ? 0 : lexeme.length;
      }
      function doEndMatch(match2) {
        const lexeme = match2[0];
        const matchPlusRemainder = codeToHighlight.substring(match2.index);
        const endMode = endOfMode(top, match2, matchPlusRemainder);
        if (!endMode) {
          return NO_MATCH;
        }
        const origin = top;
        if (top.endScope && top.endScope._wrap) {
          processBuffer();
          emitKeyword(lexeme, top.endScope._wrap);
        } else if (top.endScope && top.endScope._multi) {
          processBuffer();
          emitMultiClass(top.endScope, match2);
        } else if (origin.skip) {
          modeBuffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            modeBuffer = lexeme;
          }
        }
        do {
          if (top.scope) {
            emitter.closeNode();
          }
          if (!top.skip && !top.subLanguage) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== endMode.parent);
        if (endMode.starts) {
          startNewMode(endMode.starts, match2);
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }
      function processContinuations() {
        const list3 = [];
        for (let current = top;current !== language; current = current.parent) {
          if (current.scope) {
            list3.unshift(current.scope);
          }
        }
        list3.forEach((item) => emitter.openNode(item));
      }
      let lastMatch = {};
      function processLexeme(textBeforeMatch, match2) {
        const lexeme = match2 && match2[0];
        modeBuffer += textBeforeMatch;
        if (lexeme == null) {
          processBuffer();
          return 0;
        }
        if (lastMatch.type === "begin" && match2.type === "end" && lastMatch.index === match2.index && lexeme === "") {
          modeBuffer += codeToHighlight.slice(match2.index, match2.index + 1);
          if (!SAFE_MODE) {
            const err = new Error(`0 width match regex (${languageName})`);
            err.languageName = languageName;
            err.badRule = lastMatch.rule;
            throw err;
          }
          return 1;
        }
        lastMatch = match2;
        if (match2.type === "begin") {
          return doBeginMatch(match2);
        } else if (match2.type === "illegal" && !ignoreIllegals) {
          const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || "<unnamed>") + '"');
          err.mode = top;
          throw err;
        } else if (match2.type === "end") {
          const processed = doEndMatch(match2);
          if (processed !== NO_MATCH) {
            return processed;
          }
        }
        if (match2.type === "illegal" && lexeme === "") {
          return 1;
        }
        if (iterations > 1e5 && iterations > match2.index * 3) {
          const err = new Error("potential infinite loop, way more iterations than matches");
          throw err;
        }
        modeBuffer += lexeme;
        return lexeme.length;
      }
      const language = getLanguage(languageName);
      if (!language) {
        error2(LANGUAGE_NOT_FOUND.replace("{}", languageName));
        throw new Error('Unknown language: "' + languageName + '"');
      }
      const md = compileLanguage(language);
      let result = "";
      let top = continuation || md;
      const continuations = {};
      const emitter = new options.__emitter(options);
      processContinuations();
      let modeBuffer = "";
      let relevance = 0;
      let index = 0;
      let iterations = 0;
      let resumeScanAtSamePosition = false;
      try {
        if (!language.__emitTokens) {
          top.matcher.considerAll();
          for (;; ) {
            iterations++;
            if (resumeScanAtSamePosition) {
              resumeScanAtSamePosition = false;
            } else {
              top.matcher.considerAll();
            }
            top.matcher.lastIndex = index;
            const match2 = top.matcher.exec(codeToHighlight);
            if (!match2)
              break;
            const beforeMatch = codeToHighlight.substring(index, match2.index);
            const processedCount = processLexeme(beforeMatch, match2);
            index = match2.index + processedCount;
          }
          processLexeme(codeToHighlight.substring(index));
        } else {
          language.__emitTokens(codeToHighlight, emitter);
        }
        emitter.finalize();
        result = emitter.toHTML();
        return {
          language: languageName,
          value: result,
          relevance,
          illegal: false,
          _emitter: emitter,
          _top: top
        };
      } catch (err) {
        if (err.message && err.message.includes("Illegal")) {
          return {
            language: languageName,
            value: escape4(codeToHighlight),
            illegal: true,
            relevance: 0,
            _illegalBy: {
              message: err.message,
              index,
              context: codeToHighlight.slice(index - 100, index + 100),
              mode: err.mode,
              resultSoFar: result
            },
            _emitter: emitter
          };
        } else if (SAFE_MODE) {
          return {
            language: languageName,
            value: escape4(codeToHighlight),
            illegal: false,
            relevance: 0,
            errorRaised: err,
            _emitter: emitter,
            _top: top
          };
        } else {
          throw err;
        }
      }
    }
    function justTextHighlightResult(code3) {
      const result = {
        value: escape4(code3),
        illegal: false,
        relevance: 0,
        _top: PLAINTEXT_LANGUAGE,
        _emitter: new options.__emitter(options)
      };
      result._emitter.addText(code3);
      return result;
    }
    function highlightAuto(code3, languageSubset) {
      languageSubset = languageSubset || options.languages || Object.keys(languages);
      const plaintext = justTextHighlightResult(code3);
      const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name) => _highlight(name, code3, false));
      results.unshift(plaintext);
      const sorted = results.sort((a2, b5) => {
        if (a2.relevance !== b5.relevance)
          return b5.relevance - a2.relevance;
        if (a2.language && b5.language) {
          if (getLanguage(a2.language).supersetOf === b5.language) {
            return 1;
          } else if (getLanguage(b5.language).supersetOf === a2.language) {
            return -1;
          }
        }
        return 0;
      });
      const [best, secondBest] = sorted;
      const result = best;
      result.secondBest = secondBest;
      return result;
    }
    function updateClassName(element, currentLang, resultLang) {
      const language = currentLang && aliases[currentLang] || resultLang;
      element.classList.add("hljs");
      element.classList.add(`language-${language}`);
    }
    function highlightElement(element) {
      let node = null;
      const language = blockLanguage(element);
      if (shouldNotHighlight(language))
        return;
      fire("before:highlightElement", { el: element, language });
      if (element.dataset.highlighted) {
        console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", element);
        return;
      }
      if (element.children.length > 0) {
        if (!options.ignoreUnescapedHTML) {
          console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
          console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
          console.warn("The element with unescaped HTML:");
          console.warn(element);
        }
        if (options.throwUnescapedHTML) {
          const err = new HTMLInjectionError("One of your code blocks includes unescaped HTML.", element.innerHTML);
          throw err;
        }
      }
      node = element;
      const text3 = node.textContent;
      const result = language ? highlight2(text3, { language, ignoreIllegals: true }) : highlightAuto(text3);
      element.innerHTML = result.value;
      element.dataset.highlighted = "yes";
      updateClassName(element, language, result.language);
      element.result = {
        language: result.language,
        re: result.relevance,
        relevance: result.relevance
      };
      if (result.secondBest) {
        element.secondBest = {
          language: result.secondBest.language,
          relevance: result.secondBest.relevance
        };
      }
      fire("after:highlightElement", { el: element, result, text: text3 });
    }
    function configure(userOptions) {
      options = inherit(options, userOptions);
    }
    const initHighlighting = () => {
      highlightAll();
      deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
    };
    function initHighlightingOnLoad() {
      highlightAll();
      deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
    }
    let wantsHighlight = false;
    function highlightAll() {
      if (document.readyState === "loading") {
        wantsHighlight = true;
        return;
      }
      const blocks = document.querySelectorAll(options.cssSelector);
      blocks.forEach(highlightElement);
    }
    function boot() {
      if (wantsHighlight)
        highlightAll();
    }
    if (typeof window !== "undefined" && window.addEventListener) {
      window.addEventListener("DOMContentLoaded", boot, false);
    }
    function registerLanguage(languageName, languageDefinition) {
      let lang = null;
      try {
        lang = languageDefinition(hljs);
      } catch (error$1) {
        error2("Language definition for '{}' could not be registered.".replace("{}", languageName));
        if (!SAFE_MODE) {
          throw error$1;
        } else {
          error2(error$1);
        }
        lang = PLAINTEXT_LANGUAGE;
      }
      if (!lang.name)
        lang.name = languageName;
      languages[languageName] = lang;
      lang.rawDefinition = languageDefinition.bind(null, hljs);
      if (lang.aliases) {
        registerAliases(lang.aliases, { languageName });
      }
    }
    function unregisterLanguage(languageName) {
      delete languages[languageName];
      for (const alias of Object.keys(aliases)) {
        if (aliases[alias] === languageName) {
          delete aliases[alias];
        }
      }
    }
    function listLanguages() {
      return Object.keys(languages);
    }
    function getLanguage(name) {
      name = (name || "").toLowerCase();
      return languages[name] || languages[aliases[name]];
    }
    function registerAliases(aliasList, { languageName }) {
      if (typeof aliasList === "string") {
        aliasList = [aliasList];
      }
      aliasList.forEach((alias) => {
        aliases[alias.toLowerCase()] = languageName;
      });
    }
    function autoDetection(name) {
      const lang = getLanguage(name);
      return lang && !lang.disableAutodetect;
    }
    function upgradePluginAPI(plugin) {
      if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
        plugin["before:highlightElement"] = (data) => {
          plugin["before:highlightBlock"](Object.assign({ block: data.el }, data));
        };
      }
      if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
        plugin["after:highlightElement"] = (data) => {
          plugin["after:highlightBlock"](Object.assign({ block: data.el }, data));
        };
      }
    }
    function addPlugin(plugin) {
      upgradePluginAPI(plugin);
      plugins.push(plugin);
    }
    function removePlugin(plugin) {
      const index = plugins.indexOf(plugin);
      if (index !== -1) {
        plugins.splice(index, 1);
      }
    }
    function fire(event, args) {
      const cb = event;
      plugins.forEach(function(plugin) {
        if (plugin[cb]) {
          plugin[cb](args);
        }
      });
    }
    function deprecateHighlightBlock(el) {
      deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
      deprecated("10.7.0", "Please use highlightElement now.");
      return highlightElement(el);
    }
    Object.assign(hljs, {
      highlight: highlight2,
      highlightAuto,
      highlightAll,
      highlightElement,
      highlightBlock: deprecateHighlightBlock,
      configure,
      initHighlighting,
      initHighlightingOnLoad,
      registerLanguage,
      unregisterLanguage,
      listLanguages,
      getLanguage,
      registerAliases,
      autoDetection,
      inherit,
      addPlugin,
      removePlugin
    });
    hljs.debugMode = function() {
      SAFE_MODE = false;
    };
    hljs.safeMode = function() {
      SAFE_MODE = true;
    };
    hljs.versionString = version;
    hljs.regex = {
      concat,
      lookahead,
      either,
      optional,
      anyNumberOfTimes
    };
    for (const key in MODES) {
      if (typeof MODES[key] === "object") {
        deepFreeze(MODES[key]);
      }
    }
    Object.assign(hljs, MODES);
    return hljs;
  };
  var highlight = HLJS({});
  highlight.newInstance = () => HLJS({});
  module.exports = highlight;
  highlight.HighlightJS = highlight;
  highlight.default = highlight;
});

// node_modules/highlight.js/lib/languages/1c.js
var require_1c = __commonJS((exports, module) => {
  var _1c = function(hljs) {
    const UNDERSCORE_IDENT_RE = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]+";
    const v7_keywords = "\u0434\u0430\u043B\u0435\u0435 ";
    const v8_keywords = "\u0432\u043E\u0437\u0432\u0440\u0430\u0442 \u0432\u044B\u0437\u0432\u0430\u0442\u044C\u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0434\u043B\u044F \u0435\u0441\u043B\u0438 \u0438 \u0438\u0437 \u0438\u043B\u0438 \u0438\u043D\u0430\u0447\u0435 \u0438\u043D\u0430\u0447\u0435\u0435\u0441\u043B\u0438 \u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u043A\u043E\u043D\u0435\u0446\u0435\u0441\u043B\u0438 " + "\u043A\u043E\u043D\u0435\u0446\u043F\u043E\u043F\u044B\u0442\u043A\u0438 \u043A\u043E\u043D\u0435\u0446\u0446\u0438\u043A\u043B\u0430 \u043D\u0435 \u043D\u043E\u0432\u044B\u0439 \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u043F\u0435\u0440\u0435\u043C \u043F\u043E \u043F\u043E\u043A\u0430 \u043F\u043E\u043F\u044B\u0442\u043A\u0430 \u043F\u0440\u0435\u0440\u0432\u0430\u0442\u044C \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C \u0442\u043E\u0433\u0434\u0430 \u0446\u0438\u043A\u043B \u044D\u043A\u0441\u043F\u043E\u0440\u0442 ";
    const KEYWORD = v7_keywords + v8_keywords;
    const v7_meta_keywords = "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0438\u0437\u0444\u0430\u0439\u043B\u0430 ";
    const v8_meta_keywords = "\u0432\u0435\u0431\u043A\u043B\u0438\u0435\u043D\u0442 \u0432\u043C\u0435\u0441\u0442\u043E \u0432\u043D\u0435\u0448\u043D\u0435\u0435\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043A\u043B\u0438\u0435\u043D\u0442 \u043A\u043E\u043D\u0435\u0446\u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043B\u0438\u0435\u043D\u0442 \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u0435\u0440\u0432\u0435\u0440 " + "\u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435 \u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435\u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435\u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435\u0431\u0435\u0437\u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430 \u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435\u0431\u0435\u0437\u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u043F\u0435\u0440\u0435\u0434 " + "\u043F\u043E\u0441\u043B\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u043E\u043B\u0441\u0442\u044B\u0439\u043A\u043B\u0438\u0435\u043D\u0442\u043E\u0431\u044B\u0447\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\u043B\u0441\u0442\u044B\u0439\u043A\u043B\u0438\u0435\u043D\u0442\u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\u043D\u043A\u0438\u0439\u043A\u043B\u0438\u0435\u043D\u0442 ";
    const METAKEYWORD = v7_meta_keywords + v8_meta_keywords;
    const v7_system_constants = "\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0440\u0430\u043D\u0438\u0446 \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0440\u043E\u043A \u0441\u0438\u043C\u0432\u043E\u043B\u0442\u0430\u0431\u0443\u043B\u044F\u0446\u0438\u0438 ";
    const v7_global_context_methods = "ansitooem oemtoansi \u0432\u0432\u0435\u0441\u0442\u0438\u0432\u0438\u0434\u0441\u0443\u0431\u043A\u043E\u043D\u0442\u043E \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0435 \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u0435\u0440\u0438\u043E\u0434 \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 " + "\u0434\u0430\u0442\u0430\u0433\u043E\u0434 \u0434\u0430\u0442\u0430\u043C\u0435\u0441\u044F\u0446 \u0434\u0430\u0442\u0430\u0447\u0438\u0441\u043B\u043E \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0441\u0442\u0440\u043E\u043A\u0443 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0441\u0442\u0440\u043E\u043A\u0438 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0438\u0431 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F " + "\u043A\u043E\u0434\u0441\u0438\u043C\u0432 \u043A\u043E\u043D\u0433\u043E\u0434\u0430 \u043A\u043E\u043D\u0435\u0446\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043A\u043E\u043D\u0435\u0446\u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043A\u043E\u043D\u0435\u0446\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 \u043A\u043E\u043D\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043A\u043E\u043D\u043C\u0435\u0441\u044F\u0446\u0430 " + "\u043A\u043E\u043D\u043D\u0435\u0434\u0435\u043B\u0438 \u043B\u043E\u0433 \u043B\u043E\u043310 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E\u0441\u0443\u0431\u043A\u043E\u043D\u0442\u043E \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u043D\u0430\u0431\u043E\u0440\u0430\u043F\u0440\u0430\u0432 \u043D\u0430\u0437\u043D\u0430\u0447\u0438\u0442\u044C\u0432\u0438\u0434 " + "\u043D\u0430\u0437\u043D\u0430\u0447\u0438\u0442\u044C\u0441\u0447\u0435\u0442 \u043D\u0430\u0439\u0442\u0438\u0441\u0441\u044B\u043B\u043A\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 \u043D\u0430\u0447\u0433\u043E\u0434\u0430 \u043D\u0430\u0447\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043D\u0430\u0447\u043C\u0435\u0441\u044F\u0446\u0430 " + "\u043D\u0430\u0447\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u043E\u043C\u0435\u0440\u0434\u043D\u044F\u0433\u043E\u0434\u0430 \u043D\u043E\u043C\u0435\u0440\u0434\u043D\u044F\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u043E\u043C\u0435\u0440\u043D\u0435\u0434\u0435\u043B\u0438\u0433\u043E\u0434\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0430\u0441\u0447\u0435\u0442\u043E\u0432 " + "\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u044F\u0437\u044B\u043A \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u043E\u043A\u043D\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434\u0441\u0442\u0440 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u0430\u0442\u0443\u0442\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0443\u0441\u0442\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0442\u0430 " + "\u043F\u0440\u0435\u0444\u0438\u043A\u0441\u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u0438 \u043F\u0440\u043E\u043F\u0438\u0441\u044C \u043F\u0443\u0441\u0442\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0440\u0430\u0437\u043C \u0440\u0430\u0437\u043E\u0431\u0440\u0430\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043D\u0430 " + "\u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043F\u043E \u0441\u0438\u043C\u0432 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442 \u0441\u0442\u0430\u0442\u0443\u0441\u0432\u043E\u0437\u0432\u0440\u0430\u0442\u0430 \u0441\u0442\u0440\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E\u0441\u0442\u0440\u043E\u043A \u0441\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 " + "\u0441\u0447\u0435\u0442\u043F\u043E\u043A\u043E\u0434\u0443 \u0442\u0435\u043A\u0443\u0449\u0435\u0435\u0432\u0440\u0435\u043C\u044F \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0441\u0442\u0440 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0442\u0430\u043D\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0442\u0430\u043F\u043E \u0444\u0438\u043A\u0441\u0448\u0430\u0431\u043B\u043E\u043D \u0448\u0430\u0431\u043B\u043E\u043D ";
    const v8_global_context_methods = "acos asin atan base64\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 base64\u0441\u0442\u0440\u043E\u043A\u0430 cos exp log log10 pow sin sqrt tan xml\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 xml\u0441\u0442\u0440\u043E\u043A\u0430 " + "xml\u0442\u0438\u043F xml\u0442\u0438\u043F\u0437\u043D\u0447 \u0430\u043A\u0442\u0438\u0432\u043D\u043E\u0435\u043E\u043A\u043D\u043E \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0443\u043B\u0435\u0432\u043E \u0432\u0432\u0435\u0441\u0442\u0438\u0434\u0430\u0442\u0443 \u0432\u0432\u0435\u0441\u0442\u0438\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 " + "\u0432\u0432\u0435\u0441\u0442\u0438\u0441\u0442\u0440\u043E\u043A\u0443 \u0432\u0432\u0435\u0441\u0442\u0438\u0447\u0438\u0441\u043B\u043E \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C\u0447\u0442\u0435\u043D\u0438\u044Fxml \u0432\u043E\u043F\u0440\u043E\u0441 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432\u0440\u0435\u0433 \u0432\u044B\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0443\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u043F\u0440\u0430\u0432\u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u0432\u044B\u0447\u0438\u0441\u043B\u0438\u0442\u044C \u0433\u043E\u0434 \u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B\u0432\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0434\u0430\u0442\u0430 \u0434\u0435\u043D\u044C \u0434\u0435\u043D\u044C\u0433\u043E\u0434\u0430 " + "\u0434\u0435\u043D\u044C\u043D\u0435\u0434\u0435\u043B\u0438 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C\u043C\u0435\u0441\u044F\u0446 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0434\u043B\u044F\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u0441\u0438\u0441\u0442\u0435\u043C\u044B " + "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 \u0437\u0430\u043A\u0440\u044B\u0442\u044C\u0441\u043F\u0440\u0430\u0432\u043A\u0443 \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044Cjson \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044Cxml \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044C\u0434\u0430\u0442\u0443json \u0437\u0430\u043F\u0438\u0441\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0441\u0432\u043E\u0439\u0441\u0442\u0432 \u0437\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C\u0441\u0438\u0441\u0442\u0435\u043C\u0443 \u0437\u0430\u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E " + "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0441\u0442\u0440\u043E\u043A\u0443\u0432\u043D\u0443\u0442\u0440 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0444\u0430\u0439\u043B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0441\u0442\u0440\u043E\u043A\u0438\u0432\u043D\u0443\u0442\u0440 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0444\u0430\u0439\u043B\u0430 " + "\u0438\u0437xml\u0442\u0438\u043F\u0430 \u0438\u043C\u043F\u043E\u0440\u0442\u043C\u043E\u0434\u0435\u043B\u0438xdto \u0438\u043C\u044F\u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u0430 \u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435\u0434\u0430\u043D\u043D\u044B\u0435 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u043E\u0431\u043E\u0448\u0438\u0431\u043A\u0435 " + "\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0438\u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0433\u043E\u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445\u0444\u0430\u0439\u043B\u043E\u0432 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 " + "\u043A\u043E\u0434\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043A\u043E\u0434\u0441\u0438\u043C\u0432\u043E\u043B\u0430 \u043A\u043E\u043C\u0430\u043D\u0434\u0430\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043A\u043E\u043D\u0435\u0446\u0433\u043E\u0434\u0430 \u043A\u043E\u043D\u0435\u0446\u0434\u043D\u044F \u043A\u043E\u043D\u0435\u0446\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043A\u043E\u043D\u0435\u0446\u043C\u0435\u0441\u044F\u0446\u0430 \u043A\u043E\u043D\u0435\u0446\u043C\u0438\u043D\u0443\u0442\u044B " + "\u043A\u043E\u043D\u0435\u0446\u043D\u0435\u0434\u0435\u043B\u0438 \u043A\u043E\u043D\u0435\u0446\u0447\u0430\u0441\u0430 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0430\u0434\u0438\u043D\u0430\u043C\u0438\u0447\u0435\u0441\u043A\u0438 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0430 \u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B " + "\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0444\u0430\u0439\u043B \u043A\u0440\u0430\u0442\u043A\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 \u043B\u0435\u0432 \u043C\u0430\u043A\u0441 \u043C\u0435\u0441\u0442\u043D\u043E\u0435\u0432\u0440\u0435\u043C\u044F \u043C\u0435\u0441\u044F\u0446 \u043C\u0438\u043D \u043C\u0438\u043D\u0443\u0442\u0430 \u043C\u043E\u043D\u043E\u043F\u043E\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u043D\u0430\u0439\u0442\u0438 " + "\u043D\u0430\u0439\u0442\u0438\u043D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u044Bxml \u043D\u0430\u0439\u0442\u0438\u043E\u043A\u043D\u043E\u043F\u043E\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0441\u0441\u044B\u043B\u043A\u0435 \u043D\u0430\u0439\u0442\u0438\u043F\u043E\u043C\u0435\u0447\u0435\u043D\u043D\u044B\u0435\u043D\u0430\u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u043D\u0430\u0439\u0442\u0438\u043F\u043E\u0441\u0441\u044B\u043B\u043A\u0430\u043C \u043D\u0430\u0439\u0442\u0438\u0444\u0430\u0439\u043B\u044B " + "\u043D\u0430\u0447\u0430\u043B\u043E\u0433\u043E\u0434\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u0434\u043D\u044F \u043D\u0430\u0447\u0430\u043B\u043E\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u043C\u0435\u0441\u044F\u0446\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0447\u0430\u043B\u043E\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u0447\u0430\u0441\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u0437\u0430\u043F\u0440\u043E\u0441\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F " + "\u043D\u0430\u0447\u0430\u0442\u044C\u0437\u0430\u043F\u0443\u0441\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043D\u0430\u0447\u0430\u0442\u044C\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u0435\u0440\u0435\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B " + "\u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0438\u0441\u043A\u0444\u0430\u0439\u043B\u043E\u0432 " + "\u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0447\u0435\u0433\u043E\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F " + "\u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u0437\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430 " + "\u043D\u0430\u0447\u0430\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 " + "\u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043D\u0435\u0434\u0435\u043B\u044F\u0433\u043E\u0434\u0430 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E\u0441\u0442\u044C\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u043D\u043E\u043C\u0435\u0440\u0441\u0435\u0430\u043D\u0441\u0430\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B " + "\u043D\u043E\u043C\u0435\u0440\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043D\u0440\u0435\u0433 \u043D\u0441\u0442\u0440 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u044E\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u044B\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F " + "\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043F\u0440\u0435\u0440\u044B\u0432\u0430\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043E\u043A\u0440 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 \u043E\u043F\u043E\u0432\u0435\u0441\u0442\u0438\u0442\u044C \u043E\u043F\u043E\u0432\u0435\u0441\u0442\u0438\u0442\u044C\u043E\u0431\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438 " + "\u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F " + "\u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0438\u043D\u0434\u0435\u043A\u0441\u0441\u043F\u0440\u0430\u0432\u043A\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0441\u043E\u0434\u0435\u0440\u0436\u0430\u043D\u0438\u0435\u0441\u043F\u0440\u0430\u0432\u043A\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0441\u043F\u0440\u0430\u0432\u043A\u0443 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0444\u043E\u0440\u043C\u0443 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0444\u043E\u0440\u043C\u0443\u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E " + "\u043E\u0442\u043C\u0435\u043D\u0438\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0434\u043E\u0441\u0442\u0443\u043F\u0430 " + "\u043F\u0435\u0440\u0435\u0439\u0442\u0438\u043F\u043E\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0441\u0441\u044B\u043B\u043A\u0435 \u043F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 " + "\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F " + "\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 " + "\u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0434\u0430\u0442\u044B \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0441\u0442\u0440\u043E\u043A\u0438 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0447\u0438\u0441\u043B\u0430 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u043E\u043F\u0440\u043E\u0441 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 " + "\u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E\u043E\u0431\u043E\u0448\u0438\u0431\u043A\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043D\u0430\u043A\u0430\u0440\u0442\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u043D\u043E\u0435\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044Ccom\u043E\u0431\u044A\u0435\u043A\u0442 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044Cxml\u0442\u0438\u043F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0430\u0434\u0440\u0435\u0441\u043F\u043E\u043C\u0435\u0441\u0442\u043E\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u044E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0443\u0441\u0435\u0430\u043D\u0441\u043E\u0432 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043F\u044F\u0449\u0435\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0441\u044B\u043F\u0430\u043D\u0438\u044F\u043F\u0430\u0441\u0441\u0438\u0432\u043D\u043E\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0432\u044B\u0431\u043E\u0440\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u043A\u043E\u0434\u044B\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0447\u0430\u0441\u043E\u0432\u044B\u0435\u043F\u043E\u044F\u0441\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0437\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043C\u044F\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0444\u0430\u0439\u043B\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043C\u044F\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E\u044D\u043A\u0440\u0430\u043D\u043E\u0432\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043A\u0440\u0430\u0442\u043A\u0438\u0439\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u043A\u0435\u0442\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0435\u0441\u0442\u043E\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0430\u0434\u0440\u0435\u0441\u0443 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u0443\u044E\u0434\u043B\u0438\u043D\u0443\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u0443\u044E\u0441\u0441\u044B\u043B\u043A\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u0443\u044E\u0441\u0441\u044B\u043B\u043A\u0443\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u0449\u0438\u0439\u043C\u0430\u043A\u0435\u0442 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u0449\u0443\u044E\u0444\u043E\u0440\u043C\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u043A\u043D\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0443\u044E\u043E\u0442\u043C\u0435\u0442\u043A\u0443\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0433\u043E\u0440\u0435\u0436\u0438\u043C\u0430 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445\u043E\u043F\u0446\u0438\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u043E\u043B\u043D\u043E\u0435\u0438\u043C\u044F\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0445\u0441\u0441\u044B\u043B\u043E\u043A \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u0438\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0435\u0430\u043D\u0441\u044B\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043A\u043E\u0440\u043E\u0441\u0442\u044C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044E " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0438\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430odata \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0443\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0441\u0435\u0430\u043D\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u043E\u0440\u043C\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u0443\u044E\u043E\u043F\u0446\u0438\u044E " + "\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u0443\u044E\u043E\u043F\u0446\u0438\u044E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438\u043E\u0441 \u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0432\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0435\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 " + "\u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043F\u0440\u0430\u0432 \u043F\u0440\u0430\u0432\u043E\u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043A\u043E\u0434\u0430\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0438\u043E\u0434\u0430 " + "\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0430\u0432\u0430 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0447\u0430\u0441\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u044F\u0441\u0430 \u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435 " + "\u043F\u0440\u0435\u043A\u0440\u0430\u0442\u0438\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043F\u0440\u0438\u0432\u0438\u043B\u0435\u0433\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C\u0432\u044B\u0437\u043E\u0432 \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044Cjson \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044Cxml \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044C\u0434\u0430\u0442\u0443json \u043F\u0443\u0441\u0442\u0430\u044F\u0441\u0442\u0440\u043E\u043A\u0430 " + "\u0440\u0430\u0431\u043E\u0447\u0438\u0439\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0440\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0434\u043B\u044F\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u0440\u0430\u0437\u043E\u0440\u0432\u0430\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0441\u0432\u043D\u0435\u0448\u043D\u0438\u043C\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u043C\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0430\u0441\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 \u0440\u043E\u043B\u044C\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0430 \u0441\u0438\u0433\u043D\u0430\u043B \u0441\u0438\u043C\u0432\u043E\u043B \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u043B\u0435\u0442\u043D\u0435\u0433\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u0438 " + "\u0441\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C\u0431\u0443\u0444\u0435\u0440\u044B\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u043A\u0430\u0442\u0430\u043B\u043E\u0433 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u0444\u0430\u0431\u0440\u0438\u043A\u0443xdto \u0441\u043E\u043A\u0440\u043B \u0441\u043E\u043A\u0440\u043B\u043F \u0441\u043E\u043A\u0440\u043F \u0441\u043E\u043E\u0431\u0449\u0438\u0442\u044C " + "\u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0441\u0440\u0435\u0434 \u0441\u0442\u0440\u0434\u043B\u0438\u043D\u0430 \u0441\u0442\u0440\u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F\u043D\u0430 \u0441\u0442\u0440\u0437\u0430\u043C\u0435\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u043D\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F\u0441 " + "\u0441\u0442\u0440\u043E\u043A\u0430 \u0441\u0442\u0440\u043E\u043A\u0430\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0441\u0442\u0440\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 \u0441\u0442\u0440\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u044C \u0441\u0442\u0440\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u0441\u0440\u0430\u0432\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u0447\u0438\u0441\u043B\u043E\u0432\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u0439 " + "\u0441\u0442\u0440\u0447\u0438\u0441\u043B\u043E\u0441\u0442\u0440\u043E\u043A \u0441\u0442\u0440\u0448\u0430\u0431\u043B\u043E\u043D \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0434\u0430\u0442\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0434\u0430\u0442\u0430\u0441\u0435\u0430\u043D\u0441\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F\u0434\u0430\u0442\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F\u0434\u0430\u0442\u0430\u0432\u043C\u0438\u043B\u043B\u0438\u0441\u0435\u043A\u0443\u043D\u0434\u0430\u0445 " + "\u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u0448\u0440\u0438\u0444\u0442\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u043A\u043E\u0434\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 " + "\u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u044F\u0437\u044B\u043A \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u044F\u0437\u044B\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0442\u0438\u043F \u0442\u0438\u043F\u0437\u043D\u0447 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F\u0430\u043A\u0442\u0438\u0432\u043D\u0430 \u0442\u0440\u0435\u0433 \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B " + "\u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0438\u0437\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442\u044B \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u043E\u0435\u0432\u0440\u0435\u043C\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0443\u0441\u0435\u0430\u043D\u0441\u043E\u0432 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043F\u044F\u0449\u0435\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0441\u044B\u043F\u0430\u043D\u0438\u044F\u043F\u0430\u0441\u0441\u0438\u0432\u043D\u043E\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043A\u0440\u0430\u0442\u043A\u0438\u0439\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u0443\u044E\u0434\u043B\u0438\u043D\u0443\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043C\u043E\u043D\u043E\u043F\u043E\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0433\u043E\u0440\u0435\u0436\u0438\u043C\u0430 " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445\u043E\u043F\u0446\u0438\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0440\u0438\u0432\u0438\u043B\u0435\u0433\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u0438\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0441\u0432\u043D\u0435\u0448\u043D\u0438\u043C\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u043C\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0438\u0444\u043E\u0440\u043C\u044B " + "\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430odata \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0441\u0435\u0430\u043D\u0441\u0430 " + "\u0444\u043E\u0440\u043C\u0430\u0442 \u0446\u0435\u043B \u0447\u0430\u0441 \u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441 \u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0441\u0435\u0430\u043D\u0441\u0430 \u0447\u0438\u0441\u043B\u043E \u0447\u0438\u0441\u043B\u043E\u043F\u0440\u043E\u043F\u0438\u0441\u044C\u044E \u044D\u0442\u043E\u0430\u0434\u0440\u0435\u0441\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 ";
    const v8_global_context_property = "ws\u0441\u0441\u044B\u043B\u043A\u0438 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043C\u0430\u043A\u0435\u0442\u043E\u0432\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u0441\u0442\u0438\u043B\u0435\u0439 \u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u044B " + "\u0432\u043D\u0435\u0448\u043D\u0438\u0435\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u043D\u0435\u0448\u043D\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0432\u043D\u0435\u0448\u043D\u0438\u0435\u043E\u0442\u0447\u0435\u0442\u044B \u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0435\u043F\u043E\u043A\u0443\u043F\u043A\u0438 \u0433\u043B\u0430\u0432\u043D\u044B\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0433\u043B\u0430\u0432\u043D\u044B\u0439\u0441\u0442\u0438\u043B\u044C " + "\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u044B \u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0435\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u0436\u0443\u0440\u043D\u0430\u043B\u044B\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u043E\u0431\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0447\u0435\u0439\u0434\u0430\u0442\u044B " + "\u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u044B \u043A\u0440\u0438\u0442\u0435\u0440\u0438\u0438\u043E\u0442\u0431\u043E\u0440\u0430 \u043C\u0435\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0435 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u043A\u043B\u0430\u043C\u044B \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0430\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0445\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 " + "\u043E\u0442\u0447\u0435\u0442\u044B \u043F\u0430\u043D\u0435\u043B\u044C\u0437\u0430\u0434\u0430\u0447\u043E\u0441 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0441\u0435\u0430\u043D\u0441\u0430 \u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u044F \u043F\u043B\u0430\u043D\u044B\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043F\u043B\u0430\u043D\u044B\u0432\u0438\u0434\u043E\u0432\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A " + "\u043F\u043B\u0430\u043D\u044B\u043E\u0431\u043C\u0435\u043D\u0430 \u043F\u043B\u0430\u043D\u044B\u0441\u0447\u0435\u0442\u043E\u0432 \u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u043F\u043E\u0438\u0441\u043A \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0445\u043F\u043E\u043A\u0443\u043F\u043E\u043A " + "\u0440\u0430\u0431\u043E\u0447\u0430\u044F\u0434\u0430\u0442\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0441\u0432\u0435\u0434\u0435\u043D\u0438\u0439 " + "\u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u044B\u0435\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440xdto \u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0433\u0435\u043E\u043F\u043E\u0437\u0438\u0446\u0438\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043C\u0443\u043B\u044C\u0442\u0438\u043C\u0435\u0434\u0438\u0430 " + "\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0440\u0435\u043A\u043B\u0430\u043C\u044B \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043F\u043E\u0447\u0442\u044B \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0438\u0438 \u0444\u0430\u0431\u0440\u0438\u043A\u0430xdto \u0444\u0430\u0439\u043B\u043E\u0432\u044B\u0435\u043F\u043E\u0442\u043E\u043A\u0438 \u0444\u043E\u043D\u043E\u0432\u044B\u0435\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A " + "\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432\u043E\u0442\u0447\u0435\u0442\u043E\u0432 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043E\u0431\u0449\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u0434\u0438\u043D\u0430\u043C\u0438\u0447\u0435\u0441\u043A\u0438\u0445\u0441\u043F\u0438\u0441\u043A\u043E\u0432 " + "\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043E\u0442\u0447\u0435\u0442\u043E\u0432 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0441\u0438\u0441\u0442\u0435\u043C\u043D\u044B\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A ";
    const BUILTIN = v7_system_constants + v7_global_context_methods + v8_global_context_methods + v8_global_context_property;
    const v8_system_sets_of_values = "web\u0446\u0432\u0435\u0442\u0430 windows\u0446\u0432\u0435\u0442\u0430 windows\u0448\u0440\u0438\u0444\u0442\u044B \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u0440\u0430\u043C\u043A\u0438\u0441\u0442\u0438\u043B\u044F \u0441\u0438\u043C\u0432\u043E\u043B\u044B \u0446\u0432\u0435\u0442\u0430\u0441\u0442\u0438\u043B\u044F \u0448\u0440\u0438\u0444\u0442\u044B\u0441\u0442\u0438\u043B\u044F ";
    const v8_system_enums_interface = "\u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435\u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C\u044B\u0432\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445 \u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u044F\u0432\u0444\u043E\u0440\u043C\u0435 \u0430\u0432\u0442\u043E\u0440\u0430\u0437\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0435\u0441\u0435\u0440\u0438\u0439 " + "\u0430\u043D\u0438\u043C\u0430\u0446\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0432\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0438\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u043E\u0432 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0432\u044B\u0441\u043E\u0442\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B " + "\u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u0430\u044F\u043F\u0440\u043E\u043A\u0440\u0443\u0442\u043A\u0430\u0444\u043E\u0440\u043C\u044B \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 \u0432\u0438\u0434\u0433\u0440\u0443\u043F\u043F\u044B\u0444\u043E\u0440\u043C\u044B " + "\u0432\u0438\u0434\u0434\u0435\u043A\u043E\u0440\u0430\u0446\u0438\u0438\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u0438\u0434\u043A\u043D\u043E\u043F\u043A\u0438\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0430\u0442\u0435\u043B\u044F " + "\u0432\u0438\u0434\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 \u0432\u0438\u0434\u043F\u043E\u043B\u044F\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0444\u043B\u0430\u0436\u043A\u0430 \u0432\u043B\u0438\u044F\u043D\u0438\u0435\u0440\u0430\u0437\u043C\u0435\u0440\u0430\u043D\u0430\u043F\u0443\u0437\u044B\u0440\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 " + "\u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 \u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0430\u043A\u043E\u043B\u043E\u043D\u043E\u043A \u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0430\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0444\u043E\u0440\u043C\u044B " + "\u0433\u0440\u0443\u043F\u043F\u044B\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043F\u0435\u0440\u0435\u0442\u0430\u0441\u043A\u0438\u0432\u0430\u043D\u0438\u044F \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F\u043F\u0435\u0440\u0435\u0442\u0430\u0441\u043A\u0438\u0432\u0430\u043D\u0438\u044F " + "\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u043C\u0435\u0436\u0434\u0443\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043C\u0438\u0444\u043E\u0440\u043C\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0432\u044B\u0432\u043E\u0434\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u043B\u043E\u0441\u044B\u043F\u0440\u043E\u043A\u0440\u0443\u0442\u043A\u0438 " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0442\u043E\u0447\u043A\u0438\u0431\u0438\u0440\u0436\u0435\u0432\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0432\u044B\u0431\u043E\u0440\u0430\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043E\u0441\u0438\u0442\u043E\u0447\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0440\u0430\u0437\u043C\u0435\u0440\u0430\u043F\u0443\u0437\u044B\u0440\u044C\u043A\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u044B\u043A\u043E\u043C\u0430\u043D\u0434 \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C\u0441\u0435\u0440\u0438\u0439 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0435\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0434\u0435\u0440\u0435\u0432\u0430 " + "\u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0435\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0441\u043F\u0438\u0441\u043A\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u043C\u0435\u0442\u043E\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u043C\u0435\u0442\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u043B\u0435\u0433\u0435\u043D\u0434\u0435\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u043A\u043D\u043E\u043F\u043E\u043A \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0438\u0437\u043C\u0435\u0440\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043D\u043E\u043F\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043D\u043E\u043F\u043A\u0438\u0432\u044B\u0431\u043E\u0440\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0431\u0441\u0443\u0436\u0434\u0435\u043D\u0438\u0439\u0444\u043E\u0440\u043C\u044B " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043F\u0443\u0437\u044B\u0440\u044C\u043A\u043E\u0432\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0430\u043D\u0435\u043B\u0438\u043F\u043E\u0438\u0441\u043A\u0430 " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u044F\u043F\u0440\u0438\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0440\u0430\u0437\u043C\u0435\u0442\u043A\u0438\u043F\u043E\u043B\u043E\u0441\u044B\u0440\u0435\u0433\u0443\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0444\u043E\u0440\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0444\u0438\u0433\u0443\u0440\u044B\u043A\u043D\u043E\u043F\u043A\u0438 \u043F\u0430\u043B\u0438\u0442\u0440\u0430\u0446\u0432\u0435\u0442\u043E\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B " + "\u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u043F\u043E\u0438\u0441\u043A\u0432\u0442\u0430\u0431\u043B\u0438\u0446\u0435\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438\u043A\u043D\u043E\u043F\u043A\u0438\u0444\u043E\u0440\u043C\u044B " + "\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u0430\u043D\u0434\u043D\u043E\u0439\u043F\u0430\u043D\u0435\u043B\u0438\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u0430\u043D\u0434\u043D\u043E\u0439\u043F\u0430\u043D\u0435\u043B\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B " + "\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043E\u043F\u043E\u0440\u043D\u043E\u0439\u0442\u043E\u0447\u043A\u0438\u043E\u0442\u0440\u0438\u0441\u043E\u0432\u043A\u0438 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u0448\u043A\u0430\u043B\u044B\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0438\u0437\u043C\u0435\u0440\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u0442\u0440\u043E\u043A\u0438\u043F\u043E\u0438\u0441\u043A\u0430 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u043B\u0438\u043D\u0438\u0438 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u043E\u0438\u0441\u043A\u043E\u043C " + "\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u043A\u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0439\u0433\u0438\u0441\u0442\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u0441\u0435\u0440\u0438\u0439\u0432\u043B\u0435\u0433\u0435\u043D\u0434\u0435\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0440\u0430\u0437\u043C\u0435\u0440\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0430\u0441\u0442\u044F\u0433\u0438\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 " + "\u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0432\u0432\u043E\u0434\u0430\u0441\u0442\u0440\u043E\u043A\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0431\u043E\u0440\u0430\u043D\u0435\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0433\u043E \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u0442\u044B " + "\u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0441\u0442\u0440\u043E\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0437\u043C\u0435\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0441\u0432\u044F\u0437\u0430\u043D\u043D\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F " + "\u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u043F\u0435\u0447\u0430\u0442\u0438 \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u043A\u043E\u043C\u0430\u043D\u0434\u044B \u0440\u0435\u0436\u0438\u043C\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 " + "\u0440\u0435\u0436\u0438\u043C\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u043E\u043A\u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u043E\u043A\u043D\u0430\u0444\u043E\u0440\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F " + "\u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0441\u0435\u0440\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u0440\u0438\u0441\u043E\u0432\u043A\u0438\u0441\u0435\u0442\u043A\u0438\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B " + "\u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u0443\u043F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u043E\u0441\u0442\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0431\u0435\u043B\u043E\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0440\u0435\u0436\u0438\u043C\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043A\u043E\u043B\u043E\u043D\u043A\u0438 " + "\u0440\u0435\u0436\u0438\u043C\u0441\u0433\u043B\u0430\u0436\u0438\u0432\u0430\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u0441\u0433\u043B\u0430\u0436\u0438\u0432\u0430\u043D\u0438\u044F\u0438\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0441\u043F\u0438\u0441\u043A\u0430\u0437\u0430\u0434\u0430\u0447 \u0441\u043A\u0432\u043E\u0437\u043D\u043E\u0435\u0432\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u0435 " + "\u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C\u044B\u0432\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445 \u0441\u043F\u043E\u0441\u043E\u0431\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0441\u043F\u043E\u0441\u043E\u0431\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0438\u0432\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F\u0433\u0440\u0443\u043F\u043F\u0430\u043A\u043E\u043C\u0430\u043D\u0434 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0435\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u0435 " + "\u0441\u0442\u0430\u0442\u0443\u0441\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0441\u0442\u0438\u043B\u044C\u0441\u0442\u0440\u0435\u043B\u043A\u0438 \u0442\u0438\u043F\u0430\u043F\u043F\u0440\u043E\u043A\u0441\u0438\u043C\u0430\u0446\u0438\u0438\u043B\u0438\u043D\u0438\u0438\u0442\u0440\u0435\u043D\u0434\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0442\u0438\u043F\u0435\u0434\u0438\u043D\u0438\u0446\u044B\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0442\u0438\u043F\u0438\u043C\u043F\u043E\u0440\u0442\u0430\u0441\u0435\u0440\u0438\u0439\u0441\u043B\u043E\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0442\u0438\u043F\u043C\u0430\u0440\u043A\u0435\u0440\u0430\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043C\u0430\u0440\u043A\u0435\u0440\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F " + "\u0442\u0438\u043F\u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0438\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0441\u0435\u0440\u0438\u0438\u0441\u043B\u043E\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B " + "\u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u0447\u043D\u043E\u0433\u043E\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0448\u043A\u0430\u043B\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043B\u0435\u0433\u0435\u043D\u0434\u044B\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B " + "\u0442\u0438\u043F\u043F\u043E\u0438\u0441\u043A\u0430\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043F\u0440\u043E\u0435\u043A\u0446\u0438\u0438\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439 " + "\u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u043E\u0432\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u0440\u0430\u043C\u043A\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0442\u0438\u043F\u0441\u0432\u044F\u0437\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043F\u043E\u0441\u0435\u0440\u0438\u044F\u043C\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u043B\u0438\u043D\u0438\u0438 \u0442\u0438\u043F\u0441\u0442\u043E\u0440\u043E\u043D\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u0444\u043E\u0440\u043C\u044B\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0448\u043A\u0430\u043B\u044B\u0440\u0430\u0434\u0430\u0440\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B " + "\u0444\u0430\u043A\u0442\u043E\u0440\u043B\u0438\u043D\u0438\u0438\u0442\u0440\u0435\u043D\u0434\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0444\u0438\u0433\u0443\u0440\u0430\u043A\u043D\u043E\u043F\u043A\u0438 \u0444\u0438\u0433\u0443\u0440\u044B\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0444\u0438\u043A\u0441\u0430\u0446\u0438\u044F\u0432\u0442\u0430\u0431\u043B\u0438\u0446\u0435 \u0444\u043E\u0440\u043C\u0430\u0442\u0434\u043D\u044F\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 " + "\u0444\u043E\u0440\u043C\u0430\u0442\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0448\u0438\u0440\u0438\u043D\u0430\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0444\u043E\u0440\u043C\u044B ";
    const v8_system_enums_objects_properties = "\u0432\u0438\u0434\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0438\u0438 \u0432\u0438\u0434\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0432\u0438\u0434\u0441\u0447\u0435\u0442\u0430 \u0432\u0438\u0434\u0442\u043E\u0447\u043A\u0438\u043C\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0435\u0436\u0438\u043C\u0430\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u0440\u0435\u0437\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u0432\u0440\u0435\u043C\u044F \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0438\u0441\u0438\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 ";
    const v8_system_enums_exchange_plans = "\u0430\u0432\u0442\u043E\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044F\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439\u043D\u043E\u043C\u0435\u0440\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0430\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445 ";
    const v8_system_enums_tabular_document = "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u043A\u043E\u043B\u043E\u043D\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B " + "\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u0441\u0442\u0440\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u043E\u0442\u043D\u043E\u0441\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 " + "\u0441\u043F\u043E\u0441\u043E\u0431\u0447\u0442\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0434\u0432\u0443\u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0435\u0439\u043F\u0435\u0447\u0430\u0442\u0438 \u0442\u0438\u043F\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 " + "\u0442\u0438\u043F\u043A\u0443\u0440\u0441\u043E\u0440\u043E\u0432\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0440\u0438\u0441\u0443\u043D\u043A\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u044F\u0447\u0435\u0439\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 " + "\u0442\u0438\u043F\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043B\u0438\u043D\u0438\u0439\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B " + "\u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0440\u0438\u0441\u0443\u043D\u043A\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0441\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 " + "\u0442\u0438\u043F\u0443\u0437\u043E\u0440\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0444\u0430\u0439\u043B\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u043E\u0447\u043D\u043E\u0441\u0442\u044C\u043F\u0435\u0447\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u044F\u0441\u0442\u0440\u0430\u043D\u0438\u0446 ";
    const v8_system_enums_sheduler = "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u0440\u0435\u043C\u0435\u043D\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0449\u0438\u043A\u0430 ";
    const v8_system_enums_formatted_document = "\u0442\u0438\u043F\u0444\u0430\u0439\u043B\u0430\u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 ";
    const v8_system_enums_query = "\u043E\u0431\u0445\u043E\u0434\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0437\u0430\u043F\u0438\u0441\u0438\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
    const v8_system_enums_report_builder = "\u0432\u0438\u0434\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0438\u0442\u043E\u0433\u043E\u0432 ";
    const v8_system_enums_files = "\u0434\u043E\u0441\u0442\u0443\u043F\u043A\u0444\u0430\u0439\u043B\u0443 \u0440\u0435\u0436\u0438\u043C\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u0432\u044B\u0431\u043E\u0440\u0430\u0444\u0430\u0439\u043B\u0430 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0444\u0430\u0439\u043B\u0430 ";
    const v8_system_enums_query_builder = "\u0442\u0438\u043F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
    const v8_system_enums_data_analysis = "\u0432\u0438\u0434\u0434\u0430\u043D\u043D\u044B\u0445\u0430\u043D\u0430\u043B\u0438\u0437\u0430 \u043C\u0435\u0442\u043E\u0434\u043A\u043B\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0438\u043F\u0435\u0434\u0438\u043D\u0438\u0446\u044B\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430\u0432\u0440\u0435\u043C\u0435\u043D\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0447\u0438\u0441\u043B\u043E\u0432\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u0430\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u0434\u0435\u0440\u0435\u0432\u043E\u0440\u0435\u0448\u0435\u043D\u0438\u0439 " + "\u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043A\u043B\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044F \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0430\u044F\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0430 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0439 " + "\u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u043C\u043E\u0434\u0435\u043B\u0438\u043F\u0440\u043E\u0433\u043D\u043E\u0437\u0430 \u0442\u0438\u043F\u043C\u0435\u0440\u044B\u0440\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u044F\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u043E\u0442\u0441\u0435\u0447\u0435\u043D\u0438\u044F\u043F\u0440\u0430\u0432\u0438\u043B\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0438 \u0442\u0438\u043F\u043F\u043E\u043B\u044F\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0438\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u0430\u0432\u0438\u043B\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0438\u0432\u0430\u043D\u0438\u044F\u0448\u0430\u0431\u043B\u043E\u043D\u043E\u0432\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0443\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F\u0434\u0435\u0440\u0435\u0432\u0430\u0440\u0435\u0448\u0435\u043D\u0438\u0439 ";
    const v8_system_enums_xml_json_xs_dom_xdto_ws = "ws\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043D\u0442xpathxs \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0437\u0430\u043F\u0438\u0441\u0438\u0434\u0430\u0442\u044Bjson \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0432\u0438\u0434\u0433\u0440\u0443\u043F\u043F\u044B\u043C\u043E\u0434\u0435\u043B\u0438xs \u0432\u0438\u0434\u0444\u0430\u0441\u0435\u0442\u0430xdto " + "\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044Fdom \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u043D\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u0441\u0445\u0435\u043C\u044Bxs \u0437\u0430\u043F\u0440\u0435\u0449\u0435\u043D\u043D\u044B\u0435\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs " + "\u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u0438\u0434\u0435\u043D\u0442\u0438\u0447\u043D\u043E\u0441\u0442\u0438xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0438\u043C\u0435\u043Dxs " + "\u043C\u0435\u0442\u043E\u0434\u043D\u0430\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u044Fxs \u043C\u043E\u0434\u0435\u043B\u044C\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0433\u043Exs \u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0442\u0438\u043F\u0430xml \u043D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0445\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432xs \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0433\u043Exs " + "\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u043E\u0442\u0431\u043E\u0440\u0430\u0443\u0437\u043B\u043E\u0432dom \u043F\u0435\u0440\u0435\u043D\u043E\u0441\u0441\u0442\u0440\u043E\u043Ajson \u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0432\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0435dom \u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u044Bxml \u0442\u0438\u043F\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xml \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fjson " + "\u0442\u0438\u043F\u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0433\u043Exml \u0442\u0438\u043F\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044Bxs \u0442\u0438\u043F\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438xml \u0442\u0438\u043F\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430domxpath \u0442\u0438\u043F\u0443\u0437\u043B\u0430dom \u0442\u0438\u043F\u0443\u0437\u043B\u0430xml \u0444\u043E\u0440\u043C\u0430xml \u0444\u043E\u0440\u043C\u0430\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044Fxs " + "\u0444\u043E\u0440\u043C\u0430\u0442\u0434\u0430\u0442\u044Bjson \u044D\u043A\u0440\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432json ";
    const v8_system_enums_data_composition_system = "\u0432\u0438\u0434\u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0432\u043B\u043E\u0436\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u0435\u0439\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0441\u043A\u043E\u0433\u043E\u043E\u0441\u0442\u0430\u0442\u043A\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0432\u044B\u0432\u043E\u0434\u0430\u0442\u0435\u043A\u0441\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0433\u0440\u0443\u043F\u043F\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u043E\u0442\u0431\u043E\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u043F\u043E\u043B\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043E\u0441\u0442\u0430\u0442\u043A\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0442\u0438\u043F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0441\u0432\u044F\u0437\u0438\u043D\u0430\u0431\u043E\u0440\u043E\u0432\u0434\u0430\u043D\u043D\u044B\u0445\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043B\u0435\u0433\u0435\u043D\u0434\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043F\u043E\u0441\u043E\u0431\u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0440\u0435\u0436\u0438\u043C\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0430\u0432\u0442\u043E\u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0444\u0438\u043A\u0441\u0430\u0446\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0443\u0441\u043B\u043E\u0432\u043D\u043E\u0433\u043E\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 ";
    const v8_system_enums_email = "\u0432\u0430\u0436\u043D\u043E\u0441\u0442\u044C\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0442\u0435\u043A\u0441\u0442\u0430\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0432\u043B\u043E\u0436\u0435\u043D\u0438\u044F " + "\u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043D\u0435ascii\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0442\u0435\u043A\u0441\u0442\u0430\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u0440\u043E\u0442\u043E\u043A\u043E\u043B\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u044B " + "\u0441\u0442\u0430\u0442\u0443\u0441\u0440\u0430\u0437\u0431\u043E\u0440\u0430\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F ";
    const v8_system_enums_logbook = "\u0440\u0435\u0436\u0438\u043C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438\u0437\u0430\u043F\u0438\u0441\u0438\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438\u0437\u0430\u043F\u0438\u0441\u0438\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 ";
    const v8_system_enums_cryptography = "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 " + "\u0442\u0438\u043F\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 ";
    const v8_system_enums_zip = "\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430\u0438\u043C\u0435\u043D\u0444\u0430\u0439\u043B\u043E\u0432\u0432zip\u0444\u0430\u0439\u043B\u0435 \u043C\u0435\u0442\u043E\u0434\u0441\u0436\u0430\u0442\u0438\u044Fzip \u043C\u0435\u0442\u043E\u0434\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u0438\u044Fzip \u0440\u0435\u0436\u0438\u043C\u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0443\u0442\u0435\u0439\u0444\u0430\u0439\u043B\u043E\u0432zip \u0440\u0435\u0436\u0438\u043C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u043F\u043E\u0434\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043E\u0432zip " + "\u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u043F\u0443\u0442\u0435\u0439zip \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0441\u0436\u0430\u0442\u0438\u044Fzip ";
    const v8_system_enums_other = "\u0437\u0432\u0443\u043A\u043E\u0432\u043E\u0435\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u0435 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430\u043A\u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0432\u043F\u043E\u0442\u043E\u043A\u0435 \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u0431\u0430\u0439\u0442\u043E\u0432 \u0440\u0435\u0436\u0438\u043C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u043E\u0439\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0441\u0435\u0440\u0432\u0438\u0441\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0445\u043F\u043E\u043A\u0443\u043F\u043E\u043A \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u0444\u043E\u043D\u043E\u0432\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0442\u0438\u043F\u043F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A\u0430\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0445\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044Fftp ";
    const v8_system_enums_request_schema = "\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043E\u0440\u044F\u0434\u043A\u0430\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043C\u0438\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u043E\u0439\u0442\u043E\u0447\u043A\u0438\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 " + "\u0442\u0438\u043F\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
    const v8_system_enums_properties_of_metadata_objects = "http\u043C\u0435\u0442\u043E\u0434 \u0430\u0432\u0442\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0430\u0432\u0442\u043E\u043F\u0440\u0435\u0444\u0438\u043A\u0441\u043D\u043E\u043C\u0435\u0440\u0430\u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u043E\u0433\u043E\u044F\u0437\u044B\u043A\u0430 \u0432\u0438\u0434\u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u0438\u0434\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F " + "\u0432\u0438\u0434\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0438\u0441\u044C\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0439\u043F\u0440\u0438\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439 \u0438\u043D\u0434\u0435\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0431\u0430\u0437\u044B\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0431\u044B\u0441\u0442\u0440\u043E\u0433\u043E\u0432\u044B\u0431\u043E\u0440\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u0438\u044F " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0437\u0434\u0435\u043B\u044F\u0435\u043C\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 " + "\u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u043E\u0435\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0432\u0438\u0434\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0432\u0438\u0434\u0430\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0437\u0430\u0434\u0430\u0447\u0438 " + "\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043B\u0430\u043D\u0430\u043E\u0431\u043C\u0435\u043D\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u0447\u0435\u0442\u0430 \u043F\u0435\u0440\u0435\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0433\u0440\u0430\u043D\u0438\u0446\u044B\u043F\u0440\u0438\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0438 " + "\u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u043D\u043E\u043C\u0435\u0440\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u043D\u043E\u043C\u0435\u0440\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0441\u0432\u0435\u0434\u0435\u043D\u0438\u0439 " + "\u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u043F\u043E\u0438\u0441\u043A\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u043D\u043E\u0441\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442\u0430 \u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435 " + "\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0430\u0443\u0442\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0438\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 " + "\u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u0438\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0438\u0441\u0438\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u0438 " + "\u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0438\u043D\u0445\u0440\u043E\u043D\u043D\u044B\u0445\u0432\u044B\u0437\u043E\u0432\u043E\u0432\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u044B\u0438\u0432\u043D\u0435\u0448\u043D\u0438\u0445\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0440\u0435\u0436\u0438\u043C\u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0433\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0435\u0430\u043D\u0441\u043E\u0432 " + "\u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u044B\u0431\u043E\u0440\u0430\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0432\u043C\u0435\u0441\u0442\u0438\u043C\u043E\u0441\u0442\u0438 \u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0432\u043C\u0435\u0441\u0442\u0438\u043C\u043E\u0441\u0442\u0438\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 " + "\u0440\u0435\u0436\u0438\u043C\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u043E\u0439\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A \u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u043F\u043B\u0430\u043D\u0430\u0441\u0447\u0435\u0442\u043E\u0432 " + "\u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u0441\u043F\u043E\u0441\u043E\u0431\u0432\u044B\u0431\u043E\u0440\u0430 \u0441\u043F\u043E\u0441\u043E\u0431\u043F\u043E\u0438\u0441\u043A\u0430\u0441\u0442\u0440\u043E\u043A\u0438\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u0441\u043F\u043E\u0441\u043E\u0431\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F " + "\u0442\u0438\u043F\u0434\u0430\u043D\u043D\u044B\u0445\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043A\u043E\u0434\u0430\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u043A\u043E\u0434\u0430\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430 \u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 " + "\u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043F\u0444\u043E\u0440\u043C\u044B \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0439 ";
    const v8_system_enums_differents = "\u0432\u0430\u0436\u043D\u043E\u0441\u0442\u044C\u043F\u0440\u043E\u0431\u043B\u0435\u043C\u044B\u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0444\u043E\u0440\u043C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F " + "\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u0448\u0440\u0438\u0444\u0442\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0439\u0434\u0430\u0442\u044B\u043D\u0430\u0447\u0430\u043B\u0430 \u0432\u0438\u0434\u0433\u0440\u0430\u043D\u0438\u0446\u044B \u0432\u0438\u0434\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 " + "\u0432\u0438\u0434\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0432\u0438\u0434\u0440\u0430\u043C\u043A\u0438 \u0432\u0438\u0434\u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u0446\u0432\u0435\u0442\u0430 \u0432\u0438\u0434\u0447\u0438\u0441\u043B\u043E\u0432\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u0448\u0440\u0438\u0444\u0442\u0430 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u0430\u044F\u0434\u043B\u0438\u043D\u0430 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439\u0437\u043D\u0430\u043A " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435byteordermark \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043C\u0435\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043A\u043B\u0430\u0432\u0438\u0448\u0430 \u043A\u043E\u0434\u0432\u043E\u0437\u0432\u0440\u0430\u0442\u0430\u0434\u0438\u0430\u043B\u043E\u0433\u0430 " + "\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430xbase \u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430\u0442\u0435\u043A\u0441\u0442\u0430 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043E\u0438\u0441\u043A\u0430 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0438\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0430\u043D\u0435\u043B\u0438\u0440\u0430\u0437\u0434\u0435\u043B\u043E\u0432 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u0432\u043E\u043F\u0440\u043E\u0441 \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0443\u0441\u043A\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u043A\u0440\u0443\u0433\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0444\u043E\u0440\u043C\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F " + "\u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0441\u043A\u043E\u0440\u043E\u0441\u0442\u044C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0441\u043F\u043E\u0441\u043E\u0431\u0432\u044B\u0431\u043E\u0440\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430windows \u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0442\u0440\u043E\u043A\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u0442\u0438\u043F\u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u044B \u0442\u0438\u043F\u043F\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F\u043A\u043B\u0430\u0432\u0438\u0448\u0438enter " + "\u0442\u0438\u043F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438\u043E\u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0438\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0438\u0437\u043E\u043B\u044F\u0446\u0438\u0438\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0439 \u0445\u0435\u0448\u0444\u0443\u043D\u043A\u0446\u0438\u044F \u0447\u0430\u0441\u0442\u0438\u0434\u0430\u0442\u044B";
    const CLASS = v8_system_sets_of_values + v8_system_enums_interface + v8_system_enums_objects_properties + v8_system_enums_exchange_plans + v8_system_enums_tabular_document + v8_system_enums_sheduler + v8_system_enums_formatted_document + v8_system_enums_query + v8_system_enums_report_builder + v8_system_enums_files + v8_system_enums_query_builder + v8_system_enums_data_analysis + v8_system_enums_xml_json_xs_dom_xdto_ws + v8_system_enums_data_composition_system + v8_system_enums_email + v8_system_enums_logbook + v8_system_enums_cryptography + v8_system_enums_zip + v8_system_enums_other + v8_system_enums_request_schema + v8_system_enums_properties_of_metadata_objects + v8_system_enums_differents;
    const v8_shared_object = "com\u043E\u0431\u044A\u0435\u043A\u0442 ftp\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 http\u0437\u0430\u043F\u0440\u043E\u0441 http\u0441\u0435\u0440\u0432\u0438\u0441\u043E\u0442\u0432\u0435\u0442 http\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 ws\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F ws\u043F\u0440\u043E\u043A\u0441\u0438 xbase \u0430\u043D\u0430\u043B\u0438\u0437\u0434\u0430\u043D\u043D\u044B\u0445 \u0430\u043D\u043D\u043E\u0442\u0430\u0446\u0438\u044Fxs " + "\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0443\u0444\u0435\u0440\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435xs \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0433\u0435\u043D\u0435\u0440\u0430\u0442\u043E\u0440\u0441\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0445\u0447\u0438\u0441\u0435\u043B \u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0430\u044F\u0441\u0445\u0435\u043C\u0430 " + "\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0438\u0435\u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u044B \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0430\u044F\u0441\u0445\u0435\u043C\u0430 \u0433\u0440\u0443\u043F\u043F\u0430\u043C\u043E\u0434\u0435\u043B\u0438xs \u0434\u0430\u043D\u043D\u044B\u0435\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0435\u0434\u0430\u043D\u043D\u044B\u0435 \u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u0430 " + "\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430\u0433\u0430\u043D\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0444\u0430\u0439\u043B\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0446\u0432\u0435\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0448\u0440\u0438\u0444\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0440\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u044F\u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F " + "\u0434\u0438\u0430\u043B\u043E\u0433\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442dom \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442html \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u044Fxs \u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u043E\u0435\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0435 " + "\u0437\u0430\u043F\u0438\u0441\u044Cdom \u0437\u0430\u043F\u0438\u0441\u044Cfastinfoset \u0437\u0430\u043F\u0438\u0441\u044Chtml \u0437\u0430\u043F\u0438\u0441\u044Cjson \u0437\u0430\u043F\u0438\u0441\u044Cxml \u0437\u0430\u043F\u0438\u0441\u044Czip\u0444\u0430\u0439\u043B\u0430 \u0437\u0430\u043F\u0438\u0441\u044C\u0434\u0430\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0438\u0441\u044C\u0442\u0435\u043A\u0441\u0442\u0430 \u0437\u0430\u043F\u0438\u0441\u044C\u0443\u0437\u043B\u043E\u0432dom " + "\u0437\u0430\u043F\u0440\u043E\u0441 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0435\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435openssl \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u0435\u0439\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0438\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u043C\u043F\u043E\u0440\u0442xs \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u0430 " + "\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0435\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u044B\u0439\u043F\u0440\u043E\u0444\u0438\u043B\u044C \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u0440\u043E\u043A\u0441\u0438 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u0434\u043B\u044F\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044Fxs " + "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u0438\u0442\u0435\u0440\u0430\u0442\u043E\u0440\u0443\u0437\u043B\u043E\u0432dom \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0430 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0434\u0430\u0442\u044B \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0441\u0442\u0440\u043E\u043A\u0438 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0447\u0438\u0441\u043B\u0430 " + "\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u0449\u0438\u043A\u043C\u0430\u043A\u0435\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u0449\u0438\u043A\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u043C\u0430\u043A\u0435\u0442\u0430\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u0444\u043E\u0440\u043C\u0430\u0442\u043D\u043E\u0439\u0441\u0442\u0440\u043E\u043A\u0438 \u043B\u0438\u043D\u0438\u044F \u043C\u0430\u043A\u0435\u0442\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u043A\u0435\u0442\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043C\u0430\u043A\u0435\u0442\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u0441\u043A\u0430xs \u043C\u0435\u043D\u0435\u0434\u0436\u0435\u0440\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u043D\u0430\u0431\u043E\u0440\u0441\u0445\u0435\u043Cxml \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438json " + "\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u0431\u0445\u043E\u0434\u0434\u0435\u0440\u0435\u0432\u0430dom \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u043D\u043E\u0442\u0430\u0446\u0438\u0438xs " + "\u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430xs \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0434\u043E\u0441\u0442\u0443\u043F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 " + "\u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u043E\u0442\u043A\u0430\u0437\u0432\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u043E\u0433\u043E\u0444\u0430\u0439\u043B\u0430 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0442\u0438\u043F\u043E\u0432 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043E\u0432xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u043C\u043E\u0434\u0435\u043B\u0438xs " + "\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u0438\u0434\u0435\u043D\u0442\u0438\u0447\u043D\u043E\u0441\u0442\u0438xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0441\u0442\u0430\u0432\u043D\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0442\u0438\u043F\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430dom " + "\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044Fxpathxs \u043E\u0442\u0431\u043E\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u0430\u043A\u0435\u0442\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0435\u043C\u044B\u0445\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0437\u0430\u043F\u0438\u0441\u0438json \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0437\u0430\u043F\u0438\u0441\u0438xml \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0447\u0442\u0435\u043D\u0438\u044Fxml \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435xs \u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0449\u0438\u043A \u043F\u043E\u043B\u0435\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043F\u043E\u043B\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044Cdom \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u043E\u0442\u0447\u0435\u0442\u0430 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u043E\u0442\u0447\u0435\u0442\u0430\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 " + "\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u0441\u0445\u0435\u043Cxml \u043F\u043E\u0442\u043E\u043A \u043F\u043E\u0442\u043E\u043A\u0432\u043F\u0430\u043C\u044F\u0442\u0438 \u043F\u043E\u0447\u0442\u0430 \u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0435\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435xsl \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043A\u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u043C\u0443xml " + "\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0432\u044B\u0432\u043E\u0434\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u044E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0432\u044B\u0432\u043E\u0434\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 " + "\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0437\u044B\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0438\u043C\u0435\u043Ddom \u0440\u0430\u043C\u043A\u0430 \u0440\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u043D\u043E\u0435\u0438\u043C\u044Fxml " + "\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0447\u0442\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0432\u043E\u0434\u043D\u0430\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430 \u0441\u0432\u044F\u0437\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u0432\u044B\u0431\u043E\u0440\u0430 \u0441\u0432\u044F\u0437\u044C\u043F\u043E\u0442\u0438\u043F\u0443 \u0441\u0432\u044F\u0437\u044C\u043F\u043E\u0442\u0438\u043F\u0443\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440xdto " + "\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u043B\u0438\u0435\u043D\u0442\u0430windows \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u0444\u0430\u0439\u043B \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u044B\u0443\u0434\u043E\u0441\u0442\u043E\u0432\u0435\u0440\u044F\u044E\u0449\u0438\u0445\u0446\u0435\u043D\u0442\u0440\u043E\u0432windows " + "\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u044B\u0443\u0434\u043E\u0441\u0442\u043E\u0432\u0435\u0440\u044F\u044E\u0449\u0438\u0445\u0446\u0435\u043D\u0442\u0440\u043E\u0432\u0444\u0430\u0439\u043B \u0441\u0436\u0430\u0442\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0438\u0441\u0442\u0435\u043C\u043D\u0430\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044E \u0441\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u0435\u043A\u043B\u0430\u0432\u0438\u0448 " + "\u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F\u0434\u0430\u0442\u0430\u043D\u0430\u0447\u0430\u043B\u0430 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0439\u043F\u0435\u0440\u0438\u043E\u0434 \u0441\u0445\u0435\u043C\u0430xml \u0441\u0445\u0435\u043C\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0430\u0431\u043B\u0438\u0447\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 " + "\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043C\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u0438\u043F\u0434\u0430\u043D\u043D\u044B\u0445xml \u0443\u043D\u0438\u043A\u0430\u043B\u044C\u043D\u044B\u0439\u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u0444\u0430\u0431\u0440\u0438\u043A\u0430xdto \u0444\u0430\u0439\u043B \u0444\u0430\u0439\u043B\u043E\u0432\u044B\u0439\u043F\u043E\u0442\u043E\u043A " + "\u0444\u0430\u0441\u0435\u0442\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u0440\u0430\u0437\u0440\u044F\u0434\u043E\u0432\u0434\u0440\u043E\u0431\u043D\u043E\u0439\u0447\u0430\u0441\u0442\u0438xs \u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs " + "\u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0439\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs " + "\u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0439\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043E\u0431\u0440\u0430\u0437\u0446\u0430xs \u0444\u0430\u0441\u0435\u0442\u043E\u0431\u0449\u0435\u0433\u043E\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u0440\u0430\u0437\u0440\u044F\u0434\u043E\u0432xs " + "\u0444\u0430\u0441\u0435\u0442\u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0445\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432xs \u0444\u0438\u043B\u044C\u0442\u0440\u0443\u0437\u043B\u043E\u0432dom \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F\u0441\u0442\u0440\u043E\u043A\u0430 \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 " + "\u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442xs \u0445\u0435\u0448\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0446\u0432\u0435\u0442 \u0447\u0442\u0435\u043D\u0438\u0435fastinfoset \u0447\u0442\u0435\u043D\u0438\u0435html \u0447\u0442\u0435\u043D\u0438\u0435json \u0447\u0442\u0435\u043D\u0438\u0435xml \u0447\u0442\u0435\u043D\u0438\u0435zip\u0444\u0430\u0439\u043B\u0430 " + "\u0447\u0442\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0447\u0442\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430 \u0447\u0442\u0435\u043D\u0438\u0435\u0443\u0437\u043B\u043E\u0432dom \u0448\u0440\u0438\u0444\u0442 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 ";
    const v8_universal_collection = "comsafearray \u0434\u0435\u0440\u0435\u0432\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043F\u0438\u0441\u043E\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430 \u0442\u0430\u0431\u043B\u0438\u0446\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430 " + "\u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0435\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u043C\u0430\u0441\u0441\u0438\u0432 ";
    const TYPE = v8_shared_object + v8_universal_collection;
    const LITERAL = "null \u0438\u0441\u0442\u0438\u043D\u0430 \u043B\u043E\u0436\u044C \u043D\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043E";
    const NUMBERS = hljs.inherit(hljs.NUMBER_MODE);
    const STRINGS = {
      className: "string",
      begin: '"|\\|',
      end: '"|$',
      contains: [{ begin: '""' }]
    };
    const DATE = {
      begin: "'",
      end: "'",
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        {
          className: "number",
          begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
        }
      ]
    };
    const COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);
    const META = {
      className: "meta",
      begin: "#|&",
      end: "$",
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE,
        keyword: KEYWORD + METAKEYWORD
      },
      contains: [COMMENTS]
    };
    const SYMBOL = {
      className: "symbol",
      begin: "~",
      end: ";|:",
      excludeEnd: true
    };
    const FUNCTION = {
      className: "function",
      variants: [
        {
          begin: "\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u0430|\u0444\u0443\u043D\u043A\u0446\u0438\u044F",
          end: "\\)",
          keywords: "\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F"
        },
        {
          begin: "\u043A\u043E\u043D\u0435\u0446\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u044B|\u043A\u043E\u043D\u0435\u0446\u0444\u0443\u043D\u043A\u0446\u0438\u0438",
          keywords: "\u043A\u043E\u043D\u0435\u0446\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u044B \u043A\u043E\u043D\u0435\u0446\u0444\u0443\u043D\u043A\u0446\u0438\u0438"
        }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          endsParent: true,
          contains: [
            {
              className: "params",
              begin: UNDERSCORE_IDENT_RE,
              end: ",",
              excludeEnd: true,
              endsWithParent: true,
              keywords: {
                $pattern: UNDERSCORE_IDENT_RE,
                keyword: "\u0437\u043D\u0430\u0447",
                literal: LITERAL
              },
              contains: [
                NUMBERS,
                STRINGS,
                DATE
              ]
            },
            COMMENTS
          ]
        },
        hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE })
      ]
    };
    return {
      name: "1C:Enterprise",
      case_insensitive: true,
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE,
        keyword: KEYWORD,
        built_in: BUILTIN,
        class: CLASS,
        type: TYPE,
        literal: LITERAL
      },
      contains: [
        META,
        FUNCTION,
        COMMENTS,
        SYMBOL,
        NUMBERS,
        STRINGS,
        DATE
      ]
    };
  };
  module.exports = _1c;
});

// node_modules/highlight.js/lib/languages/abnf.js
var require_abnf = __commonJS((exports, module) => {
  var abnf = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;
    const KEYWORDS2 = [
      "ALPHA",
      "BIT",
      "CHAR",
      "CR",
      "CRLF",
      "CTL",
      "DIGIT",
      "DQUOTE",
      "HEXDIG",
      "HTAB",
      "LF",
      "LWSP",
      "OCTET",
      "SP",
      "VCHAR",
      "WSP"
    ];
    const COMMENT = hljs.COMMENT(/;/, /$/);
    const TERMINAL_BINARY = {
      scope: "symbol",
      match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    };
    const TERMINAL_DECIMAL = {
      scope: "symbol",
      match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    };
    const TERMINAL_HEXADECIMAL = {
      scope: "symbol",
      match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    };
    const CASE_SENSITIVITY = {
      scope: "symbol",
      match: /%[si](?=".*")/
    };
    const RULE_DECLARATION = {
      scope: "attribute",
      match: regex6.concat(IDENT, /(?=\s*=)/)
    };
    const ASSIGNMENT2 = {
      scope: "operator",
      match: /=\/?/
    };
    return {
      name: "Augmented Backus-Naur Form",
      illegal: /[!@#$^&',?+~`|:]/,
      keywords: KEYWORDS2,
      contains: [
        ASSIGNMENT2,
        RULE_DECLARATION,
        COMMENT,
        TERMINAL_BINARY,
        TERMINAL_DECIMAL,
        TERMINAL_HEXADECIMAL,
        CASE_SENSITIVITY,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE
      ]
    };
  };
  module.exports = abnf;
});

// node_modules/highlight.js/lib/languages/accesslog.js
var require_accesslog = __commonJS((exports, module) => {
  var accesslog = function(hljs) {
    const regex6 = hljs.regex;
    const HTTP_VERBS = [
      "GET",
      "POST",
      "HEAD",
      "PUT",
      "DELETE",
      "CONNECT",
      "OPTIONS",
      "PATCH",
      "TRACE"
    ];
    return {
      name: "Apache Access Log",
      contains: [
        {
          className: "number",
          begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
          relevance: 5
        },
        {
          className: "number",
          begin: /\b\d+\b/,
          relevance: 0
        },
        {
          className: "string",
          begin: regex6.concat(/"/, regex6.either(...HTTP_VERBS)),
          end: /"/,
          keywords: HTTP_VERBS,
          illegal: /\n/,
          relevance: 5,
          contains: [
            {
              begin: /HTTP\/[12]\.\d'/,
              relevance: 5
            }
          ]
        },
        {
          className: "string",
          begin: /\[\d[^\]\n]{8,}\]/,
          illegal: /\n/,
          relevance: 1
        },
        {
          className: "string",
          begin: /\[/,
          end: /\]/,
          illegal: /\n/,
          relevance: 0
        },
        {
          className: "string",
          begin: /"Mozilla\/\d\.\d \(/,
          end: /"/,
          illegal: /\n/,
          relevance: 3
        },
        {
          className: "string",
          begin: /"/,
          end: /"/,
          illegal: /\n/,
          relevance: 0
        }
      ]
    };
  };
  module.exports = accesslog;
});

// node_modules/highlight.js/lib/languages/actionscript.js
var require_actionscript = __commonJS((exports, module) => {
  var actionscript = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
    const PKG_NAME_RE = regex6.concat(IDENT_RE, regex6.concat("(\\.", IDENT_RE, ")*"));
    const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;
    const AS3_REST_ARG_MODE = {
      className: "rest_arg",
      begin: /[.]{3}/,
      end: IDENT_RE,
      relevance: 10
    };
    const KEYWORDS2 = [
      "as",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "default",
      "delete",
      "do",
      "dynamic",
      "each",
      "else",
      "extends",
      "final",
      "finally",
      "for",
      "function",
      "get",
      "if",
      "implements",
      "import",
      "in",
      "include",
      "instanceof",
      "interface",
      "internal",
      "is",
      "namespace",
      "native",
      "new",
      "override",
      "package",
      "private",
      "protected",
      "public",
      "return",
      "set",
      "static",
      "super",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "use",
      "var",
      "void",
      "while",
      "with"
    ];
    const LITERALS = [
      "true",
      "false",
      "null",
      "undefined"
    ];
    return {
      name: "ActionScript",
      aliases: ["as"],
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS
      },
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        {
          match: [
            /\bpackage/,
            /\s+/,
            PKG_NAME_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: [
            /\b(?:class|interface|extends|implements)/,
            /\s+/,
            IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          className: "meta",
          beginKeywords: "import include",
          end: /;/,
          keywords: { keyword: "import include" }
        },
        {
          beginKeywords: "function",
          end: /[{;]/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { className: "title.function" }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                AS3_REST_ARG_MODE
              ]
            },
            { begin: regex6.concat(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE) }
          ]
        },
        hljs.METHOD_GUARD
      ],
      illegal: /#/
    };
  };
  module.exports = actionscript;
});

// node_modules/highlight.js/lib/languages/ada.js
var require_ada = __commonJS((exports, module) => {
  var ada = function(hljs) {
    const INTEGER_RE = "\\d(_|\\d)*";
    const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
    const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
    const BASED_INTEGER_RE = "\\w+";
    const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
    const NUMBER_RE = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
    const ID_REGEX = "[A-Za-z](_?[A-Za-z0-9.])*";
    const BAD_CHARS = `[]\\{\\}%#'"`;
    const COMMENTS = hljs.COMMENT("--", "$");
    const VAR_DECLS = {
      begin: "\\s+:\\s+",
      end: "\\s*(:=|;|\\)|=>|$)",
      illegal: BAD_CHARS,
      contains: [
        {
          beginKeywords: "loop for declare others",
          endsParent: true
        },
        {
          className: "keyword",
          beginKeywords: "not null constant access function procedure in out aliased exception"
        },
        {
          className: "type",
          begin: ID_REGEX,
          endsParent: true,
          relevance: 0
        }
      ]
    };
    const KEYWORDS2 = [
      "abort",
      "else",
      "new",
      "return",
      "abs",
      "elsif",
      "not",
      "reverse",
      "abstract",
      "end",
      "accept",
      "entry",
      "select",
      "access",
      "exception",
      "of",
      "separate",
      "aliased",
      "exit",
      "or",
      "some",
      "all",
      "others",
      "subtype",
      "and",
      "for",
      "out",
      "synchronized",
      "array",
      "function",
      "overriding",
      "at",
      "tagged",
      "generic",
      "package",
      "task",
      "begin",
      "goto",
      "pragma",
      "terminate",
      "body",
      "private",
      "then",
      "if",
      "procedure",
      "type",
      "case",
      "in",
      "protected",
      "constant",
      "interface",
      "is",
      "raise",
      "use",
      "declare",
      "range",
      "delay",
      "limited",
      "record",
      "when",
      "delta",
      "loop",
      "rem",
      "while",
      "digits",
      "renames",
      "with",
      "do",
      "mod",
      "requeue",
      "xor"
    ];
    return {
      name: "Ada",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: [
          "True",
          "False"
        ]
      },
      contains: [
        COMMENTS,
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          className: "string",
          begin: /'.'/
        },
        {
          className: "number",
          begin: NUMBER_RE,
          relevance: 0
        },
        {
          className: "symbol",
          begin: "'" + ID_REGEX
        },
        {
          className: "title",
          begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
          end: "(is|$)",
          keywords: "package body",
          excludeBegin: true,
          excludeEnd: true,
          illegal: BAD_CHARS
        },
        {
          begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
          end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
          keywords: "overriding function procedure with is renames return",
          returnBegin: true,
          contains: [
            COMMENTS,
            {
              className: "title",
              begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
              end: "(\\(|\\s+|$)",
              excludeBegin: true,
              excludeEnd: true,
              illegal: BAD_CHARS
            },
            VAR_DECLS,
            {
              className: "type",
              begin: "\\breturn\\s+",
              end: "(\\s+|;|$)",
              keywords: "return",
              excludeBegin: true,
              excludeEnd: true,
              endsParent: true,
              illegal: BAD_CHARS
            }
          ]
        },
        {
          className: "type",
          begin: "\\b(sub)?type\\s+",
          end: "\\s+",
          keywords: "type",
          excludeBegin: true,
          illegal: BAD_CHARS
        },
        VAR_DECLS
      ]
    };
  };
  module.exports = ada;
});

// node_modules/highlight.js/lib/languages/angelscript.js
var require_angelscript = __commonJS((exports, module) => {
  var angelscript = function(hljs) {
    const builtInTypeMode = {
      className: "built_in",
      begin: "\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)"
    };
    const objectHandleMode = {
      className: "symbol",
      begin: "[a-zA-Z0-9_]+@"
    };
    const genericMode = {
      className: "keyword",
      begin: "<",
      end: ">",
      contains: [
        builtInTypeMode,
        objectHandleMode
      ]
    };
    builtInTypeMode.contains = [genericMode];
    objectHandleMode.contains = [genericMode];
    const KEYWORDS2 = [
      "for",
      "in|0",
      "break",
      "continue",
      "while",
      "do|0",
      "return",
      "if",
      "else",
      "case",
      "switch",
      "namespace",
      "is",
      "cast",
      "or",
      "and",
      "xor",
      "not",
      "get|0",
      "in",
      "inout|10",
      "out",
      "override",
      "set|0",
      "private",
      "public",
      "const",
      "default|0",
      "final",
      "shared",
      "external",
      "mixin|10",
      "enum",
      "typedef",
      "funcdef",
      "this",
      "super",
      "import",
      "from",
      "interface",
      "abstract|0",
      "try",
      "catch",
      "protected",
      "explicit",
      "property"
    ];
    return {
      name: "AngelScript",
      aliases: ["asc"],
      keywords: KEYWORDS2,
      illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
      contains: [
        {
          className: "string",
          begin: "\'",
          end: "\'",
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE],
          relevance: 0
        },
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE],
          relevance: 0
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: "^\\s*\\[",
          end: "\\]"
        },
        {
          beginKeywords: "interface namespace",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              className: "symbol",
              begin: "[a-zA-Z0-9_]+"
            }
          ]
        },
        {
          beginKeywords: "class",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              className: "symbol",
              begin: "[a-zA-Z0-9_]+",
              contains: [
                {
                  begin: "[:,]\\s*",
                  contains: [
                    {
                      className: "symbol",
                      begin: "[a-zA-Z0-9_]+"
                    }
                  ]
                }
              ]
            }
          ]
        },
        builtInTypeMode,
        objectHandleMode,
        {
          className: "literal",
          begin: "\\b(null|true|false)"
        },
        {
          className: "number",
          relevance: 0,
          begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
        }
      ]
    };
  };
  module.exports = angelscript;
});

// node_modules/highlight.js/lib/languages/apache.js
var require_apache = __commonJS((exports, module) => {
  var apache = function(hljs) {
    const NUMBER_REF = {
      className: "number",
      begin: /[$%]\d+/
    };
    const NUMBER = {
      className: "number",
      begin: /\b\d+/
    };
    const IP_ADDRESS = {
      className: "number",
      begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
    };
    const PORT_NUMBER = {
      className: "number",
      begin: /:\d{1,5}/
    };
    return {
      name: "Apache config",
      aliases: ["apacheconf"],
      case_insensitive: true,
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: "section",
          begin: /<\/?/,
          end: />/,
          contains: [
            IP_ADDRESS,
            PORT_NUMBER,
            hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })
          ]
        },
        {
          className: "attribute",
          begin: /\w+/,
          relevance: 0,
          keywords: { _: [
            "order",
            "deny",
            "allow",
            "setenv",
            "rewriterule",
            "rewriteengine",
            "rewritecond",
            "documentroot",
            "sethandler",
            "errordocument",
            "loadmodule",
            "options",
            "header",
            "listen",
            "serverroot",
            "servername"
          ] },
          starts: {
            end: /$/,
            relevance: 0,
            keywords: { literal: "on off all deny allow" },
            contains: [
              {
                className: "meta",
                begin: /\s\[/,
                end: /\]$/
              },
              {
                className: "variable",
                begin: /[\$%]\{/,
                end: /\}/,
                contains: [
                  "self",
                  NUMBER_REF
                ]
              },
              IP_ADDRESS,
              NUMBER,
              hljs.QUOTE_STRING_MODE
            ]
          }
        }
      ],
      illegal: /\S/
    };
  };
  module.exports = apache;
});

// node_modules/highlight.js/lib/languages/applescript.js
var require_applescript = __commonJS((exports, module) => {
  var applescript = function(hljs) {
    const regex6 = hljs.regex;
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        hljs.C_NUMBER_MODE,
        STRING
      ]
    };
    const COMMENT_MODE_1 = hljs.COMMENT(/--/, /$/);
    const COMMENT_MODE_2 = hljs.COMMENT(/\(\*/, /\*\)/, { contains: [
      "self",
      COMMENT_MODE_1
    ] });
    const COMMENTS = [
      COMMENT_MODE_1,
      COMMENT_MODE_2,
      hljs.HASH_COMMENT_MODE
    ];
    const KEYWORD_PATTERNS = [
      /apart from/,
      /aside from/,
      /instead of/,
      /out of/,
      /greater than/,
      /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
      /(greater|less) than( or equal)?/,
      /(starts?|ends|begins?) with/,
      /contained by/,
      /comes (before|after)/,
      /a (ref|reference)/,
      /POSIX (file|path)/,
      /(date|time) string/,
      /quoted form/
    ];
    const BUILT_IN_PATTERNS = [
      /clipboard info/,
      /the clipboard/,
      /info for/,
      /list (disks|folder)/,
      /mount volume/,
      /path to/,
      /(close|open for) access/,
      /(get|set) eof/,
      /current date/,
      /do shell script/,
      /get volume settings/,
      /random number/,
      /set volume/,
      /system attribute/,
      /system info/,
      /time to GMT/,
      /(load|run|store) script/,
      /scripting components/,
      /ASCII (character|number)/,
      /localized string/,
      /choose (application|color|file|file name|folder|from list|remote application|URL)/,
      /display (alert|dialog)/
    ];
    return {
      name: "AppleScript",
      aliases: ["osascript"],
      keywords: {
        keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
        literal: "AppleScript false linefeed return pi quote result space tab true",
        built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name|0 paragraph paragraphs rest reverse running time version weekday word words year"
      },
      contains: [
        STRING,
        hljs.C_NUMBER_MODE,
        {
          className: "built_in",
          begin: regex6.concat(/\b/, regex6.either(...BUILT_IN_PATTERNS), /\b/)
        },
        {
          className: "built_in",
          begin: /^\s*return\b/
        },
        {
          className: "literal",
          begin: /\b(text item delimiters|current application|missing value)\b/
        },
        {
          className: "keyword",
          begin: regex6.concat(/\b/, regex6.either(...KEYWORD_PATTERNS), /\b/)
        },
        {
          beginKeywords: "on",
          illegal: /[${=;\n]/,
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            PARAMS
          ]
        },
        ...COMMENTS
      ],
      illegal: /\/\/|->|=>|\[\[/
    };
  };
  module.exports = applescript;
});

// node_modules/highlight.js/lib/languages/arcade.js
var require_arcade = __commonJS((exports, module) => {
  var arcade = function(hljs) {
    const IDENT_RE = "[A-Za-z_][0-9A-Za-z_]*";
    const KEYWORDS2 = {
      keyword: [
        "if",
        "for",
        "while",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break"
      ],
      literal: [
        "BackSlash",
        "DoubleQuote",
        "false",
        "ForwardSlash",
        "Infinity",
        "NaN",
        "NewLine",
        "null",
        "PI",
        "SingleQuote",
        "Tab",
        "TextFormatting",
        "true",
        "undefined"
      ],
      built_in: [
        "Abs",
        "Acos",
        "All",
        "Angle",
        "Any",
        "Area",
        "AreaGeodetic",
        "Array",
        "Asin",
        "Atan",
        "Atan2",
        "Attachments",
        "Average",
        "Back",
        "Bearing",
        "Boolean",
        "Buffer",
        "BufferGeodetic",
        "Ceil",
        "Centroid",
        "Clip",
        "Concatenate",
        "Console",
        "Constrain",
        "Contains",
        "ConvertDirection",
        "Cos",
        "Count",
        "Crosses",
        "Cut",
        "Date",
        "DateAdd",
        "DateDiff",
        "Day",
        "Decode",
        "DefaultValue",
        "Densify",
        "DensifyGeodetic",
        "Dictionary",
        "Difference",
        "Disjoint",
        "Distance",
        "DistanceGeodetic",
        "Distinct",
        "Domain",
        "DomainCode",
        "DomainName",
        "EnvelopeIntersects",
        "Equals",
        "Erase",
        "Exp",
        "Expects",
        "Extent",
        "Feature",
        "FeatureSet",
        "FeatureSetByAssociation",
        "FeatureSetById",
        "FeatureSetByName",
        "FeatureSetByPortalItem",
        "FeatureSetByRelationshipName",
        "Filter",
        "Find",
        "First",
        "Floor",
        "FromCharCode",
        "FromCodePoint",
        "FromJSON",
        "GdbVersion",
        "Generalize",
        "Geometry",
        "GetFeatureSet",
        "GetUser",
        "GroupBy",
        "Guid",
        "Hash",
        "HasKey",
        "Hour",
        "IIf",
        "Includes",
        "IndexOf",
        "Insert",
        "Intersection",
        "Intersects",
        "IsEmpty",
        "IsNan",
        "ISOMonth",
        "ISOWeek",
        "ISOWeekday",
        "ISOYear",
        "IsSelfIntersecting",
        "IsSimple",
        "Left|0",
        "Length",
        "Length3D",
        "LengthGeodetic",
        "Log",
        "Lower",
        "Map",
        "Max",
        "Mean",
        "Mid",
        "Millisecond",
        "Min",
        "Minute",
        "Month",
        "MultiPartToSinglePart",
        "Multipoint",
        "NextSequenceValue",
        "None",
        "Now",
        "Number",
        "Offset|0",
        "OrderBy",
        "Overlaps",
        "Point",
        "Polygon",
        "Polyline",
        "Pop",
        "Portal",
        "Pow",
        "Proper",
        "Push",
        "Random",
        "Reduce",
        "Relate",
        "Replace",
        "Resize",
        "Reverse",
        "Right|0",
        "RingIsClockwise",
        "Rotate",
        "Round",
        "Schema",
        "Second",
        "SetGeometry",
        "Simplify",
        "Sin",
        "Slice",
        "Sort",
        "Splice",
        "Split",
        "Sqrt",
        "Stdev",
        "SubtypeCode",
        "SubtypeName",
        "Subtypes",
        "Sum",
        "SymmetricDifference",
        "Tan",
        "Text",
        "Timestamp",
        "ToCharCode",
        "ToCodePoint",
        "Today",
        "ToHex",
        "ToLocal",
        "Top|0",
        "Touches",
        "ToUTC",
        "TrackAccelerationAt",
        "TrackAccelerationWindow",
        "TrackCurrentAcceleration",
        "TrackCurrentDistance",
        "TrackCurrentSpeed",
        "TrackCurrentTime",
        "TrackDistanceAt",
        "TrackDistanceWindow",
        "TrackDuration",
        "TrackFieldWindow",
        "TrackGeometryWindow",
        "TrackIndex",
        "TrackSpeedAt",
        "TrackSpeedWindow",
        "TrackStartTime",
        "TrackWindow",
        "Trim",
        "TypeOf",
        "Union",
        "Upper",
        "UrlEncode",
        "Variance",
        "Week",
        "Weekday",
        "When",
        "Within",
        "Year"
      ]
    };
    const SYMBOL = {
      className: "symbol",
      begin: "\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+"
    };
    const NUMBER = {
      className: "number",
      variants: [
        { begin: "\\b(0[bB][01]+)" },
        { begin: "\\b(0[oO][0-7]+)" },
        { begin: hljs.C_NUMBER_RE }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS2,
      contains: []
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    SUBST.contains = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      TEMPLATE_STRING,
      NUMBER,
      hljs.REGEXP_MODE
    ];
    const PARAMS_CONTAINS = SUBST.contains.concat([
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_LINE_COMMENT_MODE
    ]);
    return {
      name: "ArcGIS Arcade",
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        TEMPLATE_STRING,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        SYMBOL,
        NUMBER,
        {
          begin: /[{,]\s*/,
          relevance: 0,
          contains: [
            {
              begin: IDENT_RE + "\\s*:",
              returnBegin: true,
              relevance: 0,
              contains: [
                {
                  className: "attr",
                  begin: IDENT_RE,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
          keywords: "return",
          contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.REGEXP_MODE,
            {
              className: "function",
              begin: "(\\(.*?\\)|" + IDENT_RE + ")\\s*=>",
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    { begin: IDENT_RE },
                    { begin: /\(\s*\)/ },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS2,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            }
          ],
          relevance: 0
        },
        {
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              className: "title.function",
              begin: IDENT_RE
            }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: PARAMS_CONTAINS
            }
          ],
          illegal: /\[|%/
        },
        { begin: /\$[(.]/ }
      ],
      illegal: /#(?!!)/
    };
  };
  module.exports = arcade;
});

// node_modules/highlight.js/lib/languages/arduino.js
var require_arduino = __commonJS((exports, module) => {
  var cPlusPlus = function(hljs) {
    const regex6 = hljs.regex;
    const C_LINE_COMMENT_MODE = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(?!struct)(" + DECLTYPE_AUTO_RE + "|" + regex6.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex6.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const CPP_PRIMITIVE_TYPES = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?\'(" + CHARACTER_ESCAPES + "|.)",
          end: "\'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01\']+)" },
        { begin: "(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)" }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE = {
      className: "title",
      begin: regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const RESERVED_KEYWORDS = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ];
    const RESERVED_TYPES = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ];
    const TYPE_HINTS = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ];
    const FUNCTION_HINTS = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ];
    const LITERALS = [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ];
    const BUILT_IN = ["_Pragma"];
    const CPP_KEYWORDS = {
      type: RESERVED_TYPES,
      keyword: RESERVED_KEYWORDS,
      literal: LITERALS,
      built_in: BUILT_IN,
      _type_hints: TYPE_HINTS
    };
    const FUNCTION_DISPATCH = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        _hint: FUNCTION_HINTS
      },
      begin: regex6.concat(/\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex6.lookahead(/(<[^<>]+>|)\s*\(/))
    };
    const EXPRESSION_CONTAINS = [
      FUNCTION_DISPATCH,
      PREPROCESSOR,
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS
    ];
    const EXPRESSION_CONTEXT = {
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: CPP_KEYWORDS,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      className: "function",
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: CPP_KEYWORDS,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          begin: DECLTYPE_AUTO_RE,
          keywords: CPP_KEYWORDS,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [TITLE_MODE],
          relevance: 0
        },
        {
          begin: /::/,
          relevance: 0
        },
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            STRINGS,
            NUMBERS
          ]
        },
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS,
            NUMBERS,
            CPP_PRIMITIVE_TYPES,
            {
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS,
                NUMBERS,
                CPP_PRIMITIVE_TYPES
              ]
            }
          ]
        },
        CPP_PRIMITIVE_TYPES,
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: CPP_KEYWORDS,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [
        PREPROCESSOR,
        {
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: CPP_KEYWORDS,
          contains: [
            "self",
            CPP_PRIMITIVE_TYPES
          ]
        },
        {
          begin: hljs.IDENT_RE + "::",
          keywords: CPP_KEYWORDS
        },
        {
          match: [
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ])
    };
  };
  var arduino = function(hljs) {
    const ARDUINO_KW = {
      type: [
        "boolean",
        "byte",
        "word",
        "String"
      ],
      built_in: [
        "KeyboardController",
        "MouseController",
        "SoftwareSerial",
        "EthernetServer",
        "EthernetClient",
        "LiquidCrystal",
        "RobotControl",
        "GSMVoiceCall",
        "EthernetUDP",
        "EsploraTFT",
        "HttpClient",
        "RobotMotor",
        "WiFiClient",
        "GSMScanner",
        "FileSystem",
        "Scheduler",
        "GSMServer",
        "YunClient",
        "YunServer",
        "IPAddress",
        "GSMClient",
        "GSMModem",
        "Keyboard",
        "Ethernet",
        "Console",
        "GSMBand",
        "Esplora",
        "Stepper",
        "Process",
        "WiFiUDP",
        "GSM_SMS",
        "Mailbox",
        "USBHost",
        "Firmata",
        "PImage",
        "Client",
        "Server",
        "GSMPIN",
        "FileIO",
        "Bridge",
        "Serial",
        "EEPROM",
        "Stream",
        "Mouse",
        "Audio",
        "Servo",
        "File",
        "Task",
        "GPRS",
        "WiFi",
        "Wire",
        "TFT",
        "GSM",
        "SPI",
        "SD"
      ],
      _hints: [
        "setup",
        "loop",
        "runShellCommandAsynchronously",
        "analogWriteResolution",
        "retrieveCallingNumber",
        "printFirmwareVersion",
        "analogReadResolution",
        "sendDigitalPortPair",
        "noListenOnLocalhost",
        "readJoystickButton",
        "setFirmwareVersion",
        "readJoystickSwitch",
        "scrollDisplayRight",
        "getVoiceCallStatus",
        "scrollDisplayLeft",
        "writeMicroseconds",
        "delayMicroseconds",
        "beginTransmission",
        "getSignalStrength",
        "runAsynchronously",
        "getAsynchronously",
        "listenOnLocalhost",
        "getCurrentCarrier",
        "readAccelerometer",
        "messageAvailable",
        "sendDigitalPorts",
        "lineFollowConfig",
        "countryNameWrite",
        "runShellCommand",
        "readStringUntil",
        "rewindDirectory",
        "readTemperature",
        "setClockDivider",
        "readLightSensor",
        "endTransmission",
        "analogReference",
        "detachInterrupt",
        "countryNameRead",
        "attachInterrupt",
        "encryptionType",
        "readBytesUntil",
        "robotNameWrite",
        "readMicrophone",
        "robotNameRead",
        "cityNameWrite",
        "userNameWrite",
        "readJoystickY",
        "readJoystickX",
        "mouseReleased",
        "openNextFile",
        "scanNetworks",
        "noInterrupts",
        "digitalWrite",
        "beginSpeaker",
        "mousePressed",
        "isActionDone",
        "mouseDragged",
        "displayLogos",
        "noAutoscroll",
        "addParameter",
        "remoteNumber",
        "getModifiers",
        "keyboardRead",
        "userNameRead",
        "waitContinue",
        "processInput",
        "parseCommand",
        "printVersion",
        "readNetworks",
        "writeMessage",
        "blinkVersion",
        "cityNameRead",
        "readMessage",
        "setDataMode",
        "parsePacket",
        "isListening",
        "setBitOrder",
        "beginPacket",
        "isDirectory",
        "motorsWrite",
        "drawCompass",
        "digitalRead",
        "clearScreen",
        "serialEvent",
        "rightToLeft",
        "setTextSize",
        "leftToRight",
        "requestFrom",
        "keyReleased",
        "compassRead",
        "analogWrite",
        "interrupts",
        "WiFiServer",
        "disconnect",
        "playMelody",
        "parseFloat",
        "autoscroll",
        "getPINUsed",
        "setPINUsed",
        "setTimeout",
        "sendAnalog",
        "readSlider",
        "analogRead",
        "beginWrite",
        "createChar",
        "motorsStop",
        "keyPressed",
        "tempoWrite",
        "readButton",
        "subnetMask",
        "debugPrint",
        "macAddress",
        "writeGreen",
        "randomSeed",
        "attachGPRS",
        "readString",
        "sendString",
        "remotePort",
        "releaseAll",
        "mouseMoved",
        "background",
        "getXChange",
        "getYChange",
        "answerCall",
        "getResult",
        "voiceCall",
        "endPacket",
        "constrain",
        "getSocket",
        "writeJSON",
        "getButton",
        "available",
        "connected",
        "findUntil",
        "readBytes",
        "exitValue",
        "readGreen",
        "writeBlue",
        "startLoop",
        "IPAddress",
        "isPressed",
        "sendSysex",
        "pauseMode",
        "gatewayIP",
        "setCursor",
        "getOemKey",
        "tuneWrite",
        "noDisplay",
        "loadImage",
        "switchPIN",
        "onRequest",
        "onReceive",
        "changePIN",
        "playFile",
        "noBuffer",
        "parseInt",
        "overflow",
        "checkPIN",
        "knobRead",
        "beginTFT",
        "bitClear",
        "updateIR",
        "bitWrite",
        "position",
        "writeRGB",
        "highByte",
        "writeRed",
        "setSpeed",
        "readBlue",
        "noStroke",
        "remoteIP",
        "transfer",
        "shutdown",
        "hangCall",
        "beginSMS",
        "endWrite",
        "attached",
        "maintain",
        "noCursor",
        "checkReg",
        "checkPUK",
        "shiftOut",
        "isValid",
        "shiftIn",
        "pulseIn",
        "connect",
        "println",
        "localIP",
        "pinMode",
        "getIMEI",
        "display",
        "noBlink",
        "process",
        "getBand",
        "running",
        "beginSD",
        "drawBMP",
        "lowByte",
        "setBand",
        "release",
        "bitRead",
        "prepare",
        "pointTo",
        "readRed",
        "setMode",
        "noFill",
        "remove",
        "listen",
        "stroke",
        "detach",
        "attach",
        "noTone",
        "exists",
        "buffer",
        "height",
        "bitSet",
        "circle",
        "config",
        "cursor",
        "random",
        "IRread",
        "setDNS",
        "endSMS",
        "getKey",
        "micros",
        "millis",
        "begin",
        "print",
        "write",
        "ready",
        "flush",
        "width",
        "isPIN",
        "blink",
        "clear",
        "press",
        "mkdir",
        "rmdir",
        "close",
        "point",
        "yield",
        "image",
        "BSSID",
        "click",
        "delay",
        "read",
        "text",
        "move",
        "peek",
        "beep",
        "rect",
        "line",
        "open",
        "seek",
        "fill",
        "size",
        "turn",
        "stop",
        "home",
        "find",
        "step",
        "tone",
        "sqrt",
        "RSSI",
        "SSID",
        "end",
        "bit",
        "tan",
        "cos",
        "sin",
        "pow",
        "map",
        "abs",
        "max",
        "min",
        "get",
        "run",
        "put"
      ],
      literal: [
        "DIGITAL_MESSAGE",
        "FIRMATA_STRING",
        "ANALOG_MESSAGE",
        "REPORT_DIGITAL",
        "REPORT_ANALOG",
        "INPUT_PULLUP",
        "SET_PIN_MODE",
        "INTERNAL2V56",
        "SYSTEM_RESET",
        "LED_BUILTIN",
        "INTERNAL1V1",
        "SYSEX_START",
        "INTERNAL",
        "EXTERNAL",
        "DEFAULT",
        "OUTPUT",
        "INPUT",
        "HIGH",
        "LOW"
      ]
    };
    const ARDUINO = cPlusPlus(hljs);
    const kws = ARDUINO.keywords;
    kws.type = [
      ...kws.type,
      ...ARDUINO_KW.type
    ];
    kws.literal = [
      ...kws.literal,
      ...ARDUINO_KW.literal
    ];
    kws.built_in = [
      ...kws.built_in,
      ...ARDUINO_KW.built_in
    ];
    kws._hints = ARDUINO_KW._hints;
    ARDUINO.name = "Arduino";
    ARDUINO.aliases = ["ino"];
    ARDUINO.supersetOf = "cpp";
    return ARDUINO;
  };
  module.exports = arduino;
});

// node_modules/highlight.js/lib/languages/armasm.js
var require_armasm = __commonJS((exports, module) => {
  var armasm = function(hljs) {
    const COMMENT = { variants: [
      hljs.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: true
      }),
      hljs.COMMENT("[;@]", "$", { relevance: 0 }),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ] };
    return {
      name: "ARM Assembly",
      case_insensitive: true,
      aliases: ["arm"],
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        meta: ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
        },
        COMMENT,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\'",
          end: "[^\\\\]\'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              begin: "[#$=]?0x[0-9a-f]+"
            },
            {
              begin: "[#$=]?0b[01]+"
            },
            {
              begin: "[#$=]\\d+"
            },
            {
              begin: "\\b\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
            },
            {
              begin: "[=#]\\w+"
            }
          ],
          relevance: 0
        }
      ]
    };
  };
  module.exports = armasm;
});

// node_modules/highlight.js/lib/languages/xml.js
var require_xml = __commonJS((exports, module) => {
  var xml = function(hljs) {
    const regex6 = hljs.regex;
    const TAG_NAME_RE = regex6.concat(/[\p{L}_]/u, regex6.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
    const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
    const XML_ENTITIES = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    };
    const XML_META_KEYWORDS = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    };
    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
      begin: /\(/,
      end: /\)/
    });
    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: "string" });
    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" });
    const TAG_INTERNALS = {
      endsWithParent: true,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: XML_IDENT_RE,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: true,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [XML_ENTITIES]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [XML_ENTITIES]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: true,
      unicodeRegex: true,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            XML_META_KEYWORDS,
            QUOTE_META_STRING_MODE,
            APOS_META_STRING_MODE,
            XML_META_PAR_KEYWORDS,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    XML_META_KEYWORDS,
                    XML_META_PAR_KEYWORDS,
                    QUOTE_META_STRING_MODE,
                    APOS_META_STRING_MODE
                  ]
                }
              ]
            }
          ]
        },
        hljs.COMMENT(/<!--/, /-->/, { relevance: 10 }),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        XML_ENTITIES,
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                QUOTE_META_STRING_MODE
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/style>/,
            returnEnd: true,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/script>/,
            returnEnd: true,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        {
          className: "tag",
          begin: regex6.concat(/</, regex6.lookahead(regex6.concat(TAG_NAME_RE, regex6.either(/\/>/, />/, /\s/)))),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0,
              starts: TAG_INTERNALS
            }
          ]
        },
        {
          className: "tag",
          begin: regex6.concat(/<\//, regex6.lookahead(regex6.concat(TAG_NAME_RE, />/))),
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: true
            }
          ]
        }
      ]
    };
  };
  module.exports = xml;
});

// node_modules/highlight.js/lib/languages/asciidoc.js
var require_asciidoc = __commonJS((exports, module) => {
  var asciidoc = function(hljs) {
    const regex6 = hljs.regex;
    const HORIZONTAL_RULE = {
      begin: "^\'{3,}[ \\t]*$",
      relevance: 10
    };
    const ESCAPED_FORMATTING = [
      { begin: /\\[*_`]/ },
      { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
      { begin: /\\\\_{2}[^\n]*_{2}/ },
      { begin: /\\\\`{2}[^\n]*`{2}/ },
      { begin: /[:;}][*_`](?![*_`])/ }
    ];
    const STRONG = [
      {
        className: "strong",
        begin: /\*{2}([^\n]+?)\*{2}/
      },
      {
        className: "strong",
        begin: regex6.concat(/\*\*/, /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/, /(\*(?!\*)|\\[^\n]|[^*\n\\])*/, /\*\*/),
        relevance: 0
      },
      {
        className: "strong",
        begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
      },
      {
        className: "strong",
        begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
      }
    ];
    const EMPHASIS = [
      {
        className: "emphasis",
        begin: /_{2}([^\n]+?)_{2}/
      },
      {
        className: "emphasis",
        begin: regex6.concat(/__/, /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/, /(_(?!_)|\\[^\n]|[^_\n\\])*/, /__/),
        relevance: 0
      },
      {
        className: "emphasis",
        begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
      },
      {
        className: "emphasis",
        begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
      },
      {
        className: "emphasis",
        begin: "\\B\'(?![\'\\s])",
        end: "(\\n{2}|\')",
        contains: [
          {
            begin: "\\\\\'\\w",
            relevance: 0
          }
        ],
        relevance: 0
      }
    ];
    const ADMONITION = {
      className: "symbol",
      begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
      relevance: 10
    };
    const BULLET_LIST = {
      className: "bullet",
      begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
    };
    return {
      name: "AsciiDoc",
      aliases: ["adoc"],
      contains: [
        hljs.COMMENT("^/{4,}\\n", "\\n/{4,}$", { relevance: 10 }),
        hljs.COMMENT("^//", "$", { relevance: 0 }),
        {
          className: "title",
          begin: "^\\.\\w.*$"
        },
        {
          begin: "^[=\\*]{4,}\\n",
          end: "\\n^[=\\*]{4,}$",
          relevance: 10
        },
        {
          className: "section",
          relevance: 10,
          variants: [
            { begin: "^(={1,6})[ \t].+?([ \t]\\1)?$" },
            { begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$" }
          ]
        },
        {
          className: "meta",
          begin: "^:.+?:",
          end: "\\s",
          excludeEnd: true,
          relevance: 10
        },
        {
          className: "meta",
          begin: "^\\[.+?\\]$",
          relevance: 0
        },
        {
          className: "quote",
          begin: "^_{4,}\\n",
          end: "\\n_{4,}$",
          relevance: 10
        },
        {
          className: "code",
          begin: "^[\\-\\.]{4,}\\n",
          end: "\\n[\\-\\.]{4,}$",
          relevance: 10
        },
        {
          begin: "^\\+{4,}\\n",
          end: "\\n\\+{4,}$",
          contains: [
            {
              begin: "<",
              end: ">",
              subLanguage: "xml",
              relevance: 0
            }
          ],
          relevance: 10
        },
        BULLET_LIST,
        ADMONITION,
        ...ESCAPED_FORMATTING,
        ...STRONG,
        ...EMPHASIS,
        {
          className: "string",
          variants: [
            { begin: "``.+?''" },
            { begin: "`.+?'" }
          ]
        },
        {
          className: "code",
          begin: /`{2}/,
          end: /(\n{2}|`{2})/
        },
        {
          className: "code",
          begin: "(`.+?`|\\+.+?\\+)",
          relevance: 0
        },
        {
          className: "code",
          begin: "^[ \\t]",
          end: "$",
          relevance: 0
        },
        HORIZONTAL_RULE,
        {
          begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
          returnBegin: true,
          contains: [
            {
              begin: "(link|image:?):",
              relevance: 0
            },
            {
              className: "link",
              begin: "\\w",
              end: "[^\\[]+",
              relevance: 0
            },
            {
              className: "string",
              begin: "\\[",
              end: "\\]",
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            }
          ],
          relevance: 10
        }
      ]
    };
  };
  module.exports = asciidoc;
});

// node_modules/highlight.js/lib/languages/aspectj.js
var require_aspectj = __commonJS((exports, module) => {
  var aspectj = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = [
      "false",
      "synchronized",
      "int",
      "abstract",
      "float",
      "private",
      "char",
      "boolean",
      "static",
      "null",
      "if",
      "const",
      "for",
      "true",
      "while",
      "long",
      "throw",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "return",
      "void",
      "enum",
      "else",
      "extends",
      "implements",
      "break",
      "transient",
      "new",
      "catch",
      "instanceof",
      "byte",
      "super",
      "volatile",
      "case",
      "assert",
      "short",
      "package",
      "default",
      "double",
      "public",
      "try",
      "this",
      "switch",
      "continue",
      "throws",
      "privileged",
      "aspectOf",
      "adviceexecution",
      "proceed",
      "cflowbelow",
      "cflow",
      "initialization",
      "preinitialization",
      "staticinitialization",
      "withincode",
      "target",
      "within",
      "execution",
      "getWithinTypeName",
      "handler",
      "thisJoinPoint",
      "thisJoinPointStaticPart",
      "thisEnclosingJoinPointStaticPart",
      "declare",
      "parents",
      "warning",
      "error",
      "soft",
      "precedence",
      "thisAspectInstance"
    ];
    const SHORTKEYS = [
      "get",
      "set",
      "args",
      "call"
    ];
    return {
      name: "AspectJ",
      keywords: KEYWORDS2,
      illegal: /<\/|#/,
      contains: [
        hljs.COMMENT(/\/\*\*/, /\*\//, {
          relevance: 0,
          contains: [
            {
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: /@[A-Za-z]+/
            }
          ]
        }),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "class",
          beginKeywords: "aspect",
          end: /[{;=]/,
          excludeEnd: true,
          illegal: /[:;"\[\]]/,
          contains: [
            { beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              begin: /\([^\)]*/,
              end: /[)]+/,
              keywords: KEYWORDS2.concat(SHORTKEYS),
              excludeEnd: false
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /[{;=]/,
          excludeEnd: true,
          relevance: 0,
          keywords: "class interface",
          illegal: /[:"\[\]]/,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          beginKeywords: "pointcut after before around throwing returning",
          end: /[)]/,
          excludeEnd: false,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: regex6.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            }
          ]
        },
        {
          begin: /[:]/,
          returnBegin: true,
          end: /[{;]/,
          relevance: 0,
          excludeEnd: false,
          keywords: KEYWORDS2,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: regex6.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              keywords: KEYWORDS2.concat(SHORTKEYS),
              relevance: 0
            },
            hljs.QUOTE_STRING_MODE
          ]
        },
        {
          beginKeywords: "new throw",
          relevance: 0
        },
        {
          className: "function",
          begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
          returnBegin: true,
          end: /[{;=]/,
          keywords: KEYWORDS2,
          excludeEnd: true,
          contains: [
            {
              begin: regex6.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              relevance: 0,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              relevance: 0,
              keywords: KEYWORDS2,
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.C_NUMBER_MODE,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: /@[A-Za-z]+/
        }
      ]
    };
  };
  module.exports = aspectj;
});

// node_modules/highlight.js/lib/languages/autohotkey.js
var require_autohotkey = __commonJS((exports, module) => {
  var autohotkey = function(hljs) {
    const BACKTICK_ESCAPE = { begin: "`[\\s\\S]" };
    return {
      name: "AutoHotkey",
      case_insensitive: true,
      aliases: ["ahk"],
      keywords: {
        keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
        literal: "true false NOT AND OR",
        built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
      },
      contains: [
        BACKTICK_ESCAPE,
        hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [BACKTICK_ESCAPE] }),
        hljs.COMMENT(";", "$", { relevance: 0 }),
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: hljs.NUMBER_RE,
          relevance: 0
        },
        {
          className: "variable",
          begin: "%[a-zA-Z0-9#_$@]+%"
        },
        {
          className: "built_in",
          begin: "^\\s*\\w+\\s*(,|%)"
        },
        {
          className: "title",
          variants: [
            { begin: '^[^\\n";]+::(?!=)' },
            {
              begin: '^[^\\n";]+:(?!=)',
              relevance: 0
            }
          ]
        },
        {
          className: "meta",
          begin: "^\\s*#\\w+",
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: "A_[a-zA-Z0-9]+"
        },
        {
          begin: ",\\s*,"
        }
      ]
    };
  };
  module.exports = autohotkey;
});

// node_modules/highlight.js/lib/languages/autoit.js
var require_autoit = __commonJS((exports, module) => {
  var autoit = function(hljs) {
    const KEYWORDS2 = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With";
    const DIRECTIVES = [
      "EndRegion",
      "forcedef",
      "forceref",
      "ignorefunc",
      "include",
      "include-once",
      "NoTrayIcon",
      "OnAutoItStartRegister",
      "pragma",
      "Region",
      "RequireAdmin",
      "Tidy_Off",
      "Tidy_On",
      "Tidy_Parameters"
    ];
    const LITERAL = "True False And Null Not Or Default";
    const BUILT_IN = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive";
    const COMMENT = { variants: [
      hljs.COMMENT(";", "$", { relevance: 0 }),
      hljs.COMMENT("#cs", "#ce"),
      hljs.COMMENT("#comments-start", "#comments-end")
    ] };
    const VARIABLE = { begin: "\\$[A-z0-9_]+" };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    };
    const NUMBER = { variants: [
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ] };
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: DIRECTIVES },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          keywords: { keyword: "include" },
          end: "$",
          contains: [
            STRING,
            {
              className: "string",
              variants: [
                {
                  begin: "<",
                  end: ">"
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    {
                      begin: /""/,
                      relevance: 0
                    }
                  ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [
                    {
                      begin: /''/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        STRING,
        COMMENT
      ]
    };
    const CONSTANT = {
      className: "symbol",
      begin: "@[A-z0-9_]+"
    };
    const FUNCTION = {
      beginKeywords: "Func",
      end: "$",
      illegal: "\\$|\\[|%",
      contains: [
        hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          contains: [
            VARIABLE,
            STRING,
            NUMBER
          ]
        }
      ]
    };
    return {
      name: "AutoIt",
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN,
        literal: LITERAL
      },
      contains: [
        COMMENT,
        VARIABLE,
        STRING,
        NUMBER,
        PREPROCESSOR,
        CONSTANT,
        FUNCTION
      ]
    };
  };
  module.exports = autoit;
});

// node_modules/highlight.js/lib/languages/avrasm.js
var require_avrasm = __commonJS((exports, module) => {
  var avrasm = function(hljs) {
    return {
      name: "AVR Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        keyword: "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr",
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf",
        meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
      },
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(";", "$", { relevance: 0 }),
        hljs.C_NUMBER_MODE,
        hljs.BINARY_NUMBER_MODE,
        {
          className: "number",
          begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\'",
          end: "[^\\\\]\'",
          illegal: "[^\\\\][^\']"
        },
        {
          className: "symbol",
          begin: "^[A-Za-z0-9_.$]+:"
        },
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        {
          className: "subst",
          begin: "@[0-9]+"
        }
      ]
    };
  };
  module.exports = avrasm;
});

// node_modules/highlight.js/lib/languages/awk.js
var require_awk = __commonJS((exports, module) => {
  var awk = function(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const KEYWORDS2 = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10";
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /(u|b)?r?'''/,
          end: /'''/,
          relevance: 10
        },
        {
          begin: /(u|b)?r?"""/,
          end: /"""/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /(b|br)'/,
          end: /'/
        },
        {
          begin: /(b|br)"/,
          end: /"/
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Awk",
      keywords: { keyword: KEYWORDS2 },
      contains: [
        VARIABLE,
        STRING,
        hljs.REGEXP_MODE,
        hljs.HASH_COMMENT_MODE,
        hljs.NUMBER_MODE
      ]
    };
  };
  module.exports = awk;
});

// node_modules/highlight.js/lib/languages/axapta.js
var require_axapta = __commonJS((exports, module) => {
  var axapta = function(hljs) {
    const IDENT_RE = hljs.UNDERSCORE_IDENT_RE;
    const BUILT_IN_KEYWORDS = [
      "anytype",
      "boolean",
      "byte",
      "char",
      "container",
      "date",
      "double",
      "enum",
      "guid",
      "int",
      "int64",
      "long",
      "real",
      "short",
      "str",
      "utcdatetime",
      "var"
    ];
    const LITERAL_KEYWORDS = [
      "default",
      "false",
      "null",
      "true"
    ];
    const NORMAL_KEYWORDS = [
      "abstract",
      "as",
      "asc",
      "avg",
      "break",
      "breakpoint",
      "by",
      "byref",
      "case",
      "catch",
      "changecompany",
      "class",
      "client",
      "client",
      "common",
      "const",
      "continue",
      "count",
      "crosscompany",
      "delegate",
      "delete_from",
      "desc",
      "display",
      "div",
      "do",
      "edit",
      "else",
      "eventhandler",
      "exists",
      "extends",
      "final",
      "finally",
      "firstfast",
      "firstonly",
      "firstonly1",
      "firstonly10",
      "firstonly100",
      "firstonly1000",
      "flush",
      "for",
      "forceliterals",
      "forcenestedloop",
      "forceplaceholders",
      "forceselectorder",
      "forupdate",
      "from",
      "generateonly",
      "group",
      "hint",
      "if",
      "implements",
      "in",
      "index",
      "insert_recordset",
      "interface",
      "internal",
      "is",
      "join",
      "like",
      "maxof",
      "minof",
      "mod",
      "namespace",
      "new",
      "next",
      "nofetch",
      "notexists",
      "optimisticlock",
      "order",
      "outer",
      "pessimisticlock",
      "print",
      "private",
      "protected",
      "public",
      "readonly",
      "repeatableread",
      "retry",
      "return",
      "reverse",
      "select",
      "server",
      "setting",
      "static",
      "sum",
      "super",
      "switch",
      "this",
      "throw",
      "try",
      "ttsabort",
      "ttsbegin",
      "ttscommit",
      "unchecked",
      "update_recordset",
      "using",
      "validtimestate",
      "void",
      "where",
      "while"
    ];
    const KEYWORDS2 = {
      keyword: NORMAL_KEYWORDS,
      built_in: BUILT_IN_KEYWORDS,
      literal: LITERAL_KEYWORDS
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(class|interface)\s+/,
          IDENT_RE,
          /\s+(extends|implements)\s+/,
          IDENT_RE
        ] },
        { match: [
          /class\s+/,
          IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS2
    };
    return {
      name: "X++",
      aliases: ["x++"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        CLASS_DEFINITION
      ]
    };
  };
  module.exports = axapta;
});

// node_modules/highlight.js/lib/languages/bash.js
var require_bash = __commonJS((exports, module) => {
  var bash = function(hljs) {
    const regex6 = hljs.regex;
    const VAR = {};
    const BRACED_VAR = {
      begin: /\$\{/,
      end: /\}/,
      contains: [
        "self",
        {
          begin: /:-/,
          contains: [VAR]
        }
      ]
    };
    Object.assign(VAR, {
      className: "variable",
      variants: [
        { begin: regex6.concat(/\$[\w\d#@][\w\d_]*/, `(?![\\w\\d])(?![\$])`) },
        BRACED_VAR
      ]
    });
    const SUBST = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const HERE_DOC = {
      begin: /<<-?\s*(?=\w+)/,
      starts: { contains: [
        hljs.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ] }
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VAR,
        SUBST
      ]
    };
    SUBST.contains.push(QUOTE_STRING);
    const ESCAPED_QUOTE = {
      match: /\\"/
    };
    const APOS_STRING = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    const ESCAPED_APOS = {
      match: /\\'/
    };
    const ARITHMETIC = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [
        {
          begin: /\d+#[0-9a-f]+/,
          className: "number"
        },
        hljs.NUMBER_MODE,
        VAR
      ]
    };
    const SH_LIKE_SHELLS = [
      "fish",
      "bash",
      "zsh",
      "sh",
      "csh",
      "ksh",
      "tcsh",
      "dash",
      "scsh"
    ];
    const KNOWN_SHEBANG = hljs.SHEBANG({
      binary: `(${SH_LIKE_SHELLS.join("|")})`,
      relevance: 10
    });
    const FUNCTION = {
      className: "function",
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    };
    const KEYWORDS2 = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "for",
      "while",
      "until",
      "in",
      "do",
      "done",
      "case",
      "esac",
      "function",
      "select"
    ];
    const LITERALS = [
      "true",
      "false"
    ];
    const PATH_MODE = { match: /(\/[a-z._-]+)+/ };
    const SHELL_BUILT_INS = [
      "break",
      "cd",
      "continue",
      "eval",
      "exec",
      "exit",
      "export",
      "getopts",
      "hash",
      "pwd",
      "readonly",
      "return",
      "shift",
      "test",
      "times",
      "trap",
      "umask",
      "unset"
    ];
    const BASH_BUILT_INS = [
      "alias",
      "bind",
      "builtin",
      "caller",
      "command",
      "declare",
      "echo",
      "enable",
      "help",
      "let",
      "local",
      "logout",
      "mapfile",
      "printf",
      "read",
      "readarray",
      "source",
      "type",
      "typeset",
      "ulimit",
      "unalias"
    ];
    const ZSH_BUILT_INS = [
      "autoload",
      "bg",
      "bindkey",
      "bye",
      "cap",
      "chdir",
      "clone",
      "comparguments",
      "compcall",
      "compctl",
      "compdescribe",
      "compfiles",
      "compgroups",
      "compquote",
      "comptags",
      "comptry",
      "compvalues",
      "dirs",
      "disable",
      "disown",
      "echotc",
      "echoti",
      "emulate",
      "fc",
      "fg",
      "float",
      "functions",
      "getcap",
      "getln",
      "history",
      "integer",
      "jobs",
      "kill",
      "limit",
      "log",
      "noglob",
      "popd",
      "print",
      "pushd",
      "pushln",
      "rehash",
      "sched",
      "setcap",
      "setopt",
      "stat",
      "suspend",
      "ttyctl",
      "unfunction",
      "unhash",
      "unlimit",
      "unsetopt",
      "vared",
      "wait",
      "whence",
      "where",
      "which",
      "zcompile",
      "zformat",
      "zftp",
      "zle",
      "zmodload",
      "zparseopts",
      "zprof",
      "zpty",
      "zregexparse",
      "zsocket",
      "zstyle",
      "ztcp"
    ];
    const GNU_CORE_UTILS = [
      "chcon",
      "chgrp",
      "chown",
      "chmod",
      "cp",
      "dd",
      "df",
      "dir",
      "dircolors",
      "ln",
      "ls",
      "mkdir",
      "mkfifo",
      "mknod",
      "mktemp",
      "mv",
      "realpath",
      "rm",
      "rmdir",
      "shred",
      "sync",
      "touch",
      "truncate",
      "vdir",
      "b2sum",
      "base32",
      "base64",
      "cat",
      "cksum",
      "comm",
      "csplit",
      "cut",
      "expand",
      "fmt",
      "fold",
      "head",
      "join",
      "md5sum",
      "nl",
      "numfmt",
      "od",
      "paste",
      "ptx",
      "pr",
      "sha1sum",
      "sha224sum",
      "sha256sum",
      "sha384sum",
      "sha512sum",
      "shuf",
      "sort",
      "split",
      "sum",
      "tac",
      "tail",
      "tr",
      "tsort",
      "unexpand",
      "uniq",
      "wc",
      "arch",
      "basename",
      "chroot",
      "date",
      "dirname",
      "du",
      "echo",
      "env",
      "expr",
      "factor",
      "groups",
      "hostid",
      "id",
      "link",
      "logname",
      "nice",
      "nohup",
      "nproc",
      "pathchk",
      "pinky",
      "printenv",
      "printf",
      "pwd",
      "readlink",
      "runcon",
      "seq",
      "sleep",
      "stat",
      "stdbuf",
      "stty",
      "tee",
      "test",
      "timeout",
      "tty",
      "uname",
      "unlink",
      "uptime",
      "users",
      "who",
      "whoami",
      "yes"
    ];
    return {
      name: "Bash",
      aliases: ["sh"],
      keywords: {
        $pattern: /\b[a-z][a-z0-9._-]+\b/,
        keyword: KEYWORDS2,
        literal: LITERALS,
        built_in: [
          ...SHELL_BUILT_INS,
          ...BASH_BUILT_INS,
          "set",
          "shopt",
          ...ZSH_BUILT_INS,
          ...GNU_CORE_UTILS
        ]
      },
      contains: [
        KNOWN_SHEBANG,
        hljs.SHEBANG(),
        FUNCTION,
        ARITHMETIC,
        hljs.HASH_COMMENT_MODE,
        HERE_DOC,
        PATH_MODE,
        QUOTE_STRING,
        ESCAPED_QUOTE,
        APOS_STRING,
        ESCAPED_APOS,
        VAR
      ]
    };
  };
  module.exports = bash;
});

// node_modules/highlight.js/lib/languages/basic.js
var require_basic = __commonJS((exports, module) => {
  var basic = function(hljs) {
    const KEYWORDS2 = [
      "ABS",
      "ASC",
      "AND",
      "ATN",
      "AUTO|0",
      "BEEP",
      "BLOAD|10",
      "BSAVE|10",
      "CALL",
      "CALLS",
      "CDBL",
      "CHAIN",
      "CHDIR",
      "CHR$|10",
      "CINT",
      "CIRCLE",
      "CLEAR",
      "CLOSE",
      "CLS",
      "COLOR",
      "COM",
      "COMMON",
      "CONT",
      "COS",
      "CSNG",
      "CSRLIN",
      "CVD",
      "CVI",
      "CVS",
      "DATA",
      "DATE$",
      "DEFDBL",
      "DEFINT",
      "DEFSNG",
      "DEFSTR",
      "DEF|0",
      "SEG",
      "USR",
      "DELETE",
      "DIM",
      "DRAW",
      "EDIT",
      "END",
      "ENVIRON",
      "ENVIRON$",
      "EOF",
      "EQV",
      "ERASE",
      "ERDEV",
      "ERDEV$",
      "ERL",
      "ERR",
      "ERROR",
      "EXP",
      "FIELD",
      "FILES",
      "FIX",
      "FOR|0",
      "FRE",
      "GET",
      "GOSUB|10",
      "GOTO",
      "HEX$",
      "IF",
      "THEN",
      "ELSE|0",
      "INKEY$",
      "INP",
      "INPUT",
      "INPUT#",
      "INPUT$",
      "INSTR",
      "IMP",
      "INT",
      "IOCTL",
      "IOCTL$",
      "KEY",
      "ON",
      "OFF",
      "LIST",
      "KILL",
      "LEFT$",
      "LEN",
      "LET",
      "LINE",
      "LLIST",
      "LOAD",
      "LOC",
      "LOCATE",
      "LOF",
      "LOG",
      "LPRINT",
      "USING",
      "LSET",
      "MERGE",
      "MID$",
      "MKDIR",
      "MKD$",
      "MKI$",
      "MKS$",
      "MOD",
      "NAME",
      "NEW",
      "NEXT",
      "NOISE",
      "NOT",
      "OCT$",
      "ON",
      "OR",
      "PEN",
      "PLAY",
      "STRIG",
      "OPEN",
      "OPTION",
      "BASE",
      "OUT",
      "PAINT",
      "PALETTE",
      "PCOPY",
      "PEEK",
      "PMAP",
      "POINT",
      "POKE",
      "POS",
      "PRINT",
      "PRINT]",
      "PSET",
      "PRESET",
      "PUT",
      "RANDOMIZE",
      "READ",
      "REM",
      "RENUM",
      "RESET|0",
      "RESTORE",
      "RESUME",
      "RETURN|0",
      "RIGHT$",
      "RMDIR",
      "RND",
      "RSET",
      "RUN",
      "SAVE",
      "SCREEN",
      "SGN",
      "SHELL",
      "SIN",
      "SOUND",
      "SPACE$",
      "SPC",
      "SQR",
      "STEP",
      "STICK",
      "STOP",
      "STR$",
      "STRING$",
      "SWAP",
      "SYSTEM",
      "TAB",
      "TAN",
      "TIME$",
      "TIMER",
      "TROFF",
      "TRON",
      "TO",
      "USR",
      "VAL",
      "VARPTR",
      "VARPTR$",
      "VIEW",
      "WAIT",
      "WHILE",
      "WEND",
      "WIDTH",
      "WINDOW",
      "WRITE",
      "XOR"
    ];
    return {
      name: "BASIC",
      case_insensitive: true,
      illegal: "^.",
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
        keyword: KEYWORDS2
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.COMMENT("REM", "$", { relevance: 10 }),
        hljs.COMMENT("\'", "$", { relevance: 0 }),
        {
          className: "symbol",
          begin: "^[0-9]+ ",
          relevance: 10
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
          relevance: 0
        },
        {
          className: "number",
          begin: "(&[hH][0-9a-fA-F]{1,4})"
        },
        {
          className: "number",
          begin: "(&[oO][0-7]{1,6})"
        }
      ]
    };
  };
  module.exports = basic;
});

// node_modules/highlight.js/lib/languages/bnf.js
var require_bnf = __commonJS((exports, module) => {
  var bnf = function(hljs) {
    return {
      name: "Backus\u2013Naur Form",
      contains: [
        {
          className: "attribute",
          begin: /</,
          end: />/
        },
        {
          begin: /::=/,
          end: /$/,
          contains: [
            {
              begin: /</,
              end: />/
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        }
      ]
    };
  };
  module.exports = bnf;
});

// node_modules/highlight.js/lib/languages/brainfuck.js
var require_brainfuck = __commonJS((exports, module) => {
  var brainfuck = function(hljs) {
    const LITERAL = {
      className: "literal",
      begin: /[+-]+/,
      relevance: 0
    };
    return {
      name: "Brainfuck",
      aliases: ["bf"],
      contains: [
        hljs.COMMENT(/[^\[\]\.,\+\-<> \r\n]/, /[\[\]\.,\+\-<> \r\n]/, {
          contains: [
            {
              match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
              relevance: 0
            }
          ],
          returnEnd: true,
          relevance: 0
        }),
        {
          className: "title",
          begin: "[\\[\\]]",
          relevance: 0
        },
        {
          className: "string",
          begin: "[\\.,]",
          relevance: 0
        },
        {
          begin: /(?=\+\+|--)/,
          contains: [LITERAL]
        },
        LITERAL
      ]
    };
  };
  module.exports = brainfuck;
});

// node_modules/highlight.js/lib/languages/c.js
var require_c = __commonJS((exports, module) => {
  var c2 = function(hljs) {
    const regex6 = hljs.regex;
    const C_LINE_COMMENT_MODE = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + regex6.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex6.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const TYPES = {
      className: "type",
      variants: [
        { begin: "\\b[a-z\\d_]*_t\\b" },
        { match: /\batomic_[a-z]{3,6}\b/ }
      ]
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?\'(" + CHARACTER_ESCAPES + "|.)",
          end: "\'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01\']+)" },
        { begin: "(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)" }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE = {
      className: "title",
      begin: regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const C_KEYWORDS = [
      "asm",
      "auto",
      "break",
      "case",
      "continue",
      "default",
      "do",
      "else",
      "enum",
      "extern",
      "for",
      "fortran",
      "goto",
      "if",
      "inline",
      "register",
      "restrict",
      "return",
      "sizeof",
      "struct",
      "switch",
      "typedef",
      "union",
      "volatile",
      "while",
      "_Alignas",
      "_Alignof",
      "_Atomic",
      "_Generic",
      "_Noreturn",
      "_Static_assert",
      "_Thread_local",
      "alignas",
      "alignof",
      "noreturn",
      "static_assert",
      "thread_local",
      "_Pragma"
    ];
    const C_TYPES = [
      "float",
      "double",
      "signed",
      "unsigned",
      "int",
      "short",
      "long",
      "char",
      "void",
      "_Bool",
      "_Complex",
      "_Imaginary",
      "_Decimal32",
      "_Decimal64",
      "_Decimal128",
      "const",
      "static",
      "complex",
      "bool",
      "imaginary"
    ];
    const KEYWORDS2 = {
      keyword: C_KEYWORDS,
      type: C_TYPES,
      literal: "true false NULL",
      built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
    };
    const EXPRESSION_CONTAINS = [
      PREPROCESSOR,
      TYPES,
      C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS
    ];
    const EXPRESSION_CONTEXT = {
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: KEYWORDS2,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: KEYWORDS2,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          begin: DECLTYPE_AUTO_RE,
          keywords: KEYWORDS2,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [hljs.inherit(TITLE_MODE, { className: "title.function" })],
          relevance: 0
        },
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS,
            NUMBERS,
            TYPES,
            {
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS,
                NUMBERS,
                TYPES
              ]
            }
          ]
        },
        TYPES,
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C",
      aliases: ["h"],
      keywords: KEYWORDS2,
      disableAutodetect: true,
      illegal: "</",
      contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [
        PREPROCESSOR,
        {
          begin: hljs.IDENT_RE + "::",
          keywords: KEYWORDS2
        },
        {
          className: "class",
          beginKeywords: "enum class struct union",
          end: /[{;:<>=]/,
          contains: [
            { beginKeywords: "final class struct" },
            hljs.TITLE_MODE
          ]
        }
      ]),
      exports: {
        preprocessor: PREPROCESSOR,
        strings: STRINGS,
        keywords: KEYWORDS2
      }
    };
  };
  module.exports = c2;
});

// node_modules/highlight.js/lib/languages/cal.js
var require_cal = __commonJS((exports, module) => {
  var cal = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = [
      "div",
      "mod",
      "in",
      "and",
      "or",
      "not",
      "xor",
      "asserterror",
      "begin",
      "case",
      "do",
      "downto",
      "else",
      "end",
      "exit",
      "for",
      "local",
      "if",
      "of",
      "repeat",
      "then",
      "to",
      "until",
      "while",
      "with",
      "var"
    ];
    const LITERALS = "false true";
    const COMMENT_MODES = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
      hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ];
    const STRING = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    };
    const CHAR_STRING = {
      className: "string",
      begin: /(#\d+)+/
    };
    const DATE = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
      relevance: 0
    };
    const DBL_QUOTED_VARIABLE = {
      className: "string",
      begin: '"',
      end: '"'
    };
    const PROCEDURE = {
      match: [
        /procedure/,
        /\s+/,
        /[a-zA-Z_][\w@]*/,
        /\s*/
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: [
            STRING,
            CHAR_STRING,
            hljs.NUMBER_MODE
          ]
        },
        ...COMMENT_MODES
      ]
    };
    const OBJECT_TYPES = [
      "Table",
      "Form",
      "Report",
      "Dataport",
      "Codeunit",
      "XMLport",
      "MenuSuite",
      "Page",
      "Query"
    ];
    const OBJECT = {
      match: [
        /OBJECT/,
        /\s+/,
        regex6.either(...OBJECT_TYPES),
        /\s+/,
        /\d+/,
        /\s+(?=[^\s])/,
        /.*/,
        /$/
      ],
      relevance: 3,
      scope: {
        1: "keyword",
        3: "type",
        5: "number",
        7: "title"
      }
    };
    const PROPERTY = {
      match: /[\w]+(?=\=)/,
      scope: "attribute",
      relevance: 0
    };
    return {
      name: "C/AL",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS
      },
      illegal: /\/\*/,
      contains: [
        PROPERTY,
        STRING,
        CHAR_STRING,
        DATE,
        DBL_QUOTED_VARIABLE,
        hljs.NUMBER_MODE,
        OBJECT,
        PROCEDURE
      ]
    };
  };
  module.exports = cal;
});

// node_modules/highlight.js/lib/languages/capnproto.js
var require_capnproto = __commonJS((exports, module) => {
  var capnproto = function(hljs) {
    const KEYWORDS2 = [
      "struct",
      "enum",
      "interface",
      "union",
      "group",
      "import",
      "using",
      "const",
      "annotation",
      "extends",
      "in",
      "of",
      "on",
      "as",
      "with",
      "from",
      "fixed"
    ];
    const TYPES = [
      "Void",
      "Bool",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Float32",
      "Float64",
      "Text",
      "Data",
      "AnyPointer",
      "AnyStruct",
      "Capability",
      "List"
    ];
    const LITERALS = [
      "true",
      "false"
    ];
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(struct|enum|interface)/,
          /\s+/,
          hljs.IDENT_RE
        ] },
        { match: [
          /extends/,
          /\s*\(/,
          hljs.IDENT_RE,
          /\s*\)/
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Cap\u2019n Proto",
      aliases: ["capnp"],
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES,
        literal: LITERALS
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.HASH_COMMENT_MODE,
        {
          className: "meta",
          begin: /@0x[\w\d]{16};/,
          illegal: /\n/
        },
        {
          className: "symbol",
          begin: /@\d+\b/
        },
        CLASS_DEFINITION
      ]
    };
  };
  module.exports = capnproto;
});

// node_modules/highlight.js/lib/languages/ceylon.js
var require_ceylon = __commonJS((exports, module) => {
  var ceylon = function(hljs) {
    const KEYWORDS2 = [
      "assembly",
      "module",
      "package",
      "import",
      "alias",
      "class",
      "interface",
      "object",
      "given",
      "value",
      "assign",
      "void",
      "function",
      "new",
      "of",
      "extends",
      "satisfies",
      "abstracts",
      "in",
      "out",
      "return",
      "break",
      "continue",
      "throw",
      "assert",
      "dynamic",
      "if",
      "else",
      "switch",
      "case",
      "for",
      "while",
      "try",
      "catch",
      "finally",
      "then",
      "let",
      "this",
      "outer",
      "super",
      "is",
      "exists",
      "nonempty"
    ];
    const DECLARATION_MODIFIERS = [
      "shared",
      "abstract",
      "formal",
      "default",
      "actual",
      "variable",
      "late",
      "native",
      "deprecated",
      "final",
      "sealed",
      "annotation",
      "suppressWarnings",
      "small"
    ];
    const DOCUMENTATION = [
      "doc",
      "by",
      "license",
      "see",
      "throws",
      "tagged"
    ];
    const SUBST = {
      className: "subst",
      excludeBegin: true,
      excludeEnd: true,
      begin: /``/,
      end: /``/,
      keywords: KEYWORDS2,
      relevance: 10
    };
    const EXPRESSIONS = [
      {
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        className: "string",
        begin: '"',
        end: '"',
        contains: [SUBST]
      },
      {
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        className: "number",
        begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
        relevance: 0
      }
    ];
    SUBST.contains = EXPRESSIONS;
    return {
      name: "Ceylon",
      keywords: {
        keyword: KEYWORDS2.concat(DECLARATION_MODIFIERS),
        meta: DOCUMENTATION
      },
      illegal: "\\$[^01]|#[^0-9a-fA-F]",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        {
          className: "meta",
          begin: '@[a-z]\\w*(?::"[^"]*")?'
        }
      ].concat(EXPRESSIONS)
    };
  };
  module.exports = ceylon;
});

// node_modules/highlight.js/lib/languages/clean.js
var require_clean2 = __commonJS((exports, module) => {
  var clean = function(hljs) {
    const KEYWORDS2 = [
      "if",
      "let",
      "in",
      "with",
      "where",
      "case",
      "of",
      "class",
      "instance",
      "otherwise",
      "implementation",
      "definition",
      "system",
      "module",
      "from",
      "import",
      "qualified",
      "as",
      "special",
      "code",
      "inline",
      "foreign",
      "export",
      "ccall",
      "stdcall",
      "generic",
      "derive",
      "infix",
      "infixl",
      "infixr"
    ];
    return {
      name: "Clean",
      aliases: [
        "icl",
        "dcl"
      ],
      keywords: {
        keyword: KEYWORDS2,
        built_in: "Int Real Char Bool",
        literal: "True False"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
        }
      ]
    };
  };
  module.exports = clean;
});

// node_modules/highlight.js/lib/languages/clojure.js
var require_clojure = __commonJS((exports, module) => {
  var clojure = function(hljs) {
    const SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&\'";
    const SYMBOL_RE = "[#]?[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:$#]*";
    const globals = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord";
    const keywords = {
      $pattern: SYMBOL_RE,
      built_in: globals + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
    };
    const SYMBOL = {
      begin: SYMBOL_RE,
      relevance: 0
    };
    const NUMBER = {
      scope: "number",
      relevance: 0,
      variants: [
        { match: /[-+]?0[xX][0-9a-fA-F]+N?/ },
        { match: /[-+]?0[0-7]+N?/ },
        { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ },
        { match: /[-+]?[0-9]+\/[0-9]+N?/ },
        { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ },
        { match: /[-+]?([1-9][0-9]*|0)N?/ }
      ]
    };
    const CHARACTER = {
      scope: "character",
      variants: [
        { match: /\\o[0-3]?[0-7]{1,2}/ },
        { match: /\\u[0-9a-fA-F]{4}/ },
        { match: /\\(newline|space|tab|formfeed|backspace|return)/ },
        {
          match: /\\\S/,
          relevance: 0
        }
      ]
    };
    const REGEX = {
      scope: "regex",
      begin: /#"/,
      end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMA = {
      scope: "punctuation",
      match: /,/,
      relevance: 0
    };
    const COMMENT = hljs.COMMENT(";", "$", { relevance: 0 });
    const LITERAL = {
      className: "literal",
      begin: /\b(true|false|nil)\b/
    };
    const COLLECTION = {
      begin: "\\[|(#::?" + SYMBOL_RE + ")?\\{",
      end: "[\\]\\}]",
      relevance: 0
    };
    const KEY = {
      className: "symbol",
      begin: "[:]{1,2}" + SYMBOL_RE
    };
    const LIST = {
      begin: "\\(",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const NAME = {
      keywords,
      className: "name",
      begin: SYMBOL_RE,
      relevance: 0,
      starts: BODY
    };
    const DEFAULT_CONTAINS = [
      COMMA,
      LIST,
      CHARACTER,
      REGEX,
      STRING,
      COMMENT,
      KEY,
      COLLECTION,
      NUMBER,
      LITERAL,
      SYMBOL
    ];
    const GLOBAL = {
      beginKeywords: globals,
      keywords: {
        $pattern: SYMBOL_RE,
        keyword: globals
      },
      end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
      contains: [
        {
          className: "title",
          begin: SYMBOL_RE,
          relevance: 0,
          excludeEnd: true,
          endsParent: true
        }
      ].concat(DEFAULT_CONTAINS)
    };
    LIST.contains = [
      GLOBAL,
      NAME,
      BODY
    ];
    BODY.contains = DEFAULT_CONTAINS;
    COLLECTION.contains = DEFAULT_CONTAINS;
    return {
      name: "Clojure",
      aliases: [
        "clj",
        "edn"
      ],
      illegal: /\S/,
      contains: [
        COMMA,
        LIST,
        CHARACTER,
        REGEX,
        STRING,
        COMMENT,
        KEY,
        COLLECTION,
        NUMBER,
        LITERAL
      ]
    };
  };
  module.exports = clojure;
});

// node_modules/highlight.js/lib/languages/clojure-repl.js
var require_clojure_repl = __commonJS((exports, module) => {
  var clojureRepl = function(hljs) {
    return {
      name: "Clojure REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^([\w.-]+|\s*#_)?=>/,
          starts: {
            end: /$/,
            subLanguage: "clojure"
          }
        }
      ]
    };
  };
  module.exports = clojureRepl;
});

// node_modules/highlight.js/lib/languages/cmake.js
var require_cmake = __commonJS((exports, module) => {
  var cmake = function(hljs) {
    return {
      name: "CMake",
      aliases: ["cmake.in"],
      case_insensitive: true,
      keywords: { keyword: "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined" },
      contains: [
        {
          className: "variable",
          begin: /\$\{/,
          end: /\}/
        },
        hljs.COMMENT(/#\[\[/, /]]/),
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE
      ]
    };
  };
  module.exports = cmake;
});

// node_modules/highlight.js/lib/languages/coffeescript.js
var require_coffeescript = __commonJS((exports, module) => {
  var coffeescript = function(hljs) {
    const COFFEE_BUILT_INS = [
      "npm",
      "print"
    ];
    const COFFEE_LITERALS = [
      "yes",
      "no",
      "on",
      "off"
    ];
    const COFFEE_KEYWORDS = [
      "then",
      "unless",
      "until",
      "loop",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not"
    ];
    const NOT_VALID_KEYWORDS = [
      "var",
      "const",
      "let",
      "function",
      "static"
    ];
    const excluding = (list3) => (kw) => !list3.includes(kw);
    const KEYWORDS$1 = {
      keyword: KEYWORDS2.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
      literal: LITERALS.concat(COFFEE_LITERALS),
      built_in: BUILT_INS.concat(COFFEE_BUILT_INS)
    };
    const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS$1
    };
    const EXPRESSIONS = [
      hljs.BINARY_NUMBER_MODE,
      hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "///",
            end: "///",
            contains: [
              SUBST,
              hljs.HASH_COMMENT_MODE
            ]
          },
          {
            begin: "//[gim]{0,3}(?=\\W)",
            relevance: 0
          },
          {
            begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
          }
        ]
      },
      {
        begin: "@" + JS_IDENT_RE
      },
      {
        subLanguage: "javascript",
        excludeBegin: true,
        excludeEnd: true,
        variants: [
          {
            begin: "```",
            end: "```"
          },
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
    const PARAMS = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS$1,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          JS_IDENT_RE,
          /\s+extends\s+/,
          JS_IDENT_RE
        ] },
        { match: [
          /class\s+/,
          JS_IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS$1
    };
    return {
      name: "CoffeeScript",
      aliases: [
        "coffee",
        "cson",
        "iced"
      ],
      keywords: KEYWORDS$1,
      illegal: /\/\*/,
      contains: [
        ...EXPRESSIONS,
        hljs.COMMENT("###", "###"),
        hljs.HASH_COMMENT_MODE,
        {
          className: "function",
          begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            TITLE,
            PARAMS
          ]
        },
        {
          begin: /[:\(,=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: POSSIBLE_PARAMS_RE,
              end: "[-=]>",
              returnBegin: true,
              contains: [PARAMS]
            }
          ]
        },
        CLASS_DEFINITION,
        {
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ]
    };
  };
  var KEYWORDS2 = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ];
  var LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  var TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
  ];
  var ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  var BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  var BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
  module.exports = coffeescript;
});

// node_modules/highlight.js/lib/languages/coq.js
var require_coq = __commonJS((exports, module) => {
  var coq = function(hljs) {
    const KEYWORDS2 = [
      "_|0",
      "as",
      "at",
      "cofix",
      "else",
      "end",
      "exists",
      "exists2",
      "fix",
      "for",
      "forall",
      "fun",
      "if",
      "IF",
      "in",
      "let",
      "match",
      "mod",
      "Prop",
      "return",
      "Set",
      "then",
      "Type",
      "using",
      "where",
      "with",
      "Abort",
      "About",
      "Add",
      "Admit",
      "Admitted",
      "All",
      "Arguments",
      "Assumptions",
      "Axiom",
      "Back",
      "BackTo",
      "Backtrack",
      "Bind",
      "Blacklist",
      "Canonical",
      "Cd",
      "Check",
      "Class",
      "Classes",
      "Close",
      "Coercion",
      "Coercions",
      "CoFixpoint",
      "CoInductive",
      "Collection",
      "Combined",
      "Compute",
      "Conjecture",
      "Conjectures",
      "Constant",
      "constr",
      "Constraint",
      "Constructors",
      "Context",
      "Corollary",
      "CreateHintDb",
      "Cut",
      "Declare",
      "Defined",
      "Definition",
      "Delimit",
      "Dependencies",
      "Dependent",
      "Derive",
      "Drop",
      "eauto",
      "End",
      "Equality",
      "Eval",
      "Example",
      "Existential",
      "Existentials",
      "Existing",
      "Export",
      "exporting",
      "Extern",
      "Extract",
      "Extraction",
      "Fact",
      "Field",
      "Fields",
      "File",
      "Fixpoint",
      "Focus",
      "for",
      "From",
      "Function",
      "Functional",
      "Generalizable",
      "Global",
      "Goal",
      "Grab",
      "Grammar",
      "Graph",
      "Guarded",
      "Heap",
      "Hint",
      "HintDb",
      "Hints",
      "Hypotheses",
      "Hypothesis",
      "ident",
      "Identity",
      "If",
      "Immediate",
      "Implicit",
      "Import",
      "Include",
      "Inductive",
      "Infix",
      "Info",
      "Initial",
      "Inline",
      "Inspect",
      "Instance",
      "Instances",
      "Intro",
      "Intros",
      "Inversion",
      "Inversion_clear",
      "Language",
      "Left",
      "Lemma",
      "Let",
      "Libraries",
      "Library",
      "Load",
      "LoadPath",
      "Local",
      "Locate",
      "Ltac",
      "ML",
      "Mode",
      "Module",
      "Modules",
      "Monomorphic",
      "Morphism",
      "Next",
      "NoInline",
      "Notation",
      "Obligation",
      "Obligations",
      "Opaque",
      "Open",
      "Optimize",
      "Options",
      "Parameter",
      "Parameters",
      "Parametric",
      "Path",
      "Paths",
      "pattern",
      "Polymorphic",
      "Preterm",
      "Print",
      "Printing",
      "Program",
      "Projections",
      "Proof",
      "Proposition",
      "Pwd",
      "Qed",
      "Quit",
      "Rec",
      "Record",
      "Recursive",
      "Redirect",
      "Relation",
      "Remark",
      "Remove",
      "Require",
      "Reserved",
      "Reset",
      "Resolve",
      "Restart",
      "Rewrite",
      "Right",
      "Ring",
      "Rings",
      "Save",
      "Scheme",
      "Scope",
      "Scopes",
      "Script",
      "Search",
      "SearchAbout",
      "SearchHead",
      "SearchPattern",
      "SearchRewrite",
      "Section",
      "Separate",
      "Set",
      "Setoid",
      "Show",
      "Solve",
      "Sorted",
      "Step",
      "Strategies",
      "Strategy",
      "Structure",
      "SubClass",
      "Table",
      "Tables",
      "Tactic",
      "Term",
      "Test",
      "Theorem",
      "Time",
      "Timeout",
      "Transparent",
      "Type",
      "Typeclasses",
      "Types",
      "Undelimit",
      "Undo",
      "Unfocus",
      "Unfocused",
      "Unfold",
      "Universe",
      "Universes",
      "Unset",
      "Unshelve",
      "using",
      "Variable",
      "Variables",
      "Variant",
      "Verbose",
      "Visibility",
      "where",
      "with"
    ];
    const BUILT_INS = [
      "abstract",
      "absurd",
      "admit",
      "after",
      "apply",
      "as",
      "assert",
      "assumption",
      "at",
      "auto",
      "autorewrite",
      "autounfold",
      "before",
      "bottom",
      "btauto",
      "by",
      "case",
      "case_eq",
      "cbn",
      "cbv",
      "change",
      "classical_left",
      "classical_right",
      "clear",
      "clearbody",
      "cofix",
      "compare",
      "compute",
      "congruence",
      "constr_eq",
      "constructor",
      "contradict",
      "contradiction",
      "cut",
      "cutrewrite",
      "cycle",
      "decide",
      "decompose",
      "dependent",
      "destruct",
      "destruction",
      "dintuition",
      "discriminate",
      "discrR",
      "do",
      "double",
      "dtauto",
      "eapply",
      "eassumption",
      "eauto",
      "ecase",
      "econstructor",
      "edestruct",
      "ediscriminate",
      "eelim",
      "eexact",
      "eexists",
      "einduction",
      "einjection",
      "eleft",
      "elim",
      "elimtype",
      "enough",
      "equality",
      "erewrite",
      "eright",
      "esimplify_eq",
      "esplit",
      "evar",
      "exact",
      "exactly_once",
      "exfalso",
      "exists",
      "f_equal",
      "fail",
      "field",
      "field_simplify",
      "field_simplify_eq",
      "first",
      "firstorder",
      "fix",
      "fold",
      "fourier",
      "functional",
      "generalize",
      "generalizing",
      "gfail",
      "give_up",
      "has_evar",
      "hnf",
      "idtac",
      "in",
      "induction",
      "injection",
      "instantiate",
      "intro",
      "intro_pattern",
      "intros",
      "intuition",
      "inversion",
      "inversion_clear",
      "is_evar",
      "is_var",
      "lapply",
      "lazy",
      "left",
      "lia",
      "lra",
      "move",
      "native_compute",
      "nia",
      "nsatz",
      "omega",
      "once",
      "pattern",
      "pose",
      "progress",
      "proof",
      "psatz",
      "quote",
      "record",
      "red",
      "refine",
      "reflexivity",
      "remember",
      "rename",
      "repeat",
      "replace",
      "revert",
      "revgoals",
      "rewrite",
      "rewrite_strat",
      "right",
      "ring",
      "ring_simplify",
      "rtauto",
      "set",
      "setoid_reflexivity",
      "setoid_replace",
      "setoid_rewrite",
      "setoid_symmetry",
      "setoid_transitivity",
      "shelve",
      "shelve_unifiable",
      "simpl",
      "simple",
      "simplify_eq",
      "solve",
      "specialize",
      "split",
      "split_Rabs",
      "split_Rmult",
      "stepl",
      "stepr",
      "subst",
      "sum",
      "swap",
      "symmetry",
      "tactic",
      "tauto",
      "time",
      "timeout",
      "top",
      "transitivity",
      "trivial",
      "try",
      "tryif",
      "unfold",
      "unify",
      "until",
      "using",
      "vm_compute",
      "with"
    ];
    return {
      name: "Coq",
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.COMMENT("\\(\\*", "\\*\\)"),
        hljs.C_NUMBER_MODE,
        {
          className: "type",
          excludeBegin: true,
          begin: "\\|\\s*",
          end: "\\w+"
        },
        {
          begin: /[-=]>/
        }
      ]
    };
  };
  module.exports = coq;
});

// node_modules/highlight.js/lib/languages/cos.js
var require_cos = __commonJS((exports, module) => {
  var cos = function(hljs) {
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: "\"\"",
              relevance: 0
            }
          ]
        }
      ]
    };
    const NUMBERS = {
      className: "number",
      begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
      relevance: 0
    };
    const COS_KEYWORDS = "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii";
    return {
      name: "Cach\xE9 Object Script",
      case_insensitive: true,
      aliases: ["cls"],
      keywords: COS_KEYWORDS,
      contains: [
        NUMBERS,
        STRINGS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "comment",
          begin: /;/,
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
        },
        {
          className: "built_in",
          begin: /\$\$\$[a-zA-Z]+/
        },
        {
          className: "built_in",
          begin: /%[a-z]+(?:\.[a-z]+)*/
        },
        {
          className: "symbol",
          begin: /\^%?[a-zA-Z][\w]*/
        },
        {
          className: "keyword",
          begin: /##class|##super|#define|#dim/
        },
        {
          begin: /&sql\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "sql"
        },
        {
          begin: /&(js|jscript|javascript)</,
          end: />/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "javascript"
        },
        {
          begin: /&html<\s*</,
          end: />\s*>/,
          subLanguage: "xml"
        }
      ]
    };
  };
  module.exports = cos;
});

// node_modules/highlight.js/lib/languages/cpp.js
var require_cpp = __commonJS((exports, module) => {
  var cpp = function(hljs) {
    const regex6 = hljs.regex;
    const C_LINE_COMMENT_MODE = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(?!struct)(" + DECLTYPE_AUTO_RE + "|" + regex6.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex6.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const CPP_PRIMITIVE_TYPES = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?\'(" + CHARACTER_ESCAPES + "|.)",
          end: "\'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01\']+)" },
        { begin: "(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)" }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE = {
      className: "title",
      begin: regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex6.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const RESERVED_KEYWORDS = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ];
    const RESERVED_TYPES = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ];
    const TYPE_HINTS = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ];
    const FUNCTION_HINTS = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ];
    const LITERALS = [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ];
    const BUILT_IN = ["_Pragma"];
    const CPP_KEYWORDS = {
      type: RESERVED_TYPES,
      keyword: RESERVED_KEYWORDS,
      literal: LITERALS,
      built_in: BUILT_IN,
      _type_hints: TYPE_HINTS
    };
    const FUNCTION_DISPATCH = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        _hint: FUNCTION_HINTS
      },
      begin: regex6.concat(/\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex6.lookahead(/(<[^<>]+>|)\s*\(/))
    };
    const EXPRESSION_CONTAINS = [
      FUNCTION_DISPATCH,
      PREPROCESSOR,
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS
    ];
    const EXPRESSION_CONTEXT = {
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: CPP_KEYWORDS,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      className: "function",
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: CPP_KEYWORDS,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          begin: DECLTYPE_AUTO_RE,
          keywords: CPP_KEYWORDS,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [TITLE_MODE],
          relevance: 0
        },
        {
          begin: /::/,
          relevance: 0
        },
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            STRINGS,
            NUMBERS
          ]
        },
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS,
            NUMBERS,
            CPP_PRIMITIVE_TYPES,
            {
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS,
                NUMBERS,
                CPP_PRIMITIVE_TYPES
              ]
            }
          ]
        },
        CPP_PRIMITIVE_TYPES,
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: CPP_KEYWORDS,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [
        PREPROCESSOR,
        {
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: CPP_KEYWORDS,
          contains: [
            "self",
            CPP_PRIMITIVE_TYPES
          ]
        },
        {
          begin: hljs.IDENT_RE + "::",
          keywords: CPP_KEYWORDS
        },
        {
          match: [
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ])
    };
  };
  module.exports = cpp;
});

// node_modules/highlight.js/lib/languages/crmsh.js
var require_crmsh = __commonJS((exports, module) => {
  var crmsh = function(hljs) {
    const RESOURCES = "primitive rsc_template";
    const COMMANDS = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
    const PROPERTY_SETS = "property rsc_defaults op_defaults";
    const KEYWORDS2 = "params meta operations op rule attributes utilization";
    const OPERATORS2 = "read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\";
    const TYPES = "number string";
    const LITERALS = "Master Started Slave Stopped start promote demote stop monitor true false";
    return {
      name: "crmsh",
      aliases: [
        "crm",
        "pcmk"
      ],
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2 + " " + OPERATORS2 + " " + TYPES,
        literal: LITERALS
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          beginKeywords: "node",
          starts: {
            end: "\\s*([\\w_-]+:)?",
            starts: {
              className: "title",
              end: "\\s*[\\$\\w_][\\w_-]*"
            }
          }
        },
        {
          beginKeywords: RESOURCES,
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*",
            starts: { end: "\\s*@?[\\w_][\\w_\\.:-]*" }
          }
        },
        {
          begin: "\\b(" + COMMANDS.split(" ").join("|") + ")\\s+",
          keywords: COMMANDS,
          starts: {
            className: "title",
            end: "[\\$\\w_][\\w_-]*"
          }
        },
        {
          beginKeywords: PROPERTY_SETS,
          starts: {
            className: "title",
            end: "\\s*([\\w_-]+:)?"
          }
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "meta",
          begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
          relevance: 0
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
          relevance: 0
        },
        {
          className: "literal",
          begin: "[-]?(infinity|inf)",
          relevance: 0
        },
        {
          className: "attr",
          begin: /([A-Za-z$_#][\w_-]+)=/,
          relevance: 0
        },
        {
          className: "tag",
          begin: "</?",
          end: "/?>",
          relevance: 0
        }
      ]
    };
  };
  module.exports = crmsh;
});

// node_modules/highlight.js/lib/languages/crystal.js
var require_crystal = __commonJS((exports, module) => {
  var crystal = function(hljs) {
    const INT_SUFFIX = "(_?[ui](8|16|32|64|128))?";
    const FLOAT_SUFFIX = "(_?f(32|64))?";
    const CRYSTAL_IDENT_RE = "[a-zA-Z_]\\w*[!?=]?";
    const CRYSTAL_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?";
    const CRYSTAL_PATH_RE = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?";
    const CRYSTAL_KEYWORDS = {
      $pattern: CRYSTAL_IDENT_RE,
      keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
      literal: "false nil true"
    };
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: CRYSTAL_KEYWORDS
    };
    const VARIABLE = {
      className: "variable",
      begin: `(\\\$\\W)|((\\\$|@@?)(\\w+))(?=[^@\$?])(?![A-Za-z])(?![@\$?'])`
    };
    const EXPANSION = {
      className: "template-variable",
      variants: [
        {
          begin: "\\{\\{",
          end: "\\}\\}"
        },
        {
          begin: "\\{%",
          end: "%\\}"
        }
      ],
      keywords: CRYSTAL_KEYWORDS
    };
    function recursiveParen(begin, end) {
      const contains = [
        {
          begin,
          end
        }
      ];
      contains[0].contains = contains;
      return contains;
    }
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: "%[Qwi]?\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%[Qwi]?\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%[Qwi]?\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%[Qwi]?<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%[Qwi]?\\|",
          end: "\\|"
        },
        {
          begin: /<<-\w+$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    };
    const Q_STRING = {
      className: "string",
      variants: [
        {
          begin: "%q\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%q\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%q\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%q<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%q\\|",
          end: "\\|"
        },
        {
          begin: /<<-'\w+'$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    };
    const REGEXP = {
      begin: "(?!%\\})(" + hljs.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
      keywords: "case if select unless until when while",
      contains: [
        {
          className: "regexp",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ],
          variants: [
            {
              begin: "//[a-z]*",
              relevance: 0
            },
            {
              begin: "/(?!\\/)",
              end: "/[a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    };
    const REGEXP2 = {
      className: "regexp",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: "%r\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%r\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%r\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%r<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%r\\|",
          end: "\\|"
        }
      ],
      relevance: 0
    };
    const ATTRIBUTE = {
      className: "meta",
      begin: "@\\[",
      end: "\\]",
      contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" })]
    };
    const CRYSTAL_DEFAULT_CONTAINS = [
      EXPANSION,
      STRING,
      Q_STRING,
      REGEXP2,
      REGEXP,
      ATTRIBUTE,
      VARIABLE,
      hljs.HASH_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class module struct",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE }),
          {
            begin: "<"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "lib enum union",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
        ]
      },
      {
        beginKeywords: "annotation",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
        ],
        relevance: 2
      },
      {
        className: "function",
        beginKeywords: "def",
        end: /\B\b/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: CRYSTAL_METHOD_RE,
            endsParent: true
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "fun macro",
        end: /\B\b/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: CRYSTAL_METHOD_RE,
            endsParent: true
          })
        ],
        relevance: 2
      },
      {
        className: "symbol",
        begin: hljs.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":",
        contains: [
          STRING,
          { begin: CRYSTAL_METHOD_RE }
        ],
        relevance: 0
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + INT_SUFFIX },
          { begin: "\\b0o([0-7_]+)" + INT_SUFFIX },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + INT_SUFFIX },
          { begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + FLOAT_SUFFIX + "(?!_)" },
          { begin: "\\b([1-9][0-9_]*|0)" + INT_SUFFIX }
        ],
        relevance: 0
      }
    ];
    SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
    EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1);
    return {
      name: "Crystal",
      aliases: ["cr"],
      keywords: CRYSTAL_KEYWORDS,
      contains: CRYSTAL_DEFAULT_CONTAINS
    };
  };
  module.exports = crystal;
});

// node_modules/highlight.js/lib/languages/csharp.js
var require_csharp = __commonJS((exports, module) => {
  var csharp = function(hljs) {
    const BUILT_IN_KEYWORDS = [
      "bool",
      "byte",
      "char",
      "decimal",
      "delegate",
      "double",
      "dynamic",
      "enum",
      "float",
      "int",
      "long",
      "nint",
      "nuint",
      "object",
      "sbyte",
      "short",
      "string",
      "ulong",
      "uint",
      "ushort"
    ];
    const FUNCTION_MODIFIERS = [
      "public",
      "private",
      "protected",
      "static",
      "internal",
      "protected",
      "abstract",
      "async",
      "extern",
      "override",
      "unsafe",
      "virtual",
      "new",
      "sealed",
      "partial"
    ];
    const LITERAL_KEYWORDS = [
      "default",
      "false",
      "null",
      "true"
    ];
    const NORMAL_KEYWORDS = [
      "abstract",
      "as",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "do",
      "else",
      "event",
      "explicit",
      "extern",
      "finally",
      "fixed",
      "for",
      "foreach",
      "goto",
      "if",
      "implicit",
      "in",
      "interface",
      "internal",
      "is",
      "lock",
      "namespace",
      "new",
      "operator",
      "out",
      "override",
      "params",
      "private",
      "protected",
      "public",
      "readonly",
      "record",
      "ref",
      "return",
      "scoped",
      "sealed",
      "sizeof",
      "stackalloc",
      "static",
      "struct",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "unchecked",
      "unsafe",
      "using",
      "virtual",
      "void",
      "volatile",
      "while"
    ];
    const CONTEXTUAL_KEYWORDS = [
      "add",
      "alias",
      "and",
      "ascending",
      "async",
      "await",
      "by",
      "descending",
      "equals",
      "from",
      "get",
      "global",
      "group",
      "init",
      "into",
      "join",
      "let",
      "nameof",
      "not",
      "notnull",
      "on",
      "or",
      "orderby",
      "partial",
      "remove",
      "select",
      "set",
      "unmanaged",
      "value|0",
      "var",
      "when",
      "where",
      "with",
      "yield"
    ];
    const KEYWORDS2 = {
      keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
      built_in: BUILT_IN_KEYWORDS,
      literal: LITERAL_KEYWORDS
    };
    const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" });
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01\']+)" },
        { begin: "(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)" }
      ],
      relevance: 0
    };
    const VERBATIM_STRING = {
      className: "string",
      begin: '@"',
      end: '"',
      contains: [{ begin: '""' }]
    };
    const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
    const SUBST = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
    const INTERPOLATED_STRING = {
      className: "string",
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        hljs.BACKSLASH_ESCAPE,
        SUBST_NO_LF
      ]
    };
    const INTERPOLATED_VERBATIM_STRING = {
      className: "string",
      begin: /\$@"/,
      end: '"',
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        SUBST
      ]
    };
    const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        SUBST_NO_LF
      ]
    });
    SUBST.contains = [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      NUMBERS,
      hljs.C_BLOCK_COMMENT_MODE
    ];
    SUBST_NO_LF.contains = [
      INTERPOLATED_VERBATIM_STRING_NO_LF,
      INTERPOLATED_STRING,
      VERBATIM_STRING_NO_LF,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      NUMBERS,
      hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
    ];
    const STRING = { variants: [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ] };
    const GENERIC_MODIFIER = {
      begin: "<",
      end: ">",
      contains: [
        { beginKeywords: "in out" },
        TITLE_MODE
      ]
    };
    const TYPE_IDENT_RE = hljs.IDENT_RE + "(<" + hljs.IDENT_RE + "(\\s*,\\s*" + hljs.IDENT_RE + ")*>)?(\\[\\])?";
    const AT_IDENTIFIER = {
      begin: "@" + hljs.IDENT_RE,
      relevance: 0
    };
    return {
      name: "C#",
      aliases: [
        "cs",
        "c#"
      ],
      keywords: KEYWORDS2,
      illegal: /::/,
      contains: [
        hljs.COMMENT("///", "$", {
          returnBegin: true,
          contains: [
            {
              className: "doctag",
              variants: [
                {
                  begin: "///",
                  relevance: 0
                },
                { begin: "<!--|-->" },
                {
                  begin: "</?",
                  end: ">"
                }
              ]
            }
          ]
        }),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
        },
        STRING,
        NUMBERS,
        {
          beginKeywords: "class interface",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:,]/,
          contains: [
            { beginKeywords: "where class" },
            TITLE_MODE,
            GENERIC_MODIFIER,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            TITLE_MODE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "record",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            TITLE_MODE,
            GENERIC_MODIFIER,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "meta",
          begin: "^\\s*\\[(?=[\\w])",
          excludeBegin: true,
          end: "\\]",
          excludeEnd: true,
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          beginKeywords: "new return throw await else",
          relevance: 0
        },
        {
          className: "function",
          begin: "(" + TYPE_IDENT_RE + "\\s+)+" + hljs.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
          returnBegin: true,
          end: /\s*[{;=]/,
          excludeEnd: true,
          keywords: KEYWORDS2,
          contains: [
            {
              beginKeywords: FUNCTION_MODIFIERS.join(" "),
              relevance: 0
            },
            {
              begin: hljs.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: true,
              contains: [
                hljs.TITLE_MODE,
                GENERIC_MODIFIER
              ],
              relevance: 0
            },
            { match: /\(\)/ },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                STRING,
                NUMBERS,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        AT_IDENTIFIER
      ]
    };
  };
  module.exports = csharp;
});

// node_modules/highlight.js/lib/languages/csp.js
var require_csp = __commonJS((exports, module) => {
  var csp = function(hljs) {
    const KEYWORDS2 = [
      "base-uri",
      "child-src",
      "connect-src",
      "default-src",
      "font-src",
      "form-action",
      "frame-ancestors",
      "frame-src",
      "img-src",
      "manifest-src",
      "media-src",
      "object-src",
      "plugin-types",
      "report-uri",
      "sandbox",
      "script-src",
      "style-src",
      "trusted-types",
      "unsafe-hashes",
      "worker-src"
    ];
    return {
      name: "CSP",
      case_insensitive: false,
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
        keyword: KEYWORDS2
      },
      contains: [
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "attribute",
          begin: "^Content",
          end: ":",
          excludeEnd: true
        }
      ]
    };
  };
  module.exports = csp;
});

// node_modules/highlight.js/lib/languages/css.js
var require_css = __commonJS((exports, module) => {
  var css = function(hljs) {
    const regex6 = hljs.regex;
    const modes = MODES(hljs);
    const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
    const AT_MODIFIERS = "and or not only";
    const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/;
    const IDENT_RE = "[a-zA-Z-][a-zA-Z0-9_-]*";
    const STRINGS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ];
    return {
      name: "CSS",
      case_insensitive: true,
      illegal: /[=|'\$]/,
      keywords: { keyframePosition: "from to" },
      classNameAliases: {
        keyframePosition: "selector-tag"
      },
      contains: [
        modes.BLOCK_COMMENT,
        VENDOR_PREFIX,
        modes.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: /#[A-Za-z0-9_-]+/,
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\." + IDENT_RE,
          relevance: 0
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          variants: [
            { begin: ":(" + PSEUDO_CLASSES.join("|") + ")" },
            { begin: ":(:)?(" + PSEUDO_ELEMENTS.join("|") + ")" }
          ]
        },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b"
        },
        {
          begin: /:/,
          end: /[;}{]/,
          contains: [
            modes.BLOCK_COMMENT,
            modes.HEXCOLOR,
            modes.IMPORTANT,
            modes.CSS_NUMBER_MODE,
            ...STRINGS,
            {
              begin: /(url|data-uri)\(/,
              end: /\)/,
              relevance: 0,
              keywords: { built_in: "url data-uri" },
              contains: [
                ...STRINGS,
                {
                  className: "string",
                  begin: /[^)]/,
                  endsWithParent: true,
                  excludeEnd: true
                }
              ]
            },
            modes.FUNCTION_DISPATCH
          ]
        },
        {
          begin: regex6.lookahead(/@/),
          end: "[{;]",
          relevance: 0,
          illegal: /:/,
          contains: [
            {
              className: "keyword",
              begin: AT_PROPERTY_RE
            },
            {
              begin: /\s/,
              endsWithParent: true,
              excludeEnd: true,
              relevance: 0,
              keywords: {
                $pattern: /[a-z-]+/,
                keyword: AT_MODIFIERS,
                attribute: MEDIA_FEATURES.join(" ")
              },
              contains: [
                {
                  begin: /[a-z-]+(?=:)/,
                  className: "attribute"
                },
                ...STRINGS,
                modes.CSS_NUMBER_MODE
              ]
            }
          ]
        },
        {
          className: "selector-tag",
          begin: "\\b(" + TAGS.join("|") + ")\\b"
        }
      ]
    };
  };
  var MODES = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  var TAGS = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  var MEDIA_FEATURES = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ];
  var PSEUDO_CLASSES = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    "host",
    "host-context",
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    "lang",
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    "nth-child",
    "nth-col",
    "nth-last-child",
    "nth-last-col",
    "nth-last-of-type",
    "nth-of-type",
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
  ];
  var PSEUDO_ELEMENTS = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ];
  var ATTRIBUTES = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
  ].reverse();
  module.exports = css;
});

// node_modules/highlight.js/lib/languages/d.js
var require_d = __commonJS((exports, module) => {
  var d2 = function(hljs) {
    const D_KEYWORDS = {
      $pattern: hljs.UNDERSCORE_IDENT_RE,
      keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
      built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
      literal: "false null true"
    };
    const decimal_integer_re = "(0|[1-9][\\d_]*)";
    const decimal_integer_nosus_re = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)";
    const binary_integer_re = "0[bB][01_]+";
    const hexadecimal_digits_re = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)";
    const hexadecimal_integer_re = "0[xX]" + hexadecimal_digits_re;
    const decimal_exponent_re = "([eE][+-]?" + decimal_integer_nosus_re + ")";
    const decimal_float_re = "(" + decimal_integer_nosus_re + "(\\.\\d*|" + decimal_exponent_re + ")|\\d+\\." + decimal_integer_nosus_re + "|\\." + decimal_integer_re + decimal_exponent_re + "?)";
    const hexadecimal_float_re = "(0[xX](" + hexadecimal_digits_re + "\\." + hexadecimal_digits_re + "|\\.?" + hexadecimal_digits_re + ")[pP][+-]?" + decimal_integer_nosus_re + ")";
    const integer_re = "(" + decimal_integer_re + "|" + binary_integer_re + "|" + hexadecimal_integer_re + ")";
    const float_re = "(" + hexadecimal_float_re + "|" + decimal_float_re + ")";
    const escape_sequence_re = '\\\\([\'"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};';
    const D_INTEGER_MODE = {
      className: "number",
      begin: "\\b" + integer_re + "(L|u|U|Lu|LU|uL|UL)?",
      relevance: 0
    };
    const D_FLOAT_MODE = {
      className: "number",
      begin: "\\b(" + float_re + "([fF]|L|i|[fF]i|Li)?|" + integer_re + "(i|[fF]i|Li))",
      relevance: 0
    };
    const D_CHARACTER_MODE = {
      className: "string",
      begin: "\'(" + escape_sequence_re + "|.)",
      end: "\'",
      illegal: "."
    };
    const D_ESCAPE_SEQUENCE = {
      begin: escape_sequence_re,
      relevance: 0
    };
    const D_STRING_MODE = {
      className: "string",
      begin: '"',
      contains: [D_ESCAPE_SEQUENCE],
      end: '"[cwd]?'
    };
    const D_WYSIWYG_DELIMITED_STRING_MODE = {
      className: "string",
      begin: '[rq]"',
      end: '"[cwd]?',
      relevance: 5
    };
    const D_ALTERNATE_WYSIWYG_STRING_MODE = {
      className: "string",
      begin: "`",
      end: "`[cwd]?"
    };
    const D_HEX_STRING_MODE = {
      className: "string",
      begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
      relevance: 10
    };
    const D_TOKEN_STRING_MODE = {
      className: "string",
      begin: 'q"\\{',
      end: '\\}"'
    };
    const D_HASHBANG_MODE = {
      className: "meta",
      begin: "^#!",
      end: "$",
      relevance: 5
    };
    const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
      className: "meta",
      begin: "#(line)",
      end: "$",
      relevance: 5
    };
    const D_ATTRIBUTE_MODE = {
      className: "keyword",
      begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
    };
    const D_NESTING_COMMENT_MODE = hljs.COMMENT("\\/\\+", "\\+\\/", {
      contains: ["self"],
      relevance: 10
    });
    return {
      name: "D",
      keywords: D_KEYWORDS,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        D_NESTING_COMMENT_MODE,
        D_HEX_STRING_MODE,
        D_STRING_MODE,
        D_WYSIWYG_DELIMITED_STRING_MODE,
        D_ALTERNATE_WYSIWYG_STRING_MODE,
        D_TOKEN_STRING_MODE,
        D_FLOAT_MODE,
        D_INTEGER_MODE,
        D_CHARACTER_MODE,
        D_HASHBANG_MODE,
        D_SPECIAL_TOKEN_SEQUENCE_MODE,
        D_ATTRIBUTE_MODE
      ]
    };
  };
  module.exports = d2;
});

// node_modules/highlight.js/lib/languages/markdown.js
var require_markdown = __commonJS((exports, module) => {
  var markdown = function(hljs) {
    const regex6 = hljs.regex;
    const INLINE_HTML = {
      begin: /<\/?[A-Za-z_]/,
      end: ">",
      subLanguage: "xml",
      relevance: 0
    };
    const HORIZONTAL_RULE = {
      begin: "^[-\\*]{3,}",
      end: "$"
    };
    const CODE = {
      className: "code",
      variants: [
        { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
        { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
        {
          begin: "```",
          end: "```+[ ]*$"
        },
        {
          begin: "~~~",
          end: "~~~+[ ]*$"
        },
        { begin: "`.+?`" },
        {
          begin: "(?=^( {4}|\\t))",
          contains: [
            {
              begin: "^( {4}|\\t)",
              end: "(\\n)$"
            }
          ],
          relevance: 0
        }
      ]
    };
    const LIST = {
      className: "bullet",
      begin: "^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)",
      end: "\\s+",
      excludeEnd: true
    };
    const LINK_REFERENCE = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: true,
      contains: [
        {
          className: "symbol",
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "link",
          begin: /:\s*/,
          end: /$/,
          excludeBegin: true
        }
      ]
    };
    const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
    const LINK = {
      variants: [
        {
          begin: /\[.+?\]\[.*?\]/,
          relevance: 0
        },
        {
          begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
          relevance: 2
        },
        {
          begin: regex6.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
          relevance: 2
        },
        {
          begin: /\[.+?\]\([./?&#].*?\)/,
          relevance: 1
        },
        {
          begin: /\[.*?\]\(.*?\)/,
          relevance: 0
        }
      ],
      returnBegin: true,
      contains: [
        {
          match: /\[(?=\])/
        },
        {
          className: "string",
          relevance: 0,
          begin: "\\[",
          end: "\\]",
          excludeBegin: true,
          returnEnd: true
        },
        {
          className: "link",
          relevance: 0,
          begin: "\\]\\(",
          end: "\\)",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "symbol",
          relevance: 0,
          begin: "\\]\\[",
          end: "\\]",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
    const BOLD = {
      className: "strong",
      contains: [],
      variants: [
        {
          begin: /_{2}(?!\s)/,
          end: /_{2}/
        },
        {
          begin: /\*{2}(?!\s)/,
          end: /\*{2}/
        }
      ]
    };
    const ITALIC = {
      className: "emphasis",
      contains: [],
      variants: [
        {
          begin: /\*(?![*\s])/,
          end: /\*/
        },
        {
          begin: /_(?![_\s])/,
          end: /_/,
          relevance: 0
        }
      ]
    };
    const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
    const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
    BOLD.contains.push(ITALIC_WITHOUT_BOLD);
    ITALIC.contains.push(BOLD_WITHOUT_ITALIC);
    let CONTAINABLE = [
      INLINE_HTML,
      LINK
    ];
    [
      BOLD,
      ITALIC,
      BOLD_WITHOUT_ITALIC,
      ITALIC_WITHOUT_BOLD
    ].forEach((m4) => {
      m4.contains = m4.contains.concat(CONTAINABLE);
    });
    CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);
    const HEADER = {
      className: "section",
      variants: [
        {
          begin: "^#{1,6}",
          end: "$",
          contains: CONTAINABLE
        },
        {
          begin: "(?=^.+?\\n[=-]{2,}$)",
          contains: [
            { begin: "^[=-]*$" },
            {
              begin: "^",
              end: "\\n",
              contains: CONTAINABLE
            }
          ]
        }
      ]
    };
    const BLOCKQUOTE = {
      className: "quote",
      begin: "^>\\s+",
      contains: CONTAINABLE,
      end: "$"
    };
    return {
      name: "Markdown",
      aliases: [
        "md",
        "mkdown",
        "mkd"
      ],
      contains: [
        HEADER,
        INLINE_HTML,
        LIST,
        BOLD,
        ITALIC,
        BLOCKQUOTE,
        CODE,
        HORIZONTAL_RULE,
        LINK,
        LINK_REFERENCE
      ]
    };
  };
  module.exports = markdown;
});

// node_modules/highlight.js/lib/languages/dart.js
var require_dart = __commonJS((exports, module) => {
  var dart = function(hljs) {
    const SUBST = {
      className: "subst",
      variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
    };
    const BRACED_SUBST = {
      className: "subst",
      variants: [
        {
          begin: /\$\{/,
          end: /\}/
        }
      ],
      keywords: "true false null this is new super"
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: "r\'\'\'",
          end: "\'\'\'"
        },
        {
          begin: 'r"""',
          end: '"""'
        },
        {
          begin: "r\'",
          end: "\'",
          illegal: "\\n"
        },
        {
          begin: 'r"',
          end: '"',
          illegal: "\\n"
        },
        {
          begin: "\'\'\'",
          end: "\'\'\'",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: '"""',
          end: '"""',
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: "\'",
          end: "\'",
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        }
      ]
    };
    BRACED_SUBST.contains = [
      hljs.C_NUMBER_MODE,
      STRING
    ];
    const BUILT_IN_TYPES = [
      "Comparable",
      "DateTime",
      "Duration",
      "Function",
      "Iterable",
      "Iterator",
      "List",
      "Map",
      "Match",
      "Object",
      "Pattern",
      "RegExp",
      "Set",
      "Stopwatch",
      "String",
      "StringBuffer",
      "StringSink",
      "Symbol",
      "Type",
      "Uri",
      "bool",
      "double",
      "int",
      "num",
      "Element",
      "ElementList"
    ];
    const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);
    const BASIC_KEYWORDS = [
      "abstract",
      "as",
      "assert",
      "async",
      "await",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "covariant",
      "default",
      "deferred",
      "do",
      "dynamic",
      "else",
      "enum",
      "export",
      "extends",
      "extension",
      "external",
      "factory",
      "false",
      "final",
      "finally",
      "for",
      "Function",
      "get",
      "hide",
      "if",
      "implements",
      "import",
      "in",
      "interface",
      "is",
      "late",
      "library",
      "mixin",
      "new",
      "null",
      "on",
      "operator",
      "part",
      "required",
      "rethrow",
      "return",
      "sealed",
      "set",
      "show",
      "static",
      "super",
      "switch",
      "sync",
      "this",
      "throw",
      "true",
      "try",
      "typedef",
      "var",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ];
    const KEYWORDS2 = {
      keyword: BASIC_KEYWORDS,
      built_in: BUILT_IN_TYPES.concat(NULLABLE_BUILT_IN_TYPES).concat([
        "Never",
        "Null",
        "dynamic",
        "print",
        "document",
        "querySelector",
        "querySelectorAll",
        "window"
      ]),
      $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
    };
    return {
      name: "Dart",
      keywords: KEYWORDS2,
      contains: [
        STRING,
        hljs.COMMENT(/\/\*\*(?!\/)/, /\*\//, {
          subLanguage: "markdown",
          relevance: 0
        }),
        hljs.COMMENT(/\/{3,} ?/, /$/, { contains: [
          {
            subLanguage: "markdown",
            begin: ".",
            end: "$",
            relevance: 0
          }
        ] }),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        },
        {
          begin: "=>"
        }
      ]
    };
  };
  module.exports = dart;
});

// node_modules/highlight.js/lib/languages/delphi.js
var require_delphi = __commonJS((exports, module) => {
  var delphi = function(hljs) {
    const KEYWORDS2 = [
      "exports",
      "register",
      "file",
      "shl",
      "array",
      "record",
      "property",
      "for",
      "mod",
      "while",
      "set",
      "ally",
      "label",
      "uses",
      "raise",
      "not",
      "stored",
      "class",
      "safecall",
      "var",
      "interface",
      "or",
      "private",
      "static",
      "exit",
      "index",
      "inherited",
      "to",
      "else",
      "stdcall",
      "override",
      "shr",
      "asm",
      "far",
      "resourcestring",
      "finalization",
      "packed",
      "virtual",
      "out",
      "and",
      "protected",
      "library",
      "do",
      "xorwrite",
      "goto",
      "near",
      "function",
      "end",
      "div",
      "overload",
      "object",
      "unit",
      "begin",
      "string",
      "on",
      "inline",
      "repeat",
      "until",
      "destructor",
      "write",
      "message",
      "program",
      "with",
      "read",
      "initialization",
      "except",
      "default",
      "nil",
      "if",
      "case",
      "cdecl",
      "in",
      "downto",
      "threadvar",
      "of",
      "try",
      "pascal",
      "const",
      "external",
      "constructor",
      "type",
      "public",
      "then",
      "implementation",
      "finally",
      "published",
      "procedure",
      "absolute",
      "reintroduce",
      "operator",
      "as",
      "is",
      "abstract",
      "alias",
      "assembler",
      "bitpacked",
      "break",
      "continue",
      "cppdecl",
      "cvar",
      "enumerator",
      "experimental",
      "platform",
      "deprecated",
      "unimplemented",
      "dynamic",
      "export",
      "far16",
      "forward",
      "generic",
      "helper",
      "implements",
      "interrupt",
      "iochecks",
      "local",
      "name",
      "nodefault",
      "noreturn",
      "nostackframe",
      "oldfpccall",
      "otherwise",
      "saveregisters",
      "softfloat",
      "specialize",
      "strict",
      "unaligned",
      "varargs"
    ];
    const COMMENT_MODES = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
      hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ];
    const DIRECTIVE = {
      className: "meta",
      variants: [
        {
          begin: /\{\$/,
          end: /\}/
        },
        {
          begin: /\(\*\$/,
          end: /\*\)/
        }
      ]
    };
    const STRING = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        {
          begin: "\\$[0-9A-Fa-f]+"
        },
        {
          begin: "&[0-7]+"
        },
        {
          begin: "%[01]+"
        }
      ]
    };
    const CHAR_STRING = {
      className: "string",
      begin: /(#\d+)+/
    };
    const CLASS = {
      begin: hljs.IDENT_RE + "\\s*=\\s*class\\s*\\(",
      returnBegin: true,
      contains: [hljs.TITLE_MODE]
    };
    const FUNCTION = {
      className: "function",
      beginKeywords: "function constructor destructor procedure",
      end: /[:;]/,
      keywords: "function constructor|10 destructor|10 procedure|10",
      contains: [
        hljs.TITLE_MODE,
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: [
            STRING,
            CHAR_STRING,
            DIRECTIVE
          ].concat(COMMENT_MODES)
        },
        DIRECTIVE
      ].concat(COMMENT_MODES)
    };
    return {
      name: "Delphi",
      aliases: [
        "dpr",
        "dfm",
        "pas",
        "pascal"
      ],
      case_insensitive: true,
      keywords: KEYWORDS2,
      illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
      contains: [
        STRING,
        CHAR_STRING,
        hljs.NUMBER_MODE,
        NUMBER,
        CLASS,
        FUNCTION,
        DIRECTIVE
      ].concat(COMMENT_MODES)
    };
  };
  module.exports = delphi;
});

// node_modules/highlight.js/lib/languages/diff.js
var require_diff = __commonJS((exports, module) => {
  var diff = function(hljs) {
    const regex6 = hljs.regex;
    return {
      name: "Diff",
      aliases: ["patch"],
      contains: [
        {
          className: "meta",
          relevance: 10,
          match: regex6.either(/^@@ +-\d+,\d+ +\+\d+,\d+ +@@/, /^\*\*\* +\d+,\d+ +\*\*\*\*$/, /^--- +\d+,\d+ +----$/)
        },
        {
          className: "comment",
          variants: [
            {
              begin: regex6.either(/Index: /, /^index/, /={3,}/, /^-{3}/, /^\*{3} /, /^\+{3}/, /^diff --git/),
              end: /$/
            },
            { match: /^\*{15}$/ }
          ]
        },
        {
          className: "addition",
          begin: /^\+/,
          end: /$/
        },
        {
          className: "deletion",
          begin: /^-/,
          end: /$/
        },
        {
          className: "addition",
          begin: /^!/,
          end: /$/
        }
      ]
    };
  };
  module.exports = diff;
});

// node_modules/highlight.js/lib/languages/django.js
var require_django = __commonJS((exports, module) => {
  var django = function(hljs) {
    const FILTER = {
      begin: /\|[A-Za-z]+:?/,
      keywords: { name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone" },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE
      ]
    };
    return {
      name: "Django",
      aliases: ["jinja"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
        hljs.COMMENT(/\{#/, /#\}/),
        {
          className: "template-tag",
          begin: /\{%/,
          end: /%\}/,
          contains: [
            {
              className: "name",
              begin: /\w+/,
              keywords: { name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim" },
              starts: {
                endsWithParent: true,
                keywords: "in by as",
                contains: [FILTER],
                relevance: 0
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [FILTER]
        }
      ]
    };
  };
  module.exports = django;
});

// node_modules/highlight.js/lib/languages/dns.js
var require_dns = __commonJS((exports, module) => {
  var dns = function(hljs) {
    const KEYWORDS2 = [
      "IN",
      "A",
      "AAAA",
      "AFSDB",
      "APL",
      "CAA",
      "CDNSKEY",
      "CDS",
      "CERT",
      "CNAME",
      "DHCID",
      "DLV",
      "DNAME",
      "DNSKEY",
      "DS",
      "HIP",
      "IPSECKEY",
      "KEY",
      "KX",
      "LOC",
      "MX",
      "NAPTR",
      "NS",
      "NSEC",
      "NSEC3",
      "NSEC3PARAM",
      "PTR",
      "RRSIG",
      "RP",
      "SIG",
      "SOA",
      "SRV",
      "SSHFP",
      "TA",
      "TKEY",
      "TLSA",
      "TSIG",
      "TXT"
    ];
    return {
      name: "DNS Zone",
      aliases: [
        "bind",
        "zone"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
        },
        {
          className: "number",
          begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
        },
        {
          className: "number",
          begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
        },
        hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
      ]
    };
  };
  module.exports = dns;
});

// node_modules/highlight.js/lib/languages/dockerfile.js
var require_dockerfile = __commonJS((exports, module) => {
  var dockerfile = function(hljs) {
    const KEYWORDS2 = [
      "from",
      "maintainer",
      "expose",
      "env",
      "arg",
      "user",
      "onbuild",
      "stopsignal"
    ];
    return {
      name: "Dockerfile",
      aliases: ["docker"],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        {
          beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
          starts: {
            end: /[^\\]$/,
            subLanguage: "bash"
          }
        }
      ],
      illegal: "</"
    };
  };
  module.exports = dockerfile;
});

// node_modules/highlight.js/lib/languages/dos.js
var require_dos = __commonJS((exports, module) => {
  var dos = function(hljs) {
    const COMMENT = hljs.COMMENT(/^\s*@?rem\b/, /$/, { relevance: 10 });
    const LABEL = {
      className: "symbol",
      begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",
      relevance: 0
    };
    const KEYWORDS2 = [
      "if",
      "else",
      "goto",
      "for",
      "in",
      "do",
      "call",
      "exit",
      "not",
      "exist",
      "errorlevel",
      "defined",
      "equ",
      "neq",
      "lss",
      "leq",
      "gtr",
      "geq"
    ];
    const BUILT_INS = [
      "prn",
      "nul",
      "lpt3",
      "lpt2",
      "lpt1",
      "con",
      "com4",
      "com3",
      "com2",
      "com1",
      "aux",
      "shift",
      "cd",
      "dir",
      "echo",
      "setlocal",
      "endlocal",
      "set",
      "pause",
      "copy",
      "append",
      "assoc",
      "at",
      "attrib",
      "break",
      "cacls",
      "cd",
      "chcp",
      "chdir",
      "chkdsk",
      "chkntfs",
      "cls",
      "cmd",
      "color",
      "comp",
      "compact",
      "convert",
      "date",
      "dir",
      "diskcomp",
      "diskcopy",
      "doskey",
      "erase",
      "fs",
      "find",
      "findstr",
      "format",
      "ftype",
      "graftabl",
      "help",
      "keyb",
      "label",
      "md",
      "mkdir",
      "mode",
      "more",
      "move",
      "path",
      "pause",
      "print",
      "popd",
      "pushd",
      "promt",
      "rd",
      "recover",
      "rem",
      "rename",
      "replace",
      "restore",
      "rmdir",
      "shift",
      "sort",
      "start",
      "subst",
      "time",
      "title",
      "tree",
      "type",
      "ver",
      "verify",
      "vol",
      "ping",
      "net",
      "ipconfig",
      "taskkill",
      "xcopy",
      "ren",
      "del"
    ];
    return {
      name: "Batch file (DOS)",
      aliases: [
        "bat",
        "cmd"
      ],
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS
      },
      contains: [
        {
          className: "variable",
          begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
        },
        {
          className: "function",
          begin: LABEL.begin,
          end: "goto:eof",
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            COMMENT
          ]
        },
        {
          className: "number",
          begin: "\\b\\d+",
          relevance: 0
        },
        COMMENT
      ]
    };
  };
  module.exports = dos;
});

// node_modules/highlight.js/lib/languages/dsconfig.js
var require_dsconfig = __commonJS((exports, module) => {
  var dsconfig = function(hljs) {
    const QUOTED_PROPERTY = {
      className: "string",
      begin: /"/,
      end: /"/
    };
    const APOS_PROPERTY = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    const UNQUOTED_PROPERTY = {
      className: "string",
      begin: /[\w\-?]+:\w+/,
      end: /\W/,
      relevance: 0
    };
    const VALUELESS_PROPERTY = {
      className: "string",
      begin: /\w+(\-\w+)*/,
      end: /(?=\W)/,
      relevance: 0
    };
    return {
      keywords: "dsconfig",
      contains: [
        {
          className: "keyword",
          begin: "^dsconfig",
          end: /\s/,
          excludeEnd: true,
          relevance: 10
        },
        {
          className: "built_in",
          begin: /(list|create|get|set|delete)-(\w+)/,
          end: /\s/,
          excludeEnd: true,
          illegal: "!@#$%^&*()",
          relevance: 10
        },
        {
          className: "built_in",
          begin: /--(\w+)/,
          end: /\s/,
          excludeEnd: true
        },
        QUOTED_PROPERTY,
        APOS_PROPERTY,
        UNQUOTED_PROPERTY,
        VALUELESS_PROPERTY,
        hljs.HASH_COMMENT_MODE
      ]
    };
  };
  module.exports = dsconfig;
});

// node_modules/highlight.js/lib/languages/dts.js
var require_dts = __commonJS((exports, module) => {
  var dts = function(hljs) {
    const STRINGS = {
      className: "string",
      variants: [
        hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
        {
          begin: '(u8?|U)?R"',
          end: '"',
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "\'\\\\?.",
          end: "\'",
          illegal: "."
        }
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" },
        { begin: hljs.C_NUMBER_RE }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "if else elif endif define undef ifdef ifndef" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            hljs.inherit(STRINGS, { className: "string" }),
            {
              className: "string",
              begin: "<",
              end: ">",
              illegal: "\\n"
            }
          ]
        },
        STRINGS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const REFERENCE = {
      className: "variable",
      begin: /&[a-z\d_]*\b/
    };
    const KEYWORD = {
      className: "keyword",
      begin: "/[a-z][a-z\\d-]*/"
    };
    const LABEL = {
      className: "symbol",
      begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
    };
    const CELL_PROPERTY = {
      className: "params",
      relevance: 0,
      begin: "<",
      end: ">",
      contains: [
        NUMBERS,
        REFERENCE
      ]
    };
    const NODE = {
      className: "title.class",
      begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
      relevance: 0.2
    };
    const ROOT_NODE = {
      className: "title.class",
      begin: /^\/(?=\s*\{)/,
      relevance: 10
    };
    const ATTR_NO_VALUE = {
      match: /[a-z][a-z-,]+(?=;)/,
      relevance: 0,
      scope: "attr"
    };
    const ATTR = {
      relevance: 0,
      match: [
        /[a-z][a-z-,]+/,
        /\s*/,
        /=/
      ],
      scope: {
        1: "attr",
        3: "operator"
      }
    };
    const PUNC = {
      scope: "punctuation",
      relevance: 0,
      match: /\};|[;{}]/
    };
    return {
      name: "Device Tree",
      contains: [
        ROOT_NODE,
        REFERENCE,
        KEYWORD,
        LABEL,
        NODE,
        ATTR,
        ATTR_NO_VALUE,
        CELL_PROPERTY,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        STRINGS,
        PREPROCESSOR,
        PUNC,
        {
          begin: hljs.IDENT_RE + "::",
          keywords: ""
        }
      ]
    };
  };
  module.exports = dts;
});

// node_modules/highlight.js/lib/languages/dust.js
var require_dust = __commonJS((exports, module) => {
  var dust = function(hljs) {
    const EXPRESSION_KEYWORDS = "if eq ne lt lte gt gte select default math sep";
    return {
      name: "Dust",
      aliases: ["dst"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        {
          className: "template-tag",
          begin: /\{[#\/]/,
          end: /\}/,
          illegal: /;/,
          contains: [
            {
              className: "name",
              begin: /[a-zA-Z\.-]+/,
              starts: {
                endsWithParent: true,
                relevance: 0,
                contains: [hljs.QUOTE_STRING_MODE]
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{/,
          end: /\}/,
          illegal: /;/,
          keywords: EXPRESSION_KEYWORDS
        }
      ]
    };
  };
  module.exports = dust;
});

// node_modules/highlight.js/lib/languages/ebnf.js
var require_ebnf = __commonJS((exports, module) => {
  var ebnf = function(hljs) {
    const commentMode = hljs.COMMENT(/\(\*/, /\*\)/);
    const nonTerminalMode = {
      className: "attribute",
      begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
    };
    const specialSequenceMode = {
      className: "meta",
      begin: /\?.*\?/
    };
    const ruleBodyMode = {
      begin: /=/,
      end: /[.;]/,
      contains: [
        commentMode,
        specialSequenceMode,
        {
          className: "string",
          variants: [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        }
      ]
    };
    return {
      name: "Extended Backus-Naur Form",
      illegal: /\S/,
      contains: [
        commentMode,
        nonTerminalMode,
        ruleBodyMode
      ]
    };
  };
  module.exports = ebnf;
});

// node_modules/highlight.js/lib/languages/elixir.js
var require_elixir = __commonJS((exports, module) => {
  var elixir = function(hljs) {
    const regex6 = hljs.regex;
    const ELIXIR_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?";
    const ELIXIR_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?";
    const KEYWORDS2 = [
      "after",
      "alias",
      "and",
      "case",
      "catch",
      "cond",
      "defstruct",
      "defguard",
      "do",
      "else",
      "end",
      "fn",
      "for",
      "if",
      "import",
      "in",
      "not",
      "or",
      "quote",
      "raise",
      "receive",
      "require",
      "reraise",
      "rescue",
      "try",
      "unless",
      "unquote",
      "unquote_splicing",
      "use",
      "when",
      "with|0"
    ];
    const LITERALS = [
      "false",
      "nil",
      "true"
    ];
    const KWS = {
      $pattern: ELIXIR_IDENT_RE,
      keyword: KEYWORDS2,
      literal: LITERALS
    };
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KWS
    };
    const NUMBER = {
      className: "number",
      begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
      relevance: 0
    };
    const ESCAPES_RE = /\\[\s\S]/;
    const BACKSLASH_ESCAPE = {
      match: ESCAPES_RE,
      scope: "char.escape",
      relevance: 0
    };
    const SIGIL_DELIMITERS = '[/|([{<"\']';
    const SIGIL_DELIMITER_MODES = [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ];
    const escapeSigilEnd = (end) => {
      return {
        scope: "char.escape",
        begin: regex6.concat(/\\/, end),
        relevance: 0
      };
    };
    const LOWERCASE_SIGIL = {
      className: "string",
      begin: "~[a-z](?=" + SIGIL_DELIMITERS + ")",
      contains: SIGIL_DELIMITER_MODES.map((x2) => hljs.inherit(x2, { contains: [
        escapeSigilEnd(x2.end),
        BACKSLASH_ESCAPE,
        SUBST
      ] }))
    };
    const UPCASE_SIGIL = {
      className: "string",
      begin: "~[A-Z](?=" + SIGIL_DELIMITERS + ")",
      contains: SIGIL_DELIMITER_MODES.map((x2) => hljs.inherit(x2, { contains: [escapeSigilEnd(x2.end)] }))
    };
    const REGEX_SIGIL = {
      className: "regex",
      variants: [
        {
          begin: "~r(?=" + SIGIL_DELIMITERS + ")",
          contains: SIGIL_DELIMITER_MODES.map((x2) => hljs.inherit(x2, {
            end: regex6.concat(x2.end, /[uismxfU]{0,7}/),
            contains: [
              escapeSigilEnd(x2.end),
              BACKSLASH_ESCAPE,
              SUBST
            ]
          }))
        },
        {
          begin: "~R(?=" + SIGIL_DELIMITERS + ")",
          contains: SIGIL_DELIMITER_MODES.map((x2) => hljs.inherit(x2, {
            end: regex6.concat(x2.end, /[uismxfU]{0,7}/),
            contains: [escapeSigilEnd(x2.end)]
          }))
        }
      ]
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: /~S"""/,
          end: /"""/,
          contains: []
        },
        {
          begin: /~S"/,
          end: /"/,
          contains: []
        },
        {
          begin: /~S'''/,
          end: /'''/,
          contains: []
        },
        {
          begin: /~S'/,
          end: /'/,
          contains: []
        },
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    const FUNCTION = {
      className: "function",
      beginKeywords: "def defp defmacro defmacrop",
      end: /\B\b/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {
          begin: ELIXIR_IDENT_RE,
          endsParent: true
        })
      ]
    };
    const CLASS = hljs.inherit(FUNCTION, {
      className: "class",
      beginKeywords: "defimpl defmodule defprotocol defrecord",
      end: /\bdo\b|$|;/
    });
    const ELIXIR_DEFAULT_CONTAINS = [
      STRING,
      REGEX_SIGIL,
      UPCASE_SIGIL,
      LOWERCASE_SIGIL,
      hljs.HASH_COMMENT_MODE,
      CLASS,
      FUNCTION,
      { begin: "::" },
      {
        className: "symbol",
        begin: ":(?![\\s:])",
        contains: [
          STRING,
          { begin: ELIXIR_METHOD_RE }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        begin: ELIXIR_IDENT_RE + ":(?!:)",
        relevance: 0
      },
      {
        className: "title.class",
        begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
        relevance: 0
      },
      NUMBER,
      {
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
      }
    ];
    SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
    return {
      name: "Elixir",
      aliases: [
        "ex",
        "exs"
      ],
      keywords: KWS,
      contains: ELIXIR_DEFAULT_CONTAINS
    };
  };
  module.exports = elixir;
});

// node_modules/highlight.js/lib/languages/elm.js
var require_elm = __commonJS((exports, module) => {
  var elm = function(hljs) {
    const COMMENT = { variants: [
      hljs.COMMENT("--", "$"),
      hljs.COMMENT(/\{-/, /-\}/, { contains: ["self"] })
    ] };
    const CONSTRUCTOR = {
      className: "type",
      begin: "\\b[A-Z][\\w\']*",
      relevance: 0
    };
    const LIST = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        COMMENT
      ]
    };
    const RECORD = {
      begin: /\{/,
      end: /\}/,
      contains: LIST.contains
    };
    const CHARACTER = {
      className: "string",
      begin: "\'\\\\?.",
      end: "\'",
      illegal: "."
    };
    const KEYWORDS2 = [
      "let",
      "in",
      "if",
      "then",
      "else",
      "case",
      "of",
      "where",
      "module",
      "import",
      "exposing",
      "type",
      "alias",
      "as",
      "infix",
      "infixl",
      "infixr",
      "port",
      "effect",
      "command",
      "subscription"
    ];
    return {
      name: "Elm",
      keywords: KEYWORDS2,
      contains: [
        {
          beginKeywords: "port effect module",
          end: "exposing",
          keywords: "port effect module where command subscription exposing",
          contains: [
            LIST,
            COMMENT
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "import",
          end: "$",
          keywords: "import as exposing",
          contains: [
            LIST,
            COMMENT
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "type",
          end: "$",
          keywords: "type alias",
          contains: [
            CONSTRUCTOR,
            LIST,
            RECORD,
            COMMENT
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            hljs.C_NUMBER_MODE,
            COMMENT
          ]
        },
        {
          begin: "port",
          end: "$",
          keywords: "port",
          contains: [COMMENT]
        },
        CHARACTER,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        CONSTRUCTOR,
        hljs.inherit(hljs.TITLE_MODE, { begin: "^[_a-z][\\w\']*" }),
        COMMENT,
        {
          begin: "->|<-"
        }
      ],
      illegal: /;/
    };
  };
  module.exports = elm;
});

// node_modules/highlight.js/lib/languages/ruby.js
var require_ruby = __commonJS((exports, module) => {
  var ruby = function(hljs) {
    const regex6 = hljs.regex;
    const RUBY_METHOD_RE = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)";
    const CLASS_NAME_RE = regex6.either(/\b([A-Z]+[a-z0-9]+)+/, /\b([A-Z]+[a-z0-9]+)+[A-Z]+/);
    const CLASS_NAME_WITH_NAMESPACE_RE = regex6.concat(CLASS_NAME_RE, /(::\w+)*/);
    const PSEUDO_KWS = [
      "include",
      "extend",
      "prepend",
      "public",
      "private",
      "protected",
      "raise",
      "throw"
    ];
    const RUBY_KEYWORDS = {
      "variable.constant": [
        "__FILE__",
        "__LINE__",
        "__ENCODING__"
      ],
      "variable.language": [
        "self",
        "super"
      ],
      keyword: [
        "alias",
        "and",
        "begin",
        "BEGIN",
        "break",
        "case",
        "class",
        "defined",
        "do",
        "else",
        "elsif",
        "end",
        "END",
        "ensure",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "require",
        "rescue",
        "retry",
        "return",
        "then",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        ...PSEUDO_KWS
      ],
      built_in: [
        "proc",
        "lambda",
        "attr_accessor",
        "attr_reader",
        "attr_writer",
        "define_method",
        "private_constant",
        "module_function"
      ],
      literal: [
        "true",
        "false",
        "nil"
      ]
    };
    const YARDOCTAG = {
      className: "doctag",
      begin: "@[A-Za-z]+"
    };
    const IRB_OBJECT = {
      begin: "#<",
      end: ">"
    };
    const COMMENT_MODES = [
      hljs.COMMENT("#", "$", { contains: [YARDOCTAG] }),
      hljs.COMMENT("^=begin", "^=end", {
        contains: [YARDOCTAG],
        relevance: 10
      }),
      hljs.COMMENT("^__END__", hljs.MATCH_NOTHING_RE)
    ];
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: RUBY_KEYWORDS
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: /%[qQwWx]?\(/,
          end: /\)/
        },
        {
          begin: /%[qQwWx]?\[/,
          end: /\]/
        },
        {
          begin: /%[qQwWx]?\{/,
          end: /\}/
        },
        {
          begin: /%[qQwWx]?</,
          end: />/
        },
        {
          begin: /%[qQwWx]?\//,
          end: /\//
        },
        {
          begin: /%[qQwWx]?%/,
          end: /%/
        },
        {
          begin: /%[qQwWx]?-/,
          end: /-/
        },
        {
          begin: /%[qQwWx]?\|/,
          end: /\|/
        },
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        {
          begin: regex6.concat(/<<[-~]?'?/, regex6.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)),
          contains: [
            hljs.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ]
            })
          ]
        }
      ]
    };
    const decimal = "[1-9](_?[0-9])*|0";
    const digits = "[0-9](_?[0-9])*";
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },
        { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
        { begin: "\\b0(_?[0-7])+r?i?\\b" }
      ]
    };
    const PARAMS = {
      variants: [
        {
          match: /\(\)/
        },
        {
          className: "params",
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: true,
          endsParent: true,
          keywords: RUBY_KEYWORDS
        }
      ]
    };
    const INCLUDE_EXTEND = {
      match: [
        /(include|extend)\s+/,
        CLASS_NAME_WITH_NAMESPACE_RE
      ],
      scope: {
        2: "title.class"
      },
      keywords: RUBY_KEYWORDS
    };
    const CLASS_DEFINITION = {
      variants: [
        {
          match: [
            /class\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE,
            /\s+<\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE
          ]
        },
        {
          match: [
            /\b(class|module)\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE
          ]
        }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: RUBY_KEYWORDS
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    const METHOD_DEFINITION = {
      match: [
        /def/,
        /\s+/,
        RUBY_METHOD_RE
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    const OBJECT_CREATION = {
      relevance: 0,
      match: [
        CLASS_NAME_WITH_NAMESPACE_RE,
        /\.new[. (]/
      ],
      scope: {
        1: "title.class"
      }
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: CLASS_NAME_RE,
      scope: "title.class"
    };
    const RUBY_DEFAULT_CONTAINS = [
      STRING,
      CLASS_DEFINITION,
      INCLUDE_EXTEND,
      OBJECT_CREATION,
      UPPER_CASE_CONSTANT,
      CLASS_REFERENCE,
      METHOD_DEFINITION,
      {
        begin: hljs.IDENT_RE + "::"
      },
      {
        className: "symbol",
        begin: hljs.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":(?!\\s)",
        contains: [
          STRING,
          { begin: RUBY_METHOD_RE }
        ],
        relevance: 0
      },
      NUMBER,
      {
        className: "variable",
        begin: `(\\\$\\W)|((\\\$|@@?)(\\w+))(?=[^@\$?])(?![A-Za-z])(?![@\$?'])`
      },
      {
        className: "params",
        begin: /\|/,
        end: /\|/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        keywords: RUBY_KEYWORDS
      },
      {
        begin: "(" + hljs.RE_STARTERS_RE + "|unless)\\s*",
        keywords: "unless",
        contains: [
          {
            className: "regexp",
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            illegal: /\n/,
            variants: [
              {
                begin: "/",
                end: "/[a-z]*"
              },
              {
                begin: /%r\{/,
                end: /\}[a-z]*/
              },
              {
                begin: "%r\\(",
                end: "\\)[a-z]*"
              },
              {
                begin: "%r!",
                end: "![a-z]*"
              },
              {
                begin: "%r\\[",
                end: "\\][a-z]*"
              }
            ]
          }
        ].concat(IRB_OBJECT, COMMENT_MODES),
        relevance: 0
      }
    ].concat(IRB_OBJECT, COMMENT_MODES);
    SUBST.contains = RUBY_DEFAULT_CONTAINS;
    PARAMS.contains = RUBY_DEFAULT_CONTAINS;
    const SIMPLE_PROMPT = "[>?]>";
    const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
    const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";
    const IRB_DEFAULT = [
      {
        begin: /^\s*=>/,
        starts: {
          end: "$",
          contains: RUBY_DEFAULT_CONTAINS
        }
      },
      {
        className: "meta.prompt",
        begin: "^(" + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + "|" + RVM_PROMPT + ")(?=[ ])",
        starts: {
          end: "$",
          keywords: RUBY_KEYWORDS,
          contains: RUBY_DEFAULT_CONTAINS
        }
      }
    ];
    COMMENT_MODES.unshift(IRB_OBJECT);
    return {
      name: "Ruby",
      aliases: [
        "rb",
        "gemspec",
        "podspec",
        "thor",
        "irb"
      ],
      keywords: RUBY_KEYWORDS,
      illegal: /\/\*/,
      contains: [hljs.SHEBANG({ binary: "ruby" })].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)
    };
  };
  module.exports = ruby;
});

// node_modules/highlight.js/lib/languages/erb.js
var require_erb = __commonJS((exports, module) => {
  var erb = function(hljs) {
    return {
      name: "ERB",
      subLanguage: "xml",
      contains: [
        hljs.COMMENT("<%#", "%>"),
        {
          begin: "<%[%=-]?",
          end: "[%-]?%>",
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  };
  module.exports = erb;
});

// node_modules/highlight.js/lib/languages/erlang-repl.js
var require_erlang_repl = __commonJS((exports, module) => {
  var erlangRepl = function(hljs) {
    const regex6 = hljs.regex;
    return {
      name: "Erlang REPL",
      keywords: {
        built_in: "spawn spawn_link self",
        keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
      },
      contains: [
        {
          className: "meta.prompt",
          begin: "^[0-9]+> ",
          relevance: 10
        },
        hljs.COMMENT("%", "$"),
        {
          className: "number",
          begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        { begin: regex6.concat(/\?(::)?/, /([A-Z]\w*)/, /((::)[A-Z]\w*)*/) },
        { begin: "->" },
        { begin: "ok" },
        { begin: "!" },
        {
          begin: "(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)",
          relevance: 0
        },
        {
          begin: "[A-Z][a-zA-Z0-9_\']*",
          relevance: 0
        }
      ]
    };
  };
  module.exports = erlangRepl;
});

// node_modules/highlight.js/lib/languages/erlang.js
var require_erlang = __commonJS((exports, module) => {
  var erlang = function(hljs) {
    const BASIC_ATOM_RE = "[a-z\'][a-zA-Z0-9_\']*";
    const FUNCTION_NAME_RE = "(" + BASIC_ATOM_RE + ":" + BASIC_ATOM_RE + "|" + BASIC_ATOM_RE + ")";
    const ERLANG_RESERVED = {
      keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",
      literal: "false true"
    };
    const COMMENT = hljs.COMMENT("%", "$");
    const NUMBER = {
      className: "number",
      begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
      relevance: 0
    };
    const NAMED_FUN = { begin: "fun\\s+" + BASIC_ATOM_RE + "/\\d+" };
    const FUNCTION_CALL = {
      begin: FUNCTION_NAME_RE + "\\(",
      end: "\\)",
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: FUNCTION_NAME_RE,
          relevance: 0
        },
        {
          begin: "\\(",
          end: "\\)",
          endsWithParent: true,
          returnEnd: true,
          relevance: 0
        }
      ]
    };
    const TUPLE = {
      begin: /\{/,
      end: /\}/,
      relevance: 0
    };
    const VAR1 = {
      begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
      relevance: 0
    };
    const VAR2 = {
      begin: "[A-Z][a-zA-Z0-9_]*",
      relevance: 0
    };
    const RECORD_ACCESS = {
      begin: "#" + hljs.UNDERSCORE_IDENT_RE,
      relevance: 0,
      returnBegin: true,
      contains: [
        {
          begin: "#" + hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        },
        {
          begin: /\{/,
          end: /\}/,
          relevance: 0
        }
      ]
    };
    const BLOCK_STATEMENTS = {
      beginKeywords: "fun receive if try case",
      end: "end",
      keywords: ERLANG_RESERVED
    };
    BLOCK_STATEMENTS.contains = [
      COMMENT,
      NAMED_FUN,
      hljs.inherit(hljs.APOS_STRING_MODE, { className: "" }),
      BLOCK_STATEMENTS,
      FUNCTION_CALL,
      hljs.QUOTE_STRING_MODE,
      NUMBER,
      TUPLE,
      VAR1,
      VAR2,
      RECORD_ACCESS
    ];
    const BASIC_MODES = [
      COMMENT,
      NAMED_FUN,
      BLOCK_STATEMENTS,
      FUNCTION_CALL,
      hljs.QUOTE_STRING_MODE,
      NUMBER,
      TUPLE,
      VAR1,
      VAR2,
      RECORD_ACCESS
    ];
    FUNCTION_CALL.contains[1].contains = BASIC_MODES;
    TUPLE.contains = BASIC_MODES;
    RECORD_ACCESS.contains[1].contains = BASIC_MODES;
    const DIRECTIVES = [
      "-module",
      "-record",
      "-undef",
      "-export",
      "-ifdef",
      "-ifndef",
      "-author",
      "-copyright",
      "-doc",
      "-vsn",
      "-import",
      "-include",
      "-include_lib",
      "-compile",
      "-define",
      "-else",
      "-endif",
      "-file",
      "-behaviour",
      "-behavior",
      "-spec"
    ];
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: BASIC_MODES
    };
    return {
      name: "Erlang",
      aliases: ["erl"],
      keywords: ERLANG_RESERVED,
      illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
      contains: [
        {
          className: "function",
          begin: "^" + BASIC_ATOM_RE + "\\s*\\(",
          end: "->",
          returnBegin: true,
          illegal: "\\(|#|//|/\\*|\\\\|:|;",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })
          ],
          starts: {
            end: ";|\\.",
            keywords: ERLANG_RESERVED,
            contains: BASIC_MODES
          }
        },
        COMMENT,
        {
          begin: "^-",
          end: "\\.",
          relevance: 0,
          excludeEnd: true,
          returnBegin: true,
          keywords: {
            $pattern: "-" + hljs.IDENT_RE,
            keyword: DIRECTIVES.map((x2) => `${x2}|1.5`).join(" ")
          },
          contains: [PARAMS]
        },
        NUMBER,
        hljs.QUOTE_STRING_MODE,
        RECORD_ACCESS,
        VAR1,
        VAR2,
        TUPLE,
        { begin: /\.$/ }
      ]
    };
  };
  module.exports = erlang;
});

// node_modules/highlight.js/lib/languages/excel.js
var require_excel = __commonJS((exports, module) => {
  var excel = function(hljs) {
    const BUILT_INS = [
      "ABS",
      "ACCRINT",
      "ACCRINTM",
      "ACOS",
      "ACOSH",
      "ACOT",
      "ACOTH",
      "AGGREGATE",
      "ADDRESS",
      "AMORDEGRC",
      "AMORLINC",
      "AND",
      "ARABIC",
      "AREAS",
      "ASC",
      "ASIN",
      "ASINH",
      "ATAN",
      "ATAN2",
      "ATANH",
      "AVEDEV",
      "AVERAGE",
      "AVERAGEA",
      "AVERAGEIF",
      "AVERAGEIFS",
      "BAHTTEXT",
      "BASE",
      "BESSELI",
      "BESSELJ",
      "BESSELK",
      "BESSELY",
      "BETADIST",
      "BETA.DIST",
      "BETAINV",
      "BETA.INV",
      "BIN2DEC",
      "BIN2HEX",
      "BIN2OCT",
      "BINOMDIST",
      "BINOM.DIST",
      "BINOM.DIST.RANGE",
      "BINOM.INV",
      "BITAND",
      "BITLSHIFT",
      "BITOR",
      "BITRSHIFT",
      "BITXOR",
      "CALL",
      "CEILING",
      "CEILING.MATH",
      "CEILING.PRECISE",
      "CELL",
      "CHAR",
      "CHIDIST",
      "CHIINV",
      "CHITEST",
      "CHISQ.DIST",
      "CHISQ.DIST.RT",
      "CHISQ.INV",
      "CHISQ.INV.RT",
      "CHISQ.TEST",
      "CHOOSE",
      "CLEAN",
      "CODE",
      "COLUMN",
      "COLUMNS",
      "COMBIN",
      "COMBINA",
      "COMPLEX",
      "CONCAT",
      "CONCATENATE",
      "CONFIDENCE",
      "CONFIDENCE.NORM",
      "CONFIDENCE.T",
      "CONVERT",
      "CORREL",
      "COS",
      "COSH",
      "COT",
      "COTH",
      "COUNT",
      "COUNTA",
      "COUNTBLANK",
      "COUNTIF",
      "COUNTIFS",
      "COUPDAYBS",
      "COUPDAYS",
      "COUPDAYSNC",
      "COUPNCD",
      "COUPNUM",
      "COUPPCD",
      "COVAR",
      "COVARIANCE.P",
      "COVARIANCE.S",
      "CRITBINOM",
      "CSC",
      "CSCH",
      "CUBEKPIMEMBER",
      "CUBEMEMBER",
      "CUBEMEMBERPROPERTY",
      "CUBERANKEDMEMBER",
      "CUBESET",
      "CUBESETCOUNT",
      "CUBEVALUE",
      "CUMIPMT",
      "CUMPRINC",
      "DATE",
      "DATEDIF",
      "DATEVALUE",
      "DAVERAGE",
      "DAY",
      "DAYS",
      "DAYS360",
      "DB",
      "DBCS",
      "DCOUNT",
      "DCOUNTA",
      "DDB",
      "DEC2BIN",
      "DEC2HEX",
      "DEC2OCT",
      "DECIMAL",
      "DEGREES",
      "DELTA",
      "DEVSQ",
      "DGET",
      "DISC",
      "DMAX",
      "DMIN",
      "DOLLAR",
      "DOLLARDE",
      "DOLLARFR",
      "DPRODUCT",
      "DSTDEV",
      "DSTDEVP",
      "DSUM",
      "DURATION",
      "DVAR",
      "DVARP",
      "EDATE",
      "EFFECT",
      "ENCODEURL",
      "EOMONTH",
      "ERF",
      "ERF.PRECISE",
      "ERFC",
      "ERFC.PRECISE",
      "ERROR.TYPE",
      "EUROCONVERT",
      "EVEN",
      "EXACT",
      "EXP",
      "EXPON.DIST",
      "EXPONDIST",
      "FACT",
      "FACTDOUBLE",
      "FALSE|0",
      "F.DIST",
      "FDIST",
      "F.DIST.RT",
      "FILTERXML",
      "FIND",
      "FINDB",
      "F.INV",
      "F.INV.RT",
      "FINV",
      "FISHER",
      "FISHERINV",
      "FIXED",
      "FLOOR",
      "FLOOR.MATH",
      "FLOOR.PRECISE",
      "FORECAST",
      "FORECAST.ETS",
      "FORECAST.ETS.CONFINT",
      "FORECAST.ETS.SEASONALITY",
      "FORECAST.ETS.STAT",
      "FORECAST.LINEAR",
      "FORMULATEXT",
      "FREQUENCY",
      "F.TEST",
      "FTEST",
      "FV",
      "FVSCHEDULE",
      "GAMMA",
      "GAMMA.DIST",
      "GAMMADIST",
      "GAMMA.INV",
      "GAMMAINV",
      "GAMMALN",
      "GAMMALN.PRECISE",
      "GAUSS",
      "GCD",
      "GEOMEAN",
      "GESTEP",
      "GETPIVOTDATA",
      "GROWTH",
      "HARMEAN",
      "HEX2BIN",
      "HEX2DEC",
      "HEX2OCT",
      "HLOOKUP",
      "HOUR",
      "HYPERLINK",
      "HYPGEOM.DIST",
      "HYPGEOMDIST",
      "IF",
      "IFERROR",
      "IFNA",
      "IFS",
      "IMABS",
      "IMAGINARY",
      "IMARGUMENT",
      "IMCONJUGATE",
      "IMCOS",
      "IMCOSH",
      "IMCOT",
      "IMCSC",
      "IMCSCH",
      "IMDIV",
      "IMEXP",
      "IMLN",
      "IMLOG10",
      "IMLOG2",
      "IMPOWER",
      "IMPRODUCT",
      "IMREAL",
      "IMSEC",
      "IMSECH",
      "IMSIN",
      "IMSINH",
      "IMSQRT",
      "IMSUB",
      "IMSUM",
      "IMTAN",
      "INDEX",
      "INDIRECT",
      "INFO",
      "INT",
      "INTERCEPT",
      "INTRATE",
      "IPMT",
      "IRR",
      "ISBLANK",
      "ISERR",
      "ISERROR",
      "ISEVEN",
      "ISFORMULA",
      "ISLOGICAL",
      "ISNA",
      "ISNONTEXT",
      "ISNUMBER",
      "ISODD",
      "ISREF",
      "ISTEXT",
      "ISO.CEILING",
      "ISOWEEKNUM",
      "ISPMT",
      "JIS",
      "KURT",
      "LARGE",
      "LCM",
      "LEFT",
      "LEFTB",
      "LEN",
      "LENB",
      "LINEST",
      "LN",
      "LOG",
      "LOG10",
      "LOGEST",
      "LOGINV",
      "LOGNORM.DIST",
      "LOGNORMDIST",
      "LOGNORM.INV",
      "LOOKUP",
      "LOWER",
      "MATCH",
      "MAX",
      "MAXA",
      "MAXIFS",
      "MDETERM",
      "MDURATION",
      "MEDIAN",
      "MID",
      "MIDBs",
      "MIN",
      "MINIFS",
      "MINA",
      "MINUTE",
      "MINVERSE",
      "MIRR",
      "MMULT",
      "MOD",
      "MODE",
      "MODE.MULT",
      "MODE.SNGL",
      "MONTH",
      "MROUND",
      "MULTINOMIAL",
      "MUNIT",
      "N",
      "NA",
      "NEGBINOM.DIST",
      "NEGBINOMDIST",
      "NETWORKDAYS",
      "NETWORKDAYS.INTL",
      "NOMINAL",
      "NORM.DIST",
      "NORMDIST",
      "NORMINV",
      "NORM.INV",
      "NORM.S.DIST",
      "NORMSDIST",
      "NORM.S.INV",
      "NORMSINV",
      "NOT",
      "NOW",
      "NPER",
      "NPV",
      "NUMBERVALUE",
      "OCT2BIN",
      "OCT2DEC",
      "OCT2HEX",
      "ODD",
      "ODDFPRICE",
      "ODDFYIELD",
      "ODDLPRICE",
      "ODDLYIELD",
      "OFFSET",
      "OR",
      "PDURATION",
      "PEARSON",
      "PERCENTILE.EXC",
      "PERCENTILE.INC",
      "PERCENTILE",
      "PERCENTRANK.EXC",
      "PERCENTRANK.INC",
      "PERCENTRANK",
      "PERMUT",
      "PERMUTATIONA",
      "PHI",
      "PHONETIC",
      "PI",
      "PMT",
      "POISSON.DIST",
      "POISSON",
      "POWER",
      "PPMT",
      "PRICE",
      "PRICEDISC",
      "PRICEMAT",
      "PROB",
      "PRODUCT",
      "PROPER",
      "PV",
      "QUARTILE",
      "QUARTILE.EXC",
      "QUARTILE.INC",
      "QUOTIENT",
      "RADIANS",
      "RAND",
      "RANDBETWEEN",
      "RANK.AVG",
      "RANK.EQ",
      "RANK",
      "RATE",
      "RECEIVED",
      "REGISTER.ID",
      "REPLACE",
      "REPLACEB",
      "REPT",
      "RIGHT",
      "RIGHTB",
      "ROMAN",
      "ROUND",
      "ROUNDDOWN",
      "ROUNDUP",
      "ROW",
      "ROWS",
      "RRI",
      "RSQ",
      "RTD",
      "SEARCH",
      "SEARCHB",
      "SEC",
      "SECH",
      "SECOND",
      "SERIESSUM",
      "SHEET",
      "SHEETS",
      "SIGN",
      "SIN",
      "SINH",
      "SKEW",
      "SKEW.P",
      "SLN",
      "SLOPE",
      "SMALL",
      "SQL.REQUEST",
      "SQRT",
      "SQRTPI",
      "STANDARDIZE",
      "STDEV",
      "STDEV.P",
      "STDEV.S",
      "STDEVA",
      "STDEVP",
      "STDEVPA",
      "STEYX",
      "SUBSTITUTE",
      "SUBTOTAL",
      "SUM",
      "SUMIF",
      "SUMIFS",
      "SUMPRODUCT",
      "SUMSQ",
      "SUMX2MY2",
      "SUMX2PY2",
      "SUMXMY2",
      "SWITCH",
      "SYD",
      "T",
      "TAN",
      "TANH",
      "TBILLEQ",
      "TBILLPRICE",
      "TBILLYIELD",
      "T.DIST",
      "T.DIST.2T",
      "T.DIST.RT",
      "TDIST",
      "TEXT",
      "TEXTJOIN",
      "TIME",
      "TIMEVALUE",
      "T.INV",
      "T.INV.2T",
      "TINV",
      "TODAY",
      "TRANSPOSE",
      "TREND",
      "TRIM",
      "TRIMMEAN",
      "TRUE|0",
      "TRUNC",
      "T.TEST",
      "TTEST",
      "TYPE",
      "UNICHAR",
      "UNICODE",
      "UPPER",
      "VALUE",
      "VAR",
      "VAR.P",
      "VAR.S",
      "VARA",
      "VARP",
      "VARPA",
      "VDB",
      "VLOOKUP",
      "WEBSERVICE",
      "WEEKDAY",
      "WEEKNUM",
      "WEIBULL",
      "WEIBULL.DIST",
      "WORKDAY",
      "WORKDAY.INTL",
      "XIRR",
      "XNPV",
      "XOR",
      "YEAR",
      "YEARFRAC",
      "YIELD",
      "YIELDDISC",
      "YIELDMAT",
      "Z.TEST",
      "ZTEST"
    ];
    return {
      name: "Excel formulae",
      aliases: [
        "xlsx",
        "xls"
      ],
      case_insensitive: true,
      keywords: {
        $pattern: /[a-zA-Z][\w\.]*/,
        built_in: BUILT_INS
      },
      contains: [
        {
          begin: /^=/,
          end: /[^=]/,
          returnEnd: true,
          illegal: /=/,
          relevance: 10
        },
        {
          className: "symbol",
          begin: /\b[A-Z]{1,2}\d+\b/,
          end: /[^\d]/,
          excludeEnd: true,
          relevance: 0
        },
        {
          className: "symbol",
          begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
          relevance: 0
        },
        hljs.BACKSLASH_ESCAPE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: hljs.NUMBER_RE + "(%)?",
          relevance: 0
        },
        hljs.COMMENT(/\bN\(/, /\)/, {
          excludeBegin: true,
          excludeEnd: true,
          illegal: /\n/
        })
      ]
    };
  };
  module.exports = excel;
});

// node_modules/highlight.js/lib/languages/fix.js
var require_fix = __commonJS((exports, module) => {
  var fix = function(hljs) {
    return {
      name: "FIX",
      contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: true,
          returnBegin: true,
          returnEnd: false,
          contains: [
            {
              begin: /([^\u2401\u0001=]+)/,
              end: /=([^\u2401\u0001=]+)/,
              returnEnd: true,
              returnBegin: false,
              className: "attr"
            },
            {
              begin: /=/,
              end: /([\u2401\u0001])/,
              excludeEnd: true,
              excludeBegin: true,
              className: "string"
            }
          ]
        }
      ],
      case_insensitive: true
    };
  };
  module.exports = fix;
});

// node_modules/highlight.js/lib/languages/flix.js
var require_flix = __commonJS((exports, module) => {
  var flix = function(hljs) {
    const CHAR = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    };
    const NAME = {
      className: "title",
      relevance: 0,
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
    };
    const METHOD = {
      className: "function",
      beginKeywords: "def",
      end: /[:={\[(\n;]/,
      excludeEnd: true,
      contains: [NAME]
    };
    return {
      name: "Flix",
      keywords: {
        keyword: [
          "case",
          "class",
          "def",
          "else",
          "enum",
          "if",
          "impl",
          "import",
          "in",
          "lat",
          "rel",
          "index",
          "let",
          "match",
          "namespace",
          "switch",
          "type",
          "yield",
          "with"
        ],
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CHAR,
        STRING,
        METHOD,
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = flix;
});

// node_modules/highlight.js/lib/languages/fortran.js
var require_fortran = __commonJS((exports, module) => {
  var fortran = function(hljs) {
    const regex6 = hljs.regex;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    };
    const COMMENT = { variants: [
      hljs.COMMENT("!", "$", { relevance: 0 }),
      hljs.COMMENT("^C[ ]", "$", { relevance: 0 }),
      hljs.COMMENT("^C$", "$", { relevance: 0 })
    ] };
    const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
    const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: regex6.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex6.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex6.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
      ],
      relevance: 0
    };
    const FUNCTION_DEF = {
      className: "function",
      beginKeywords: "subroutine function program",
      illegal: "[${=\\n]",
      contains: [
        hljs.UNDERSCORE_TITLE_MODE,
        PARAMS
      ]
    };
    const STRING = {
      className: "string",
      relevance: 0,
      variants: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    const KEYWORDS2 = [
      "kind",
      "do",
      "concurrent",
      "local",
      "shared",
      "while",
      "private",
      "call",
      "intrinsic",
      "where",
      "elsewhere",
      "type",
      "endtype",
      "endmodule",
      "endselect",
      "endinterface",
      "end",
      "enddo",
      "endif",
      "if",
      "forall",
      "endforall",
      "only",
      "contains",
      "default",
      "return",
      "stop",
      "then",
      "block",
      "endblock",
      "endassociate",
      "public",
      "subroutine|10",
      "function",
      "program",
      ".and.",
      ".or.",
      ".not.",
      ".le.",
      ".eq.",
      ".ge.",
      ".gt.",
      ".lt.",
      "goto",
      "save",
      "else",
      "use",
      "module",
      "select",
      "case",
      "access",
      "blank",
      "direct",
      "exist",
      "file",
      "fmt",
      "form",
      "formatted",
      "iostat",
      "name",
      "named",
      "nextrec",
      "number",
      "opened",
      "rec",
      "recl",
      "sequential",
      "status",
      "unformatted",
      "unit",
      "continue",
      "format",
      "pause",
      "cycle",
      "exit",
      "c_null_char",
      "c_alert",
      "c_backspace",
      "c_form_feed",
      "flush",
      "wait",
      "decimal",
      "round",
      "iomsg",
      "synchronous",
      "nopass",
      "non_overridable",
      "pass",
      "protected",
      "volatile",
      "abstract",
      "extends",
      "import",
      "non_intrinsic",
      "value",
      "deferred",
      "generic",
      "final",
      "enumerator",
      "class",
      "associate",
      "bind",
      "enum",
      "c_int",
      "c_short",
      "c_long",
      "c_long_long",
      "c_signed_char",
      "c_size_t",
      "c_int8_t",
      "c_int16_t",
      "c_int32_t",
      "c_int64_t",
      "c_int_least8_t",
      "c_int_least16_t",
      "c_int_least32_t",
      "c_int_least64_t",
      "c_int_fast8_t",
      "c_int_fast16_t",
      "c_int_fast32_t",
      "c_int_fast64_t",
      "c_intmax_t",
      "C_intptr_t",
      "c_float",
      "c_double",
      "c_long_double",
      "c_float_complex",
      "c_double_complex",
      "c_long_double_complex",
      "c_bool",
      "c_char",
      "c_null_ptr",
      "c_null_funptr",
      "c_new_line",
      "c_carriage_return",
      "c_horizontal_tab",
      "c_vertical_tab",
      "iso_c_binding",
      "c_loc",
      "c_funloc",
      "c_associated",
      "c_f_pointer",
      "c_ptr",
      "c_funptr",
      "iso_fortran_env",
      "character_storage_size",
      "error_unit",
      "file_storage_size",
      "input_unit",
      "iostat_end",
      "iostat_eor",
      "numeric_storage_size",
      "output_unit",
      "c_f_procpointer",
      "ieee_arithmetic",
      "ieee_support_underflow_control",
      "ieee_get_underflow_mode",
      "ieee_set_underflow_mode",
      "newunit",
      "contiguous",
      "recursive",
      "pad",
      "position",
      "action",
      "delim",
      "readwrite",
      "eor",
      "advance",
      "nml",
      "interface",
      "procedure",
      "namelist",
      "include",
      "sequence",
      "elemental",
      "pure",
      "impure",
      "integer",
      "real",
      "character",
      "complex",
      "logical",
      "codimension",
      "dimension",
      "allocatable|10",
      "parameter",
      "external",
      "implicit|10",
      "none",
      "double",
      "precision",
      "assign",
      "intent",
      "optional",
      "pointer",
      "target",
      "in",
      "out",
      "common",
      "equivalence",
      "data"
    ];
    const LITERALS = [
      ".False.",
      ".True."
    ];
    const BUILT_INS = [
      "alog",
      "alog10",
      "amax0",
      "amax1",
      "amin0",
      "amin1",
      "amod",
      "cabs",
      "ccos",
      "cexp",
      "clog",
      "csin",
      "csqrt",
      "dabs",
      "dacos",
      "dasin",
      "datan",
      "datan2",
      "dcos",
      "dcosh",
      "ddim",
      "dexp",
      "dint",
      "dlog",
      "dlog10",
      "dmax1",
      "dmin1",
      "dmod",
      "dnint",
      "dsign",
      "dsin",
      "dsinh",
      "dsqrt",
      "dtan",
      "dtanh",
      "float",
      "iabs",
      "idim",
      "idint",
      "idnint",
      "ifix",
      "isign",
      "max0",
      "max1",
      "min0",
      "min1",
      "sngl",
      "algama",
      "cdabs",
      "cdcos",
      "cdexp",
      "cdlog",
      "cdsin",
      "cdsqrt",
      "cqabs",
      "cqcos",
      "cqexp",
      "cqlog",
      "cqsin",
      "cqsqrt",
      "dcmplx",
      "dconjg",
      "derf",
      "derfc",
      "dfloat",
      "dgamma",
      "dimag",
      "dlgama",
      "iqint",
      "qabs",
      "qacos",
      "qasin",
      "qatan",
      "qatan2",
      "qcmplx",
      "qconjg",
      "qcos",
      "qcosh",
      "qdim",
      "qerf",
      "qerfc",
      "qexp",
      "qgamma",
      "qimag",
      "qlgama",
      "qlog",
      "qlog10",
      "qmax1",
      "qmin1",
      "qmod",
      "qnint",
      "qsign",
      "qsin",
      "qsinh",
      "qsqrt",
      "qtan",
      "qtanh",
      "abs",
      "acos",
      "aimag",
      "aint",
      "anint",
      "asin",
      "atan",
      "atan2",
      "char",
      "cmplx",
      "conjg",
      "cos",
      "cosh",
      "exp",
      "ichar",
      "index",
      "int",
      "log",
      "log10",
      "max",
      "min",
      "nint",
      "sign",
      "sin",
      "sinh",
      "sqrt",
      "tan",
      "tanh",
      "print",
      "write",
      "dim",
      "lge",
      "lgt",
      "lle",
      "llt",
      "mod",
      "nullify",
      "allocate",
      "deallocate",
      "adjustl",
      "adjustr",
      "all",
      "allocated",
      "any",
      "associated",
      "bit_size",
      "btest",
      "ceiling",
      "count",
      "cshift",
      "date_and_time",
      "digits",
      "dot_product",
      "eoshift",
      "epsilon",
      "exponent",
      "floor",
      "fraction",
      "huge",
      "iand",
      "ibclr",
      "ibits",
      "ibset",
      "ieor",
      "ior",
      "ishft",
      "ishftc",
      "lbound",
      "len_trim",
      "matmul",
      "maxexponent",
      "maxloc",
      "maxval",
      "merge",
      "minexponent",
      "minloc",
      "minval",
      "modulo",
      "mvbits",
      "nearest",
      "pack",
      "present",
      "product",
      "radix",
      "random_number",
      "random_seed",
      "range",
      "repeat",
      "reshape",
      "rrspacing",
      "scale",
      "scan",
      "selected_int_kind",
      "selected_real_kind",
      "set_exponent",
      "shape",
      "size",
      "spacing",
      "spread",
      "sum",
      "system_clock",
      "tiny",
      "transpose",
      "trim",
      "ubound",
      "unpack",
      "verify",
      "achar",
      "iachar",
      "transfer",
      "dble",
      "entry",
      "dprod",
      "cpu_time",
      "command_argument_count",
      "get_command",
      "get_command_argument",
      "get_environment_variable",
      "is_iostat_end",
      "ieee_arithmetic",
      "ieee_support_underflow_control",
      "ieee_get_underflow_mode",
      "ieee_set_underflow_mode",
      "is_iostat_eor",
      "move_alloc",
      "new_line",
      "selected_char_kind",
      "same_type_as",
      "extends_type_of",
      "acosh",
      "asinh",
      "atanh",
      "bessel_j0",
      "bessel_j1",
      "bessel_jn",
      "bessel_y0",
      "bessel_y1",
      "bessel_yn",
      "erf",
      "erfc",
      "erfc_scaled",
      "gamma",
      "log_gamma",
      "hypot",
      "norm2",
      "atomic_define",
      "atomic_ref",
      "execute_command_line",
      "leadz",
      "trailz",
      "storage_size",
      "merge_bits",
      "bge",
      "bgt",
      "ble",
      "blt",
      "dshiftl",
      "dshiftr",
      "findloc",
      "iall",
      "iany",
      "iparity",
      "image_index",
      "lcobound",
      "ucobound",
      "maskl",
      "maskr",
      "num_images",
      "parity",
      "popcnt",
      "poppar",
      "shifta",
      "shiftl",
      "shiftr",
      "this_image",
      "sync",
      "change",
      "team",
      "co_broadcast",
      "co_max",
      "co_min",
      "co_sum",
      "co_reduce"
    ];
    return {
      name: "Fortran",
      case_insensitive: true,
      aliases: [
        "f90",
        "f95"
      ],
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS,
        built_in: BUILT_INS
      },
      illegal: /\/\*/,
      contains: [
        STRING,
        FUNCTION_DEF,
        {
          begin: /^C\s*=(?!=)/,
          relevance: 0
        },
        COMMENT,
        NUMBER
      ]
    };
  };
  module.exports = fortran;
});

// node_modules/highlight.js/lib/languages/fsharp.js
var require_fsharp = __commonJS((exports, module) => {
  var escape4 = function(value) {
    return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
  };
  var source = function(re2) {
    if (!re2)
      return null;
    if (typeof re2 === "string")
      return re2;
    return re2.source;
  };
  var lookahead = function(re2) {
    return concat("(?=", re2, ")");
  };
  var concat = function(...args) {
    const joined = args.map((x2) => source(x2)).join("");
    return joined;
  };
  var stripOptionsFromArgs = function(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  };
  var either = function(...args) {
    const opts = stripOptionsFromArgs(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x2) => source(x2)).join("|") + ")";
    return joined;
  };
  var fsharp = function(hljs) {
    const KEYWORDS2 = [
      "abstract",
      "and",
      "as",
      "assert",
      "base",
      "begin",
      "class",
      "default",
      "delegate",
      "do",
      "done",
      "downcast",
      "downto",
      "elif",
      "else",
      "end",
      "exception",
      "extern",
      "finally",
      "fixed",
      "for",
      "fun",
      "function",
      "global",
      "if",
      "in",
      "inherit",
      "inline",
      "interface",
      "internal",
      "lazy",
      "let",
      "match",
      "member",
      "module",
      "mutable",
      "namespace",
      "new",
      "of",
      "open",
      "or",
      "override",
      "private",
      "public",
      "rec",
      "return",
      "static",
      "struct",
      "then",
      "to",
      "try",
      "type",
      "upcast",
      "use",
      "val",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ];
    const BANG_KEYWORD_MODE = {
      scope: "keyword",
      match: /\b(yield|return|let|do|match|use)!/
    };
    const PREPROCESSOR_KEYWORDS = [
      "if",
      "else",
      "endif",
      "line",
      "nowarn",
      "light",
      "r",
      "i",
      "I",
      "load",
      "time",
      "help",
      "quit"
    ];
    const LITERALS = [
      "true",
      "false",
      "null",
      "Some",
      "None",
      "Ok",
      "Error",
      "infinity",
      "infinityf",
      "nan",
      "nanf"
    ];
    const SPECIAL_IDENTIFIERS = [
      "__LINE__",
      "__SOURCE_DIRECTORY__",
      "__SOURCE_FILE__"
    ];
    const KNOWN_TYPES = [
      "bool",
      "byte",
      "sbyte",
      "int8",
      "int16",
      "int32",
      "uint8",
      "uint16",
      "uint32",
      "int",
      "uint",
      "int64",
      "uint64",
      "nativeint",
      "unativeint",
      "decimal",
      "float",
      "double",
      "float32",
      "single",
      "char",
      "string",
      "unit",
      "bigint",
      "option",
      "voption",
      "list",
      "array",
      "seq",
      "byref",
      "exn",
      "inref",
      "nativeptr",
      "obj",
      "outref",
      "voidptr",
      "Result"
    ];
    const BUILTINS = [
      "not",
      "ref",
      "raise",
      "reraise",
      "dict",
      "readOnlyDict",
      "set",
      "get",
      "enum",
      "sizeof",
      "typeof",
      "typedefof",
      "nameof",
      "nullArg",
      "invalidArg",
      "invalidOp",
      "id",
      "fst",
      "snd",
      "ignore",
      "lock",
      "using",
      "box",
      "unbox",
      "tryUnbox",
      "printf",
      "printfn",
      "sprintf",
      "eprintf",
      "eprintfn",
      "fprintf",
      "fprintfn",
      "failwith",
      "failwithf"
    ];
    const ALL_KEYWORDS = {
      keyword: KEYWORDS2,
      literal: LITERALS,
      built_in: BUILTINS,
      "variable.constant": SPECIAL_IDENTIFIERS
    };
    const ML_COMMENT = hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
      contains: ["self"]
    });
    const COMMENT = {
      variants: [
        ML_COMMENT,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;
    const QUOTED_IDENTIFIER = {
      scope: "variable",
      begin: /``/,
      end: /``/
    };
    const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
    const GENERIC_TYPE_SYMBOL = {
      scope: "symbol",
      variants: [
        { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
        { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
      ],
      relevance: 0
    };
    const makeOperatorMode = function({ includeEqual }) {
      let allOperatorChars;
      if (includeEqual)
        allOperatorChars = "!%&*+-/<=>@^|~?";
      else
        allOperatorChars = "!%&*+-/<>@^|~?";
      const OPERATOR_CHARS2 = Array.from(allOperatorChars);
      const OPERATOR_CHAR_RE = concat("[", ...OPERATOR_CHARS2.map(escape4), "]");
      const OPERATOR_CHAR_OR_DOT_RE = either(OPERATOR_CHAR_RE, /\./);
      const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat(OPERATOR_CHAR_OR_DOT_RE, lookahead(OPERATOR_CHAR_OR_DOT_RE));
      const SYMBOLIC_OPERATOR_RE = either(concat(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, "*"), concat(OPERATOR_CHAR_RE, "+"));
      return {
        scope: "operator",
        match: either(SYMBOLIC_OPERATOR_RE, /:\?>/, /:\?/, /:>/, /:=/, /::?/, /\$/),
        relevance: 0
      };
    };
    const OPERATOR = makeOperatorMode({ includeEqual: true });
    const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });
    const makeTypeAnnotationMode = function(prefix, prefixScope) {
      return {
        begin: concat(prefix, lookahead(concat(/\s*/, either(/\w/, /'/, /\^/, /#/, /``/, /\(/, /{\|/)))),
        beginScope: prefixScope,
        end: lookahead(either(/\n/, /=/)),
        relevance: 0,
        keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
        contains: [
          COMMENT,
          GENERIC_TYPE_SYMBOL,
          hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
          OPERATOR_WITHOUT_EQUAL
        ]
      };
    };
    const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, "operator");
    const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, "keyword");
    const TYPE_DECLARATION = {
      begin: [
        /(^|\s+)/,
        /type/,
        /\s+/,
        IDENTIFIER_RE
      ],
      beginScope: {
        2: "keyword",
        4: "title.class"
      },
      end: lookahead(/\(|=|$/),
      keywords: ALL_KEYWORDS,
      contains: [
        COMMENT,
        hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
        GENERIC_TYPE_SYMBOL,
        {
          scope: "operator",
          match: /<|>/
        },
        TYPE_ANNOTATION
      ]
    };
    const COMPUTATION_EXPRESSION = {
      scope: "computation-expression",
      match: /\b[_a-z]\w*(?=\s*\{)/
    };
    const PREPROCESSOR = {
      begin: [
        /^\s*/,
        concat(/#/, either(...PREPROCESSOR_KEYWORDS)),
        /\b/
      ],
      beginScope: { 2: "meta" },
      end: lookahead(/\s|$/)
    };
    const NUMBER = {
      variants: [
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const QUOTED_STRING = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE
      ]
    };
    const VERBATIM_STRING = {
      scope: "string",
      begin: /@"/,
      end: /"/,
      contains: [
        {
          match: /""/
        },
        hljs.BACKSLASH_ESCAPE
      ]
    };
    const TRIPLE_QUOTED_STRING = {
      scope: "string",
      begin: /"""/,
      end: /"""/,
      relevance: 2
    };
    const SUBST = {
      scope: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: ALL_KEYWORDS
    };
    const INTERPOLATED_STRING = {
      scope: "string",
      begin: /\$"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
        },
        {
          match: /\}\}/
        },
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const INTERPOLATED_VERBATIM_STRING = {
      scope: "string",
      begin: /(\$@|@\$)"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
        },
        {
          match: /\}\}/
        },
        {
          match: /""/
        },
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const INTERPOLATED_TRIPLE_QUOTED_STRING = {
      scope: "string",
      begin: /\$"""/,
      end: /"""/,
      contains: [
        {
          match: /\{\{/
        },
        {
          match: /\}\}/
        },
        SUBST
      ],
      relevance: 2
    };
    const CHAR_LITERAL = {
      scope: "string",
      match: concat(/'/, either(/[^\\']/, /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/), /'/)
    };
    SUBST.contains = [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      QUOTED_STRING,
      CHAR_LITERAL,
      BANG_KEYWORD_MODE,
      COMMENT,
      QUOTED_IDENTIFIER,
      TYPE_ANNOTATION,
      COMPUTATION_EXPRESSION,
      PREPROCESSOR,
      NUMBER,
      GENERIC_TYPE_SYMBOL,
      OPERATOR
    ];
    const STRING = {
      variants: [
        INTERPOLATED_TRIPLE_QUOTED_STRING,
        INTERPOLATED_VERBATIM_STRING,
        INTERPOLATED_STRING,
        TRIPLE_QUOTED_STRING,
        VERBATIM_STRING,
        QUOTED_STRING,
        CHAR_LITERAL
      ]
    };
    return {
      name: "F#",
      aliases: [
        "fs",
        "f#"
      ],
      keywords: ALL_KEYWORDS,
      illegal: /\/\*/,
      classNameAliases: {
        "computation-expression": "keyword"
      },
      contains: [
        BANG_KEYWORD_MODE,
        STRING,
        COMMENT,
        QUOTED_IDENTIFIER,
        TYPE_DECLARATION,
        {
          scope: "meta",
          begin: /\[</,
          end: />\]/,
          relevance: 2,
          contains: [
            QUOTED_IDENTIFIER,
            TRIPLE_QUOTED_STRING,
            VERBATIM_STRING,
            QUOTED_STRING,
            CHAR_LITERAL,
            NUMBER
          ]
        },
        DISCRIMINATED_UNION_TYPE_ANNOTATION,
        TYPE_ANNOTATION,
        COMPUTATION_EXPRESSION,
        PREPROCESSOR,
        NUMBER,
        GENERIC_TYPE_SYMBOL,
        OPERATOR
      ]
    };
  };
  module.exports = fsharp;
});

// node_modules/highlight.js/lib/languages/gams.js
var require_gams = __commonJS((exports, module) => {
  var gams = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = {
      keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
      literal: "eps inf na",
      built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
    };
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true
    };
    const SYMBOLS = {
      className: "symbol",
      variants: [
        { begin: /=[lgenxc]=/ },
        { begin: /\$/ }
      ]
    };
    const QSTR = {
      className: "comment",
      variants: [
        {
          begin: "\'",
          end: "\'"
        },
        {
          begin: '"',
          end: '"'
        }
      ],
      illegal: "\\n",
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const ASSIGNMENT2 = {
      begin: "/",
      end: "/",
      keywords: KEYWORDS2,
      contains: [
        QSTR,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
    const DESCTEXT = {
      begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
      excludeBegin: true,
      end: "$",
      endsWithParent: true,
      contains: [
        QSTR,
        ASSIGNMENT2,
        {
          className: "comment",
          begin: regex6.concat(COMMENT_WORD, regex6.anyNumberOfTimes(regex6.concat(/[ ]+/, COMMENT_WORD))),
          relevance: 0
        }
      ]
    };
    return {
      name: "GAMS",
      aliases: ["gms"],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(/^\$ontext/, /^\$offtext/),
        {
          className: "meta",
          begin: "^\\$[a-z0-9]+",
          end: "$",
          returnBegin: true,
          contains: [
            {
              className: "keyword",
              begin: "^\\$[a-z0-9]+"
            }
          ]
        },
        hljs.COMMENT("^\\*", "$"),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        {
          beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
          end: ";",
          contains: [
            hljs.COMMENT("^\\*", "$"),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            ASSIGNMENT2,
            DESCTEXT
          ]
        },
        {
          beginKeywords: "table",
          end: ";",
          returnBegin: true,
          contains: [
            {
              beginKeywords: "table",
              end: "$",
              contains: [DESCTEXT]
            },
            hljs.COMMENT("^\\*", "$"),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            hljs.C_NUMBER_MODE
          ]
        },
        {
          className: "function",
          begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
          returnBegin: true,
          contains: [
            {
              className: "title",
              begin: /^[a-z0-9_]+/
            },
            PARAMS,
            SYMBOLS
          ]
        },
        hljs.C_NUMBER_MODE,
        SYMBOLS
      ]
    };
  };
  module.exports = gams;
});

// node_modules/highlight.js/lib/languages/gauss.js
var require_gauss = __commonJS((exports, module) => {
  var gauss = function(hljs) {
    const KEYWORDS2 = {
      keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
      built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
      literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
    };
    const AT_COMMENT_MODE = hljs.COMMENT("@", "@");
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            {
              className: "string",
              begin: '"',
              end: '"',
              illegal: "\\n"
            }
          ]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE
      ]
    };
    const STRUCT_TYPE = {
      begin: /\bstruct\s+/,
      end: /\s/,
      keywords: "struct",
      contains: [
        {
          className: "type",
          begin: hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
    const PARSE_PARAMS = [
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        endsWithParent: true,
        relevance: 0,
        contains: [
          {
            className: "literal",
            begin: /\.\.\./
          },
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          AT_COMMENT_MODE,
          STRUCT_TYPE
        ]
      }
    ];
    const FUNCTION_DEF = {
      className: "title",
      begin: hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const DEFINITION = function(beginKeywords, end, inherits) {
      const mode = hljs.inherit({
        className: "function",
        beginKeywords,
        end,
        excludeEnd: true,
        contains: [].concat(PARSE_PARAMS)
      }, inherits || {});
      mode.contains.push(FUNCTION_DEF);
      mode.contains.push(hljs.C_NUMBER_MODE);
      mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);
      mode.contains.push(AT_COMMENT_MODE);
      return mode;
    };
    const BUILT_IN_REF = {
      className: "built_in",
      begin: "\\b(" + KEYWORDS2.built_in.split(" ").join("|") + ")\\b"
    };
    const STRING_REF = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [hljs.BACKSLASH_ESCAPE],
      relevance: 0
    };
    const FUNCTION_REF = {
      begin: hljs.UNDERSCORE_IDENT_RE + "\\s*\\(",
      returnBegin: true,
      keywords: KEYWORDS2,
      relevance: 0,
      contains: [
        { beginKeywords: KEYWORDS2.keyword },
        BUILT_IN_REF,
        {
          className: "built_in",
          begin: hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
    const FUNCTION_REF_PARAMS = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: {
        built_in: KEYWORDS2.built_in,
        literal: KEYWORDS2.literal
      },
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE,
        BUILT_IN_REF,
        FUNCTION_REF,
        STRING_REF,
        "self"
      ]
    };
    FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);
    return {
      name: "GAUSS",
      aliases: ["gss"],
      case_insensitive: true,
      keywords: KEYWORDS2,
      illegal: /(\{[%#]|[%#]\}| <- )/,
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE,
        STRING_REF,
        PREPROCESSOR,
        {
          className: "keyword",
          begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
        },
        DEFINITION("proc keyword", ";"),
        DEFINITION("fn", "="),
        {
          beginKeywords: "for threadfor",
          end: /;/,
          relevance: 0,
          contains: [
            hljs.C_BLOCK_COMMENT_MODE,
            AT_COMMENT_MODE,
            FUNCTION_REF_PARAMS
          ]
        },
        {
          variants: [
            { begin: hljs.UNDERSCORE_IDENT_RE + "\\." + hljs.UNDERSCORE_IDENT_RE },
            { begin: hljs.UNDERSCORE_IDENT_RE + "\\s*=" }
          ],
          relevance: 0
        },
        FUNCTION_REF,
        STRUCT_TYPE
      ]
    };
  };
  module.exports = gauss;
});

// node_modules/highlight.js/lib/languages/gcode.js
var require_gcode = __commonJS((exports, module) => {
  var gcode = function(hljs) {
    const GCODE_IDENT_RE = "[A-Z_][A-Z0-9_.]*";
    const GCODE_CLOSE_RE = "%";
    const GCODE_KEYWORDS = {
      $pattern: GCODE_IDENT_RE,
      keyword: "IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR"
    };
    const GCODE_START = {
      className: "meta",
      begin: "([O])([0-9]+)"
    };
    const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, { begin: "([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|" + hljs.C_NUMBER_RE });
    const GCODE_CODE = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT(/\(/, /\)/),
      NUMBER,
      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "name",
        begin: "([G])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "name",
        begin: "([M])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "attr",
        begin: "(VC|VS|#)",
        end: "(\\d+)"
      },
      {
        className: "attr",
        begin: "(VZOFX|VZOFY|VZOFZ)"
      },
      {
        className: "built_in",
        begin: "(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",
        contains: [NUMBER],
        end: "\\]"
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "N",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      }
    ];
    return {
      name: "G-code (ISO 6983)",
      aliases: ["nc"],
      case_insensitive: true,
      keywords: GCODE_KEYWORDS,
      contains: [
        {
          className: "meta",
          begin: GCODE_CLOSE_RE
        },
        GCODE_START
      ].concat(GCODE_CODE)
    };
  };
  module.exports = gcode;
});

// node_modules/highlight.js/lib/languages/gherkin.js
var require_gherkin = __commonJS((exports, module) => {
  var gherkin = function(hljs) {
    return {
      name: "Gherkin",
      aliases: ["feature"],
      keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
      contains: [
        {
          className: "symbol",
          begin: "\\*",
          relevance: 0
        },
        {
          className: "meta",
          begin: "@[^@\\s]+"
        },
        {
          begin: "\\|",
          end: "\\|\\w*$",
          contains: [
            {
              className: "string",
              begin: "[^|]+"
            }
          ]
        },
        {
          className: "variable",
          begin: "<",
          end: ">"
        },
        hljs.HASH_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        hljs.QUOTE_STRING_MODE
      ]
    };
  };
  module.exports = gherkin;
});

// node_modules/highlight.js/lib/languages/glsl.js
var require_glsl = __commonJS((exports, module) => {
  var glsl = function(hljs) {
    return {
      name: "GLSL",
      keywords: {
        keyword: "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",
        type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
        built_in: "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",
        literal: "true false"
      },
      illegal: '"',
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        }
      ]
    };
  };
  module.exports = glsl;
});

// node_modules/highlight.js/lib/languages/gml.js
var require_gml = __commonJS((exports, module) => {
  var gml = function(hljs) {
    const KEYWORDS2 = [
      "#endregion",
      "#macro",
      "#region",
      "and",
      "begin",
      "break",
      "case",
      "constructor",
      "continue",
      "default",
      "delete",
      "div",
      "do",
      "else",
      "end",
      "enum",
      "exit",
      "for",
      "function",
      "globalvar",
      "if",
      "mod",
      "not",
      "or",
      "repeat",
      "return",
      "switch",
      "then",
      "until",
      "var",
      "while",
      "with",
      "xor"
    ];
    const BUILT_INS = [
      "abs",
      "achievement_available",
      "achievement_event",
      "achievement_get_challenges",
      "achievement_get_info",
      "achievement_get_pic",
      "achievement_increment",
      "achievement_load_friends",
      "achievement_load_leaderboard",
      "achievement_load_progress",
      "achievement_login",
      "achievement_login_status",
      "achievement_logout",
      "achievement_post",
      "achievement_post_score",
      "achievement_reset",
      "achievement_send_challenge",
      "achievement_show",
      "achievement_show_achievements",
      "achievement_show_challenge_notifications",
      "achievement_show_leaderboards",
      "action_inherited",
      "action_kill_object",
      "ads_disable",
      "ads_enable",
      "ads_engagement_active",
      "ads_engagement_available",
      "ads_engagement_launch",
      "ads_event",
      "ads_event_preload",
      "ads_get_display_height",
      "ads_get_display_width",
      "ads_interstitial_available",
      "ads_interstitial_display",
      "ads_move",
      "ads_set_reward_callback",
      "ads_setup",
      "alarm_get",
      "alarm_set",
      "analytics_event",
      "analytics_event_ext",
      "angle_difference",
      "ansi_char",
      "application_get_position",
      "application_surface_draw_enable",
      "application_surface_enable",
      "application_surface_is_enabled",
      "arccos",
      "arcsin",
      "arctan",
      "arctan2",
      "array_copy",
      "array_create",
      "array_delete",
      "array_equals",
      "array_height_2d",
      "array_insert",
      "array_length",
      "array_length_1d",
      "array_length_2d",
      "array_pop",
      "array_push",
      "array_resize",
      "array_sort",
      "asset_get_index",
      "asset_get_type",
      "audio_channel_num",
      "audio_create_buffer_sound",
      "audio_create_play_queue",
      "audio_create_stream",
      "audio_create_sync_group",
      "audio_debug",
      "audio_destroy_stream",
      "audio_destroy_sync_group",
      "audio_emitter_create",
      "audio_emitter_exists",
      "audio_emitter_falloff",
      "audio_emitter_free",
      "audio_emitter_gain",
      "audio_emitter_get_gain",
      "audio_emitter_get_listener_mask",
      "audio_emitter_get_pitch",
      "audio_emitter_get_vx",
      "audio_emitter_get_vy",
      "audio_emitter_get_vz",
      "audio_emitter_get_x",
      "audio_emitter_get_y",
      "audio_emitter_get_z",
      "audio_emitter_pitch",
      "audio_emitter_position",
      "audio_emitter_set_listener_mask",
      "audio_emitter_velocity",
      "audio_exists",
      "audio_falloff_set_model",
      "audio_free_buffer_sound",
      "audio_free_play_queue",
      "audio_get_listener_count",
      "audio_get_listener_info",
      "audio_get_listener_mask",
      "audio_get_master_gain",
      "audio_get_name",
      "audio_get_recorder_count",
      "audio_get_recorder_info",
      "audio_get_type",
      "audio_group_is_loaded",
      "audio_group_load",
      "audio_group_load_progress",
      "audio_group_name",
      "audio_group_set_gain",
      "audio_group_stop_all",
      "audio_group_unload",
      "audio_is_paused",
      "audio_is_playing",
      "audio_listener_get_data",
      "audio_listener_orientation",
      "audio_listener_position",
      "audio_listener_set_orientation",
      "audio_listener_set_position",
      "audio_listener_set_velocity",
      "audio_listener_velocity",
      "audio_master_gain",
      "audio_music_gain",
      "audio_music_is_playing",
      "audio_pause_all",
      "audio_pause_music",
      "audio_pause_sound",
      "audio_pause_sync_group",
      "audio_play_in_sync_group",
      "audio_play_music",
      "audio_play_sound",
      "audio_play_sound_at",
      "audio_play_sound_on",
      "audio_queue_sound",
      "audio_resume_all",
      "audio_resume_music",
      "audio_resume_sound",
      "audio_resume_sync_group",
      "audio_set_listener_mask",
      "audio_set_master_gain",
      "audio_sound_gain",
      "audio_sound_get_gain",
      "audio_sound_get_listener_mask",
      "audio_sound_get_pitch",
      "audio_sound_get_track_position",
      "audio_sound_length",
      "audio_sound_pitch",
      "audio_sound_set_listener_mask",
      "audio_sound_set_track_position",
      "audio_start_recording",
      "audio_start_sync_group",
      "audio_stop_all",
      "audio_stop_music",
      "audio_stop_recording",
      "audio_stop_sound",
      "audio_stop_sync_group",
      "audio_sync_group_debug",
      "audio_sync_group_get_track_pos",
      "audio_sync_group_is_playing",
      "audio_system",
      "background_get_height",
      "background_get_width",
      "base64_decode",
      "base64_encode",
      "browser_input_capture",
      "buffer_async_group_begin",
      "buffer_async_group_end",
      "buffer_async_group_option",
      "buffer_base64_decode",
      "buffer_base64_decode_ext",
      "buffer_base64_encode",
      "buffer_copy",
      "buffer_copy_from_vertex_buffer",
      "buffer_create",
      "buffer_create_from_vertex_buffer",
      "buffer_create_from_vertex_buffer_ext",
      "buffer_delete",
      "buffer_exists",
      "buffer_fill",
      "buffer_get_address",
      "buffer_get_alignment",
      "buffer_get_size",
      "buffer_get_surface",
      "buffer_get_type",
      "buffer_load",
      "buffer_load_async",
      "buffer_load_ext",
      "buffer_load_partial",
      "buffer_md5",
      "buffer_peek",
      "buffer_poke",
      "buffer_read",
      "buffer_resize",
      "buffer_save",
      "buffer_save_async",
      "buffer_save_ext",
      "buffer_seek",
      "buffer_set_surface",
      "buffer_sha1",
      "buffer_sizeof",
      "buffer_tell",
      "buffer_write",
      "camera_apply",
      "camera_create",
      "camera_create_view",
      "camera_destroy",
      "camera_get_active",
      "camera_get_begin_script",
      "camera_get_default",
      "camera_get_end_script",
      "camera_get_proj_mat",
      "camera_get_update_script",
      "camera_get_view_angle",
      "camera_get_view_border_x",
      "camera_get_view_border_y",
      "camera_get_view_height",
      "camera_get_view_mat",
      "camera_get_view_speed_x",
      "camera_get_view_speed_y",
      "camera_get_view_target",
      "camera_get_view_width",
      "camera_get_view_x",
      "camera_get_view_y",
      "camera_set_begin_script",
      "camera_set_default",
      "camera_set_end_script",
      "camera_set_proj_mat",
      "camera_set_update_script",
      "camera_set_view_angle",
      "camera_set_view_border",
      "camera_set_view_mat",
      "camera_set_view_pos",
      "camera_set_view_size",
      "camera_set_view_speed",
      "camera_set_view_target",
      "ceil",
      "choose",
      "chr",
      "clamp",
      "clickable_add",
      "clickable_add_ext",
      "clickable_change",
      "clickable_change_ext",
      "clickable_delete",
      "clickable_exists",
      "clickable_set_style",
      "clipboard_get_text",
      "clipboard_has_text",
      "clipboard_set_text",
      "cloud_file_save",
      "cloud_string_save",
      "cloud_synchronise",
      "code_is_compiled",
      "collision_circle",
      "collision_circle_list",
      "collision_ellipse",
      "collision_ellipse_list",
      "collision_line",
      "collision_line_list",
      "collision_point",
      "collision_point_list",
      "collision_rectangle",
      "collision_rectangle_list",
      "color_get_blue",
      "color_get_green",
      "color_get_hue",
      "color_get_red",
      "color_get_saturation",
      "color_get_value",
      "colour_get_blue",
      "colour_get_green",
      "colour_get_hue",
      "colour_get_red",
      "colour_get_saturation",
      "colour_get_value",
      "cos",
      "darccos",
      "darcsin",
      "darctan",
      "darctan2",
      "date_compare_date",
      "date_compare_datetime",
      "date_compare_time",
      "date_create_datetime",
      "date_current_datetime",
      "date_date_of",
      "date_date_string",
      "date_datetime_string",
      "date_day_span",
      "date_days_in_month",
      "date_days_in_year",
      "date_get_day",
      "date_get_day_of_year",
      "date_get_hour",
      "date_get_hour_of_year",
      "date_get_minute",
      "date_get_minute_of_year",
      "date_get_month",
      "date_get_second",
      "date_get_second_of_year",
      "date_get_timezone",
      "date_get_week",
      "date_get_weekday",
      "date_get_year",
      "date_hour_span",
      "date_inc_day",
      "date_inc_hour",
      "date_inc_minute",
      "date_inc_month",
      "date_inc_second",
      "date_inc_week",
      "date_inc_year",
      "date_is_today",
      "date_leap_year",
      "date_minute_span",
      "date_month_span",
      "date_second_span",
      "date_set_timezone",
      "date_time_of",
      "date_time_string",
      "date_valid_datetime",
      "date_week_span",
      "date_year_span",
      "dcos",
      "debug_event",
      "debug_get_callstack",
      "degtorad",
      "device_get_tilt_x",
      "device_get_tilt_y",
      "device_get_tilt_z",
      "device_is_keypad_open",
      "device_mouse_check_button",
      "device_mouse_check_button_pressed",
      "device_mouse_check_button_released",
      "device_mouse_dbclick_enable",
      "device_mouse_raw_x",
      "device_mouse_raw_y",
      "device_mouse_x",
      "device_mouse_x_to_gui",
      "device_mouse_y",
      "device_mouse_y_to_gui",
      "directory_create",
      "directory_destroy",
      "directory_exists",
      "display_get_dpi_x",
      "display_get_dpi_y",
      "display_get_gui_height",
      "display_get_gui_width",
      "display_get_height",
      "display_get_orientation",
      "display_get_sleep_margin",
      "display_get_timing_method",
      "display_get_width",
      "display_mouse_get_x",
      "display_mouse_get_y",
      "display_mouse_set",
      "display_reset",
      "display_set_gui_maximise",
      "display_set_gui_maximize",
      "display_set_gui_size",
      "display_set_sleep_margin",
      "display_set_timing_method",
      "display_set_ui_visibility",
      "distance_to_object",
      "distance_to_point",
      "dot_product",
      "dot_product_3d",
      "dot_product_3d_normalised",
      "dot_product_3d_normalized",
      "dot_product_normalised",
      "dot_product_normalized",
      "draw_arrow",
      "draw_background",
      "draw_background_ext",
      "draw_background_part_ext",
      "draw_background_tiled",
      "draw_button",
      "draw_circle",
      "draw_circle_color",
      "draw_circle_colour",
      "draw_clear",
      "draw_clear_alpha",
      "draw_ellipse",
      "draw_ellipse_color",
      "draw_ellipse_colour",
      "draw_enable_alphablend",
      "draw_enable_drawevent",
      "draw_enable_swf_aa",
      "draw_flush",
      "draw_get_alpha",
      "draw_get_color",
      "draw_get_colour",
      "draw_get_lighting",
      "draw_get_swf_aa_level",
      "draw_getpixel",
      "draw_getpixel_ext",
      "draw_healthbar",
      "draw_highscore",
      "draw_light_define_ambient",
      "draw_light_define_direction",
      "draw_light_define_point",
      "draw_light_enable",
      "draw_light_get",
      "draw_light_get_ambient",
      "draw_line",
      "draw_line_color",
      "draw_line_colour",
      "draw_line_width",
      "draw_line_width_color",
      "draw_line_width_colour",
      "draw_path",
      "draw_point",
      "draw_point_color",
      "draw_point_colour",
      "draw_primitive_begin",
      "draw_primitive_begin_texture",
      "draw_primitive_end",
      "draw_rectangle",
      "draw_rectangle_color",
      "draw_rectangle_colour",
      "draw_roundrect",
      "draw_roundrect_color",
      "draw_roundrect_color_ext",
      "draw_roundrect_colour",
      "draw_roundrect_colour_ext",
      "draw_roundrect_ext",
      "draw_self",
      "draw_set_alpha",
      "draw_set_alpha_test",
      "draw_set_alpha_test_ref_value",
      "draw_set_blend_mode",
      "draw_set_blend_mode_ext",
      "draw_set_circle_precision",
      "draw_set_color",
      "draw_set_color_write_enable",
      "draw_set_colour",
      "draw_set_font",
      "draw_set_halign",
      "draw_set_lighting",
      "draw_set_swf_aa_level",
      "draw_set_valign",
      "draw_skeleton",
      "draw_skeleton_collision",
      "draw_skeleton_instance",
      "draw_skeleton_time",
      "draw_sprite",
      "draw_sprite_ext",
      "draw_sprite_general",
      "draw_sprite_part",
      "draw_sprite_part_ext",
      "draw_sprite_pos",
      "draw_sprite_stretched",
      "draw_sprite_stretched_ext",
      "draw_sprite_tiled",
      "draw_sprite_tiled_ext",
      "draw_surface",
      "draw_surface_ext",
      "draw_surface_general",
      "draw_surface_part",
      "draw_surface_part_ext",
      "draw_surface_stretched",
      "draw_surface_stretched_ext",
      "draw_surface_tiled",
      "draw_surface_tiled_ext",
      "draw_text",
      "draw_text_color",
      "draw_text_colour",
      "draw_text_ext",
      "draw_text_ext_color",
      "draw_text_ext_colour",
      "draw_text_ext_transformed",
      "draw_text_ext_transformed_color",
      "draw_text_ext_transformed_colour",
      "draw_text_transformed",
      "draw_text_transformed_color",
      "draw_text_transformed_colour",
      "draw_texture_flush",
      "draw_tile",
      "draw_tilemap",
      "draw_triangle",
      "draw_triangle_color",
      "draw_triangle_colour",
      "draw_vertex",
      "draw_vertex_color",
      "draw_vertex_colour",
      "draw_vertex_texture",
      "draw_vertex_texture_color",
      "draw_vertex_texture_colour",
      "ds_exists",
      "ds_grid_add",
      "ds_grid_add_disk",
      "ds_grid_add_grid_region",
      "ds_grid_add_region",
      "ds_grid_clear",
      "ds_grid_copy",
      "ds_grid_create",
      "ds_grid_destroy",
      "ds_grid_get",
      "ds_grid_get_disk_max",
      "ds_grid_get_disk_mean",
      "ds_grid_get_disk_min",
      "ds_grid_get_disk_sum",
      "ds_grid_get_max",
      "ds_grid_get_mean",
      "ds_grid_get_min",
      "ds_grid_get_sum",
      "ds_grid_height",
      "ds_grid_multiply",
      "ds_grid_multiply_disk",
      "ds_grid_multiply_grid_region",
      "ds_grid_multiply_region",
      "ds_grid_read",
      "ds_grid_resize",
      "ds_grid_set",
      "ds_grid_set_disk",
      "ds_grid_set_grid_region",
      "ds_grid_set_region",
      "ds_grid_shuffle",
      "ds_grid_sort",
      "ds_grid_value_disk_exists",
      "ds_grid_value_disk_x",
      "ds_grid_value_disk_y",
      "ds_grid_value_exists",
      "ds_grid_value_x",
      "ds_grid_value_y",
      "ds_grid_width",
      "ds_grid_write",
      "ds_list_add",
      "ds_list_clear",
      "ds_list_copy",
      "ds_list_create",
      "ds_list_delete",
      "ds_list_destroy",
      "ds_list_empty",
      "ds_list_find_index",
      "ds_list_find_value",
      "ds_list_insert",
      "ds_list_mark_as_list",
      "ds_list_mark_as_map",
      "ds_list_read",
      "ds_list_replace",
      "ds_list_set",
      "ds_list_shuffle",
      "ds_list_size",
      "ds_list_sort",
      "ds_list_write",
      "ds_map_add",
      "ds_map_add_list",
      "ds_map_add_map",
      "ds_map_clear",
      "ds_map_copy",
      "ds_map_create",
      "ds_map_delete",
      "ds_map_destroy",
      "ds_map_empty",
      "ds_map_exists",
      "ds_map_find_first",
      "ds_map_find_last",
      "ds_map_find_next",
      "ds_map_find_previous",
      "ds_map_find_value",
      "ds_map_read",
      "ds_map_replace",
      "ds_map_replace_list",
      "ds_map_replace_map",
      "ds_map_secure_load",
      "ds_map_secure_load_buffer",
      "ds_map_secure_save",
      "ds_map_secure_save_buffer",
      "ds_map_set",
      "ds_map_size",
      "ds_map_write",
      "ds_priority_add",
      "ds_priority_change_priority",
      "ds_priority_clear",
      "ds_priority_copy",
      "ds_priority_create",
      "ds_priority_delete_max",
      "ds_priority_delete_min",
      "ds_priority_delete_value",
      "ds_priority_destroy",
      "ds_priority_empty",
      "ds_priority_find_max",
      "ds_priority_find_min",
      "ds_priority_find_priority",
      "ds_priority_read",
      "ds_priority_size",
      "ds_priority_write",
      "ds_queue_clear",
      "ds_queue_copy",
      "ds_queue_create",
      "ds_queue_dequeue",
      "ds_queue_destroy",
      "ds_queue_empty",
      "ds_queue_enqueue",
      "ds_queue_head",
      "ds_queue_read",
      "ds_queue_size",
      "ds_queue_tail",
      "ds_queue_write",
      "ds_set_precision",
      "ds_stack_clear",
      "ds_stack_copy",
      "ds_stack_create",
      "ds_stack_destroy",
      "ds_stack_empty",
      "ds_stack_pop",
      "ds_stack_push",
      "ds_stack_read",
      "ds_stack_size",
      "ds_stack_top",
      "ds_stack_write",
      "dsin",
      "dtan",
      "effect_clear",
      "effect_create_above",
      "effect_create_below",
      "environment_get_variable",
      "event_inherited",
      "event_perform",
      "event_perform_object",
      "event_user",
      "exp",
      "external_call",
      "external_define",
      "external_free",
      "facebook_accesstoken",
      "facebook_check_permission",
      "facebook_dialog",
      "facebook_graph_request",
      "facebook_init",
      "facebook_launch_offerwall",
      "facebook_login",
      "facebook_logout",
      "facebook_post_message",
      "facebook_request_publish_permissions",
      "facebook_request_read_permissions",
      "facebook_send_invite",
      "facebook_status",
      "facebook_user_id",
      "file_attributes",
      "file_bin_close",
      "file_bin_open",
      "file_bin_position",
      "file_bin_read_byte",
      "file_bin_rewrite",
      "file_bin_seek",
      "file_bin_size",
      "file_bin_write_byte",
      "file_copy",
      "file_delete",
      "file_exists",
      "file_find_close",
      "file_find_first",
      "file_find_next",
      "file_rename",
      "file_text_close",
      "file_text_eof",
      "file_text_eoln",
      "file_text_open_append",
      "file_text_open_from_string",
      "file_text_open_read",
      "file_text_open_write",
      "file_text_read_real",
      "file_text_read_string",
      "file_text_readln",
      "file_text_write_real",
      "file_text_write_string",
      "file_text_writeln",
      "filename_change_ext",
      "filename_dir",
      "filename_drive",
      "filename_ext",
      "filename_name",
      "filename_path",
      "floor",
      "font_add",
      "font_add_enable_aa",
      "font_add_get_enable_aa",
      "font_add_sprite",
      "font_add_sprite_ext",
      "font_delete",
      "font_exists",
      "font_get_bold",
      "font_get_first",
      "font_get_fontname",
      "font_get_italic",
      "font_get_last",
      "font_get_name",
      "font_get_size",
      "font_get_texture",
      "font_get_uvs",
      "font_replace",
      "font_replace_sprite",
      "font_replace_sprite_ext",
      "font_set_cache_size",
      "font_texture_page_size",
      "frac",
      "game_end",
      "game_get_speed",
      "game_load",
      "game_load_buffer",
      "game_restart",
      "game_save",
      "game_save_buffer",
      "game_set_speed",
      "gamepad_axis_count",
      "gamepad_axis_value",
      "gamepad_button_check",
      "gamepad_button_check_pressed",
      "gamepad_button_check_released",
      "gamepad_button_count",
      "gamepad_button_value",
      "gamepad_get_axis_deadzone",
      "gamepad_get_button_threshold",
      "gamepad_get_description",
      "gamepad_get_device_count",
      "gamepad_is_connected",
      "gamepad_is_supported",
      "gamepad_set_axis_deadzone",
      "gamepad_set_button_threshold",
      "gamepad_set_color",
      "gamepad_set_colour",
      "gamepad_set_vibration",
      "gesture_double_tap_distance",
      "gesture_double_tap_time",
      "gesture_drag_distance",
      "gesture_drag_time",
      "gesture_flick_speed",
      "gesture_get_double_tap_distance",
      "gesture_get_double_tap_time",
      "gesture_get_drag_distance",
      "gesture_get_drag_time",
      "gesture_get_flick_speed",
      "gesture_get_pinch_angle_away",
      "gesture_get_pinch_angle_towards",
      "gesture_get_pinch_distance",
      "gesture_get_rotate_angle",
      "gesture_get_rotate_time",
      "gesture_get_tap_count",
      "gesture_pinch_angle_away",
      "gesture_pinch_angle_towards",
      "gesture_pinch_distance",
      "gesture_rotate_angle",
      "gesture_rotate_time",
      "gesture_tap_count",
      "get_integer",
      "get_integer_async",
      "get_login_async",
      "get_open_filename",
      "get_open_filename_ext",
      "get_save_filename",
      "get_save_filename_ext",
      "get_string",
      "get_string_async",
      "get_timer",
      "gml_pragma",
      "gml_release_mode",
      "gpu_get_alphatestenable",
      "gpu_get_alphatestfunc",
      "gpu_get_alphatestref",
      "gpu_get_blendenable",
      "gpu_get_blendmode",
      "gpu_get_blendmode_dest",
      "gpu_get_blendmode_destalpha",
      "gpu_get_blendmode_ext",
      "gpu_get_blendmode_ext_sepalpha",
      "gpu_get_blendmode_src",
      "gpu_get_blendmode_srcalpha",
      "gpu_get_colorwriteenable",
      "gpu_get_colourwriteenable",
      "gpu_get_cullmode",
      "gpu_get_fog",
      "gpu_get_lightingenable",
      "gpu_get_state",
      "gpu_get_tex_filter",
      "gpu_get_tex_filter_ext",
      "gpu_get_tex_max_aniso",
      "gpu_get_tex_max_aniso_ext",
      "gpu_get_tex_max_mip",
      "gpu_get_tex_max_mip_ext",
      "gpu_get_tex_min_mip",
      "gpu_get_tex_min_mip_ext",
      "gpu_get_tex_mip_bias",
      "gpu_get_tex_mip_bias_ext",
      "gpu_get_tex_mip_enable",
      "gpu_get_tex_mip_enable_ext",
      "gpu_get_tex_mip_filter",
      "gpu_get_tex_mip_filter_ext",
      "gpu_get_tex_repeat",
      "gpu_get_tex_repeat_ext",
      "gpu_get_texfilter",
      "gpu_get_texfilter_ext",
      "gpu_get_texrepeat",
      "gpu_get_texrepeat_ext",
      "gpu_get_zfunc",
      "gpu_get_ztestenable",
      "gpu_get_zwriteenable",
      "gpu_pop_state",
      "gpu_push_state",
      "gpu_set_alphatestenable",
      "gpu_set_alphatestfunc",
      "gpu_set_alphatestref",
      "gpu_set_blendenable",
      "gpu_set_blendmode",
      "gpu_set_blendmode_ext",
      "gpu_set_blendmode_ext_sepalpha",
      "gpu_set_colorwriteenable",
      "gpu_set_colourwriteenable",
      "gpu_set_cullmode",
      "gpu_set_fog",
      "gpu_set_lightingenable",
      "gpu_set_state",
      "gpu_set_tex_filter",
      "gpu_set_tex_filter_ext",
      "gpu_set_tex_max_aniso",
      "gpu_set_tex_max_aniso_ext",
      "gpu_set_tex_max_mip",
      "gpu_set_tex_max_mip_ext",
      "gpu_set_tex_min_mip",
      "gpu_set_tex_min_mip_ext",
      "gpu_set_tex_mip_bias",
      "gpu_set_tex_mip_bias_ext",
      "gpu_set_tex_mip_enable",
      "gpu_set_tex_mip_enable_ext",
      "gpu_set_tex_mip_filter",
      "gpu_set_tex_mip_filter_ext",
      "gpu_set_tex_repeat",
      "gpu_set_tex_repeat_ext",
      "gpu_set_texfilter",
      "gpu_set_texfilter_ext",
      "gpu_set_texrepeat",
      "gpu_set_texrepeat_ext",
      "gpu_set_zfunc",
      "gpu_set_ztestenable",
      "gpu_set_zwriteenable",
      "highscore_add",
      "highscore_clear",
      "highscore_name",
      "highscore_value",
      "http_get",
      "http_get_file",
      "http_post_string",
      "http_request",
      "iap_acquire",
      "iap_activate",
      "iap_consume",
      "iap_enumerate_products",
      "iap_product_details",
      "iap_purchase_details",
      "iap_restore_all",
      "iap_status",
      "ini_close",
      "ini_key_delete",
      "ini_key_exists",
      "ini_open",
      "ini_open_from_string",
      "ini_read_real",
      "ini_read_string",
      "ini_section_delete",
      "ini_section_exists",
      "ini_write_real",
      "ini_write_string",
      "instance_activate_all",
      "instance_activate_layer",
      "instance_activate_object",
      "instance_activate_region",
      "instance_change",
      "instance_copy",
      "instance_create",
      "instance_create_depth",
      "instance_create_layer",
      "instance_deactivate_all",
      "instance_deactivate_layer",
      "instance_deactivate_object",
      "instance_deactivate_region",
      "instance_destroy",
      "instance_exists",
      "instance_find",
      "instance_furthest",
      "instance_id_get",
      "instance_nearest",
      "instance_number",
      "instance_place",
      "instance_place_list",
      "instance_position",
      "instance_position_list",
      "int64",
      "io_clear",
      "irandom",
      "irandom_range",
      "is_array",
      "is_bool",
      "is_infinity",
      "is_int32",
      "is_int64",
      "is_matrix",
      "is_method",
      "is_nan",
      "is_numeric",
      "is_ptr",
      "is_real",
      "is_string",
      "is_struct",
      "is_undefined",
      "is_vec3",
      "is_vec4",
      "json_decode",
      "json_encode",
      "keyboard_check",
      "keyboard_check_direct",
      "keyboard_check_pressed",
      "keyboard_check_released",
      "keyboard_clear",
      "keyboard_get_map",
      "keyboard_get_numlock",
      "keyboard_key_press",
      "keyboard_key_release",
      "keyboard_set_map",
      "keyboard_set_numlock",
      "keyboard_unset_map",
      "keyboard_virtual_height",
      "keyboard_virtual_hide",
      "keyboard_virtual_show",
      "keyboard_virtual_status",
      "layer_add_instance",
      "layer_background_alpha",
      "layer_background_blend",
      "layer_background_change",
      "layer_background_create",
      "layer_background_destroy",
      "layer_background_exists",
      "layer_background_get_alpha",
      "layer_background_get_blend",
      "layer_background_get_htiled",
      "layer_background_get_id",
      "layer_background_get_index",
      "layer_background_get_speed",
      "layer_background_get_sprite",
      "layer_background_get_stretch",
      "layer_background_get_visible",
      "layer_background_get_vtiled",
      "layer_background_get_xscale",
      "layer_background_get_yscale",
      "layer_background_htiled",
      "layer_background_index",
      "layer_background_speed",
      "layer_background_sprite",
      "layer_background_stretch",
      "layer_background_visible",
      "layer_background_vtiled",
      "layer_background_xscale",
      "layer_background_yscale",
      "layer_create",
      "layer_depth",
      "layer_destroy",
      "layer_destroy_instances",
      "layer_element_move",
      "layer_exists",
      "layer_force_draw_depth",
      "layer_get_all",
      "layer_get_all_elements",
      "layer_get_depth",
      "layer_get_element_layer",
      "layer_get_element_type",
      "layer_get_forced_depth",
      "layer_get_hspeed",
      "layer_get_id",
      "layer_get_id_at_depth",
      "layer_get_name",
      "layer_get_script_begin",
      "layer_get_script_end",
      "layer_get_shader",
      "layer_get_target_room",
      "layer_get_visible",
      "layer_get_vspeed",
      "layer_get_x",
      "layer_get_y",
      "layer_has_instance",
      "layer_hspeed",
      "layer_instance_get_instance",
      "layer_is_draw_depth_forced",
      "layer_reset_target_room",
      "layer_script_begin",
      "layer_script_end",
      "layer_set_target_room",
      "layer_set_visible",
      "layer_shader",
      "layer_sprite_alpha",
      "layer_sprite_angle",
      "layer_sprite_blend",
      "layer_sprite_change",
      "layer_sprite_create",
      "layer_sprite_destroy",
      "layer_sprite_exists",
      "layer_sprite_get_alpha",
      "layer_sprite_get_angle",
      "layer_sprite_get_blend",
      "layer_sprite_get_id",
      "layer_sprite_get_index",
      "layer_sprite_get_speed",
      "layer_sprite_get_sprite",
      "layer_sprite_get_x",
      "layer_sprite_get_xscale",
      "layer_sprite_get_y",
      "layer_sprite_get_yscale",
      "layer_sprite_index",
      "layer_sprite_speed",
      "layer_sprite_x",
      "layer_sprite_xscale",
      "layer_sprite_y",
      "layer_sprite_yscale",
      "layer_tile_alpha",
      "layer_tile_blend",
      "layer_tile_change",
      "layer_tile_create",
      "layer_tile_destroy",
      "layer_tile_exists",
      "layer_tile_get_alpha",
      "layer_tile_get_blend",
      "layer_tile_get_region",
      "layer_tile_get_sprite",
      "layer_tile_get_visible",
      "layer_tile_get_x",
      "layer_tile_get_xscale",
      "layer_tile_get_y",
      "layer_tile_get_yscale",
      "layer_tile_region",
      "layer_tile_visible",
      "layer_tile_x",
      "layer_tile_xscale",
      "layer_tile_y",
      "layer_tile_yscale",
      "layer_tilemap_create",
      "layer_tilemap_destroy",
      "layer_tilemap_exists",
      "layer_tilemap_get_id",
      "layer_vspeed",
      "layer_x",
      "layer_y",
      "lengthdir_x",
      "lengthdir_y",
      "lerp",
      "ln",
      "load_csv",
      "log10",
      "log2",
      "logn",
      "make_color_hsv",
      "make_color_rgb",
      "make_colour_hsv",
      "make_colour_rgb",
      "math_get_epsilon",
      "math_set_epsilon",
      "matrix_build",
      "matrix_build_identity",
      "matrix_build_lookat",
      "matrix_build_projection_ortho",
      "matrix_build_projection_perspective",
      "matrix_build_projection_perspective_fov",
      "matrix_get",
      "matrix_multiply",
      "matrix_set",
      "matrix_stack_clear",
      "matrix_stack_is_empty",
      "matrix_stack_multiply",
      "matrix_stack_pop",
      "matrix_stack_push",
      "matrix_stack_set",
      "matrix_stack_top",
      "matrix_transform_vertex",
      "max",
      "md5_file",
      "md5_string_unicode",
      "md5_string_utf8",
      "mean",
      "median",
      "merge_color",
      "merge_colour",
      "min",
      "motion_add",
      "motion_set",
      "mouse_check_button",
      "mouse_check_button_pressed",
      "mouse_check_button_released",
      "mouse_clear",
      "mouse_wheel_down",
      "mouse_wheel_up",
      "move_bounce_all",
      "move_bounce_solid",
      "move_contact_all",
      "move_contact_solid",
      "move_outside_all",
      "move_outside_solid",
      "move_random",
      "move_snap",
      "move_towards_point",
      "move_wrap",
      "mp_grid_add_cell",
      "mp_grid_add_instances",
      "mp_grid_add_rectangle",
      "mp_grid_clear_all",
      "mp_grid_clear_cell",
      "mp_grid_clear_rectangle",
      "mp_grid_create",
      "mp_grid_destroy",
      "mp_grid_draw",
      "mp_grid_get_cell",
      "mp_grid_path",
      "mp_grid_to_ds_grid",
      "mp_linear_path",
      "mp_linear_path_object",
      "mp_linear_step",
      "mp_linear_step_object",
      "mp_potential_path",
      "mp_potential_path_object",
      "mp_potential_settings",
      "mp_potential_step",
      "mp_potential_step_object",
      "network_connect",
      "network_connect_raw",
      "network_create_server",
      "network_create_server_raw",
      "network_create_socket",
      "network_create_socket_ext",
      "network_destroy",
      "network_resolve",
      "network_send_broadcast",
      "network_send_packet",
      "network_send_raw",
      "network_send_udp",
      "network_send_udp_raw",
      "network_set_config",
      "network_set_timeout",
      "object_exists",
      "object_get_depth",
      "object_get_mask",
      "object_get_name",
      "object_get_parent",
      "object_get_persistent",
      "object_get_physics",
      "object_get_solid",
      "object_get_sprite",
      "object_get_visible",
      "object_is_ancestor",
      "object_set_mask",
      "object_set_persistent",
      "object_set_solid",
      "object_set_sprite",
      "object_set_visible",
      "ord",
      "os_get_config",
      "os_get_info",
      "os_get_language",
      "os_get_region",
      "os_is_network_connected",
      "os_is_paused",
      "os_lock_orientation",
      "os_powersave_enable",
      "parameter_count",
      "parameter_string",
      "part_emitter_burst",
      "part_emitter_clear",
      "part_emitter_create",
      "part_emitter_destroy",
      "part_emitter_destroy_all",
      "part_emitter_exists",
      "part_emitter_region",
      "part_emitter_stream",
      "part_particles_clear",
      "part_particles_count",
      "part_particles_create",
      "part_particles_create_color",
      "part_particles_create_colour",
      "part_system_automatic_draw",
      "part_system_automatic_update",
      "part_system_clear",
      "part_system_create",
      "part_system_create_layer",
      "part_system_depth",
      "part_system_destroy",
      "part_system_draw_order",
      "part_system_drawit",
      "part_system_exists",
      "part_system_get_layer",
      "part_system_layer",
      "part_system_position",
      "part_system_update",
      "part_type_alpha1",
      "part_type_alpha2",
      "part_type_alpha3",
      "part_type_blend",
      "part_type_clear",
      "part_type_color1",
      "part_type_color2",
      "part_type_color3",
      "part_type_color_hsv",
      "part_type_color_mix",
      "part_type_color_rgb",
      "part_type_colour1",
      "part_type_colour2",
      "part_type_colour3",
      "part_type_colour_hsv",
      "part_type_colour_mix",
      "part_type_colour_rgb",
      "part_type_create",
      "part_type_death",
      "part_type_destroy",
      "part_type_direction",
      "part_type_exists",
      "part_type_gravity",
      "part_type_life",
      "part_type_orientation",
      "part_type_scale",
      "part_type_shape",
      "part_type_size",
      "part_type_speed",
      "part_type_sprite",
      "part_type_step",
      "path_add",
      "path_add_point",
      "path_append",
      "path_assign",
      "path_change_point",
      "path_clear_points",
      "path_delete",
      "path_delete_point",
      "path_duplicate",
      "path_end",
      "path_exists",
      "path_flip",
      "path_get_closed",
      "path_get_kind",
      "path_get_length",
      "path_get_name",
      "path_get_number",
      "path_get_point_speed",
      "path_get_point_x",
      "path_get_point_y",
      "path_get_precision",
      "path_get_speed",
      "path_get_time",
      "path_get_x",
      "path_get_y",
      "path_insert_point",
      "path_mirror",
      "path_rescale",
      "path_reverse",
      "path_rotate",
      "path_set_closed",
      "path_set_kind",
      "path_set_precision",
      "path_shift",
      "path_start",
      "physics_apply_angular_impulse",
      "physics_apply_force",
      "physics_apply_impulse",
      "physics_apply_local_force",
      "physics_apply_local_impulse",
      "physics_apply_torque",
      "physics_draw_debug",
      "physics_fixture_add_point",
      "physics_fixture_bind",
      "physics_fixture_bind_ext",
      "physics_fixture_create",
      "physics_fixture_delete",
      "physics_fixture_set_angular_damping",
      "physics_fixture_set_awake",
      "physics_fixture_set_box_shape",
      "physics_fixture_set_chain_shape",
      "physics_fixture_set_circle_shape",
      "physics_fixture_set_collision_group",
      "physics_fixture_set_density",
      "physics_fixture_set_edge_shape",
      "physics_fixture_set_friction",
      "physics_fixture_set_kinematic",
      "physics_fixture_set_linear_damping",
      "physics_fixture_set_polygon_shape",
      "physics_fixture_set_restitution",
      "physics_fixture_set_sensor",
      "physics_get_density",
      "physics_get_friction",
      "physics_get_restitution",
      "physics_joint_delete",
      "physics_joint_distance_create",
      "physics_joint_enable_motor",
      "physics_joint_friction_create",
      "physics_joint_gear_create",
      "physics_joint_get_value",
      "physics_joint_prismatic_create",
      "physics_joint_pulley_create",
      "physics_joint_revolute_create",
      "physics_joint_rope_create",
      "physics_joint_set_value",
      "physics_joint_weld_create",
      "physics_joint_wheel_create",
      "physics_mass_properties",
      "physics_particle_count",
      "physics_particle_create",
      "physics_particle_delete",
      "physics_particle_delete_region_box",
      "physics_particle_delete_region_circle",
      "physics_particle_delete_region_poly",
      "physics_particle_draw",
      "physics_particle_draw_ext",
      "physics_particle_get_damping",
      "physics_particle_get_data",
      "physics_particle_get_data_particle",
      "physics_particle_get_density",
      "physics_particle_get_gravity_scale",
      "physics_particle_get_group_flags",
      "physics_particle_get_max_count",
      "physics_particle_get_radius",
      "physics_particle_group_add_point",
      "physics_particle_group_begin",
      "physics_particle_group_box",
      "physics_particle_group_circle",
      "physics_particle_group_count",
      "physics_particle_group_delete",
      "physics_particle_group_end",
      "physics_particle_group_get_ang_vel",
      "physics_particle_group_get_angle",
      "physics_particle_group_get_centre_x",
      "physics_particle_group_get_centre_y",
      "physics_particle_group_get_data",
      "physics_particle_group_get_inertia",
      "physics_particle_group_get_mass",
      "physics_particle_group_get_vel_x",
      "physics_particle_group_get_vel_y",
      "physics_particle_group_get_x",
      "physics_particle_group_get_y",
      "physics_particle_group_join",
      "physics_particle_group_polygon",
      "physics_particle_set_category_flags",
      "physics_particle_set_damping",
      "physics_particle_set_density",
      "physics_particle_set_flags",
      "physics_particle_set_gravity_scale",
      "physics_particle_set_group_flags",
      "physics_particle_set_max_count",
      "physics_particle_set_radius",
      "physics_pause_enable",
      "physics_remove_fixture",
      "physics_set_density",
      "physics_set_friction",
      "physics_set_restitution",
      "physics_test_overlap",
      "physics_world_create",
      "physics_world_draw_debug",
      "physics_world_gravity",
      "physics_world_update_iterations",
      "physics_world_update_speed",
      "place_empty",
      "place_free",
      "place_meeting",
      "place_snapped",
      "point_direction",
      "point_distance",
      "point_distance_3d",
      "point_in_circle",
      "point_in_rectangle",
      "point_in_triangle",
      "position_change",
      "position_destroy",
      "position_empty",
      "position_meeting",
      "power",
      "ptr",
      "push_cancel_local_notification",
      "push_get_first_local_notification",
      "push_get_next_local_notification",
      "push_local_notification",
      "radtodeg",
      "random",
      "random_get_seed",
      "random_range",
      "random_set_seed",
      "randomise",
      "randomize",
      "real",
      "rectangle_in_circle",
      "rectangle_in_rectangle",
      "rectangle_in_triangle",
      "room_add",
      "room_assign",
      "room_duplicate",
      "room_exists",
      "room_get_camera",
      "room_get_name",
      "room_get_viewport",
      "room_goto",
      "room_goto_next",
      "room_goto_previous",
      "room_instance_add",
      "room_instance_clear",
      "room_next",
      "room_previous",
      "room_restart",
      "room_set_background_color",
      "room_set_background_colour",
      "room_set_camera",
      "room_set_height",
      "room_set_persistent",
      "room_set_view",
      "room_set_view_enabled",
      "room_set_viewport",
      "room_set_width",
      "round",
      "screen_save",
      "screen_save_part",
      "script_execute",
      "script_exists",
      "script_get_name",
      "sha1_file",
      "sha1_string_unicode",
      "sha1_string_utf8",
      "shader_current",
      "shader_enable_corner_id",
      "shader_get_name",
      "shader_get_sampler_index",
      "shader_get_uniform",
      "shader_is_compiled",
      "shader_reset",
      "shader_set",
      "shader_set_uniform_f",
      "shader_set_uniform_f_array",
      "shader_set_uniform_i",
      "shader_set_uniform_i_array",
      "shader_set_uniform_matrix",
      "shader_set_uniform_matrix_array",
      "shaders_are_supported",
      "shop_leave_rating",
      "show_debug_message",
      "show_debug_overlay",
      "show_error",
      "show_message",
      "show_message_async",
      "show_question",
      "show_question_async",
      "sign",
      "sin",
      "skeleton_animation_clear",
      "skeleton_animation_get",
      "skeleton_animation_get_duration",
      "skeleton_animation_get_ext",
      "skeleton_animation_get_frame",
      "skeleton_animation_get_frames",
      "skeleton_animation_list",
      "skeleton_animation_mix",
      "skeleton_animation_set",
      "skeleton_animation_set_ext",
      "skeleton_animation_set_frame",
      "skeleton_attachment_create",
      "skeleton_attachment_get",
      "skeleton_attachment_set",
      "skeleton_bone_data_get",
      "skeleton_bone_data_set",
      "skeleton_bone_state_get",
      "skeleton_bone_state_set",
      "skeleton_collision_draw_set",
      "skeleton_get_bounds",
      "skeleton_get_minmax",
      "skeleton_get_num_bounds",
      "skeleton_skin_get",
      "skeleton_skin_list",
      "skeleton_skin_set",
      "skeleton_slot_data",
      "sprite_add",
      "sprite_add_from_surface",
      "sprite_assign",
      "sprite_collision_mask",
      "sprite_create_from_surface",
      "sprite_delete",
      "sprite_duplicate",
      "sprite_exists",
      "sprite_flush",
      "sprite_flush_multi",
      "sprite_get_bbox_bottom",
      "sprite_get_bbox_left",
      "sprite_get_bbox_right",
      "sprite_get_bbox_top",
      "sprite_get_height",
      "sprite_get_name",
      "sprite_get_number",
      "sprite_get_speed",
      "sprite_get_speed_type",
      "sprite_get_texture",
      "sprite_get_tpe",
      "sprite_get_uvs",
      "sprite_get_width",
      "sprite_get_xoffset",
      "sprite_get_yoffset",
      "sprite_merge",
      "sprite_prefetch",
      "sprite_prefetch_multi",
      "sprite_replace",
      "sprite_save",
      "sprite_save_strip",
      "sprite_set_alpha_from_sprite",
      "sprite_set_cache_size",
      "sprite_set_cache_size_ext",
      "sprite_set_offset",
      "sprite_set_speed",
      "sqr",
      "sqrt",
      "steam_activate_overlay",
      "steam_activate_overlay_browser",
      "steam_activate_overlay_store",
      "steam_activate_overlay_user",
      "steam_available_languages",
      "steam_clear_achievement",
      "steam_create_leaderboard",
      "steam_current_game_language",
      "steam_download_friends_scores",
      "steam_download_scores",
      "steam_download_scores_around_user",
      "steam_file_delete",
      "steam_file_exists",
      "steam_file_persisted",
      "steam_file_read",
      "steam_file_share",
      "steam_file_size",
      "steam_file_write",
      "steam_file_write_file",
      "steam_get_achievement",
      "steam_get_app_id",
      "steam_get_persona_name",
      "steam_get_quota_free",
      "steam_get_quota_total",
      "steam_get_stat_avg_rate",
      "steam_get_stat_float",
      "steam_get_stat_int",
      "steam_get_user_account_id",
      "steam_get_user_persona_name",
      "steam_get_user_steam_id",
      "steam_initialised",
      "steam_is_cloud_enabled_for_account",
      "steam_is_cloud_enabled_for_app",
      "steam_is_overlay_activated",
      "steam_is_overlay_enabled",
      "steam_is_screenshot_requested",
      "steam_is_user_logged_on",
      "steam_reset_all_stats",
      "steam_reset_all_stats_achievements",
      "steam_send_screenshot",
      "steam_set_achievement",
      "steam_set_stat_avg_rate",
      "steam_set_stat_float",
      "steam_set_stat_int",
      "steam_stats_ready",
      "steam_ugc_create_item",
      "steam_ugc_create_query_all",
      "steam_ugc_create_query_all_ex",
      "steam_ugc_create_query_user",
      "steam_ugc_create_query_user_ex",
      "steam_ugc_download",
      "steam_ugc_get_item_install_info",
      "steam_ugc_get_item_update_info",
      "steam_ugc_get_item_update_progress",
      "steam_ugc_get_subscribed_items",
      "steam_ugc_num_subscribed_items",
      "steam_ugc_query_add_excluded_tag",
      "steam_ugc_query_add_required_tag",
      "steam_ugc_query_set_allow_cached_response",
      "steam_ugc_query_set_cloud_filename_filter",
      "steam_ugc_query_set_match_any_tag",
      "steam_ugc_query_set_ranked_by_trend_days",
      "steam_ugc_query_set_return_long_description",
      "steam_ugc_query_set_return_total_only",
      "steam_ugc_query_set_search_text",
      "steam_ugc_request_item_details",
      "steam_ugc_send_query",
      "steam_ugc_set_item_content",
      "steam_ugc_set_item_description",
      "steam_ugc_set_item_preview",
      "steam_ugc_set_item_tags",
      "steam_ugc_set_item_title",
      "steam_ugc_set_item_visibility",
      "steam_ugc_start_item_update",
      "steam_ugc_submit_item_update",
      "steam_ugc_subscribe_item",
      "steam_ugc_unsubscribe_item",
      "steam_upload_score",
      "steam_upload_score_buffer",
      "steam_upload_score_buffer_ext",
      "steam_upload_score_ext",
      "steam_user_installed_dlc",
      "steam_user_owns_dlc",
      "string",
      "string_byte_at",
      "string_byte_length",
      "string_char_at",
      "string_copy",
      "string_count",
      "string_delete",
      "string_digits",
      "string_format",
      "string_hash_to_newline",
      "string_height",
      "string_height_ext",
      "string_insert",
      "string_length",
      "string_letters",
      "string_lettersdigits",
      "string_lower",
      "string_ord_at",
      "string_pos",
      "string_repeat",
      "string_replace",
      "string_replace_all",
      "string_set_byte_at",
      "string_upper",
      "string_width",
      "string_width_ext",
      "surface_copy",
      "surface_copy_part",
      "surface_create",
      "surface_create_ext",
      "surface_depth_disable",
      "surface_exists",
      "surface_free",
      "surface_get_depth_disable",
      "surface_get_height",
      "surface_get_texture",
      "surface_get_width",
      "surface_getpixel",
      "surface_getpixel_ext",
      "surface_reset_target",
      "surface_resize",
      "surface_save",
      "surface_save_part",
      "surface_set_target",
      "surface_set_target_ext",
      "tan",
      "texture_get_height",
      "texture_get_texel_height",
      "texture_get_texel_width",
      "texture_get_uvs",
      "texture_get_width",
      "texture_global_scale",
      "texture_set_stage",
      "tile_get_empty",
      "tile_get_flip",
      "tile_get_index",
      "tile_get_mirror",
      "tile_get_rotate",
      "tile_set_empty",
      "tile_set_flip",
      "tile_set_index",
      "tile_set_mirror",
      "tile_set_rotate",
      "tilemap_clear",
      "tilemap_get",
      "tilemap_get_at_pixel",
      "tilemap_get_cell_x_at_pixel",
      "tilemap_get_cell_y_at_pixel",
      "tilemap_get_frame",
      "tilemap_get_global_mask",
      "tilemap_get_height",
      "tilemap_get_mask",
      "tilemap_get_tile_height",
      "tilemap_get_tile_width",
      "tilemap_get_tileset",
      "tilemap_get_width",
      "tilemap_get_x",
      "tilemap_get_y",
      "tilemap_set",
      "tilemap_set_at_pixel",
      "tilemap_set_global_mask",
      "tilemap_set_mask",
      "tilemap_tileset",
      "tilemap_x",
      "tilemap_y",
      "timeline_add",
      "timeline_clear",
      "timeline_delete",
      "timeline_exists",
      "timeline_get_name",
      "timeline_max_moment",
      "timeline_moment_add_script",
      "timeline_moment_clear",
      "timeline_size",
      "typeof",
      "url_get_domain",
      "url_open",
      "url_open_ext",
      "url_open_full",
      "variable_global_exists",
      "variable_global_get",
      "variable_global_set",
      "variable_instance_exists",
      "variable_instance_get",
      "variable_instance_get_names",
      "variable_instance_set",
      "variable_struct_exists",
      "variable_struct_get",
      "variable_struct_get_names",
      "variable_struct_names_count",
      "variable_struct_remove",
      "variable_struct_set",
      "vertex_argb",
      "vertex_begin",
      "vertex_color",
      "vertex_colour",
      "vertex_create_buffer",
      "vertex_create_buffer_ext",
      "vertex_create_buffer_from_buffer",
      "vertex_create_buffer_from_buffer_ext",
      "vertex_delete_buffer",
      "vertex_end",
      "vertex_float1",
      "vertex_float2",
      "vertex_float3",
      "vertex_float4",
      "vertex_format_add_color",
      "vertex_format_add_colour",
      "vertex_format_add_custom",
      "vertex_format_add_normal",
      "vertex_format_add_position",
      "vertex_format_add_position_3d",
      "vertex_format_add_texcoord",
      "vertex_format_add_textcoord",
      "vertex_format_begin",
      "vertex_format_delete",
      "vertex_format_end",
      "vertex_freeze",
      "vertex_get_buffer_size",
      "vertex_get_number",
      "vertex_normal",
      "vertex_position",
      "vertex_position_3d",
      "vertex_submit",
      "vertex_texcoord",
      "vertex_ubyte4",
      "view_get_camera",
      "view_get_hport",
      "view_get_surface_id",
      "view_get_visible",
      "view_get_wport",
      "view_get_xport",
      "view_get_yport",
      "view_set_camera",
      "view_set_hport",
      "view_set_surface_id",
      "view_set_visible",
      "view_set_wport",
      "view_set_xport",
      "view_set_yport",
      "virtual_key_add",
      "virtual_key_delete",
      "virtual_key_hide",
      "virtual_key_show",
      "win8_appbar_add_element",
      "win8_appbar_enable",
      "win8_appbar_remove_element",
      "win8_device_touchscreen_available",
      "win8_license_initialize_sandbox",
      "win8_license_trial_version",
      "win8_livetile_badge_clear",
      "win8_livetile_badge_notification",
      "win8_livetile_notification_begin",
      "win8_livetile_notification_end",
      "win8_livetile_notification_expiry",
      "win8_livetile_notification_image_add",
      "win8_livetile_notification_secondary_begin",
      "win8_livetile_notification_tag",
      "win8_livetile_notification_text_add",
      "win8_livetile_queue_enable",
      "win8_livetile_tile_clear",
      "win8_livetile_tile_notification",
      "win8_search_add_suggestions",
      "win8_search_disable",
      "win8_search_enable",
      "win8_secondarytile_badge_notification",
      "win8_secondarytile_delete",
      "win8_secondarytile_pin",
      "win8_settingscharm_add_entry",
      "win8_settingscharm_add_html_entry",
      "win8_settingscharm_add_xaml_entry",
      "win8_settingscharm_get_xaml_property",
      "win8_settingscharm_remove_entry",
      "win8_settingscharm_set_xaml_property",
      "win8_share_file",
      "win8_share_image",
      "win8_share_screenshot",
      "win8_share_text",
      "win8_share_url",
      "window_center",
      "window_device",
      "window_get_caption",
      "window_get_color",
      "window_get_colour",
      "window_get_cursor",
      "window_get_fullscreen",
      "window_get_height",
      "window_get_visible_rects",
      "window_get_width",
      "window_get_x",
      "window_get_y",
      "window_handle",
      "window_has_focus",
      "window_mouse_get_x",
      "window_mouse_get_y",
      "window_mouse_set",
      "window_set_caption",
      "window_set_color",
      "window_set_colour",
      "window_set_cursor",
      "window_set_fullscreen",
      "window_set_max_height",
      "window_set_max_width",
      "window_set_min_height",
      "window_set_min_width",
      "window_set_position",
      "window_set_rectangle",
      "window_set_size",
      "window_view_mouse_get_x",
      "window_view_mouse_get_y",
      "window_views_mouse_get_x",
      "window_views_mouse_get_y",
      "winphone_license_trial_version",
      "winphone_tile_back_content",
      "winphone_tile_back_content_wide",
      "winphone_tile_back_image",
      "winphone_tile_back_image_wide",
      "winphone_tile_back_title",
      "winphone_tile_background_color",
      "winphone_tile_background_colour",
      "winphone_tile_count",
      "winphone_tile_cycle_images",
      "winphone_tile_front_image",
      "winphone_tile_front_image_small",
      "winphone_tile_front_image_wide",
      "winphone_tile_icon_image",
      "winphone_tile_small_background_image",
      "winphone_tile_small_icon_image",
      "winphone_tile_title",
      "winphone_tile_wide_content",
      "zip_unzip"
    ];
    const LITERALS = [
      "all",
      "false",
      "noone",
      "pointer_invalid",
      "pointer_null",
      "true",
      "undefined"
    ];
    const SYMBOLS = [
      "ANSI_CHARSET",
      "ARABIC_CHARSET",
      "BALTIC_CHARSET",
      "CHINESEBIG5_CHARSET",
      "DEFAULT_CHARSET",
      "EASTEUROPE_CHARSET",
      "GB2312_CHARSET",
      "GM_build_date",
      "GM_runtime_version",
      "GM_version",
      "GREEK_CHARSET",
      "HANGEUL_CHARSET",
      "HEBREW_CHARSET",
      "JOHAB_CHARSET",
      "MAC_CHARSET",
      "OEM_CHARSET",
      "RUSSIAN_CHARSET",
      "SHIFTJIS_CHARSET",
      "SYMBOL_CHARSET",
      "THAI_CHARSET",
      "TURKISH_CHARSET",
      "VIETNAMESE_CHARSET",
      "achievement_achievement_info",
      "achievement_filter_all_players",
      "achievement_filter_favorites_only",
      "achievement_filter_friends_only",
      "achievement_friends_info",
      "achievement_leaderboard_info",
      "achievement_our_info",
      "achievement_pic_loaded",
      "achievement_show_achievement",
      "achievement_show_bank",
      "achievement_show_friend_picker",
      "achievement_show_leaderboard",
      "achievement_show_profile",
      "achievement_show_purchase_prompt",
      "achievement_show_ui",
      "achievement_type_achievement_challenge",
      "achievement_type_score_challenge",
      "asset_font",
      "asset_object",
      "asset_path",
      "asset_room",
      "asset_script",
      "asset_shader",
      "asset_sound",
      "asset_sprite",
      "asset_tiles",
      "asset_timeline",
      "asset_unknown",
      "audio_3d",
      "audio_falloff_exponent_distance",
      "audio_falloff_exponent_distance_clamped",
      "audio_falloff_inverse_distance",
      "audio_falloff_inverse_distance_clamped",
      "audio_falloff_linear_distance",
      "audio_falloff_linear_distance_clamped",
      "audio_falloff_none",
      "audio_mono",
      "audio_new_system",
      "audio_old_system",
      "audio_stereo",
      "bm_add",
      "bm_complex",
      "bm_dest_alpha",
      "bm_dest_color",
      "bm_dest_colour",
      "bm_inv_dest_alpha",
      "bm_inv_dest_color",
      "bm_inv_dest_colour",
      "bm_inv_src_alpha",
      "bm_inv_src_color",
      "bm_inv_src_colour",
      "bm_max",
      "bm_normal",
      "bm_one",
      "bm_src_alpha",
      "bm_src_alpha_sat",
      "bm_src_color",
      "bm_src_colour",
      "bm_subtract",
      "bm_zero",
      "browser_chrome",
      "browser_edge",
      "browser_firefox",
      "browser_ie",
      "browser_ie_mobile",
      "browser_not_a_browser",
      "browser_opera",
      "browser_safari",
      "browser_safari_mobile",
      "browser_tizen",
      "browser_unknown",
      "browser_windows_store",
      "buffer_bool",
      "buffer_f16",
      "buffer_f32",
      "buffer_f64",
      "buffer_fast",
      "buffer_fixed",
      "buffer_generalerror",
      "buffer_grow",
      "buffer_invalidtype",
      "buffer_network",
      "buffer_outofbounds",
      "buffer_outofspace",
      "buffer_s16",
      "buffer_s32",
      "buffer_s8",
      "buffer_seek_end",
      "buffer_seek_relative",
      "buffer_seek_start",
      "buffer_string",
      "buffer_surface_copy",
      "buffer_text",
      "buffer_u16",
      "buffer_u32",
      "buffer_u64",
      "buffer_u8",
      "buffer_vbuffer",
      "buffer_wrap",
      "button_type",
      "c_aqua",
      "c_black",
      "c_blue",
      "c_dkgray",
      "c_fuchsia",
      "c_gray",
      "c_green",
      "c_lime",
      "c_ltgray",
      "c_maroon",
      "c_navy",
      "c_olive",
      "c_orange",
      "c_purple",
      "c_red",
      "c_silver",
      "c_teal",
      "c_white",
      "c_yellow",
      "cmpfunc_always",
      "cmpfunc_equal",
      "cmpfunc_greater",
      "cmpfunc_greaterequal",
      "cmpfunc_less",
      "cmpfunc_lessequal",
      "cmpfunc_never",
      "cmpfunc_notequal",
      "cr_appstart",
      "cr_arrow",
      "cr_beam",
      "cr_cross",
      "cr_default",
      "cr_drag",
      "cr_handpoint",
      "cr_hourglass",
      "cr_none",
      "cr_size_all",
      "cr_size_nesw",
      "cr_size_ns",
      "cr_size_nwse",
      "cr_size_we",
      "cr_uparrow",
      "cull_clockwise",
      "cull_counterclockwise",
      "cull_noculling",
      "device_emulator",
      "device_ios_ipad",
      "device_ios_ipad_retina",
      "device_ios_iphone",
      "device_ios_iphone5",
      "device_ios_iphone6",
      "device_ios_iphone6plus",
      "device_ios_iphone_retina",
      "device_ios_unknown",
      "device_tablet",
      "display_landscape",
      "display_landscape_flipped",
      "display_portrait",
      "display_portrait_flipped",
      "dll_cdecl",
      "dll_stdcall",
      "ds_type_grid",
      "ds_type_list",
      "ds_type_map",
      "ds_type_priority",
      "ds_type_queue",
      "ds_type_stack",
      "ef_cloud",
      "ef_ellipse",
      "ef_explosion",
      "ef_firework",
      "ef_flare",
      "ef_rain",
      "ef_ring",
      "ef_smoke",
      "ef_smokeup",
      "ef_snow",
      "ef_spark",
      "ef_star",
      "ev_alarm",
      "ev_animation_end",
      "ev_boundary",
      "ev_cleanup",
      "ev_close_button",
      "ev_collision",
      "ev_create",
      "ev_destroy",
      "ev_draw",
      "ev_draw_begin",
      "ev_draw_end",
      "ev_draw_post",
      "ev_draw_pre",
      "ev_end_of_path",
      "ev_game_end",
      "ev_game_start",
      "ev_gesture",
      "ev_gesture_double_tap",
      "ev_gesture_drag_end",
      "ev_gesture_drag_start",
      "ev_gesture_dragging",
      "ev_gesture_flick",
      "ev_gesture_pinch_end",
      "ev_gesture_pinch_in",
      "ev_gesture_pinch_out",
      "ev_gesture_pinch_start",
      "ev_gesture_rotate_end",
      "ev_gesture_rotate_start",
      "ev_gesture_rotating",
      "ev_gesture_tap",
      "ev_global_gesture_double_tap",
      "ev_global_gesture_drag_end",
      "ev_global_gesture_drag_start",
      "ev_global_gesture_dragging",
      "ev_global_gesture_flick",
      "ev_global_gesture_pinch_end",
      "ev_global_gesture_pinch_in",
      "ev_global_gesture_pinch_out",
      "ev_global_gesture_pinch_start",
      "ev_global_gesture_rotate_end",
      "ev_global_gesture_rotate_start",
      "ev_global_gesture_rotating",
      "ev_global_gesture_tap",
      "ev_global_left_button",
      "ev_global_left_press",
      "ev_global_left_release",
      "ev_global_middle_button",
      "ev_global_middle_press",
      "ev_global_middle_release",
      "ev_global_right_button",
      "ev_global_right_press",
      "ev_global_right_release",
      "ev_gui",
      "ev_gui_begin",
      "ev_gui_end",
      "ev_joystick1_button1",
      "ev_joystick1_button2",
      "ev_joystick1_button3",
      "ev_joystick1_button4",
      "ev_joystick1_button5",
      "ev_joystick1_button6",
      "ev_joystick1_button7",
      "ev_joystick1_button8",
      "ev_joystick1_down",
      "ev_joystick1_left",
      "ev_joystick1_right",
      "ev_joystick1_up",
      "ev_joystick2_button1",
      "ev_joystick2_button2",
      "ev_joystick2_button3",
      "ev_joystick2_button4",
      "ev_joystick2_button5",
      "ev_joystick2_button6",
      "ev_joystick2_button7",
      "ev_joystick2_button8",
      "ev_joystick2_down",
      "ev_joystick2_left",
      "ev_joystick2_right",
      "ev_joystick2_up",
      "ev_keyboard",
      "ev_keypress",
      "ev_keyrelease",
      "ev_left_button",
      "ev_left_press",
      "ev_left_release",
      "ev_middle_button",
      "ev_middle_press",
      "ev_middle_release",
      "ev_mouse",
      "ev_mouse_enter",
      "ev_mouse_leave",
      "ev_mouse_wheel_down",
      "ev_mouse_wheel_up",
      "ev_no_button",
      "ev_no_more_health",
      "ev_no_more_lives",
      "ev_other",
      "ev_outside",
      "ev_right_button",
      "ev_right_press",
      "ev_right_release",
      "ev_room_end",
      "ev_room_start",
      "ev_step",
      "ev_step_begin",
      "ev_step_end",
      "ev_step_normal",
      "ev_trigger",
      "ev_user0",
      "ev_user1",
      "ev_user2",
      "ev_user3",
      "ev_user4",
      "ev_user5",
      "ev_user6",
      "ev_user7",
      "ev_user8",
      "ev_user9",
      "ev_user10",
      "ev_user11",
      "ev_user12",
      "ev_user13",
      "ev_user14",
      "ev_user15",
      "fa_archive",
      "fa_bottom",
      "fa_center",
      "fa_directory",
      "fa_hidden",
      "fa_left",
      "fa_middle",
      "fa_readonly",
      "fa_right",
      "fa_sysfile",
      "fa_top",
      "fa_volumeid",
      "fb_login_default",
      "fb_login_fallback_to_webview",
      "fb_login_forcing_safari",
      "fb_login_forcing_webview",
      "fb_login_no_fallback_to_webview",
      "fb_login_use_system_account",
      "gamespeed_fps",
      "gamespeed_microseconds",
      "ge_lose",
      "global",
      "gp_axislh",
      "gp_axislv",
      "gp_axisrh",
      "gp_axisrv",
      "gp_face1",
      "gp_face2",
      "gp_face3",
      "gp_face4",
      "gp_padd",
      "gp_padl",
      "gp_padr",
      "gp_padu",
      "gp_select",
      "gp_shoulderl",
      "gp_shoulderlb",
      "gp_shoulderr",
      "gp_shoulderrb",
      "gp_start",
      "gp_stickl",
      "gp_stickr",
      "iap_available",
      "iap_canceled",
      "iap_ev_consume",
      "iap_ev_product",
      "iap_ev_purchase",
      "iap_ev_restore",
      "iap_ev_storeload",
      "iap_failed",
      "iap_purchased",
      "iap_refunded",
      "iap_status_available",
      "iap_status_loading",
      "iap_status_processing",
      "iap_status_restoring",
      "iap_status_unavailable",
      "iap_status_uninitialised",
      "iap_storeload_failed",
      "iap_storeload_ok",
      "iap_unavailable",
      "input_type",
      "kbv_autocapitalize_characters",
      "kbv_autocapitalize_none",
      "kbv_autocapitalize_sentences",
      "kbv_autocapitalize_words",
      "kbv_returnkey_continue",
      "kbv_returnkey_default",
      "kbv_returnkey_done",
      "kbv_returnkey_emergency",
      "kbv_returnkey_go",
      "kbv_returnkey_google",
      "kbv_returnkey_join",
      "kbv_returnkey_next",
      "kbv_returnkey_route",
      "kbv_returnkey_search",
      "kbv_returnkey_send",
      "kbv_returnkey_yahoo",
      "kbv_type_ascii",
      "kbv_type_default",
      "kbv_type_email",
      "kbv_type_numbers",
      "kbv_type_phone",
      "kbv_type_phone_name",
      "kbv_type_url",
      "layerelementtype_background",
      "layerelementtype_instance",
      "layerelementtype_oldtilemap",
      "layerelementtype_particlesystem",
      "layerelementtype_sprite",
      "layerelementtype_tile",
      "layerelementtype_tilemap",
      "layerelementtype_undefined",
      "lb_disp_none",
      "lb_disp_numeric",
      "lb_disp_time_ms",
      "lb_disp_time_sec",
      "lb_sort_ascending",
      "lb_sort_descending",
      "lb_sort_none",
      "leaderboard_type_number",
      "leaderboard_type_time_mins_secs",
      "lighttype_dir",
      "lighttype_point",
      "local",
      "matrix_projection",
      "matrix_view",
      "matrix_world",
      "mb_any",
      "mb_left",
      "mb_middle",
      "mb_none",
      "mb_right",
      "mip_markedonly",
      "mip_off",
      "mip_on",
      "network_config_connect_timeout",
      "network_config_disable_reliable_udp",
      "network_config_enable_reliable_udp",
      "network_config_use_non_blocking_socket",
      "network_socket_bluetooth",
      "network_socket_tcp",
      "network_socket_udp",
      "network_type_connect",
      "network_type_data",
      "network_type_disconnect",
      "network_type_non_blocking_connect",
      "of_challen",
      "of_challenge_tie",
      "of_challenge_win",
      "os_3ds",
      "os_android",
      "os_bb10",
      "os_ios",
      "os_linux",
      "os_macosx",
      "os_ps3",
      "os_ps4",
      "os_psvita",
      "os_switch",
      "os_symbian",
      "os_tizen",
      "os_tvos",
      "os_unknown",
      "os_uwp",
      "os_wiiu",
      "os_win32",
      "os_win8native",
      "os_windows",
      "os_winphone",
      "os_xbox360",
      "os_xboxone",
      "other",
      "ov_achievements",
      "ov_community",
      "ov_friends",
      "ov_gamegroup",
      "ov_players",
      "ov_settings",
      "path_action_continue",
      "path_action_restart",
      "path_action_reverse",
      "path_action_stop",
      "phy_debug_render_aabb",
      "phy_debug_render_collision_pairs",
      "phy_debug_render_coms",
      "phy_debug_render_core_shapes",
      "phy_debug_render_joints",
      "phy_debug_render_obb",
      "phy_debug_render_shapes",
      "phy_joint_anchor_1_x",
      "phy_joint_anchor_1_y",
      "phy_joint_anchor_2_x",
      "phy_joint_anchor_2_y",
      "phy_joint_angle",
      "phy_joint_angle_limits",
      "phy_joint_damping_ratio",
      "phy_joint_frequency",
      "phy_joint_length_1",
      "phy_joint_length_2",
      "phy_joint_lower_angle_limit",
      "phy_joint_max_force",
      "phy_joint_max_length",
      "phy_joint_max_motor_force",
      "phy_joint_max_motor_torque",
      "phy_joint_max_torque",
      "phy_joint_motor_force",
      "phy_joint_motor_speed",
      "phy_joint_motor_torque",
      "phy_joint_reaction_force_x",
      "phy_joint_reaction_force_y",
      "phy_joint_reaction_torque",
      "phy_joint_speed",
      "phy_joint_translation",
      "phy_joint_upper_angle_limit",
      "phy_particle_data_flag_category",
      "phy_particle_data_flag_color",
      "phy_particle_data_flag_colour",
      "phy_particle_data_flag_position",
      "phy_particle_data_flag_typeflags",
      "phy_particle_data_flag_velocity",
      "phy_particle_flag_colormixing",
      "phy_particle_flag_colourmixing",
      "phy_particle_flag_elastic",
      "phy_particle_flag_powder",
      "phy_particle_flag_spring",
      "phy_particle_flag_tensile",
      "phy_particle_flag_viscous",
      "phy_particle_flag_wall",
      "phy_particle_flag_water",
      "phy_particle_flag_zombie",
      "phy_particle_group_flag_rigid",
      "phy_particle_group_flag_solid",
      "pi",
      "pr_linelist",
      "pr_linestrip",
      "pr_pointlist",
      "pr_trianglefan",
      "pr_trianglelist",
      "pr_trianglestrip",
      "ps_distr_gaussian",
      "ps_distr_invgaussian",
      "ps_distr_linear",
      "ps_shape_diamond",
      "ps_shape_ellipse",
      "ps_shape_line",
      "ps_shape_rectangle",
      "pt_shape_circle",
      "pt_shape_cloud",
      "pt_shape_disk",
      "pt_shape_explosion",
      "pt_shape_flare",
      "pt_shape_line",
      "pt_shape_pixel",
      "pt_shape_ring",
      "pt_shape_smoke",
      "pt_shape_snow",
      "pt_shape_spark",
      "pt_shape_sphere",
      "pt_shape_square",
      "pt_shape_star",
      "spritespeed_framespergameframe",
      "spritespeed_framespersecond",
      "text_type",
      "tf_anisotropic",
      "tf_linear",
      "tf_point",
      "tile_flip",
      "tile_index_mask",
      "tile_mirror",
      "tile_rotate",
      "timezone_local",
      "timezone_utc",
      "tm_countvsyncs",
      "tm_sleep",
      "ty_real",
      "ty_string",
      "ugc_filetype_community",
      "ugc_filetype_microtrans",
      "ugc_list_Favorited",
      "ugc_list_Followed",
      "ugc_list_Published",
      "ugc_list_Subscribed",
      "ugc_list_UsedOrPlayed",
      "ugc_list_VotedDown",
      "ugc_list_VotedOn",
      "ugc_list_VotedUp",
      "ugc_list_WillVoteLater",
      "ugc_match_AllGuides",
      "ugc_match_Artwork",
      "ugc_match_Collections",
      "ugc_match_ControllerBindings",
      "ugc_match_IntegratedGuides",
      "ugc_match_Items",
      "ugc_match_Items_Mtx",
      "ugc_match_Items_ReadyToUse",
      "ugc_match_Screenshots",
      "ugc_match_UsableInGame",
      "ugc_match_Videos",
      "ugc_match_WebGuides",
      "ugc_query_AcceptedForGameRankedByAcceptanceDate",
      "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
      "ugc_query_CreatedByFriendsRankedByPublicationDate",
      "ugc_query_FavoritedByFriendsRankedByPublicationDate",
      "ugc_query_NotYetRated",
      "ugc_query_RankedByNumTimesReported",
      "ugc_query_RankedByPublicationDate",
      "ugc_query_RankedByTextSearch",
      "ugc_query_RankedByTotalVotesAsc",
      "ugc_query_RankedByTrend",
      "ugc_query_RankedByVote",
      "ugc_query_RankedByVotesUp",
      "ugc_result_success",
      "ugc_sortorder_CreationOrderAsc",
      "ugc_sortorder_CreationOrderDesc",
      "ugc_sortorder_ForModeration",
      "ugc_sortorder_LastUpdatedDesc",
      "ugc_sortorder_SubscriptionDateDesc",
      "ugc_sortorder_TitleAsc",
      "ugc_sortorder_VoteScoreDesc",
      "ugc_visibility_friends_only",
      "ugc_visibility_private",
      "ugc_visibility_public",
      "vertex_type_color",
      "vertex_type_colour",
      "vertex_type_float1",
      "vertex_type_float2",
      "vertex_type_float3",
      "vertex_type_float4",
      "vertex_type_ubyte4",
      "vertex_usage_binormal",
      "vertex_usage_blendindices",
      "vertex_usage_blendweight",
      "vertex_usage_color",
      "vertex_usage_colour",
      "vertex_usage_depth",
      "vertex_usage_fog",
      "vertex_usage_normal",
      "vertex_usage_position",
      "vertex_usage_psize",
      "vertex_usage_sample",
      "vertex_usage_tangent",
      "vertex_usage_texcoord",
      "vertex_usage_textcoord",
      "vk_add",
      "vk_alt",
      "vk_anykey",
      "vk_backspace",
      "vk_control",
      "vk_decimal",
      "vk_delete",
      "vk_divide",
      "vk_down",
      "vk_end",
      "vk_enter",
      "vk_escape",
      "vk_f1",
      "vk_f2",
      "vk_f3",
      "vk_f4",
      "vk_f5",
      "vk_f6",
      "vk_f7",
      "vk_f8",
      "vk_f9",
      "vk_f10",
      "vk_f11",
      "vk_f12",
      "vk_home",
      "vk_insert",
      "vk_lalt",
      "vk_lcontrol",
      "vk_left",
      "vk_lshift",
      "vk_multiply",
      "vk_nokey",
      "vk_numpad0",
      "vk_numpad1",
      "vk_numpad2",
      "vk_numpad3",
      "vk_numpad4",
      "vk_numpad5",
      "vk_numpad6",
      "vk_numpad7",
      "vk_numpad8",
      "vk_numpad9",
      "vk_pagedown",
      "vk_pageup",
      "vk_pause",
      "vk_printscreen",
      "vk_ralt",
      "vk_rcontrol",
      "vk_return",
      "vk_right",
      "vk_rshift",
      "vk_shift",
      "vk_space",
      "vk_subtract",
      "vk_tab",
      "vk_up"
    ];
    const LANGUAGE_VARIABLES = [
      "alarm",
      "application_surface",
      "argument",
      "argument0",
      "argument1",
      "argument2",
      "argument3",
      "argument4",
      "argument5",
      "argument6",
      "argument7",
      "argument8",
      "argument9",
      "argument10",
      "argument11",
      "argument12",
      "argument13",
      "argument14",
      "argument15",
      "argument_count",
      "argument_relative",
      "async_load",
      "background_color",
      "background_colour",
      "background_showcolor",
      "background_showcolour",
      "bbox_bottom",
      "bbox_left",
      "bbox_right",
      "bbox_top",
      "browser_height",
      "browser_width",
      "caption_health",
      "caption_lives",
      "caption_score",
      "current_day",
      "current_hour",
      "current_minute",
      "current_month",
      "current_second",
      "current_time",
      "current_weekday",
      "current_year",
      "cursor_sprite",
      "debug_mode",
      "delta_time",
      "depth",
      "direction",
      "display_aa",
      "error_last",
      "error_occurred",
      "event_action",
      "event_data",
      "event_number",
      "event_object",
      "event_type",
      "fps",
      "fps_real",
      "friction",
      "game_display_name",
      "game_id",
      "game_project_name",
      "game_save_id",
      "gamemaker_pro",
      "gamemaker_registered",
      "gamemaker_version",
      "gravity",
      "gravity_direction",
      "health",
      "hspeed",
      "iap_data",
      "id|0",
      "image_alpha",
      "image_angle",
      "image_blend",
      "image_index",
      "image_number",
      "image_speed",
      "image_xscale",
      "image_yscale",
      "instance_count",
      "instance_id",
      "keyboard_key",
      "keyboard_lastchar",
      "keyboard_lastkey",
      "keyboard_string",
      "layer",
      "lives",
      "mask_index",
      "mouse_button",
      "mouse_lastbutton",
      "mouse_x",
      "mouse_y",
      "object_index",
      "os_browser",
      "os_device",
      "os_type",
      "os_version",
      "path_endaction",
      "path_index",
      "path_orientation",
      "path_position",
      "path_positionprevious",
      "path_scale",
      "path_speed",
      "persistent",
      "phy_active",
      "phy_angular_damping",
      "phy_angular_velocity",
      "phy_bullet",
      "phy_col_normal_x",
      "phy_col_normal_y",
      "phy_collision_points",
      "phy_collision_x",
      "phy_collision_y",
      "phy_com_x",
      "phy_com_y",
      "phy_dynamic",
      "phy_fixed_rotation",
      "phy_inertia",
      "phy_kinematic",
      "phy_linear_damping",
      "phy_linear_velocity_x",
      "phy_linear_velocity_y",
      "phy_mass",
      "phy_position_x",
      "phy_position_xprevious",
      "phy_position_y",
      "phy_position_yprevious",
      "phy_rotation",
      "phy_sleeping",
      "phy_speed",
      "phy_speed_x",
      "phy_speed_y",
      "program_directory",
      "room",
      "room_caption",
      "room_first",
      "room_height",
      "room_last",
      "room_persistent",
      "room_speed",
      "room_width",
      "score",
      "self",
      "show_health",
      "show_lives",
      "show_score",
      "solid",
      "speed",
      "sprite_height",
      "sprite_index",
      "sprite_width",
      "sprite_xoffset",
      "sprite_yoffset",
      "temp_directory",
      "timeline_index",
      "timeline_loop",
      "timeline_position",
      "timeline_running",
      "timeline_speed",
      "view_angle",
      "view_camera",
      "view_current",
      "view_enabled",
      "view_hborder",
      "view_hport",
      "view_hspeed",
      "view_hview",
      "view_object",
      "view_surface_id",
      "view_vborder",
      "view_visible",
      "view_vspeed",
      "view_wport",
      "view_wview",
      "view_xport",
      "view_xview",
      "view_yport",
      "view_yview",
      "visible",
      "vspeed",
      "webgl_enabled",
      "working_directory",
      "xprevious",
      "xstart",
      "x|0",
      "yprevious",
      "ystart",
      "y|0"
    ];
    return {
      name: "GML",
      case_insensitive: false,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS,
        literal: LITERALS,
        symbol: SYMBOLS,
        "variable.language": LANGUAGE_VARIABLES
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = gml;
});

// node_modules/highlight.js/lib/languages/go.js
var require_go = __commonJS((exports, module) => {
  var go = function(hljs) {
    const LITERALS = [
      "true",
      "false",
      "iota",
      "nil"
    ];
    const BUILT_INS = [
      "append",
      "cap",
      "close",
      "complex",
      "copy",
      "imag",
      "len",
      "make",
      "new",
      "panic",
      "print",
      "println",
      "real",
      "recover",
      "delete"
    ];
    const TYPES = [
      "bool",
      "byte",
      "complex64",
      "complex128",
      "error",
      "float32",
      "float64",
      "int8",
      "int16",
      "int32",
      "int64",
      "string",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "int",
      "uint",
      "uintptr",
      "rune"
    ];
    const KWS = [
      "break",
      "case",
      "chan",
      "const",
      "continue",
      "default",
      "defer",
      "else",
      "fallthrough",
      "for",
      "func",
      "go",
      "goto",
      "if",
      "import",
      "interface",
      "map",
      "package",
      "range",
      "return",
      "select",
      "struct",
      "switch",
      "type",
      "var"
    ];
    const KEYWORDS2 = {
      keyword: KWS,
      type: TYPES,
      literal: LITERALS,
      built_in: BUILT_INS
    };
    return {
      name: "Go",
      aliases: ["golang"],
      keywords: KEYWORDS2,
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          variants: [
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        },
        {
          className: "number",
          variants: [
            {
              begin: hljs.C_NUMBER_RE + "[i]",
              relevance: 1
            },
            hljs.C_NUMBER_MODE
          ]
        },
        {
          begin: /:=/
        },
        {
          className: "function",
          beginKeywords: "func",
          end: "\\s*(\\{|$)",
          excludeEnd: true,
          contains: [
            hljs.TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: KEYWORDS2,
              illegal: /["']/
            }
          ]
        }
      ]
    };
  };
  module.exports = go;
});

// node_modules/highlight.js/lib/languages/golo.js
var require_golo = __commonJS((exports, module) => {
  var golo = function(hljs) {
    const KEYWORDS2 = [
      "println",
      "readln",
      "print",
      "import",
      "module",
      "function",
      "local",
      "return",
      "let",
      "var",
      "while",
      "for",
      "foreach",
      "times",
      "in",
      "case",
      "when",
      "match",
      "with",
      "break",
      "continue",
      "augment",
      "augmentation",
      "each",
      "find",
      "filter",
      "reduce",
      "if",
      "then",
      "else",
      "otherwise",
      "try",
      "catch",
      "finally",
      "raise",
      "throw",
      "orIfNull",
      "DynamicObject|10",
      "DynamicVariable",
      "struct",
      "Observable",
      "map",
      "set",
      "vector",
      "list",
      "array"
    ];
    return {
      name: "Golo",
      keywords: {
        keyword: KEYWORDS2,
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        }
      ]
    };
  };
  module.exports = golo;
});

// node_modules/highlight.js/lib/languages/gradle.js
var require_gradle = __commonJS((exports, module) => {
  var gradle = function(hljs) {
    const KEYWORDS2 = [
      "task",
      "project",
      "allprojects",
      "subprojects",
      "artifacts",
      "buildscript",
      "configurations",
      "dependencies",
      "repositories",
      "sourceSets",
      "description",
      "delete",
      "from",
      "into",
      "include",
      "exclude",
      "source",
      "classpath",
      "destinationDir",
      "includes",
      "options",
      "sourceCompatibility",
      "targetCompatibility",
      "group",
      "flatDir",
      "doLast",
      "doFirst",
      "flatten",
      "todir",
      "fromdir",
      "ant",
      "def",
      "abstract",
      "break",
      "case",
      "catch",
      "continue",
      "default",
      "do",
      "else",
      "extends",
      "final",
      "finally",
      "for",
      "if",
      "implements",
      "instanceof",
      "native",
      "new",
      "private",
      "protected",
      "public",
      "return",
      "static",
      "switch",
      "synchronized",
      "throw",
      "throws",
      "transient",
      "try",
      "volatile",
      "while",
      "strictfp",
      "package",
      "import",
      "false",
      "null",
      "super",
      "this",
      "true",
      "antlrtask",
      "checkstyle",
      "codenarc",
      "copy",
      "boolean",
      "byte",
      "char",
      "class",
      "double",
      "float",
      "int",
      "interface",
      "long",
      "short",
      "void",
      "compile",
      "runTime",
      "file",
      "fileTree",
      "abs",
      "any",
      "append",
      "asList",
      "asWritable",
      "call",
      "collect",
      "compareTo",
      "count",
      "div",
      "dump",
      "each",
      "eachByte",
      "eachFile",
      "eachLine",
      "every",
      "find",
      "findAll",
      "flatten",
      "getAt",
      "getErr",
      "getIn",
      "getOut",
      "getText",
      "grep",
      "immutable",
      "inject",
      "inspect",
      "intersect",
      "invokeMethods",
      "isCase",
      "join",
      "leftShift",
      "minus",
      "multiply",
      "newInputStream",
      "newOutputStream",
      "newPrintWriter",
      "newReader",
      "newWriter",
      "next",
      "plus",
      "pop",
      "power",
      "previous",
      "print",
      "println",
      "push",
      "putAt",
      "read",
      "readBytes",
      "readLines",
      "reverse",
      "reverseEach",
      "round",
      "size",
      "sort",
      "splitEachLine",
      "step",
      "subMap",
      "times",
      "toInteger",
      "toList",
      "tokenize",
      "upto",
      "waitForOrKill",
      "withPrintWriter",
      "withReader",
      "withStream",
      "withWriter",
      "withWriterAppend",
      "write",
      "writeLine"
    ];
    return {
      name: "Gradle",
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.REGEXP_MODE
      ]
    };
  };
  module.exports = gradle;
});

// node_modules/highlight.js/lib/languages/graphql.js
var require_graphql = __commonJS((exports, module) => {
  var graphql = function(hljs) {
    const regex6 = hljs.regex;
    const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
    return {
      name: "GraphQL",
      aliases: ["gql"],
      case_insensitive: true,
      disableAutodetect: false,
      keywords: {
        keyword: [
          "query",
          "mutation",
          "subscription",
          "type",
          "input",
          "schema",
          "directive",
          "interface",
          "union",
          "scalar",
          "fragment",
          "enum",
          "on"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        {
          scope: "punctuation",
          match: /[.]{3}/,
          relevance: 0
        },
        {
          scope: "punctuation",
          begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
          relevance: 0
        },
        {
          scope: "variable",
          begin: /\$/,
          end: /\W/,
          excludeEnd: true,
          relevance: 0
        },
        {
          scope: "meta",
          match: /@\w+/,
          excludeEnd: true
        },
        {
          scope: "symbol",
          begin: regex6.concat(GQL_NAME, regex6.lookahead(/\s*:/)),
          relevance: 0
        }
      ],
      illegal: [
        /[;<']/,
        /BEGIN/
      ]
    };
  };
  module.exports = graphql;
});

// node_modules/highlight.js/lib/languages/groovy.js
var require_groovy = __commonJS((exports, module) => {
  var variants = function(variants2, obj = {}) {
    obj.variants = variants2;
    return obj;
  };
  var groovy = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = "[A-Za-z0-9_$]+";
    const COMMENT = variants([
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT("/\\*\\*", "\\*/", {
        relevance: 0,
        contains: [
          {
            begin: /\w+@/,
            relevance: 0
          },
          {
            className: "doctag",
            begin: "@[A-Za-z]+"
          }
        ]
      })
    ]);
    const REGEXP = {
      className: "regexp",
      begin: /~?\/[^\/\n]+\//,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const NUMBER = variants([
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ]);
    const STRING = variants([
      {
        begin: /"""/,
        end: /"""/
      },
      {
        begin: /'''/,
        end: /'''/
      },
      {
        begin: "\\$/",
        end: "/\\$",
        relevance: 10
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ], { className: "string" });
    const CLASS_DEFINITION = {
      match: [
        /(class|interface|trait|enum|record|extends|implements)/,
        /\s+/,
        hljs.UNDERSCORE_IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    const TYPES = [
      "byte",
      "short",
      "char",
      "int",
      "long",
      "boolean",
      "float",
      "double",
      "void"
    ];
    const KEYWORDS2 = [
      "def",
      "as",
      "in",
      "assert",
      "trait",
      "abstract",
      "static",
      "volatile",
      "transient",
      "public",
      "private",
      "protected",
      "synchronized",
      "final",
      "class",
      "interface",
      "enum",
      "if",
      "else",
      "for",
      "while",
      "switch",
      "case",
      "break",
      "default",
      "continue",
      "throw",
      "throws",
      "try",
      "catch",
      "finally",
      "implements",
      "extends",
      "new",
      "import",
      "package",
      "return",
      "instanceof",
      "var"
    ];
    return {
      name: "Groovy",
      keywords: {
        "variable.language": "this super",
        literal: "true false null",
        type: TYPES,
        keyword: KEYWORDS2
      },
      contains: [
        hljs.SHEBANG({
          binary: "groovy",
          relevance: 10
        }),
        COMMENT,
        STRING,
        REGEXP,
        NUMBER,
        CLASS_DEFINITION,
        {
          className: "meta",
          begin: "@[A-Za-z]+",
          relevance: 0
        },
        {
          className: "attr",
          begin: IDENT_RE + "[ \t]*:",
          relevance: 0
        },
        {
          begin: /\?/,
          end: /:/,
          relevance: 0,
          contains: [
            COMMENT,
            STRING,
            REGEXP,
            NUMBER,
            "self"
          ]
        },
        {
          className: "symbol",
          begin: "^[ \t]*" + regex6.lookahead(IDENT_RE + ":"),
          excludeBegin: true,
          end: IDENT_RE + ":",
          relevance: 0
        }
      ],
      illegal: /#|<\//
    };
  };
  module.exports = groovy;
});

// node_modules/highlight.js/lib/languages/haml.js
var require_haml = __commonJS((exports, module) => {
  var haml = function(hljs) {
    return {
      name: "HAML",
      case_insensitive: true,
      contains: [
        {
          className: "meta",
          begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
          relevance: 10
        },
        hljs.COMMENT("^\\s*(!=#|=#|-#|/).*$", null, { relevance: 0 }),
        {
          begin: "^\\s*(-|=|!=)(?!#)",
          end: /$/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "tag",
          begin: "^\\s*%",
          contains: [
            {
              className: "selector-tag",
              begin: "\\w+"
            },
            {
              className: "selector-id",
              begin: "#[\\w-]+"
            },
            {
              className: "selector-class",
              begin: "\\.[\\w-]+"
            },
            {
              begin: /\{\s*/,
              end: /\s*\}/,
              contains: [
                {
                  begin: ":\\w+\\s*=>",
                  end: ",\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: ":\\w+"
                    },
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            },
            {
              begin: "\\(\\s*",
              end: "\\s*\\)",
              excludeEnd: true,
              contains: [
                {
                  begin: "\\w+\\s*=",
                  end: "\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: "\\w+",
                      relevance: 0
                    },
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        { begin: "^\\s*[=~]\\s*" },
        {
          begin: /#\{/,
          end: /\}/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  };
  module.exports = haml;
});

// node_modules/highlight.js/lib/languages/handlebars.js
var require_handlebars = __commonJS((exports, module) => {
  var handlebars = function(hljs) {
    const regex6 = hljs.regex;
    const BUILT_INS = {
      $pattern: /[\w.\/]+/,
      built_in: [
        "action",
        "bindattr",
        "collection",
        "component",
        "concat",
        "debugger",
        "each",
        "each-in",
        "get",
        "hash",
        "if",
        "in",
        "input",
        "link-to",
        "loc",
        "log",
        "lookup",
        "mut",
        "outlet",
        "partial",
        "query-params",
        "render",
        "template",
        "textarea",
        "unbound",
        "unless",
        "view",
        "with",
        "yield"
      ]
    };
    const LITERALS = {
      $pattern: /[\w.\/]+/,
      literal: [
        "true",
        "false",
        "undefined",
        "null"
      ]
    };
    const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
    const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
    const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
    const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
    const PATH_DELIMITER_REGEX = /(\.|\/)/;
    const ANY_ID = regex6.either(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);
    const IDENTIFIER_REGEX = regex6.concat(regex6.optional(/\.|\.\/|\//), ANY_ID, regex6.anyNumberOfTimes(regex6.concat(PATH_DELIMITER_REGEX, ANY_ID)));
    const HASH_PARAM_REGEX = regex6.concat("(", BRACKET_QUOTED_ID_REGEX, "|", PLAIN_ID_REGEX, ")(?==)");
    const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };
    const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS });
    const SUB_EXPRESSION = {
      begin: /\(/,
      end: /\)/
    };
    const HASH = {
      className: "attr",
      begin: HASH_PARAM_REGEX,
      relevance: 0,
      starts: {
        begin: /=/,
        end: /=/,
        starts: { contains: [
          hljs.NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          HELPER_PARAMETER,
          SUB_EXPRESSION
        ] }
      }
    };
    const BLOCK_PARAMS = {
      begin: /as\s+\|/,
      keywords: { keyword: "as" },
      end: /\|/,
      contains: [
        {
          begin: /\w+/
        }
      ]
    };
    const HELPER_PARAMETERS = {
      contains: [
        hljs.NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        BLOCK_PARAMS,
        HASH,
        HELPER_PARAMETER,
        SUB_EXPRESSION
      ],
      returnEnd: true
    };
    const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      className: "name",
      keywords: BUILT_INS,
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
    });
    SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];
    const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      keywords: BUILT_INS,
      className: "name",
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      keywords: BUILT_INS,
      className: "name"
    });
    const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      className: "name",
      keywords: BUILT_INS,
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
      begin: /\\\{\{/,
      skip: true
    };
    const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
      begin: /\\\\(?=\{\{)/,
      skip: true
    };
    return {
      name: "Handlebars",
      aliases: [
        "hbs",
        "html.hbs",
        "html.handlebars",
        "htmlbars"
      ],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
        PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
        hljs.COMMENT(/\{\{!--/, /--\}\}/),
        hljs.COMMENT(/\{\{!/, /\}\}/),
        {
          className: "template-tag",
          begin: /\{\{\{\{(?!\/)/,
          end: /\}\}\}\}/,
          contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],
          starts: {
            end: /\{\{\{\{\//,
            returnEnd: true,
            subLanguage: "xml"
          }
        },
        {
          className: "template-tag",
          begin: /\{\{\{\{\//,
          end: /\}\}\}\}/,
          contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          className: "template-tag",
          begin: /\{\{#/,
          end: /\}\}/,
          contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else\}\})/,
          end: /\}\}/,
          keywords: "else"
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else if)/,
          end: /\}\}/,
          keywords: "else if"
        },
        {
          className: "template-tag",
          begin: /\{\{\//,
          end: /\}\}/,
          contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          className: "template-variable",
          begin: /\{\{\{/,
          end: /\}\}\}/,
          contains: [BASIC_MUSTACHE_CONTENTS]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [BASIC_MUSTACHE_CONTENTS]
        }
      ]
    };
  };
  module.exports = handlebars;
});

// node_modules/highlight.js/lib/languages/haskell.js
var require_haskell = __commonJS((exports, module) => {
  var haskell = function(hljs) {
    const decimalDigits = "([0-9]_*)+";
    const hexDigits = "([0-9a-fA-F]_*)+";
    const binaryDigits = "([01]_*)+";
    const octalDigits = "([0-7]_*)+";
    const ascSymbol = "[!#$%&*+.\\/<=>?@\\\\^~-]";
    const uniSymbol = "(\\p{S}|\\p{P})";
    const special = "[(),;\\[\\]`|{}]";
    const symbol = `(${ascSymbol}|(?!(${special}|[_:"']))${uniSymbol})`;
    const COMMENT = { variants: [
      hljs.COMMENT("--+", "$"),
      hljs.COMMENT(/\{-/, /-\}/, { contains: ["self"] })
    ] };
    const PRAGMA = {
      className: "meta",
      begin: /\{-#/,
      end: /#-\}/
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: "^#",
      end: "$"
    };
    const CONSTRUCTOR = {
      className: "type",
      begin: "\\b[A-Z][\\w\']*",
      relevance: 0
    };
    const LIST = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        PRAGMA,
        PREPROCESSOR,
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        hljs.inherit(hljs.TITLE_MODE, { begin: "[_a-z][\\w\']*" }),
        COMMENT
      ]
    };
    const RECORD = {
      begin: /\{/,
      end: /\}/,
      contains: LIST.contains
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
        { match: `\\b0[xX]_*(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
        { match: `\\b0[oO](${octalDigits})\\b` },
        { match: `\\b0[bB](${binaryDigits})\\b` }
      ]
    };
    return {
      name: "Haskell",
      aliases: ["hs"],
      keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
      unicodeRegex: true,
      contains: [
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [
            LIST,
            COMMENT
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import qualified as hiding",
          contains: [
            LIST,
            COMMENT
          ],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class family instance where",
          contains: [
            CONSTRUCTOR,
            LIST,
            COMMENT
          ]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype deriving",
          contains: [
            PRAGMA,
            CONSTRUCTOR,
            LIST,
            RECORD,
            COMMENT
          ]
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [
            CONSTRUCTOR,
            LIST,
            COMMENT
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            hljs.C_NUMBER_MODE,
            COMMENT
          ]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
          contains: [
            CONSTRUCTOR,
            hljs.QUOTE_STRING_MODE,
            COMMENT
          ]
        },
        {
          className: "meta",
          begin: "#!\\/usr\\/bin\\/env runhaskell",
          end: "$"
        },
        PRAGMA,
        PREPROCESSOR,
        {
          scope: "string",
          begin: /'(?=\\?.')/,
          end: /'/,
          contains: [
            {
              scope: "char.escape",
              match: /\\./
            }
          ]
        },
        hljs.QUOTE_STRING_MODE,
        NUMBER,
        CONSTRUCTOR,
        hljs.inherit(hljs.TITLE_MODE, { begin: "^[_a-z][\\w\']*" }),
        { begin: `(?!-)${symbol}--+|--+(?!-)${symbol}` },
        COMMENT,
        {
          begin: "->|<-"
        }
      ]
    };
  };
  module.exports = haskell;
});

// node_modules/highlight.js/lib/languages/haxe.js
var require_haxe = __commonJS((exports, module) => {
  var haxe = function(hljs) {
    const IDENT_RE = "[a-zA-Z_$][a-zA-Z0-9_$]*";
    const HAXE_NUMBER_RE = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;
    const HAXE_BASIC_TYPES = "Int Float String Bool Dynamic Void Array ";
    return {
      name: "Haxe",
      aliases: ["hx"],
      keywords: {
        keyword: "abstract break case cast catch continue default do dynamic else enum extern final for function here if import in inline is macro never new override package private get set public return static super switch this throw trace try typedef untyped using var while " + HAXE_BASIC_TYPES,
        built_in: "trace this",
        literal: "true false null _"
      },
      contains: [
        {
          className: "string",
          begin: "\'",
          end: "\'",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: /\$\{/,
              end: /\}/
            },
            {
              className: "subst",
              begin: /\$/,
              end: /\W\}/
            }
          ]
        },
        hljs.QUOTE_STRING_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: HAXE_NUMBER_RE,
          relevance: 0
        },
        {
          className: "variable",
          begin: "\\$" + IDENT_RE
        },
        {
          className: "meta",
          begin: /@:?/,
          end: /\(|$/,
          excludeEnd: true
        },
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elseif end error" }
        },
        {
          className: "type",
          begin: /:[ \t]*/,
          end: /[^A-Za-z0-9_ \t\->]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        },
        {
          className: "type",
          begin: /:[ \t]*/,
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "type",
          begin: /new */,
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "title.class",
          beginKeywords: "enum",
          end: /\{/,
          contains: [hljs.TITLE_MODE]
        },
        {
          className: "title.class",
          begin: "\\babstract\\b(?=\\s*" + hljs.IDENT_RE + "\\s*\\()",
          end: /[\{$]/,
          contains: [
            {
              className: "type",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /from +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /to +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            hljs.TITLE_MODE
          ],
          keywords: { keyword: "abstract from to" }
        },
        {
          className: "title.class",
          begin: /\b(class|interface) +/,
          end: /[\{$]/,
          excludeEnd: true,
          keywords: "class interface",
          contains: [
            {
              className: "keyword",
              begin: /\b(extends|implements) +/,
              keywords: "extends implements",
              contains: [
                {
                  className: "type",
                  begin: hljs.IDENT_RE,
                  relevance: 0
                }
              ]
            },
            hljs.TITLE_MODE
          ]
        },
        {
          className: "title.function",
          beginKeywords: "function",
          end: /\(/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [hljs.TITLE_MODE]
        }
      ],
      illegal: /<\//
    };
  };
  module.exports = haxe;
});

// node_modules/highlight.js/lib/languages/hsp.js
var require_hsp = __commonJS((exports, module) => {
  var hsp = function(hljs) {
    return {
      name: "HSP",
      case_insensitive: true,
      keywords: {
        $pattern: /[\w._]+/,
        keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        {
          className: "string",
          begin: /\{"/,
          end: /"\}/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib" },
          contains: [
            hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" }),
            hljs.NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "symbol",
          begin: "^\\*(\\w+|@)"
        },
        hljs.NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = hsp;
});

// node_modules/highlight.js/lib/languages/http.js
var require_http = __commonJS((exports, module) => {
  var http = function(hljs) {
    const regex6 = hljs.regex;
    const VERSION = "HTTP/([32]|1\\.[01])";
    const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
    const HEADER = {
      className: "attribute",
      begin: regex6.concat("^", HEADER_NAME, "(?=\\:\\s)"),
      starts: { contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ] }
    };
    const HEADERS_AND_BODY = [
      HEADER,
      {
        begin: "\\n\\n",
        starts: {
          subLanguage: [],
          endsWithParent: true
        }
      }
    ];
    return {
      name: "HTTP",
      aliases: ["https"],
      illegal: /\S/,
      contains: [
        {
          begin: "^(?=" + VERSION + " \\d{3})",
          end: /$/,
          contains: [
            {
              className: "meta",
              begin: VERSION
            },
            {
              className: "number",
              begin: "\\b\\d{3}\\b"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: HEADERS_AND_BODY
          }
        },
        {
          begin: "(?=^[A-Z]+ (.*?) " + VERSION + "$)",
          end: /$/,
          contains: [
            {
              className: "string",
              begin: " ",
              end: " ",
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "meta",
              begin: VERSION
            },
            {
              className: "keyword",
              begin: "[A-Z]+"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: HEADERS_AND_BODY
          }
        },
        hljs.inherit(HEADER, { relevance: 0 })
      ]
    };
  };
  module.exports = http;
});

// node_modules/highlight.js/lib/languages/hy.js
var require_hy = __commonJS((exports, module) => {
  var hy = function(hljs) {
    const SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&#\'";
    const SYMBOL_RE = "[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:]*";
    const keywords = {
      $pattern: SYMBOL_RE,
      built_in: "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
    };
    const SIMPLE_NUMBER_RE = "[-+]?\\d+(\\.\\d+)?";
    const SYMBOL = {
      begin: SYMBOL_RE,
      relevance: 0
    };
    const NUMBER = {
      className: "number",
      begin: SIMPLE_NUMBER_RE,
      relevance: 0
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMENT = hljs.COMMENT(";", "$", { relevance: 0 });
    const LITERAL = {
      className: "literal",
      begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
    };
    const COLLECTION = {
      begin: "[\\[\\{]",
      end: "[\\]\\}]",
      relevance: 0
    };
    const HINT = {
      className: "comment",
      begin: "\\^" + SYMBOL_RE
    };
    const HINT_COL = hljs.COMMENT("\\^\\{", "\\}");
    const KEY = {
      className: "symbol",
      begin: "[:]{1,2}" + SYMBOL_RE
    };
    const LIST = {
      begin: "\\(",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const NAME = {
      className: "name",
      relevance: 0,
      keywords,
      begin: SYMBOL_RE,
      starts: BODY
    };
    const DEFAULT_CONTAINS = [
      LIST,
      STRING,
      HINT,
      HINT_COL,
      COMMENT,
      KEY,
      COLLECTION,
      NUMBER,
      LITERAL,
      SYMBOL
    ];
    LIST.contains = [
      hljs.COMMENT("comment", ""),
      NAME,
      BODY
    ];
    BODY.contains = DEFAULT_CONTAINS;
    COLLECTION.contains = DEFAULT_CONTAINS;
    return {
      name: "Hy",
      aliases: ["hylang"],
      illegal: /\S/,
      contains: [
        hljs.SHEBANG(),
        LIST,
        STRING,
        HINT,
        HINT_COL,
        COMMENT,
        KEY,
        COLLECTION,
        NUMBER,
        LITERAL
      ]
    };
  };
  module.exports = hy;
});

// node_modules/highlight.js/lib/languages/inform7.js
var require_inform7 = __commonJS((exports, module) => {
  var inform7 = function(hljs) {
    const START_BRACKET = "\\[";
    const END_BRACKET = "\\]";
    return {
      name: "Inform 7",
      aliases: ["i7"],
      case_insensitive: true,
      keywords: {
        keyword: "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
      },
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0,
          contains: [
            {
              className: "subst",
              begin: START_BRACKET,
              end: END_BRACKET
            }
          ]
        },
        {
          className: "section",
          begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
          end: "$"
        },
        {
          begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
          end: ":",
          contains: [
            {
              begin: "\\(This",
              end: "\\)"
            }
          ]
        },
        {
          className: "comment",
          begin: START_BRACKET,
          end: END_BRACKET,
          contains: ["self"]
        }
      ]
    };
  };
  module.exports = inform7;
});

// node_modules/highlight.js/lib/languages/ini.js
var require_ini = __commonJS((exports, module) => {
  var ini = function(hljs) {
    const regex6 = hljs.regex;
    const NUMBERS = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: hljs.NUMBER_RE }
      ]
    };
    const COMMENTS = hljs.COMMENT();
    COMMENTS.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const VARIABLES = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const LITERALS = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    };
    const STRINGS = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    };
    const ARRAY = {
      begin: /\[/,
      end: /\]/,
      contains: [
        COMMENTS,
        LITERALS,
        VARIABLES,
        STRINGS,
        NUMBERS,
        "self"
      ],
      relevance: 0
    };
    const BARE_KEY = /[A-Za-z0-9_-]+/;
    const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
    const ANY_KEY = regex6.either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);
    const DOTTED_KEY = regex6.concat(ANY_KEY, "(\\s*\\.\\s*", ANY_KEY, ")*", regex6.lookahead(/\s*=\s*[^#\s]/));
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        COMMENTS,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: DOTTED_KEY,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              COMMENTS,
              ARRAY,
              LITERALS,
              VARIABLES,
              STRINGS,
              NUMBERS
            ]
          }
        }
      ]
    };
  };
  module.exports = ini;
});

// node_modules/highlight.js/lib/languages/irpf90.js
var require_irpf90 = __commonJS((exports, module) => {
  var irpf90 = function(hljs) {
    const regex6 = hljs.regex;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    };
    const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
    const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: regex6.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex6.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex6.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
      ],
      relevance: 0
    };
    const F_KEYWORDS = {
      literal: ".False. .True.",
      keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
      built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
    };
    return {
      name: "IRPF90",
      case_insensitive: true,
      keywords: F_KEYWORDS,
      illegal: /\/\*/,
      contains: [
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        {
          className: "function",
          beginKeywords: "subroutine function program",
          illegal: "[${=\\n]",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            PARAMS
          ]
        },
        hljs.COMMENT("!", "$", { relevance: 0 }),
        hljs.COMMENT("begin_doc", "end_doc", { relevance: 10 }),
        NUMBER
      ]
    };
  };
  module.exports = irpf90;
});

// node_modules/highlight.js/lib/languages/isbl.js
var require_isbl = __commonJS((exports, module) => {
  var isbl = function(hljs) {
    const UNDERSCORE_IDENT_RE = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_!][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]*";
    const FUNCTION_NAME_IDENT_RE = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]*";
    const KEYWORD = "and \u0438 else \u0438\u043D\u0430\u0447\u0435 endexcept endfinally endforeach \u043A\u043E\u043D\u0435\u0446\u0432\u0441\u0435 endif \u043A\u043E\u043D\u0435\u0446\u0435\u0441\u043B\u0438 endwhile \u043A\u043E\u043D\u0435\u0446\u043F\u043E\u043A\u0430 " + "except exitfor finally foreach \u0432\u0441\u0435 if \u0435\u0441\u043B\u0438 in \u0432 not \u043D\u0435 or \u0438\u043B\u0438 try while \u043F\u043E\u043A\u0430 ";
    const sysres_constants = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE ";
    const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";
    const base_group_name_constants = "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";
    const decision_block_properties_constants = "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";
    const file_extension_constants = "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";
    const job_block_properties_constants = "JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY ";
    const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";
    const launching_external_applications_constants = "smHidden smMaximized smMinimized smNormal wmNo wmYes ";
    const link_kind_constants = "COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND ";
    const lock_type_constants = "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";
    const monitor_block_properties_constants = "MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";
    const notice_block_properties_constants = "NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY ";
    const object_events_constants = "dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT ";
    const object_params_constants = "CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM ";
    const other_constants = "ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";
    const privileges_constants = "PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE ";
    const pseudoreference_code_constants = "ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE ";
    const requisite_ISBCertificateType_values_constants = "CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";
    const requisite_ISBEDocStorageType_values_constants = "STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER ";
    const requisite_compType2_values_constants = "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE ";
    const requisite_name_constants = "SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE " + "SYSREQ_STAT\u0415 " + "SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID ";
    const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";
    const rule_identification_constants = "AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID ";
    const script_block_properties_constants = "SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY ";
    const subtask_block_properties_constants = "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";
    const system_component_constants = "SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS ";
    const system_dialogs_constants = "SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";
    const system_reference_names_constants = "SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS ";
    const table_name_constants = "ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME ";
    const test_constants = "TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME ";
    const using_the_dialog_windows_constants = "ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk ";
    const using_the_document_constants = "EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE ";
    const using_the_EA_and_encryption_constants = "cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate ";
    const using_the_ISBL_editor_constants = "ISBL_SYNTAX NO_SYNTAX XML_SYNTAX ";
    const wait_block_properties_constants = "WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";
    const sysres_common_constants = "SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ";
    const CONSTANTS = sysres_constants + base_constants + base_group_name_constants + decision_block_properties_constants + file_extension_constants + job_block_properties_constants + language_code_constants + launching_external_applications_constants + link_kind_constants + lock_type_constants + monitor_block_properties_constants + notice_block_properties_constants + object_events_constants + object_params_constants + other_constants + privileges_constants + pseudoreference_code_constants + requisite_ISBCertificateType_values_constants + requisite_ISBEDocStorageType_values_constants + requisite_compType2_values_constants + requisite_name_constants + result_constants + rule_identification_constants + script_block_properties_constants + subtask_block_properties_constants + system_component_constants + system_dialogs_constants + system_reference_names_constants + table_name_constants + test_constants + using_the_dialog_windows_constants + using_the_document_constants + using_the_EA_and_encryption_constants + using_the_ISBL_editor_constants + wait_block_properties_constants + sysres_common_constants;
    const TAccountType = "atUser atGroup atRole ";
    const TActionEnabledMode = "aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty ";
    const TAddPosition = "apBegin apEnd ";
    const TAlignment = "alLeft alRight ";
    const TAreaShowMode = "asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways ";
    const TCertificateInvalidationReason = "cirCommon cirRevoked ";
    const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";
    const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";
    const TCloseOnEsc = "ceISB ceAlways ceNever ";
    const TCompType = "ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob ";
    const TConditionFormat = "cfInternal cfDisplay ";
    const TConnectionIntent = "ciUnspecified ciWrite ciRead ";
    const TContentKind = "ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog ";
    const TControlType = "ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton ";
    const TCriterionContentType = "cctDate cctInteger cctNumeric cctPick cctReference cctString cctText ";
    const TCultureType = "cltInternal cltPrimary cltGUI ";
    const TDataSetEventType = "dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange ";
    const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";
    const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";
    const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";
    const TDateTimeKind = "dtkndLocal dtkndUTC ";
    const TDeaAccessRights = "arNone arView arEdit arFull ";
    const TDocumentDefaultAction = "ddaView ddaEdit ";
    const TEditMode = "emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode ";
    const TEditorCloseObservType = "ecotFile ecotProcess ";
    const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";
    const TEDocumentLockType = "edltAll edltNothing edltQuery ";
    const TEDocumentStepShowMode = "essmText essmCard ";
    const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";
    const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";
    const TEDocumentStorageType = "edstSQLServer edstFile ";
    const TEDocumentVersionSourceType = "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";
    const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";
    const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";
    const TExceptionCategory = "ecException ecWarning ecInformation ";
    const TExportedSignaturesType = "estAll estApprovingOnly ";
    const TExportedVersionType = "evtLast evtLastActive evtQuery ";
    const TFieldDataType = "fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger ";
    const TFolderType = "ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch ";
    const TGridRowHeight = "grhAuto grhX1 grhX2 grhX3 ";
    const THyperlinkType = "hltText hltRTF hltHTML ";
    const TImageFileFormat = "iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG ";
    const TImageMode = "im8bGrayscale im24bRGB im1bMonochrome ";
    const TImageType = "itBMP itJPEG itWMF itPNG ";
    const TInplaceHintKind = "ikhInformation ikhWarning ikhError ikhNoIcon ";
    const TISBLContext = "icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler ";
    const TItemShow = "isShow isHide isByUserSettings ";
    const TJobKind = "jkJob jkNotice jkControlJob ";
    const TJoinType = "jtInner jtLeft jtRight jtFull jtCross ";
    const TLabelPos = "lbpAbove lbpBelow lbpLeft lbpRight ";
    const TLicensingType = "eltPerConnection eltPerUser ";
    const TLifeCycleStageFontColor = "sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac ";
    const TLifeCycleStageFontStyle = "sfsItalic sfsStrikeout sfsNormal ";
    const TLockableDevelopmentComponentType = "ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents ";
    const TMaxRecordCountRestrictionType = "mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom ";
    const TRangeValueType = "vtEqual vtGreaterOrEqual vtLessOrEqual vtRange ";
    const TRelativeDate = "rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth ";
    const TReportDestination = "rdWindow rdFile rdPrinter ";
    const TReqDataType = "rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument ";
    const TRequisiteEventType = "reOnChange reOnChangeValues ";
    const TSBTimeType = "ttGlobal ttLocal ttUser ttSystem ";
    const TSearchShowMode = "ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal ";
    const TSelectMode = "smSelect smLike smCard ";
    const TSignatureType = "stNone stAuthenticating stApproving ";
    const TSignerContentType = "sctString sctStream ";
    const TStringsSortType = "sstAnsiSort sstNaturalSort ";
    const TStringValueType = "svtEqual svtContain ";
    const TStructuredObjectAttributeType = "soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown ";
    const TTaskAbortReason = "tarAbortByUser tarAbortByWorkflowException ";
    const TTextValueType = "tvtAllWords tvtExactPhrase tvtAnyWord ";
    const TUserObjectStatus = "usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp ";
    const TUserType = "utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected ";
    const TValuesBuildType = "btAnd btDetailAnd btOr btNotOr btOnly ";
    const TViewMode = "vmView vmSelect vmNavigation ";
    const TViewSelectionMode = "vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection ";
    const TWizardActionType = "wfatPrevious wfatNext wfatCancel wfatFinish ";
    const TWizardFormElementProperty = "wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 ";
    const TWizardFormElementType = "wfetQueryParameter wfetText wfetDelimiter wfetLabel ";
    const TWizardParamType = "wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate ";
    const TWizardStepResult = "wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal ";
    const TWizardStepType = "wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal ";
    const TWorkAccessType = "waAll waPerformers waManual ";
    const TWorkflowBlockType = "wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause ";
    const TWorkflowDataType = "wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection ";
    const TWorkImportance = "wiLow wiNormal wiHigh ";
    const TWorkRouteType = "wrtSoft wrtHard ";
    const TWorkState = "wsInit wsRunning wsDone wsControlled wsAborted wsContinued ";
    const TWorkTextBuildingMode = "wtmFull wtmFromCurrent wtmOnlyCurrent ";
    const ENUMS = TAccountType + TActionEnabledMode + TAddPosition + TAlignment + TAreaShowMode + TCertificateInvalidationReason + TCertificateType + TCheckListBoxItemState + TCloseOnEsc + TCompType + TConditionFormat + TConnectionIntent + TContentKind + TControlType + TCriterionContentType + TCultureType + TDataSetEventType + TDataSetState + TDateFormatType + TDateOffsetType + TDateTimeKind + TDeaAccessRights + TDocumentDefaultAction + TEditMode + TEditorCloseObservType + TEdmsApplicationAction + TEDocumentLockType + TEDocumentStepShowMode + TEDocumentStepVersionType + TEDocumentStorageFunction + TEDocumentStorageType + TEDocumentVersionSourceType + TEDocumentVersionState + TEncodeType + TExceptionCategory + TExportedSignaturesType + TExportedVersionType + TFieldDataType + TFolderType + TGridRowHeight + THyperlinkType + TImageFileFormat + TImageMode + TImageType + TInplaceHintKind + TISBLContext + TItemShow + TJobKind + TJoinType + TLabelPos + TLicensingType + TLifeCycleStageFontColor + TLifeCycleStageFontStyle + TLockableDevelopmentComponentType + TMaxRecordCountRestrictionType + TRangeValueType + TRelativeDate + TReportDestination + TReqDataType + TRequisiteEventType + TSBTimeType + TSearchShowMode + TSelectMode + TSignatureType + TSignerContentType + TStringsSortType + TStringValueType + TStructuredObjectAttributeType + TTaskAbortReason + TTextValueType + TUserObjectStatus + TUserType + TValuesBuildType + TViewMode + TViewSelectionMode + TWizardActionType + TWizardFormElementProperty + TWizardFormElementType + TWizardParamType + TWizardStepResult + TWizardStepType + TWorkAccessType + TWorkflowBlockType + TWorkflowDataType + TWorkImportance + TWorkRouteType + TWorkState + TWorkTextBuildingMode;
    const system_functions = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory " + "\u0410\u043D\u0430\u043B\u0438\u0437 " + "\u0411\u0430\u0437\u0430\u0414\u0430\u043D\u043D\u044B\u0445 " + "\u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C " + "\u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C\u0420\u0430\u0441\u0448 " + "\u0411\u043B\u043E\u043A\u0418\u043D\u0444\u043E " + "\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C " + "\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C\u0420\u0430\u0441\u0448 " + "\u0411\u043B\u043E\u043A\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C " + "\u0412\u0432\u043E\u0434 " + "\u0412\u0432\u043E\u0434\u041C\u0435\u043D\u044E " + "\u0412\u0435\u0434\u0421 " + "\u0412\u0435\u0434\u0421\u043F\u0440 " + "\u0412\u0435\u0440\u0445\u043D\u044F\u044F\u0413\u0440\u0430\u043D\u0438\u0446\u0430\u041C\u0430\u0441\u0441\u0438\u0432\u0430 " + "\u0412\u043D\u0435\u0448\u041F\u0440\u043E\u0433\u0440 " + "\u0412\u043E\u0441\u0441\u0442 " + "\u0412\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F\u041F\u0430\u043F\u043A\u0430 " + "\u0412\u0440\u0435\u043C\u044F " + "\u0412\u044B\u0431\u043E\u0440SQL " + "\u0412\u044B\u0431\u0440\u0430\u0442\u044C\u0417\u0430\u043F\u0438\u0441\u044C " + "\u0412\u044B\u0434\u0435\u043B\u0438\u0442\u044C\u0421\u0442\u0440 " + "\u0412\u044B\u0437\u0432\u0430\u0442\u044C " + "\u0412\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C " + "\u0412\u044B\u043F\u041F\u0440\u043E\u0433\u0440 " + "\u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0438\u0439\u0424\u0430\u0439\u043B " + "\u0413\u0440\u0443\u043F\u043F\u0430\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E " + "\u0414\u0430\u0442\u0430\u0412\u0440\u0435\u043C\u044F\u0421\u0435\u0440\u0432 " + "\u0414\u0435\u043D\u044C\u041D\u0435\u0434\u0435\u043B\u0438 " + "\u0414\u0438\u0430\u043B\u043E\u0433\u0414\u0430\u041D\u0435\u0442 " + "\u0414\u043B\u0438\u043D\u0430\u0421\u0442\u0440 " + "\u0414\u043E\u0431\u041F\u043E\u0434\u0441\u0442\u0440 " + "\u0415\u041F\u0443\u0441\u0442\u043E " + "\u0415\u0441\u043B\u0438\u0422\u043E " + "\u0415\u0427\u0438\u0441\u043B\u043E " + "\u0417\u0430\u043C\u041F\u043E\u0434\u0441\u0442\u0440 " + "\u0417\u0430\u043F\u0438\u0441\u044C\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 " + "\u0417\u043D\u0430\u0447\u041F\u043E\u043B\u044F\u0421\u043F\u0440 " + "\u0418\u0414\u0422\u0438\u043F\u0421\u043F\u0440 " + "\u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0414\u0438\u0441\u043A " + "\u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0418\u043C\u044F\u0424\u0430\u0439\u043B\u0430 " + "\u0418\u0437\u0432\u043B\u0435\u0447\u044C\u041F\u0443\u0442\u044C " + "\u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 " + "\u0418\u0437\u043C\u0414\u0430\u0442 " + "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C\u0420\u0430\u0437\u043C\u0435\u0440\u041C\u0430\u0441\u0441\u0438\u0432\u0430 " + "\u0418\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439\u041C\u0430\u0441\u0441\u0438\u0432\u0430 " + "\u0418\u043C\u044F\u041E\u0440\u0433 " + "\u0418\u043C\u044F\u041F\u043E\u043B\u044F\u0421\u043F\u0440 " + "\u0418\u043D\u0434\u0435\u043A\u0441 " + "\u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0417\u0430\u043A\u0440\u044B\u0442\u044C " + "\u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u041E\u0442\u043A\u0440\u044B\u0442\u044C " + "\u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0428\u0430\u0433 " + "\u0418\u043D\u0442\u0435\u0440\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0439\u0420\u0435\u0436\u0438\u043C " + "\u0418\u0442\u043E\u0433\u0422\u0431\u043B\u0421\u043F\u0440 " + "\u041A\u043E\u0434\u0412\u0438\u0434\u0412\u0435\u0434\u0421\u043F\u0440 " + "\u041A\u043E\u0434\u0412\u0438\u0434\u0421\u043F\u0440\u041F\u043E\u0418\u0414 " + "\u041A\u043E\u0434\u041F\u043EAnalit " + "\u041A\u043E\u0434\u0421\u0438\u043C\u0432\u043E\u043B\u0430 " + "\u041A\u043E\u0434\u0421\u043F\u0440 " + "\u041A\u043E\u043B\u041F\u043E\u0434\u0441\u0442\u0440 " + "\u041A\u043E\u043B\u041F\u0440\u043E\u043F " + "\u041A\u043E\u043D\u041C\u0435\u0441 " + "\u041A\u043E\u043D\u0441\u0442 " + "\u041A\u043E\u043D\u0441\u0442\u0415\u0441\u0442\u044C " + "\u041A\u043E\u043D\u0441\u0442\u0417\u043D\u0430\u0447 " + "\u041A\u043E\u043D\u0422\u0440\u0430\u043D " + "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0424\u0430\u0439\u043B " + "\u041A\u043E\u043F\u0438\u044F\u0421\u0442\u0440 " + "\u041A\u041F\u0435\u0440\u0438\u043E\u0434 " + "\u041A\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 " + "\u041C\u0430\u043A\u0441 " + "\u041C\u0430\u043A\u0441\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 " + "\u041C\u0430\u0441\u0441\u0438\u0432 " + "\u041C\u0435\u043D\u044E " + "\u041C\u0435\u043D\u044E\u0420\u0430\u0441\u0448 " + "\u041C\u0438\u043D " + "\u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445\u041D\u0430\u0439\u0442\u0438\u0420\u0430\u0441\u0448 " + "\u041D\u0430\u0438\u043C\u0412\u0438\u0434\u0421\u043F\u0440 " + "\u041D\u0430\u0438\u043C\u041F\u043EAnalit " + "\u041D\u0430\u0438\u043C\u0421\u043F\u0440 " + "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C\u041F\u0435\u0440\u0435\u0432\u043E\u0434\u044B\u0421\u0442\u0440\u043E\u043A " + "\u041D\u0430\u0447\u041C\u0435\u0441 " + "\u041D\u0430\u0447\u0422\u0440\u0430\u043D " + "\u041D\u0438\u0436\u043D\u044F\u044F\u0413\u0440\u0430\u043D\u0438\u0446\u0430\u041C\u0430\u0441\u0441\u0438\u0432\u0430 " + "\u041D\u043E\u043C\u0435\u0440\u0421\u043F\u0440 " + "\u041D\u041F\u0435\u0440\u0438\u043E\u0434 " + "\u041E\u043A\u043D\u043E " + "\u041E\u043A\u0440 " + "\u041E\u043A\u0440\u0443\u0436\u0435\u043D\u0438\u0435 " + "\u041E\u0442\u043B\u0418\u043D\u0444\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C " + "\u041E\u0442\u043B\u0418\u043D\u0444\u0423\u0434\u0430\u043B\u0438\u0442\u044C " + "\u041E\u0442\u0447\u0435\u0442 " + "\u041E\u0442\u0447\u0435\u0442\u0410\u043D\u0430\u043B " + "\u041E\u0442\u0447\u0435\u0442\u0418\u043D\u0442 " + "\u041F\u0430\u043F\u043A\u0430\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 " + "\u041F\u0430\u0443\u0437\u0430 " + "\u041F\u0412\u044B\u0431\u043E\u0440SQL " + "\u041F\u0435\u0440\u0435\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u044C\u0424\u0430\u0439\u043B " + "\u041F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0435 " + "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0424\u0430\u0439\u043B " + "\u041F\u043E\u0434\u0441\u0442\u0440 " + "\u041F\u043E\u0438\u0441\u043A\u041F\u043E\u0434\u0441\u0442\u0440 " + "\u041F\u043E\u0438\u0441\u043A\u0421\u0442\u0440 " + "\u041F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0418\u0414\u0422\u0430\u0431\u043B\u0438\u0446\u044B " + "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E " + "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0418\u0414 " + "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0418\u043C\u044F " + "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0421\u0442\u0430\u0442\u0443\u0441 " + "\u041F\u0440\u0435\u0440\u0432\u0430\u0442\u044C " + "\u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 " + "\u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0417\u043D\u0430\u0447 " + "\u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u0423\u0441\u043B\u043E\u0432\u0438\u0435 " + "\u0420\u0430\u0437\u0431\u0421\u0442\u0440 " + "\u0420\u0430\u0437\u043D\u0412\u0440\u0435\u043C\u044F " + "\u0420\u0430\u0437\u043D\u0414\u0430\u0442 " + "\u0420\u0430\u0437\u043D\u0414\u0430\u0442\u0430\u0412\u0440\u0435\u043C\u044F " + "\u0420\u0430\u0437\u043D\u0420\u0430\u0431\u0412\u0440\u0435\u043C\u044F " + "\u0420\u0435\u0433\u0423\u0441\u0442\u0412\u0440\u0435\u043C " + "\u0420\u0435\u0433\u0423\u0441\u0442\u0414\u0430\u0442 " + "\u0420\u0435\u0433\u0423\u0441\u0442\u0427\u0441\u043B " + "\u0420\u0435\u0434\u0422\u0435\u043A\u0441\u0442 " + "\u0420\u0435\u0435\u0441\u0442\u0440\u0417\u0430\u043F\u0438\u0441\u044C " + "\u0420\u0435\u0435\u0441\u0442\u0440\u0421\u043F\u0438\u0441\u043E\u043A\u0418\u043C\u0435\u043D\u041F\u0430\u0440\u0430\u043C " + "\u0420\u0435\u0435\u0441\u0442\u0440\u0427\u0442\u0435\u043D\u0438\u0435 " + "\u0420\u0435\u043A\u0432\u0421\u043F\u0440 " + "\u0420\u0435\u043A\u0432\u0421\u043F\u0440\u041F\u0440 " + "\u0421\u0435\u0433\u043E\u0434\u043D\u044F " + "\u0421\u0435\u0439\u0447\u0430\u0441 " + "\u0421\u0435\u0440\u0432\u0435\u0440 " + "\u0421\u0435\u0440\u0432\u0435\u0440\u041F\u0440\u043E\u0446\u0435\u0441\u0441\u0418\u0414 " + "\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0424\u0430\u0439\u043B\u0421\u0447\u0438\u0442\u0430\u0442\u044C " + "\u0421\u0436\u041F\u0440\u043E\u0431 " + "\u0421\u0438\u043C\u0432\u043E\u043B " + "\u0421\u0438\u0441\u0442\u0435\u043C\u0430\u0414\u0438\u0440\u0435\u043A\u0442\u0443\u043C\u041A\u043E\u0434 " + "\u0421\u0438\u0441\u0442\u0435\u043C\u0430\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F " + "\u0421\u0438\u0441\u0442\u0435\u043C\u0430\u041A\u043E\u0434 " + "\u0421\u043E\u0434\u0435\u0440\u0436\u0438\u0442 " + "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0417\u0430\u043A\u0440\u044B\u0442\u044C " + "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u041E\u0442\u043A\u0440\u044B\u0442\u044C " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0412\u044B\u0431\u043E\u0440\u0430\u0418\u0437\u0414\u0432\u0443\u0445\u0421\u043F\u0438\u0441\u043A\u043E\u0432 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0412\u044B\u0431\u043E\u0440\u0430\u041F\u0430\u043F\u043A\u0438 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u041E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0424\u0430\u0439\u043B\u0430 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u0424\u0430\u0439\u043B\u0430 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0417\u0430\u043F\u0440\u043E\u0441 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0418\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041A\u044D\u0448\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041C\u0430\u0441\u0441\u0438\u0432 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041E\u0431\u044A\u0435\u043A\u0442 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041E\u0442\u0447\u0435\u0442 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041F\u0430\u043F\u043A\u0443 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0438\u0441\u043E\u043A " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0438\u0441\u043E\u043A\u0421\u0442\u0440\u043E\u043A " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A " + "\u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439 " + "\u0421\u043E\u0437\u0434\u0421\u043F\u0440 " + "\u0421\u043E\u0441\u0442\u0421\u043F\u0440 " + "\u0421\u043E\u0445\u0440 " + "\u0421\u043E\u0445\u0440\u0421\u043F\u0440 " + "\u0421\u043F\u0438\u0441\u043E\u043A\u0421\u0438\u0441\u0442\u0435\u043C " + "\u0421\u043F\u0440 " + "\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A " + "\u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C " + "\u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C " + "\u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C\u0420\u0430\u0441\u0448 " + "\u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C " + "\u0421\u043F\u0440\u0418\u0437\u043C\u041D\u0430\u0431\u0414\u0430\u043D " + "\u0421\u043F\u0440\u041A\u043E\u0434 " + "\u0421\u043F\u0440\u041D\u043E\u043C\u0435\u0440 " + "\u0421\u043F\u0440\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C " + "\u0421\u043F\u0440\u041E\u0442\u043A\u0440\u044B\u0442\u044C " + "\u0421\u043F\u0440\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C " + "\u0421\u043F\u0440\u041F\u0430\u0440\u0430\u043C " + "\u0421\u043F\u0440\u041F\u043E\u043B\u0435\u0417\u043D\u0430\u0447 " + "\u0421\u043F\u0440\u041F\u043E\u043B\u0435\u0418\u043C\u044F " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432 " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0412\u0432\u0435\u0434\u0417\u043D " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041D\u043E\u0432\u044B\u0435 " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041F\u0440 " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041F\u0440\u0435\u0434\u0417\u043D " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0420\u0435\u0436\u0438\u043C " + "\u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0422\u0438\u043F\u0422\u0435\u043A\u0441\u0442 " + "\u0421\u043F\u0440\u0421\u043E\u0437\u0434\u0430\u0442\u044C " + "\u0421\u043F\u0440\u0421\u043E\u0441\u0442 " + "\u0421\u043F\u0440\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0418\u0442\u043E\u0433 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041A\u043E\u043B " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041C\u0430\u043A\u0441 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041C\u0438\u043D " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041F\u0440\u0435\u0434 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0421\u043B\u0435\u0434 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0421\u043E\u0437\u0434 " + "\u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0423\u0434 " + "\u0421\u043F\u0440\u0422\u0435\u043A\u041F\u0440\u0435\u0434\u0441\u0442 " + "\u0421\u043F\u0440\u0423\u0434\u0430\u043B\u0438\u0442\u044C " + "\u0421\u0440\u0430\u0432\u043D\u0438\u0442\u044C\u0421\u0442\u0440 " + "\u0421\u0442\u0440\u0412\u0435\u0440\u0445\u0420\u0435\u0433\u0438\u0441\u0442\u0440 " + "\u0421\u0442\u0440\u041D\u0438\u0436\u043D\u0420\u0435\u0433\u0438\u0441\u0442\u0440 " + "\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 " + "\u0421\u0443\u043C\u041F\u0440\u043E\u043F " + "\u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439 " + "\u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439\u041F\u0430\u0440\u0430\u043C " + "\u0422\u0435\u043A\u0412\u0435\u0440\u0441\u0438\u044F " + "\u0422\u0435\u043A\u041E\u0440\u0433 " + "\u0422\u043E\u0447\u043D " + "\u0422\u0440\u0430\u043D " + "\u0422\u0440\u0430\u043D\u0441\u043B\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044F " + "\u0423\u0434\u0430\u043B\u0438\u0442\u044C\u0422\u0430\u0431\u043B\u0438\u0446\u0443 " + "\u0423\u0434\u0430\u043B\u0438\u0442\u044C\u0424\u0430\u0439\u043B " + "\u0423\u0434\u0421\u043F\u0440 " + "\u0423\u0434\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 " + "\u0423\u0441\u0442 " + "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442 " + "\u0424\u0430\u0439\u043B\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0421\u0447\u0438\u0442\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0412\u0440\u0435\u043C\u044F " + "\u0424\u0430\u0439\u043B\u0412\u0440\u0435\u043C\u044F\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0412\u044B\u0431\u0440\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0417\u0430\u043D\u044F\u0442 " + "\u0424\u0430\u0439\u043B\u0417\u0430\u043F\u0438\u0441\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0418\u0441\u043A\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041C\u043E\u0436\u043D\u043E\u0427\u0438\u0442\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041E\u0442\u043A\u0440\u044B\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C " + "\u0424\u0430\u0439\u043B\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0420\u0430\u0437\u043C\u0435\u0440 " + "\u0424\u0430\u0439\u043B\u0421\u043E\u0437\u0434\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0421\u0441\u044B\u043B\u043A\u0430\u0421\u043E\u0437\u0434\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 " + "\u0424\u0430\u0439\u043B\u0421\u0447\u0438\u0442\u0430\u0442\u044C " + "\u0424\u0430\u0439\u043B\u0423\u0434\u0430\u043B\u0438\u0442\u044C " + "\u0424\u043C\u0442SQL\u0414\u0430\u0442 " + "\u0424\u043C\u0442\u0414\u0430\u0442 " + "\u0424\u043C\u0442\u0421\u0442\u0440 " + "\u0424\u043C\u0442\u0427\u0441\u043B " + "\u0424\u043E\u0440\u043C\u0430\u0442 " + "\u0426\u041C\u0430\u0441\u0441\u0438\u0432\u042D\u043B\u0435\u043C\u0435\u043D\u0442 " + "\u0426\u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445\u0420\u0435\u043A\u0432\u0438\u0437\u0438\u0442 " + "\u0426\u041F\u043E\u0434\u0441\u0442\u0440 ";
    const predefined_variables = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work " + "\u0412\u044B\u0437\u043E\u0432\u0421\u043F\u043E\u0441\u043E\u0431 " + "\u0418\u043C\u044F\u041E\u0442\u0447\u0435\u0442\u0430 " + "\u0420\u0435\u043A\u0432\u0417\u043D\u0430\u0447 ";
    const interfaces = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ";
    const BUILTIN = CONSTANTS + ENUMS;
    const CLASS = predefined_variables;
    const LITERAL = "null true false nil ";
    const NUMBERS = {
      className: "number",
      begin: hljs.NUMBER_RE,
      relevance: 0
    };
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    };
    const DOCTAGS = {
      className: "doctag",
      begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
      relevance: 0
    };
    const ISBL_LINE_COMMENT_MODE = {
      className: "comment",
      begin: "//",
      end: "$",
      relevance: 0,
      contains: [
        hljs.PHRASAL_WORDS_MODE,
        DOCTAGS
      ]
    };
    const ISBL_BLOCK_COMMENT_MODE = {
      className: "comment",
      begin: "/\\*",
      end: "\\*/",
      relevance: 0,
      contains: [
        hljs.PHRASAL_WORDS_MODE,
        DOCTAGS
      ]
    };
    const COMMENTS = { variants: [
      ISBL_LINE_COMMENT_MODE,
      ISBL_BLOCK_COMMENT_MODE
    ] };
    const KEYWORDS2 = {
      $pattern: UNDERSCORE_IDENT_RE,
      keyword: KEYWORD,
      built_in: BUILTIN,
      class: CLASS,
      literal: LITERAL
    };
    const METHODS = {
      begin: "\\.\\s*" + hljs.UNDERSCORE_IDENT_RE,
      keywords: KEYWORDS2,
      relevance: 0
    };
    const TYPES = {
      className: "type",
      begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
      end: "[ \\t]*=",
      excludeEnd: true
    };
    const VARIABLES = {
      className: "variable",
      keywords: KEYWORDS2,
      begin: UNDERSCORE_IDENT_RE,
      relevance: 0,
      contains: [
        TYPES,
        METHODS
      ]
    };
    const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";
    const TITLE_MODE = {
      className: "title",
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE,
        built_in: system_functions
      },
      begin: FUNCTION_TITLE,
      end: "\\(",
      returnBegin: true,
      excludeEnd: true
    };
    const FUNCTIONS = {
      className: "function",
      begin: FUNCTION_TITLE,
      end: "\\)$",
      returnBegin: true,
      keywords: KEYWORDS2,
      illegal: "[\\[\\]\\|\\$\\?%,~#@]",
      contains: [
        TITLE_MODE,
        METHODS,
        VARIABLES,
        STRINGS,
        NUMBERS,
        COMMENTS
      ]
    };
    return {
      name: "ISBL",
      case_insensitive: true,
      keywords: KEYWORDS2,
      illegal: "\\$|\\?|%|,|;$|~|#|@|</",
      contains: [
        FUNCTIONS,
        TYPES,
        METHODS,
        VARIABLES,
        STRINGS,
        NUMBERS,
        COMMENTS
      ]
    };
  };
  module.exports = isbl;
});

// node_modules/highlight.js/lib/languages/java.js
var require_java = __commonJS((exports, module) => {
  var recurRegex = function(re2, substitution, depth) {
    if (depth === -1)
      return "";
    return re2.replace(substitution, (_3) => {
      return recurRegex(re2, substitution, depth - 1);
    });
  };
  var java = function(hljs) {
    const regex6 = hljs.regex;
    const JAVA_IDENT_RE = "[\xC0-\u02B8a-zA-Z_$][\xC0-\u02B8a-zA-Z_$0-9]*";
    const GENERIC_IDENT_RE = JAVA_IDENT_RE + recurRegex("(?:<" + JAVA_IDENT_RE + "~~~(?:\\s*,\\s*" + JAVA_IDENT_RE + "~~~)*>)?", /~~~/g, 2);
    const MAIN_KEYWORDS = [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits"
    ];
    const BUILT_INS = [
      "super",
      "this"
    ];
    const LITERALS = [
      "false",
      "true",
      "null"
    ];
    const TYPES = [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ];
    const KEYWORDS2 = {
      keyword: MAIN_KEYWORDS,
      literal: LITERALS,
      type: TYPES,
      built_in: BUILT_INS
    };
    const ANNOTATION = {
      className: "meta",
      begin: "@" + JAVA_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: ["self"]
        }
      ]
    };
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      relevance: 0,
      contains: [hljs.C_BLOCK_COMMENT_MODE],
      endsParent: true
    };
    return {
      name: "Java",
      aliases: ["jsp"],
      keywords: KEYWORDS2,
      illegal: /<\/|#/,
      contains: [
        hljs.COMMENT("/\\*\\*", "\\*/", {
          relevance: 0,
          contains: [
            {
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }),
        {
          begin: /import java\.[a-z]+\./,
          keywords: "import",
          relevance: 2
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          begin: /"""/,
          end: /"""/,
          className: "string",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          match: [
            /\b(?:class|interface|enum|extends|implements|new)/,
            /\s+/,
            JAVA_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: /non-sealed/,
          scope: "keyword"
        },
        {
          begin: [
            regex6.concat(/(?!else)/, JAVA_IDENT_RE),
            /\s+/,
            JAVA_IDENT_RE,
            /\s+/,
            /=(?!=)/
          ],
          className: {
            1: "type",
            3: "variable",
            5: "operator"
          }
        },
        {
          begin: [
            /record/,
            /\s+/,
            JAVA_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          },
          contains: [
            PARAMS,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "new throw return else",
          relevance: 0
        },
        {
          begin: [
            "(?:" + GENERIC_IDENT_RE + "\\s+)",
            hljs.UNDERSCORE_IDENT_RE,
            /\s*(?=\()/
          ],
          className: { 2: "title.function" },
          keywords: KEYWORDS2,
          contains: [
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                ANNOTATION,
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                NUMERIC,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        NUMERIC,
        ANNOTATION
      ]
    };
  };
  var decimalDigits = "[0-9](_*[0-9])*";
  var frac = `\\.(${decimalDigits})`;
  var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
  var NUMERIC = {
    className: "number",
    variants: [
      { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${frac})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits})[fFdD]\\b` },
      { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  module.exports = java;
});

// node_modules/highlight.js/lib/languages/javascript.js
var require_javascript = __commonJS((exports, module) => {
  var javascript = function(hljs) {
    const regex6 = hljs.regex;
    const hasClosingTag = (match2, { after }) => {
      const tag = "</" + match2[0].slice(1);
      const pos = match2.input.indexOf(tag, after);
      return pos !== -1;
    };
    const IDENT_RE$1 = IDENT_RE;
    const FRAGMENT = {
      begin: "<>",
      end: "</>"
    };
    const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
    const XML_TAG = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      isTrulyOpeningTag: (match2, response) => {
        const afterMatchIndex = match2[0].length + match2.index;
        const nextChar = match2.input[afterMatchIndex];
        if (nextChar === "<" || nextChar === ",") {
          response.ignoreMatch();
          return;
        }
        if (nextChar === ">") {
          if (!hasClosingTag(match2, { after: afterMatchIndex })) {
            response.ignoreMatch();
          }
        }
        let m4;
        const afterMatch = match2.input.substring(afterMatchIndex);
        if (m4 = afterMatch.match(/^\s*=/)) {
          response.ignoreMatch();
          return;
        }
        if (m4 = afterMatch.match(/^\s+extends\s+/)) {
          if (m4.index === 0) {
            response.ignoreMatch();
            return;
          }
        }
      }
    };
    const KEYWORDS$1 = {
      $pattern: IDENT_RE,
      keyword: KEYWORDS2,
      literal: LITERALS,
      built_in: BUILT_INS,
      "variable.language": BUILT_IN_VARIABLES
    };
    const decimalDigits = "[0-9](_?[0-9])*";
    const frac = `\\.(${decimalDigits})`;
    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\b` },
        { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
        { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS$1,
      contains: []
    };
    const HTML_TEMPLATE = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "xml"
      }
    };
    const CSS_TEMPLATE = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "css"
      }
    };
    const GRAPHQL_TEMPLATE = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "graphql"
      }
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const JSDOC_COMMENT = hljs.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
      relevance: 0,
      contains: [
        {
          begin: "(?=@[A-Za-z]+)",
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            },
            {
              className: "type",
              begin: "\\{",
              end: "\\}",
              excludeEnd: true,
              excludeBegin: true,
              relevance: 0
            },
            {
              className: "variable",
              begin: IDENT_RE$1 + "(?=\\s*(-)|$)",
              endsParent: true,
              relevance: 0
            },
            {
              begin: /(?=[^\n])\s/,
              relevance: 0
            }
          ]
        }
      ]
    });
    const COMMENT = {
      className: "comment",
      variants: [
        JSDOC_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const SUBST_INTERNALS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      GRAPHQL_TEMPLATE,
      TEMPLATE_STRING,
      { match: /\$\d+/ },
      NUMBER
    ];
    SUBST.contains = SUBST_INTERNALS.concat({
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS$1,
      contains: [
        "self"
      ].concat(SUBST_INTERNALS)
    });
    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS$1,
        contains: ["self"].concat(SUBST_AND_COMMENTS)
      }
    ]);
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS$1,
      contains: PARAMS_CONTAINS
    };
    const CLASS_OR_EXTENDS = {
      variants: [
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1,
            /\s+/,
            /extends/,
            /\s+/,
            regex6.concat(IDENT_RE$1, "(", regex6.concat(/\./, IDENT_RE$1), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: regex6.either(/\bJSON/, /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/, /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/, /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),
      className: "title.class",
      keywords: {
        _: [
          ...TYPES,
          ...ERROR_TYPES
        ]
      }
    };
    const USE_STRICT = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    };
    const FUNCTION_DEFINITION = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            IDENT_RE$1,
            /(?=\s*\()/
          ]
        },
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [PARAMS],
      illegal: /%/
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function noneOf(list3) {
      return regex6.concat("(?!", list3.join("|"), ")");
    }
    const FUNCTION_CALL = {
      match: regex6.concat(/\b/, noneOf([
        ...BUILT_IN_GLOBALS,
        "super",
        "import"
      ]), IDENT_RE$1, regex6.lookahead(/\(/)),
      className: "title.function",
      relevance: 0
    };
    const PROPERTY_ACCESS = {
      begin: regex6.concat(/\./, regex6.lookahead(regex6.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),
      end: IDENT_RE$1,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    };
    const GETTER_OR_SETTER = {
      match: [
        /get|set/,
        /\s+/,
        IDENT_RE$1,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          begin: /\(\)/
        },
        PARAMS
      ]
    };
    const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs.UNDERSCORE_IDENT_RE + ")\\s*=>";
    const FUNCTION_VARIABLE = {
      match: [
        /const|var|let/,
        /\s+/,
        IDENT_RE$1,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        regex6.lookahead(FUNC_LEAD_IN_RE)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: KEYWORDS$1,
      exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
      illegal: /#(?![$_A-z])/,
      contains: [
        hljs.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        USE_STRICT,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        GRAPHQL_TEMPLATE,
        TEMPLATE_STRING,
        COMMENT,
        { match: /\$\d+/ },
        NUMBER,
        CLASS_REFERENCE,
        {
          className: "attr",
          begin: IDENT_RE$1 + regex6.lookahead(":"),
          relevance: 0
        },
        FUNCTION_VARIABLE,
        {
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            COMMENT,
            hljs.REGEXP_MODE,
            {
              className: "function",
              begin: FUNC_LEAD_IN_RE,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: hljs.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS$1,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            },
            {
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              variants: [
                { begin: FRAGMENT.begin, end: FRAGMENT.end },
                { match: XML_SELF_CLOSING },
                {
                  begin: XML_TAG.begin,
                  "on:begin": XML_TAG.isTrulyOpeningTag,
                  end: XML_TAG.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: XML_TAG.begin,
                  end: XML_TAG.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        FUNCTION_DEFINITION,
        {
          beginKeywords: "while if switch catch for"
        },
        {
          begin: "\\b(?!function)" + hljs.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          returnBegin: true,
          label: "func.def",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
          ]
        },
        {
          match: /\.\.\./,
          relevance: 0
        },
        PROPERTY_ACCESS,
        {
          match: "\\$" + IDENT_RE$1,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [PARAMS]
        },
        FUNCTION_CALL,
        UPPER_CASE_CONSTANT,
        CLASS_OR_EXTENDS,
        GETTER_OR_SETTER,
        {
          match: /\$[(.]/
        }
      ]
    };
  };
  var IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
  var KEYWORDS2 = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ];
  var LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  var TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
  ];
  var ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  var BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  var BUILT_IN_VARIABLES = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
  ];
  var BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
  module.exports = javascript;
});

// node_modules/highlight.js/lib/languages/jboss-cli.js
var require_jboss_cli = __commonJS((exports, module) => {
  var jbossCli = function(hljs) {
    const PARAM = {
      begin: /[\w-]+ *=/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: /[\w-]+/
        }
      ]
    };
    const PARAMSBLOCK = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [PARAM],
      relevance: 0
    };
    const OPERATION = {
      className: "function",
      begin: /:[\w\-.]+/,
      relevance: 0
    };
    const PATH = {
      className: "string",
      begin: /\B([\/.])[\w\-.\/=]+/
    };
    const COMMAND_PARAMS = {
      className: "params",
      begin: /--[\w\-=\/]+/
    };
    return {
      name: "JBoss CLI",
      aliases: ["wildfly-cli"],
      keywords: {
        $pattern: "[a-z-]+",
        keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
        literal: "true false"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        COMMAND_PARAMS,
        OPERATION,
        PATH,
        PARAMSBLOCK
      ]
    };
  };
  module.exports = jbossCli;
});

// node_modules/highlight.js/lib/languages/json.js
var require_json = __commonJS((exports, module) => {
  var json = function(hljs) {
    const ATTRIBUTE = {
      className: "attr",
      begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
      relevance: 1.01
    };
    const PUNCTUATION = {
      match: /[{}[\],:]/,
      className: "punctuation",
      relevance: 0
    };
    const LITERALS = [
      "true",
      "false",
      "null"
    ];
    const LITERALS_MODE = {
      scope: "literal",
      beginKeywords: LITERALS.join(" ")
    };
    return {
      name: "JSON",
      keywords: {
        literal: LITERALS
      },
      contains: [
        ATTRIBUTE,
        PUNCTUATION,
        hljs.QUOTE_STRING_MODE,
        LITERALS_MODE,
        hljs.C_NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ],
      illegal: "\\S"
    };
  };
  module.exports = json;
});

// node_modules/highlight.js/lib/languages/julia.js
var require_julia = __commonJS((exports, module) => {
  var julia = function(hljs) {
    const VARIABLE_NAME_RE = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*";
    const KEYWORD_LIST = [
      "baremodule",
      "begin",
      "break",
      "catch",
      "ccall",
      "const",
      "continue",
      "do",
      "else",
      "elseif",
      "end",
      "export",
      "false",
      "finally",
      "for",
      "function",
      "global",
      "if",
      "import",
      "in",
      "isa",
      "let",
      "local",
      "macro",
      "module",
      "quote",
      "return",
      "true",
      "try",
      "using",
      "where",
      "while"
    ];
    const LITERAL_LIST = [
      "ARGS",
      "C_NULL",
      "DEPOT_PATH",
      "ENDIAN_BOM",
      "ENV",
      "Inf",
      "Inf16",
      "Inf32",
      "Inf64",
      "InsertionSort",
      "LOAD_PATH",
      "MergeSort",
      "NaN",
      "NaN16",
      "NaN32",
      "NaN64",
      "PROGRAM_FILE",
      "QuickSort",
      "RoundDown",
      "RoundFromZero",
      "RoundNearest",
      "RoundNearestTiesAway",
      "RoundNearestTiesUp",
      "RoundToZero",
      "RoundUp",
      "VERSION|0",
      "devnull",
      "false",
      "im",
      "missing",
      "nothing",
      "pi",
      "stderr",
      "stdin",
      "stdout",
      "true",
      "undef",
      "\u03C0",
      "\u212F"
    ];
    const BUILT_IN_LIST = [
      "AbstractArray",
      "AbstractChannel",
      "AbstractChar",
      "AbstractDict",
      "AbstractDisplay",
      "AbstractFloat",
      "AbstractIrrational",
      "AbstractMatrix",
      "AbstractRange",
      "AbstractSet",
      "AbstractString",
      "AbstractUnitRange",
      "AbstractVecOrMat",
      "AbstractVector",
      "Any",
      "ArgumentError",
      "Array",
      "AssertionError",
      "BigFloat",
      "BigInt",
      "BitArray",
      "BitMatrix",
      "BitSet",
      "BitVector",
      "Bool",
      "BoundsError",
      "CapturedException",
      "CartesianIndex",
      "CartesianIndices",
      "Cchar",
      "Cdouble",
      "Cfloat",
      "Channel",
      "Char",
      "Cint",
      "Cintmax_t",
      "Clong",
      "Clonglong",
      "Cmd",
      "Colon",
      "Complex",
      "ComplexF16",
      "ComplexF32",
      "ComplexF64",
      "CompositeException",
      "Condition",
      "Cptrdiff_t",
      "Cshort",
      "Csize_t",
      "Cssize_t",
      "Cstring",
      "Cuchar",
      "Cuint",
      "Cuintmax_t",
      "Culong",
      "Culonglong",
      "Cushort",
      "Cvoid",
      "Cwchar_t",
      "Cwstring",
      "DataType",
      "DenseArray",
      "DenseMatrix",
      "DenseVecOrMat",
      "DenseVector",
      "Dict",
      "DimensionMismatch",
      "Dims",
      "DivideError",
      "DomainError",
      "EOFError",
      "Enum",
      "ErrorException",
      "Exception",
      "ExponentialBackOff",
      "Expr",
      "Float16",
      "Float32",
      "Float64",
      "Function",
      "GlobalRef",
      "HTML",
      "IO",
      "IOBuffer",
      "IOContext",
      "IOStream",
      "IdDict",
      "IndexCartesian",
      "IndexLinear",
      "IndexStyle",
      "InexactError",
      "InitError",
      "Int",
      "Int128",
      "Int16",
      "Int32",
      "Int64",
      "Int8",
      "Integer",
      "InterruptException",
      "InvalidStateException",
      "Irrational",
      "KeyError",
      "LinRange",
      "LineNumberNode",
      "LinearIndices",
      "LoadError",
      "MIME",
      "Matrix",
      "Method",
      "MethodError",
      "Missing",
      "MissingException",
      "Module",
      "NTuple",
      "NamedTuple",
      "Nothing",
      "Number",
      "OrdinalRange",
      "OutOfMemoryError",
      "OverflowError",
      "Pair",
      "PartialQuickSort",
      "PermutedDimsArray",
      "Pipe",
      "ProcessFailedException",
      "Ptr",
      "QuoteNode",
      "Rational",
      "RawFD",
      "ReadOnlyMemoryError",
      "Real",
      "ReentrantLock",
      "Ref",
      "Regex",
      "RegexMatch",
      "RoundingMode",
      "SegmentationFault",
      "Set",
      "Signed",
      "Some",
      "StackOverflowError",
      "StepRange",
      "StepRangeLen",
      "StridedArray",
      "StridedMatrix",
      "StridedVecOrMat",
      "StridedVector",
      "String",
      "StringIndexError",
      "SubArray",
      "SubString",
      "SubstitutionString",
      "Symbol",
      "SystemError",
      "Task",
      "TaskFailedException",
      "Text",
      "TextDisplay",
      "Timer",
      "Tuple",
      "Type",
      "TypeError",
      "TypeVar",
      "UInt",
      "UInt128",
      "UInt16",
      "UInt32",
      "UInt64",
      "UInt8",
      "UndefInitializer",
      "UndefKeywordError",
      "UndefRefError",
      "UndefVarError",
      "Union",
      "UnionAll",
      "UnitRange",
      "Unsigned",
      "Val",
      "Vararg",
      "VecElement",
      "VecOrMat",
      "Vector",
      "VersionNumber",
      "WeakKeyDict",
      "WeakRef"
    ];
    const KEYWORDS2 = {
      $pattern: VARIABLE_NAME_RE,
      keyword: KEYWORD_LIST,
      literal: LITERAL_LIST,
      built_in: BUILT_IN_LIST
    };
    const DEFAULT = {
      keywords: KEYWORDS2,
      illegal: /<\//
    };
    const NUMBER = {
      className: "number",
      begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
      relevance: 0
    };
    const CHAR = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };
    const INTERPOLATION = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      keywords: KEYWORDS2
    };
    const INTERPOLATED_VARIABLE = {
      className: "variable",
      begin: "\\$" + VARIABLE_NAME_RE
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        INTERPOLATION,
        INTERPOLATED_VARIABLE
      ],
      variants: [
        {
          begin: /\w*"""/,
          end: /"""\w*/,
          relevance: 10
        },
        {
          begin: /\w*"/,
          end: /"\w*/
        }
      ]
    };
    const COMMAND = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        INTERPOLATION,
        INTERPOLATED_VARIABLE
      ],
      begin: "`",
      end: "`"
    };
    const MACROCALL = {
      className: "meta",
      begin: "@" + VARIABLE_NAME_RE
    };
    const COMMENT = {
      className: "comment",
      variants: [
        {
          begin: "#=",
          end: "=#",
          relevance: 10
        },
        {
          begin: "#",
          end: "$"
        }
      ]
    };
    DEFAULT.name = "Julia";
    DEFAULT.contains = [
      NUMBER,
      CHAR,
      STRING,
      COMMAND,
      MACROCALL,
      COMMENT,
      hljs.HASH_COMMENT_MODE,
      {
        className: "keyword",
        begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
      },
      { begin: /<:/ }
    ];
    INTERPOLATION.contains = DEFAULT.contains;
    return DEFAULT;
  };
  module.exports = julia;
});

// node_modules/highlight.js/lib/languages/julia-repl.js
var require_julia_repl = __commonJS((exports, module) => {
  var juliaRepl = function(hljs) {
    return {
      name: "Julia REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^julia>/,
          relevance: 10,
          starts: {
            end: /^(?![ ]{6})/,
            subLanguage: "julia"
          }
        }
      ],
      aliases: ["jldoctest"]
    };
  };
  module.exports = juliaRepl;
});

// node_modules/highlight.js/lib/languages/kotlin.js
var require_kotlin = __commonJS((exports, module) => {
  var kotlin = function(hljs) {
    const KEYWORDS2 = {
      keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
      built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
      literal: "true false null"
    };
    const KEYWORDS_WITH_LABEL = {
      className: "keyword",
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ] }
    };
    const LABEL = {
      className: "symbol",
      begin: hljs.UNDERSCORE_IDENT_RE + "@"
    };
    const SUBST = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      contains: [hljs.C_NUMBER_MODE]
    };
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + hljs.UNDERSCORE_IDENT_RE
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""(?=[^"])',
          contains: [
            VARIABLE,
            SUBST
          ]
        },
        {
          begin: "\'",
          end: "\'",
          illegal: /\n/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"',
          illegal: /\n/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VARIABLE,
            SUBST
          ]
        }
      ]
    };
    SUBST.contains.push(STRING);
    const ANNOTATION_USE_SITE = {
      className: "meta",
      begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + hljs.UNDERSCORE_IDENT_RE + ")?"
    };
    const ANNOTATION = {
      className: "meta",
      begin: "@" + hljs.UNDERSCORE_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            hljs.inherit(STRING, { className: "string" }),
            "self"
          ]
        }
      ]
    };
    const KOTLIN_NUMBER_MODE = NUMERIC;
    const KOTLIN_NESTED_COMMENT = hljs.COMMENT("/\\*", "\\*/", { contains: [hljs.C_BLOCK_COMMENT_MODE] });
    const KOTLIN_PAREN_TYPE = { variants: [
      {
        className: "type",
        begin: hljs.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
      }
    ] };
    const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
    KOTLIN_PAREN_TYPE2.variants[1].contains = [KOTLIN_PAREN_TYPE];
    KOTLIN_PAREN_TYPE.variants[1].contains = [KOTLIN_PAREN_TYPE2];
    return {
      name: "Kotlin",
      aliases: [
        "kt",
        "kts"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT("/\\*\\*", "\\*/", {
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }),
        hljs.C_LINE_COMMENT_MODE,
        KOTLIN_NESTED_COMMENT,
        KEYWORDS_WITH_LABEL,
        LABEL,
        ANNOTATION_USE_SITE,
        ANNOTATION,
        {
          className: "function",
          beginKeywords: "fun",
          end: "[(]|$",
          returnBegin: true,
          excludeEnd: true,
          keywords: KEYWORDS2,
          relevance: 5,
          contains: [
            {
              begin: hljs.UNDERSCORE_IDENT_RE + "\\s*\\(",
              returnBegin: true,
              relevance: 0,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "type",
              begin: /</,
              end: />/,
              keywords: "reified",
              relevance: 0
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: true,
                  contains: [
                    KOTLIN_PAREN_TYPE,
                    hljs.C_LINE_COMMENT_MODE,
                    KOTLIN_NESTED_COMMENT
                  ],
                  relevance: 0
                },
                hljs.C_LINE_COMMENT_MODE,
                KOTLIN_NESTED_COMMENT,
                ANNOTATION_USE_SITE,
                ANNOTATION,
                STRING,
                hljs.C_NUMBER_MODE
              ]
            },
            KOTLIN_NESTED_COMMENT
          ]
        },
        {
          begin: [
            /class|interface|trait/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          beginScope: {
            3: "title.class"
          },
          keywords: "class interface trait",
          end: /[:\{(]|$/,
          excludeEnd: true,
          illegal: "extends implements",
          contains: [
            { beginKeywords: "public protected internal private constructor" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "type",
              begin: /</,
              end: />/,
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            },
            {
              className: "type",
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: true,
              returnEnd: true
            },
            ANNOTATION_USE_SITE,
            ANNOTATION
          ]
        },
        STRING,
        {
          className: "meta",
          begin: "^#!/usr/bin/env",
          end: "$",
          illegal: "\n"
        },
        KOTLIN_NUMBER_MODE
      ]
    };
  };
  var decimalDigits = "[0-9](_*[0-9])*";
  var frac = `\\.(${decimalDigits})`;
  var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
  var NUMERIC = {
    className: "number",
    variants: [
      { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${frac})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits})[fFdD]\\b` },
      { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  module.exports = kotlin;
});

// node_modules/highlight.js/lib/languages/lasso.js
var require_lasso = __commonJS((exports, module) => {
  var lasso = function(hljs) {
    const LASSO_IDENT_RE = "[a-zA-Z_][\\w.]*";
    const LASSO_ANGLE_RE = "<\\?(lasso(script)?|=)";
    const LASSO_CLOSE_RE = "\\]|\\?>";
    const LASSO_KEYWORDS = {
      $pattern: LASSO_IDENT_RE + "|&[lg]t;",
      literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
      built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
      keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
    };
    const HTML_COMMENT = hljs.COMMENT("<!--", "-->", { relevance: 0 });
    const LASSO_NOPROCESS = {
      className: "meta",
      begin: "\\[noprocess\\]",
      starts: {
        end: "\\[/noprocess\\]",
        returnEnd: true,
        contains: [HTML_COMMENT]
      }
    };
    const LASSO_START = {
      className: "meta",
      begin: "\\[/noprocess|" + LASSO_ANGLE_RE
    };
    const LASSO_DATAMEMBER = {
      className: "symbol",
      begin: "\'" + LASSO_IDENT_RE + "\'"
    };
    const LASSO_CODE = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + "|(-?infinity|NaN)\\b" }),
      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "string",
        begin: "`",
        end: "`"
      },
      {
        variants: [
          { begin: "[#$]" + LASSO_IDENT_RE },
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      },
      {
        className: "type",
        begin: "::\\s*",
        end: LASSO_IDENT_RE,
        illegal: "\\W"
      },
      {
        className: "params",
        variants: [
          {
            begin: "-(?!infinity)" + LASSO_IDENT_RE,
            relevance: 0
          },
          { begin: "(\\.\\.\\.)" }
        ]
      },
      {
        begin: /(->|\.)\s*/,
        relevance: 0,
        contains: [LASSO_DATAMEMBER]
      },
      {
        className: "class",
        beginKeywords: "define",
        returnEnd: true,
        end: "\\(|=>",
        contains: [hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + "(=(?!>))?|[-+*/%](?!>)" })]
      }
    ];
    return {
      name: "Lasso",
      aliases: [
        "ls",
        "lassoscript"
      ],
      case_insensitive: true,
      keywords: LASSO_KEYWORDS,
      contains: [
        {
          className: "meta",
          begin: LASSO_CLOSE_RE,
          relevance: 0,
          starts: {
            end: "\\[|" + LASSO_ANGLE_RE,
            returnEnd: true,
            relevance: 0,
            contains: [HTML_COMMENT]
          }
        },
        LASSO_NOPROCESS,
        LASSO_START,
        {
          className: "meta",
          begin: "\\[no_square_brackets",
          starts: {
            end: "\\[/no_square_brackets\\]",
            keywords: LASSO_KEYWORDS,
            contains: [
              {
                className: "meta",
                begin: LASSO_CLOSE_RE,
                relevance: 0,
                starts: {
                  end: "\\[noprocess\\]|" + LASSO_ANGLE_RE,
                  returnEnd: true,
                  contains: [HTML_COMMENT]
                }
              },
              LASSO_NOPROCESS,
              LASSO_START
            ].concat(LASSO_CODE)
          }
        },
        {
          className: "meta",
          begin: "\\[",
          relevance: 0
        },
        {
          className: "meta",
          begin: "^#!",
          end: "lasso9$",
          relevance: 10
        }
      ].concat(LASSO_CODE)
    };
  };
  module.exports = lasso;
});

// node_modules/highlight.js/lib/languages/latex.js
var require_latex = __commonJS((exports, module) => {
  var latex = function(hljs) {
    const regex6 = hljs.regex;
    const KNOWN_CONTROL_WORDS = regex6.either(...[
      "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
      "Provides(?:Expl)?(?:Package|Class|File)",
      "(?:DeclareOption|ProcessOptions)",
      "(?:documentclass|usepackage|input|include)",
      "makeat(?:letter|other)",
      "ExplSyntax(?:On|Off)",
      "(?:new|renew|provide)?command",
      "(?:re)newenvironment",
      "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
      "(?:New|Renew|Provide|Declare)DocumentEnvironment",
      "(?:(?:e|g|x)?def|let)",
      "(?:begin|end)",
      "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
      "caption",
      "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
      "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
      "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
      "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
      "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
      "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
    ].map((word) => word + "(?![a-zA-Z@:_])"));
    const L3_REGEX = new RegExp([
      "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
      "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
      "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
      "use(?:_i)?:[a-zA-Z]*",
      "(?:else|fi|or):",
      "(?:if|cs|exp):w",
      "(?:hbox|vbox):n",
      "::[a-zA-Z]_unbraced",
      "::[a-zA-Z:]"
    ].map((pattern) => pattern + "(?![a-zA-Z:_])").join("|"));
    const L2_VARIANTS = [
      { begin: /[a-zA-Z@]+/ },
      { begin: /[^a-zA-Z@]?/ }
    ];
    const DOUBLE_CARET_VARIANTS = [
      { begin: /\^{6}[0-9a-f]{6}/ },
      { begin: /\^{5}[0-9a-f]{5}/ },
      { begin: /\^{4}[0-9a-f]{4}/ },
      { begin: /\^{3}[0-9a-f]{3}/ },
      { begin: /\^{2}[0-9a-f]{2}/ },
      { begin: /\^{2}[\u0000-\u007f]/ }
    ];
    const CONTROL_SEQUENCE = {
      className: "keyword",
      begin: /\\/,
      relevance: 0,
      contains: [
        {
          endsParent: true,
          begin: KNOWN_CONTROL_WORDS
        },
        {
          endsParent: true,
          begin: L3_REGEX
        },
        {
          endsParent: true,
          variants: DOUBLE_CARET_VARIANTS
        },
        {
          endsParent: true,
          relevance: 0,
          variants: L2_VARIANTS
        }
      ]
    };
    const MACRO_PARAM = {
      className: "params",
      relevance: 0,
      begin: /#+\d?/
    };
    const DOUBLE_CARET_CHAR = {
      variants: DOUBLE_CARET_VARIANTS
    };
    const SPECIAL_CATCODE = {
      className: "built_in",
      relevance: 0,
      begin: /[$&^_]/
    };
    const MAGIC_COMMENT = {
      className: "meta",
      begin: /% ?!(T[eE]X|tex|BIB|bib)/,
      end: "$",
      relevance: 10
    };
    const COMMENT = hljs.COMMENT("%", "$", { relevance: 0 });
    const EVERYTHING_BUT_VERBATIM = [
      CONTROL_SEQUENCE,
      MACRO_PARAM,
      DOUBLE_CARET_CHAR,
      SPECIAL_CATCODE,
      MAGIC_COMMENT,
      COMMENT
    ];
    const BRACE_GROUP_NO_VERBATIM = {
      begin: /\{/,
      end: /\}/,
      relevance: 0,
      contains: [
        "self",
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
    const ARGUMENT_BRACES = hljs.inherit(BRACE_GROUP_NO_VERBATIM, {
      relevance: 0,
      endsParent: true,
      contains: [
        BRACE_GROUP_NO_VERBATIM,
        ...EVERYTHING_BUT_VERBATIM
      ]
    });
    const ARGUMENT_BRACKETS = {
      begin: /\[/,
      end: /\]/,
      endsParent: true,
      relevance: 0,
      contains: [
        BRACE_GROUP_NO_VERBATIM,
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
    const SPACE_GOBBLER = {
      begin: /\s+/,
      relevance: 0
    };
    const ARGUMENT_M = [ARGUMENT_BRACES];
    const ARGUMENT_O = [ARGUMENT_BRACKETS];
    const ARGUMENT_AND_THEN = function(arg, starts_mode) {
      return {
        contains: [SPACE_GOBBLER],
        starts: {
          relevance: 0,
          contains: arg,
          starts: starts_mode
        }
      };
    };
    const CSNAME = function(csname, starts_mode) {
      return {
        begin: "\\\\" + csname + "(?![a-zA-Z@:_])",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\" + csname
        },
        relevance: 0,
        contains: [SPACE_GOBBLER],
        starts: starts_mode
      };
    };
    const BEGIN_ENV = function(envname, starts_mode) {
      return hljs.inherit({
        begin: "\\\\begin(?=[ \t]*(\\r?\\n[ \t]*)?\\{" + envname + "\\})",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\begin"
        },
        relevance: 0
      }, ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode));
    };
    const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
      return hljs.END_SAME_AS_BEGIN({
        className: innerName,
        begin: /(.|\r?\n)/,
        end: /(.|\r?\n)/,
        excludeBegin: true,
        excludeEnd: true,
        endsParent: true
      });
    };
    const VERBATIM_DELIMITED_ENV = function(envname) {
      return {
        className: "string",
        end: "(?=\\\\end\\{" + envname + "\\})"
      };
    };
    const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
      return {
        relevance: 0,
        begin: /\{/,
        starts: {
          endsParent: true,
          contains: [
            {
              className: innerName,
              end: /(?=\})/,
              endsParent: true,
              contains: [
                {
                  begin: /\{/,
                  end: /\}/,
                  relevance: 0,
                  contains: ["self"]
                }
              ]
            }
          ]
        }
      };
    };
    const VERBATIM = [
      ...[
        "verb",
        "lstinline"
      ].map((csname) => CSNAME(csname, { contains: [VERBATIM_DELIMITED_EQUAL()] })),
      CSNAME("mint", ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [VERBATIM_DELIMITED_EQUAL()] })),
      CSNAME("mintinline", ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [
        VERBATIM_DELIMITED_BRACES(),
        VERBATIM_DELIMITED_EQUAL()
      ] })),
      CSNAME("url", { contains: [
        VERBATIM_DELIMITED_BRACES("link"),
        VERBATIM_DELIMITED_BRACES("link")
      ] }),
      CSNAME("hyperref", { contains: [VERBATIM_DELIMITED_BRACES("link")] }),
      CSNAME("href", ARGUMENT_AND_THEN(ARGUMENT_O, { contains: [VERBATIM_DELIMITED_BRACES("link")] })),
      ...[].concat(...[
        "",
        "\\*"
      ].map((suffix) => [
        BEGIN_ENV("verbatim" + suffix, VERBATIM_DELIMITED_ENV("verbatim" + suffix)),
        BEGIN_ENV("filecontents" + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("filecontents" + suffix))),
        ...[
          "",
          "B",
          "L"
        ].map((prefix) => BEGIN_ENV(prefix + "Verbatim" + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + "Verbatim" + suffix))))
      ])),
      BEGIN_ENV("minted", ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("minted"))))
    ];
    return {
      name: "LaTeX",
      aliases: ["tex"],
      contains: [
        ...VERBATIM,
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
  };
  module.exports = latex;
});

// node_modules/highlight.js/lib/languages/ldif.js
var require_ldif = __commonJS((exports, module) => {
  var ldif = function(hljs) {
    return {
      name: "LDIF",
      contains: [
        {
          className: "attribute",
          match: "^dn(?=:)",
          relevance: 10
        },
        {
          className: "attribute",
          match: "^\\w+(?=:)"
        },
        {
          className: "literal",
          match: "^-"
        },
        hljs.HASH_COMMENT_MODE
      ]
    };
  };
  module.exports = ldif;
});

// node_modules/highlight.js/lib/languages/leaf.js
var require_leaf = __commonJS((exports, module) => {
  var leaf = function(hljs) {
    const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;
    const LITERALS = [
      "true",
      "false",
      "in"
    ];
    const PARAMS = {
      scope: "params",
      begin: /\(/,
      end: /\)(?=\:?)/,
      endsParent: true,
      relevance: 7,
      contains: [
        {
          scope: "string",
          begin: '"',
          end: '"'
        },
        {
          scope: "keyword",
          match: LITERALS.join("|")
        },
        {
          scope: "variable",
          match: /[A-Za-z_][A-Za-z_0-9]*/
        },
        {
          scope: "operator",
          match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
        }
      ]
    };
    const INSIDE_DISPATCH = {
      match: [
        IDENT,
        /(?=\()/
      ],
      scope: {
        1: "keyword"
      },
      contains: [PARAMS]
    };
    PARAMS.contains.unshift(INSIDE_DISPATCH);
    return {
      name: "Leaf",
      contains: [
        {
          match: [
            /#+/,
            IDENT,
            /(?=\()/
          ],
          scope: {
            1: "punctuation",
            2: "keyword"
          },
          starts: {
            contains: [
              {
                match: /\:/,
                scope: "punctuation"
              }
            ]
          },
          contains: [
            PARAMS
          ]
        },
        {
          match: [
            /#+/,
            IDENT,
            /:?/
          ],
          scope: {
            1: "punctuation",
            2: "keyword",
            3: "punctuation"
          }
        }
      ]
    };
  };
  module.exports = leaf;
});

// node_modules/highlight.js/lib/languages/less.js
var require_less = __commonJS((exports, module) => {
  var less = function(hljs) {
    const modes = MODES(hljs);
    const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;
    const AT_MODIFIERS = "and or not only";
    const IDENT_RE = "[\\w-]+";
    const INTERP_IDENT_RE = "(" + IDENT_RE + "|@\\{" + IDENT_RE + "\\})";
    const RULES = [];
    const VALUE_MODES = [];
    const STRING_MODE = function(c2) {
      return {
        className: "string",
        begin: "~?" + c2 + ".*?" + c2
      };
    };
    const IDENT_MODE = function(name, begin, relevance) {
      return {
        className: name,
        begin,
        relevance
      };
    };
    const AT_KEYWORDS = {
      $pattern: /[a-z-]+/,
      keyword: AT_MODIFIERS,
      attribute: MEDIA_FEATURES.join(" ")
    };
    const PARENS_MODE = {
      begin: "\\(",
      end: "\\)",
      contains: VALUE_MODES,
      keywords: AT_KEYWORDS,
      relevance: 0
    };
    VALUE_MODES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE("'"), STRING_MODE('"'), modes.CSS_NUMBER_MODE, {
      begin: "(url|data-uri)\\(",
      starts: {
        className: "string",
        end: "[\\)\\n]",
        excludeEnd: true
      }
    }, modes.HEXCOLOR, PARENS_MODE, IDENT_MODE("variable", "@@?" + IDENT_RE, 10), IDENT_MODE("variable", "@\\{" + IDENT_RE + "\\}"), IDENT_MODE("built_in", "~?`[^`]*?`"), {
      className: "attribute",
      begin: IDENT_RE + "\\s*:",
      end: ":",
      returnBegin: true,
      excludeEnd: true
    }, modes.IMPORTANT, { beginKeywords: "and not" }, modes.FUNCTION_DISPATCH);
    const VALUE_WITH_RULESETS = VALUE_MODES.concat({
      begin: /\{/,
      end: /\}/,
      contains: RULES
    });
    const MIXIN_GUARD_MODE = {
      beginKeywords: "when",
      endsWithParent: true,
      contains: [{ beginKeywords: "and not" }].concat(VALUE_MODES)
    };
    const RULE_MODE = {
      begin: INTERP_IDENT_RE + "\\s*:",
      returnBegin: true,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b",
          end: /(?=:)/,
          starts: {
            endsWithParent: true,
            illegal: "[<=$]",
            relevance: 0,
            contains: VALUE_MODES
          }
        }
      ]
    };
    const AT_RULE_MODE = {
      className: "keyword",
      begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
      starts: {
        end: "[;{}]",
        keywords: AT_KEYWORDS,
        returnEnd: true,
        contains: VALUE_MODES,
        relevance: 0
      }
    };
    const VAR_RULE_MODE = {
      className: "variable",
      variants: [
        {
          begin: "@" + IDENT_RE + "\\s*:",
          relevance: 15
        },
        { begin: "@" + IDENT_RE }
      ],
      starts: {
        end: "[;}]",
        returnEnd: true,
        contains: VALUE_WITH_RULESETS
      }
    };
    const SELECTOR_MODE = {
      variants: [
        {
          begin: "[\\.#:&\\[>]",
          end: "[;{}]"
        },
        {
          begin: INTERP_IDENT_RE,
          end: /\{/
        }
      ],
      returnBegin: true,
      returnEnd: true,
      illegal: '[<=\'$"]',
      relevance: 0,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        MIXIN_GUARD_MODE,
        IDENT_MODE("keyword", "all\\b"),
        IDENT_MODE("variable", "@\\{" + IDENT_RE + "\\}"),
        {
          begin: "\\b(" + TAGS.join("|") + ")\\b",
          className: "selector-tag"
        },
        modes.CSS_NUMBER_MODE,
        IDENT_MODE("selector-tag", INTERP_IDENT_RE, 0),
        IDENT_MODE("selector-id", "#" + INTERP_IDENT_RE),
        IDENT_MODE("selector-class", "\\." + INTERP_IDENT_RE, 0),
        IDENT_MODE("selector-tag", "&", 0),
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          begin: ":(" + PSEUDO_CLASSES.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + PSEUDO_ELEMENTS.join("|") + ")"
        },
        {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          contains: VALUE_WITH_RULESETS
        },
        { begin: "!important" },
        modes.FUNCTION_DISPATCH
      ]
    };
    const PSEUDO_SELECTOR_MODE = {
      begin: IDENT_RE + ":(:)?" + `(${PSEUDO_SELECTORS$1.join("|")})`,
      returnBegin: true,
      contains: [SELECTOR_MODE]
    };
    RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, PSEUDO_SELECTOR_MODE, RULE_MODE, SELECTOR_MODE, MIXIN_GUARD_MODE, modes.FUNCTION_DISPATCH);
    return {
      name: "Less",
      case_insensitive: true,
      illegal: '[=>\'/<($"]',
      contains: RULES
    };
  };
  var MODES = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  var TAGS = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  var MEDIA_FEATURES = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ];
  var PSEUDO_CLASSES = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    "host",
    "host-context",
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    "lang",
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    "nth-child",
    "nth-col",
    "nth-last-child",
    "nth-last-col",
    "nth-last-of-type",
    "nth-of-type",
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
  ];
  var PSEUDO_ELEMENTS = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ];
  var ATTRIBUTES = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
  ].reverse();
  var PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS);
  module.exports = less;
});

// node_modules/highlight.js/lib/languages/lisp.js
var require_lisp = __commonJS((exports, module) => {
  var lisp = function(hljs) {
    const LISP_IDENT_RE = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*";
    const MEC_RE = "\\|[^]*?\\|";
    const LISP_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?";
    const LITERAL = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    };
    const NUMBER = {
      className: "number",
      variants: [
        {
          begin: LISP_SIMPLE_NUMBER_RE,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + LISP_SIMPLE_NUMBER_RE + " +" + LISP_SIMPLE_NUMBER_RE,
          end: "\\)"
        }
      ]
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMENT = hljs.COMMENT(";", "$", { relevance: 0 });
    const VARIABLE = {
      begin: "\\*",
      end: "\\*"
    };
    const KEYWORD = {
      className: "symbol",
      begin: "[:&]" + LISP_IDENT_RE
    };
    const IDENT = {
      begin: LISP_IDENT_RE,
      relevance: 0
    };
    const MEC = { begin: MEC_RE };
    const QUOTED_LIST = {
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        LITERAL,
        STRING,
        NUMBER,
        IDENT
      ]
    };
    const QUOTED = {
      contains: [
        NUMBER,
        STRING,
        VARIABLE,
        KEYWORD,
        QUOTED_LIST,
        IDENT
      ],
      variants: [
        {
          begin: "[\'`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "\'" + MEC_RE }
      ]
    };
    const QUOTED_ATOM = { variants: [
      { begin: "\'" + LISP_IDENT_RE },
      { begin: "#\'" + LISP_IDENT_RE + "(::" + LISP_IDENT_RE + ")*" }
    ] };
    const LIST = {
      begin: "\\(\\s*",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    LIST.contains = [
      {
        className: "name",
        variants: [
          {
            begin: LISP_IDENT_RE,
            relevance: 0
          },
          { begin: MEC_RE }
        ]
      },
      BODY
    ];
    BODY.contains = [
      QUOTED,
      QUOTED_ATOM,
      LIST,
      LITERAL,
      NUMBER,
      STRING,
      COMMENT,
      VARIABLE,
      KEYWORD,
      MEC,
      IDENT
    ];
    return {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        NUMBER,
        hljs.SHEBANG(),
        LITERAL,
        STRING,
        COMMENT,
        QUOTED,
        QUOTED_ATOM,
        LIST,
        IDENT
      ]
    };
  };
  module.exports = lisp;
});

// node_modules/highlight.js/lib/languages/livecodeserver.js
var require_livecodeserver = __commonJS((exports, module) => {
  var livecodeserver = function(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)" },
        { begin: "\\$_[A-Z]+" }
      ],
      relevance: 0
    };
    const COMMENT_MODES = [
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT("--", "$"),
      hljs.COMMENT("[^:]//", "$")
    ];
    const TITLE1 = hljs.inherit(hljs.TITLE_MODE, { variants: [
      { begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*" },
      { begin: "\\b_[a-z0-9\\-]+" }
    ] });
    const TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: "\\b([A-Za-z0-9_\\-]+)\\b" });
    return {
      name: "LiveCode",
      case_insensitive: false,
      keywords: {
        keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
        literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
        built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
      },
      contains: [
        VARIABLE,
        {
          className: "keyword",
          begin: "\\bend\\sif\\b"
        },
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            VARIABLE,
            TITLE2,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            TITLE1
          ]
        },
        {
          className: "function",
          begin: "\\bend\\s+",
          end: "$",
          keywords: "end",
          contains: [
            TITLE2,
            TITLE1
          ],
          relevance: 0
        },
        {
          beginKeywords: "command on",
          end: "$",
          contains: [
            VARIABLE,
            TITLE2,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            TITLE1
          ]
        },
        {
          className: "meta",
          variants: [
            {
              begin: "<\\?(rev|lc|livecode)",
              relevance: 10
            },
            { begin: "<\\?" },
            { begin: "\\?>" }
          ]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE,
        TITLE1
      ].concat(COMMENT_MODES),
      illegal: ";$|^\\[|^=|&|\\{"
    };
  };
  module.exports = livecodeserver;
});

// node_modules/highlight.js/lib/languages/livescript.js
var require_livescript = __commonJS((exports, module) => {
  var livescript = function(hljs) {
    const LIVESCRIPT_BUILT_INS = [
      "npm",
      "print"
    ];
    const LIVESCRIPT_LITERALS = [
      "yes",
      "no",
      "on",
      "off",
      "it",
      "that",
      "void"
    ];
    const LIVESCRIPT_KEYWORDS = [
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "it",
      "that",
      "otherwise",
      "from",
      "to",
      "til",
      "fallthrough",
      "case",
      "enum",
      "native",
      "list",
      "map",
      "__hasProp",
      "__extends",
      "__slice",
      "__bind",
      "__indexOf"
    ];
    const KEYWORDS$1 = {
      keyword: KEYWORDS2.concat(LIVESCRIPT_KEYWORDS),
      literal: LITERALS.concat(LIVESCRIPT_LITERALS),
      built_in: BUILT_INS.concat(LIVESCRIPT_BUILT_INS)
    };
    const JS_IDENT_RE = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*";
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS$1
    };
    const SUBST_SIMPLE = {
      className: "subst",
      begin: /#[A-Za-z$_]/,
      end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
      keywords: KEYWORDS$1
    };
    const EXPRESSIONS = [
      hljs.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
        relevance: 0,
        starts: {
          end: "(\\s*/)?",
          relevance: 0
        }
      },
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              SUBST_SIMPLE
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              SUBST_SIMPLE
            ]
          },
          {
            begin: /\\/,
            end: /(\s|$)/,
            excludeEnd: true
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "//",
            end: "//[gim]*",
            contains: [
              SUBST,
              hljs.HASH_COMMENT_MODE
            ]
          },
          {
            begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
          }
        ]
      },
      { begin: "@" + JS_IDENT_RE },
      {
        begin: "``",
        end: "``",
        excludeBegin: true,
        excludeEnd: true,
        subLanguage: "javascript"
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      returnBegin: true,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS$1,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    const SYMBOLS = { begin: "(#=>|=>|\\|>>|-?->|!->)" };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          JS_IDENT_RE,
          /\s+extends\s+/,
          JS_IDENT_RE
        ] },
        { match: [
          /class\s+/,
          JS_IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS$1
    };
    return {
      name: "LiveScript",
      aliases: ["ls"],
      keywords: KEYWORDS$1,
      illegal: /\/\*/,
      contains: EXPRESSIONS.concat([
        hljs.COMMENT("\\/\\*", "\\*\\/"),
        hljs.HASH_COMMENT_MODE,
        SYMBOLS,
        {
          className: "function",
          contains: [
            TITLE,
            PARAMS
          ],
          returnBegin: true,
          variants: [
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
              end: "->\\*?"
            },
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
              end: "[-~]{1,2}>\\*?"
            },
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
              end: "!?[-~]{1,2}>\\*?"
            }
          ]
        },
        CLASS_DEFINITION,
        {
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  };
  var KEYWORDS2 = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ];
  var LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  var TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
  ];
  var ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  var BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  var BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
  module.exports = livescript;
});

// node_modules/highlight.js/lib/languages/llvm.js
var require_llvm = __commonJS((exports, module) => {
  var llvm = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = /([-a-zA-Z$._][\w$.-]*)/;
    const TYPE = {
      className: "type",
      begin: /\bi\d+(?=\s|\b)/
    };
    const OPERATOR = {
      className: "operator",
      relevance: 0,
      begin: /=/
    };
    const PUNCTUATION = {
      className: "punctuation",
      relevance: 0,
      begin: /,/
    };
    const NUMBER = {
      className: "number",
      variants: [
        { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
        { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
      ],
      relevance: 0
    };
    const LABEL = {
      className: "symbol",
      variants: [
        { begin: /^\s*[a-z]+:/ }
      ],
      relevance: 0
    };
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: regex6.concat(/%/, IDENT_RE) },
        { begin: /%\d+/ },
        { begin: /#\d+/ }
      ]
    };
    const FUNCTION = {
      className: "title",
      variants: [
        { begin: regex6.concat(/@/, IDENT_RE) },
        { begin: /@\d+/ },
        { begin: regex6.concat(/!/, IDENT_RE) },
        { begin: regex6.concat(/!\d+/, IDENT_RE) },
        { begin: /!\d+/ }
      ]
    };
    return {
      name: "LLVM IR",
      keywords: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",
      contains: [
        TYPE,
        hljs.COMMENT(/;\s*$/, null, { relevance: 0 }),
        hljs.COMMENT(/;/, /$/),
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              className: "char.escape",
              match: /\\\d\d/
            }
          ]
        },
        FUNCTION,
        PUNCTUATION,
        OPERATOR,
        VARIABLE,
        LABEL,
        NUMBER
      ]
    };
  };
  module.exports = llvm;
});

// node_modules/highlight.js/lib/languages/lsl.js
var require_lsl = __commonJS((exports, module) => {
  var lsl = function(hljs) {
    const LSL_STRING_ESCAPE_CHARS = {
      className: "subst",
      begin: /\\[tn"\\]/
    };
    const LSL_STRINGS = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [LSL_STRING_ESCAPE_CHARS]
    };
    const LSL_NUMBERS = {
      className: "number",
      relevance: 0,
      begin: hljs.C_NUMBER_RE
    };
    const LSL_CONSTANTS = {
      className: "literal",
      variants: [
        { begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b" },
        { begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b" },
        { begin: "\\b(FALSE|TRUE)\\b" },
        { begin: "\\b(ZERO_ROTATION)\\b" },
        { begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b" },
        { begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b" }
      ]
    };
    const LSL_FUNCTIONS = {
      className: "built_in",
      begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
    };
    return {
      name: "LSL (Linden Scripting Language)",
      illegal: ":",
      contains: [
        LSL_STRINGS,
        {
          className: "comment",
          variants: [
            hljs.COMMENT("//", "$"),
            hljs.COMMENT("/\\*", "\\*/")
          ],
          relevance: 0
        },
        LSL_NUMBERS,
        {
          className: "section",
          variants: [
            { begin: "\\b(state|default)\\b" },
            { begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b" }
          ]
        },
        LSL_FUNCTIONS,
        LSL_CONSTANTS,
        {
          className: "type",
          begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
        }
      ]
    };
  };
  module.exports = lsl;
});

// node_modules/highlight.js/lib/languages/lua.js
var require_lua = __commonJS((exports, module) => {
  var lua = function(hljs) {
    const OPENING_LONG_BRACKET = "\\[=*\\[";
    const CLOSING_LONG_BRACKET = "\\]=*\\]";
    const LONG_BRACKETS = {
      begin: OPENING_LONG_BRACKET,
      end: CLOSING_LONG_BRACKET,
      contains: ["self"]
    };
    const COMMENTS = [
      hljs.COMMENT("--(?!" + OPENING_LONG_BRACKET + ")", "$"),
      hljs.COMMENT("--" + OPENING_LONG_BRACKET, CLOSING_LONG_BRACKET, {
        contains: [LONG_BRACKETS],
        relevance: 10
      })
    ];
    return {
      name: "Lua",
      keywords: {
        $pattern: hljs.UNDERSCORE_IDENT_RE,
        literal: "true false nil",
        keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
        built_in: "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
      },
      contains: COMMENTS.concat([
        {
          className: "function",
          beginKeywords: "function",
          end: "\\)",
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            {
              className: "params",
              begin: "\\(",
              endsWithParent: true,
              contains: COMMENTS
            }
          ].concat(COMMENTS)
        },
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: OPENING_LONG_BRACKET,
          end: CLOSING_LONG_BRACKET,
          contains: [LONG_BRACKETS],
          relevance: 5
        }
      ])
    };
  };
  module.exports = lua;
});

// node_modules/highlight.js/lib/languages/makefile.js
var require_makefile = __commonJS((exports, module) => {
  var makefile = function(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        {
          begin: "\\$\\(" + hljs.UNDERSCORE_IDENT_RE + "\\)",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        { begin: /\$[@%<?\^\+\*]/ }
      ]
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VARIABLE
      ]
    };
    const FUNC = {
      className: "variable",
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
      contains: [VARIABLE]
    };
    const ASSIGNMENT2 = { begin: "^" + hljs.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" };
    const META = {
      className: "meta",
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: {
        $pattern: /[\.\w]+/,
        keyword: ".PHONY"
      }
    };
    const TARGET = {
      className: "section",
      begin: /^[^\s]+:/,
      end: /$/,
      contains: [VARIABLE]
    };
    return {
      name: "Makefile",
      aliases: [
        "mk",
        "mak",
        "make"
      ],
      keywords: {
        $pattern: /[\w-]+/,
        keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        VARIABLE,
        QUOTE_STRING,
        FUNC,
        ASSIGNMENT2,
        META,
        TARGET
      ]
    };
  };
  module.exports = makefile;
});

// node_modules/highlight.js/lib/languages/mathematica.js
var require_mathematica = __commonJS((exports, module) => {
  var mathematica = function(hljs) {
    const regex6 = hljs.regex;
    const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
    const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
    const NUMBER_RE = /(\d*\.\d+|\d+\.\d*|\d+)/;
    const BASE_NUMBER_RE = regex6.either(regex6.concat(BASE_RE, BASE_DIGITS_RE), NUMBER_RE);
    const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
    const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
    const APPROXIMATE_NUMBER_RE = regex6.either(ACCURACY_RE, PRECISION_RE);
    const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;
    const MATHEMATICA_NUMBER_RE = regex6.concat(BASE_NUMBER_RE, regex6.optional(APPROXIMATE_NUMBER_RE), regex6.optional(SCIENTIFIC_NOTATION_RE));
    const NUMBERS = {
      className: "number",
      relevance: 0,
      begin: MATHEMATICA_NUMBER_RE
    };
    const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
    const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
    const SYMBOLS = { variants: [
      {
        className: "builtin-symbol",
        begin: SYMBOL_RE,
        "on:begin": (match2, response) => {
          if (!SYSTEM_SYMBOLS_SET.has(match2[0]))
            response.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: SYMBOL_RE
      }
    ] };
    const NAMED_CHARACTER = {
      className: "named-character",
      begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
    };
    const OPERATORS2 = {
      className: "operator",
      relevance: 0,
      begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
    };
    const PATTERNS = {
      className: "pattern",
      relevance: 0,
      begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
    };
    const SLOTS = {
      className: "slot",
      relevance: 0,
      begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
    };
    const BRACES = {
      className: "brace",
      relevance: 0,
      begin: /[[\](){}]/
    };
    const MESSAGES = {
      className: "message-name",
      relevance: 0,
      begin: regex6.concat("::", SYMBOL_RE)
    };
    return {
      name: "Mathematica",
      aliases: [
        "mma",
        "wl"
      ],
      classNameAliases: {
        brace: "punctuation",
        pattern: "type",
        slot: "type",
        symbol: "variable",
        "named-character": "variable",
        "builtin-symbol": "built_in",
        "message-name": "string"
      },
      contains: [
        hljs.COMMENT(/\(\*/, /\*\)/, { contains: ["self"] }),
        PATTERNS,
        SLOTS,
        MESSAGES,
        SYMBOLS,
        NAMED_CHARACTER,
        hljs.QUOTE_STRING_MODE,
        NUMBERS,
        OPERATORS2,
        BRACES
      ]
    };
  };
  var SYSTEM_SYMBOLS = [
    "AASTriangle",
    "AbelianGroup",
    "Abort",
    "AbortKernels",
    "AbortProtect",
    "AbortScheduledTask",
    "Above",
    "Abs",
    "AbsArg",
    "AbsArgPlot",
    "Absolute",
    "AbsoluteCorrelation",
    "AbsoluteCorrelationFunction",
    "AbsoluteCurrentValue",
    "AbsoluteDashing",
    "AbsoluteFileName",
    "AbsoluteOptions",
    "AbsolutePointSize",
    "AbsoluteThickness",
    "AbsoluteTime",
    "AbsoluteTiming",
    "AcceptanceThreshold",
    "AccountingForm",
    "Accumulate",
    "Accuracy",
    "AccuracyGoal",
    "AcousticAbsorbingValue",
    "AcousticImpedanceValue",
    "AcousticNormalVelocityValue",
    "AcousticPDEComponent",
    "AcousticPressureCondition",
    "AcousticRadiationValue",
    "AcousticSoundHardValue",
    "AcousticSoundSoftCondition",
    "ActionDelay",
    "ActionMenu",
    "ActionMenuBox",
    "ActionMenuBoxOptions",
    "Activate",
    "Active",
    "ActiveClassification",
    "ActiveClassificationObject",
    "ActiveItem",
    "ActivePrediction",
    "ActivePredictionObject",
    "ActiveStyle",
    "AcyclicGraphQ",
    "AddOnHelpPath",
    "AddSides",
    "AddTo",
    "AddToSearchIndex",
    "AddUsers",
    "AdjacencyGraph",
    "AdjacencyList",
    "AdjacencyMatrix",
    "AdjacentMeshCells",
    "Adjugate",
    "AdjustmentBox",
    "AdjustmentBoxOptions",
    "AdjustTimeSeriesForecast",
    "AdministrativeDivisionData",
    "AffineHalfSpace",
    "AffineSpace",
    "AffineStateSpaceModel",
    "AffineTransform",
    "After",
    "AggregatedEntityClass",
    "AggregationLayer",
    "AircraftData",
    "AirportData",
    "AirPressureData",
    "AirSoundAttenuation",
    "AirTemperatureData",
    "AiryAi",
    "AiryAiPrime",
    "AiryAiZero",
    "AiryBi",
    "AiryBiPrime",
    "AiryBiZero",
    "AlgebraicIntegerQ",
    "AlgebraicNumber",
    "AlgebraicNumberDenominator",
    "AlgebraicNumberNorm",
    "AlgebraicNumberPolynomial",
    "AlgebraicNumberTrace",
    "AlgebraicRules",
    "AlgebraicRulesData",
    "Algebraics",
    "AlgebraicUnitQ",
    "Alignment",
    "AlignmentMarker",
    "AlignmentPoint",
    "All",
    "AllowAdultContent",
    "AllowChatServices",
    "AllowedCloudExtraParameters",
    "AllowedCloudParameterExtensions",
    "AllowedDimensions",
    "AllowedFrequencyRange",
    "AllowedHeads",
    "AllowGroupClose",
    "AllowIncomplete",
    "AllowInlineCells",
    "AllowKernelInitialization",
    "AllowLooseGrammar",
    "AllowReverseGroupClose",
    "AllowScriptLevelChange",
    "AllowVersionUpdate",
    "AllTrue",
    "Alphabet",
    "AlphabeticOrder",
    "AlphabeticSort",
    "AlphaChannel",
    "AlternateImage",
    "AlternatingFactorial",
    "AlternatingGroup",
    "AlternativeHypothesis",
    "Alternatives",
    "AltitudeMethod",
    "AmbientLight",
    "AmbiguityFunction",
    "AmbiguityList",
    "Analytic",
    "AnatomyData",
    "AnatomyForm",
    "AnatomyPlot3D",
    "AnatomySkinStyle",
    "AnatomyStyling",
    "AnchoredSearch",
    "And",
    "AndersonDarlingTest",
    "AngerJ",
    "AngleBisector",
    "AngleBracket",
    "AnglePath",
    "AnglePath3D",
    "AngleVector",
    "AngularGauge",
    "Animate",
    "AnimatedImage",
    "AnimationCycleOffset",
    "AnimationCycleRepetitions",
    "AnimationDirection",
    "AnimationDisplayTime",
    "AnimationRate",
    "AnimationRepetitions",
    "AnimationRunning",
    "AnimationRunTime",
    "AnimationTimeIndex",
    "AnimationVideo",
    "Animator",
    "AnimatorBox",
    "AnimatorBoxOptions",
    "AnimatorElements",
    "Annotate",
    "Annotation",
    "AnnotationDelete",
    "AnnotationKeys",
    "AnnotationRules",
    "AnnotationValue",
    "Annuity",
    "AnnuityDue",
    "Annulus",
    "AnomalyDetection",
    "AnomalyDetector",
    "AnomalyDetectorFunction",
    "Anonymous",
    "Antialiasing",
    "Antihermitian",
    "AntihermitianMatrixQ",
    "Antisymmetric",
    "AntisymmetricMatrixQ",
    "Antonyms",
    "AnyOrder",
    "AnySubset",
    "AnyTrue",
    "Apart",
    "ApartSquareFree",
    "APIFunction",
    "Appearance",
    "AppearanceElements",
    "AppearanceRules",
    "AppellF1",
    "Append",
    "AppendCheck",
    "AppendLayer",
    "AppendTo",
    "Application",
    "Apply",
    "ApplyReaction",
    "ApplySides",
    "ApplyTo",
    "ArcCos",
    "ArcCosh",
    "ArcCot",
    "ArcCoth",
    "ArcCsc",
    "ArcCsch",
    "ArcCurvature",
    "ARCHProcess",
    "ArcLength",
    "ArcSec",
    "ArcSech",
    "ArcSin",
    "ArcSinDistribution",
    "ArcSinh",
    "ArcTan",
    "ArcTanh",
    "Area",
    "Arg",
    "ArgMax",
    "ArgMin",
    "ArgumentCountQ",
    "ArgumentsOptions",
    "ARIMAProcess",
    "ArithmeticGeometricMean",
    "ARMAProcess",
    "Around",
    "AroundReplace",
    "ARProcess",
    "Array",
    "ArrayComponents",
    "ArrayDepth",
    "ArrayFilter",
    "ArrayFlatten",
    "ArrayMesh",
    "ArrayPad",
    "ArrayPlot",
    "ArrayPlot3D",
    "ArrayQ",
    "ArrayReduce",
    "ArrayResample",
    "ArrayReshape",
    "ArrayRules",
    "Arrays",
    "Arrow",
    "Arrow3DBox",
    "ArrowBox",
    "Arrowheads",
    "ASATriangle",
    "Ask",
    "AskAppend",
    "AskConfirm",
    "AskDisplay",
    "AskedQ",
    "AskedValue",
    "AskFunction",
    "AskState",
    "AskTemplateDisplay",
    "AspectRatio",
    "AspectRatioFixed",
    "Assert",
    "AssessmentFunction",
    "AssessmentResultObject",
    "AssociateTo",
    "Association",
    "AssociationFormat",
    "AssociationMap",
    "AssociationQ",
    "AssociationThread",
    "AssumeDeterministic",
    "Assuming",
    "Assumptions",
    "AstroAngularSeparation",
    "AstroBackground",
    "AstroCenter",
    "AstroDistance",
    "AstroGraphics",
    "AstroGridLines",
    "AstroGridLinesStyle",
    "AstronomicalData",
    "AstroPosition",
    "AstroProjection",
    "AstroRange",
    "AstroRangePadding",
    "AstroReferenceFrame",
    "AstroStyling",
    "AstroZoomLevel",
    "Asymptotic",
    "AsymptoticDSolveValue",
    "AsymptoticEqual",
    "AsymptoticEquivalent",
    "AsymptoticExpectation",
    "AsymptoticGreater",
    "AsymptoticGreaterEqual",
    "AsymptoticIntegrate",
    "AsymptoticLess",
    "AsymptoticLessEqual",
    "AsymptoticOutputTracker",
    "AsymptoticProbability",
    "AsymptoticProduct",
    "AsymptoticRSolveValue",
    "AsymptoticSolve",
    "AsymptoticSum",
    "Asynchronous",
    "AsynchronousTaskObject",
    "AsynchronousTasks",
    "Atom",
    "AtomCoordinates",
    "AtomCount",
    "AtomDiagramCoordinates",
    "AtomLabels",
    "AtomLabelStyle",
    "AtomList",
    "AtomQ",
    "AttachCell",
    "AttachedCell",
    "AttentionLayer",
    "Attributes",
    "Audio",
    "AudioAmplify",
    "AudioAnnotate",
    "AudioAnnotationLookup",
    "AudioBlockMap",
    "AudioCapture",
    "AudioChannelAssignment",
    "AudioChannelCombine",
    "AudioChannelMix",
    "AudioChannels",
    "AudioChannelSeparate",
    "AudioData",
    "AudioDelay",
    "AudioDelete",
    "AudioDevice",
    "AudioDistance",
    "AudioEncoding",
    "AudioFade",
    "AudioFrequencyShift",
    "AudioGenerator",
    "AudioIdentify",
    "AudioInputDevice",
    "AudioInsert",
    "AudioInstanceQ",
    "AudioIntervals",
    "AudioJoin",
    "AudioLabel",
    "AudioLength",
    "AudioLocalMeasurements",
    "AudioLooping",
    "AudioLoudness",
    "AudioMeasurements",
    "AudioNormalize",
    "AudioOutputDevice",
    "AudioOverlay",
    "AudioPad",
    "AudioPan",
    "AudioPartition",
    "AudioPause",
    "AudioPitchShift",
    "AudioPlay",
    "AudioPlot",
    "AudioQ",
    "AudioRecord",
    "AudioReplace",
    "AudioResample",
    "AudioReverb",
    "AudioReverse",
    "AudioSampleRate",
    "AudioSpectralMap",
    "AudioSpectralTransformation",
    "AudioSplit",
    "AudioStop",
    "AudioStream",
    "AudioStreams",
    "AudioTimeStretch",
    "AudioTrackApply",
    "AudioTrackSelection",
    "AudioTrim",
    "AudioType",
    "AugmentedPolyhedron",
    "AugmentedSymmetricPolynomial",
    "Authenticate",
    "Authentication",
    "AuthenticationDialog",
    "AutoAction",
    "Autocomplete",
    "AutocompletionFunction",
    "AutoCopy",
    "AutocorrelationTest",
    "AutoDelete",
    "AutoEvaluateEvents",
    "AutoGeneratedPackage",
    "AutoIndent",
    "AutoIndentSpacings",
    "AutoItalicWords",
    "AutoloadPath",
    "AutoMatch",
    "Automatic",
    "AutomaticImageSize",
    "AutoMultiplicationSymbol",
    "AutoNumberFormatting",
    "AutoOpenNotebooks",
    "AutoOpenPalettes",
    "AutoOperatorRenderings",
    "AutoQuoteCharacters",
    "AutoRefreshed",
    "AutoRemove",
    "AutorunSequencing",
    "AutoScaling",
    "AutoScroll",
    "AutoSpacing",
    "AutoStyleOptions",
    "AutoStyleWords",
    "AutoSubmitting",
    "Axes",
    "AxesEdge",
    "AxesLabel",
    "AxesOrigin",
    "AxesStyle",
    "AxiomaticTheory",
    "Axis",
    "Axis3DBox",
    "Axis3DBoxOptions",
    "AxisBox",
    "AxisBoxOptions",
    "AxisLabel",
    "AxisObject",
    "AxisStyle",
    "BabyMonsterGroupB",
    "Back",
    "BackFaceColor",
    "BackFaceGlowColor",
    "BackFaceOpacity",
    "BackFaceSpecularColor",
    "BackFaceSpecularExponent",
    "BackFaceSurfaceAppearance",
    "BackFaceTexture",
    "Background",
    "BackgroundAppearance",
    "BackgroundTasksSettings",
    "Backslash",
    "Backsubstitution",
    "Backward",
    "Ball",
    "Band",
    "BandpassFilter",
    "BandstopFilter",
    "BarabasiAlbertGraphDistribution",
    "BarChart",
    "BarChart3D",
    "BarcodeImage",
    "BarcodeRecognize",
    "BaringhausHenzeTest",
    "BarLegend",
    "BarlowProschanImportance",
    "BarnesG",
    "BarOrigin",
    "BarSpacing",
    "BartlettHannWindow",
    "BartlettWindow",
    "BaseDecode",
    "BaseEncode",
    "BaseForm",
    "Baseline",
    "BaselinePosition",
    "BaseStyle",
    "BasicRecurrentLayer",
    "BatchNormalizationLayer",
    "BatchSize",
    "BatesDistribution",
    "BattleLemarieWavelet",
    "BayesianMaximization",
    "BayesianMaximizationObject",
    "BayesianMinimization",
    "BayesianMinimizationObject",
    "Because",
    "BeckmannDistribution",
    "Beep",
    "Before",
    "Begin",
    "BeginDialogPacket",
    "BeginPackage",
    "BellB",
    "BellY",
    "Below",
    "BenfordDistribution",
    "BeniniDistribution",
    "BenktanderGibratDistribution",
    "BenktanderWeibullDistribution",
    "BernoulliB",
    "BernoulliDistribution",
    "BernoulliGraphDistribution",
    "BernoulliProcess",
    "BernsteinBasis",
    "BesagL",
    "BesselFilterModel",
    "BesselI",
    "BesselJ",
    "BesselJZero",
    "BesselK",
    "BesselY",
    "BesselYZero",
    "Beta",
    "BetaBinomialDistribution",
    "BetaDistribution",
    "BetaNegativeBinomialDistribution",
    "BetaPrimeDistribution",
    "BetaRegularized",
    "Between",
    "BetweennessCentrality",
    "Beveled",
    "BeveledPolyhedron",
    "BezierCurve",
    "BezierCurve3DBox",
    "BezierCurve3DBoxOptions",
    "BezierCurveBox",
    "BezierCurveBoxOptions",
    "BezierFunction",
    "BilateralFilter",
    "BilateralLaplaceTransform",
    "BilateralZTransform",
    "Binarize",
    "BinaryDeserialize",
    "BinaryDistance",
    "BinaryFormat",
    "BinaryImageQ",
    "BinaryRead",
    "BinaryReadList",
    "BinarySerialize",
    "BinaryWrite",
    "BinCounts",
    "BinLists",
    "BinnedVariogramList",
    "Binomial",
    "BinomialDistribution",
    "BinomialPointProcess",
    "BinomialProcess",
    "BinormalDistribution",
    "BiorthogonalSplineWavelet",
    "BioSequence",
    "BioSequenceBackTranslateList",
    "BioSequenceComplement",
    "BioSequenceInstances",
    "BioSequenceModify",
    "BioSequencePlot",
    "BioSequenceQ",
    "BioSequenceReverseComplement",
    "BioSequenceTranscribe",
    "BioSequenceTranslate",
    "BipartiteGraphQ",
    "BiquadraticFilterModel",
    "BirnbaumImportance",
    "BirnbaumSaundersDistribution",
    "BitAnd",
    "BitClear",
    "BitGet",
    "BitLength",
    "BitNot",
    "BitOr",
    "BitRate",
    "BitSet",
    "BitShiftLeft",
    "BitShiftRight",
    "BitXor",
    "BiweightLocation",
    "BiweightMidvariance",
    "Black",
    "BlackmanHarrisWindow",
    "BlackmanNuttallWindow",
    "BlackmanWindow",
    "Blank",
    "BlankForm",
    "BlankNullSequence",
    "BlankSequence",
    "Blend",
    "Block",
    "BlockchainAddressData",
    "BlockchainBase",
    "BlockchainBlockData",
    "BlockchainContractValue",
    "BlockchainData",
    "BlockchainGet",
    "BlockchainKeyEncode",
    "BlockchainPut",
    "BlockchainTokenData",
    "BlockchainTransaction",
    "BlockchainTransactionData",
    "BlockchainTransactionSign",
    "BlockchainTransactionSubmit",
    "BlockDiagonalMatrix",
    "BlockLowerTriangularMatrix",
    "BlockMap",
    "BlockRandom",
    "BlockUpperTriangularMatrix",
    "BlomqvistBeta",
    "BlomqvistBetaTest",
    "Blue",
    "Blur",
    "Blurring",
    "BodePlot",
    "BohmanWindow",
    "Bold",
    "Bond",
    "BondCount",
    "BondLabels",
    "BondLabelStyle",
    "BondList",
    "BondQ",
    "Bookmarks",
    "Boole",
    "BooleanConsecutiveFunction",
    "BooleanConvert",
    "BooleanCountingFunction",
    "BooleanFunction",
    "BooleanGraph",
    "BooleanMaxterms",
    "BooleanMinimize",
    "BooleanMinterms",
    "BooleanQ",
    "BooleanRegion",
    "Booleans",
    "BooleanStrings",
    "BooleanTable",
    "BooleanVariables",
    "BorderDimensions",
    "BorelTannerDistribution",
    "Bottom",
    "BottomHatTransform",
    "BoundaryDiscretizeGraphics",
    "BoundaryDiscretizeRegion",
    "BoundaryMesh",
    "BoundaryMeshRegion",
    "BoundaryMeshRegionQ",
    "BoundaryStyle",
    "BoundedRegionQ",
    "BoundingRegion",
    "Bounds",
    "Box",
    "BoxBaselineShift",
    "BoxData",
    "BoxDimensions",
    "Boxed",
    "Boxes",
    "BoxForm",
    "BoxFormFormatTypes",
    "BoxFrame",
    "BoxID",
    "BoxMargins",
    "BoxMatrix",
    "BoxObject",
    "BoxRatios",
    "BoxRotation",
    "BoxRotationPoint",
    "BoxStyle",
    "BoxWhiskerChart",
    "Bra",
    "BracketingBar",
    "BraKet",
    "BrayCurtisDistance",
    "BreadthFirstScan",
    "Break",
    "BridgeData",
    "BrightnessEqualize",
    "BroadcastStationData",
    "Brown",
    "BrownForsytheTest",
    "BrownianBridgeProcess",
    "BrowserCategory",
    "BSplineBasis",
    "BSplineCurve",
    "BSplineCurve3DBox",
    "BSplineCurve3DBoxOptions",
    "BSplineCurveBox",
    "BSplineCurveBoxOptions",
    "BSplineFunction",
    "BSplineSurface",
    "BSplineSurface3DBox",
    "BSplineSurface3DBoxOptions",
    "BubbleChart",
    "BubbleChart3D",
    "BubbleScale",
    "BubbleSizes",
    "BuckyballGraph",
    "BuildCompiledComponent",
    "BuildingData",
    "BulletGauge",
    "BusinessDayQ",
    "ButterflyGraph",
    "ButterworthFilterModel",
    "Button",
    "ButtonBar",
    "ButtonBox",
    "ButtonBoxOptions",
    "ButtonCell",
    "ButtonContents",
    "ButtonData",
    "ButtonEvaluator",
    "ButtonExpandable",
    "ButtonFrame",
    "ButtonFunction",
    "ButtonMargins",
    "ButtonMinHeight",
    "ButtonNote",
    "ButtonNotebook",
    "ButtonSource",
    "ButtonStyle",
    "ButtonStyleMenuListing",
    "Byte",
    "ByteArray",
    "ByteArrayFormat",
    "ByteArrayFormatQ",
    "ByteArrayQ",
    "ByteArrayToString",
    "ByteCount",
    "ByteOrdering",
    "C",
    "CachedValue",
    "CacheGraphics",
    "CachePersistence",
    "CalendarConvert",
    "CalendarData",
    "CalendarType",
    "Callout",
    "CalloutMarker",
    "CalloutStyle",
    "CallPacket",
    "CanberraDistance",
    "Cancel",
    "CancelButton",
    "CandlestickChart",
    "CanonicalGraph",
    "CanonicalizePolygon",
    "CanonicalizePolyhedron",
    "CanonicalizeRegion",
    "CanonicalName",
    "CanonicalWarpingCorrespondence",
    "CanonicalWarpingDistance",
    "CantorMesh",
    "CantorStaircase",
    "Canvas",
    "Cap",
    "CapForm",
    "CapitalDifferentialD",
    "Capitalize",
    "CapsuleShape",
    "CaptureRunning",
    "CaputoD",
    "CardinalBSplineBasis",
    "CarlemanLinearize",
    "CarlsonRC",
    "CarlsonRD",
    "CarlsonRE",
    "CarlsonRF",
    "CarlsonRG",
    "CarlsonRJ",
    "CarlsonRK",
    "CarlsonRM",
    "CarmichaelLambda",
    "CaseOrdering",
    "Cases",
    "CaseSensitive",
    "Cashflow",
    "Casoratian",
    "Cast",
    "Catalan",
    "CatalanNumber",
    "Catch",
    "CategoricalDistribution",
    "Catenate",
    "CatenateLayer",
    "CauchyDistribution",
    "CauchyMatrix",
    "CauchyPointProcess",
    "CauchyWindow",
    "CayleyGraph",
    "CDF",
    "CDFDeploy",
    "CDFInformation",
    "CDFWavelet",
    "Ceiling",
    "CelestialSystem",
    "Cell",
    "CellAutoOverwrite",
    "CellBaseline",
    "CellBoundingBox",
    "CellBracketOptions",
    "CellChangeTimes",
    "CellContents",
    "CellContext",
    "CellDingbat",
    "CellDingbatMargin",
    "CellDynamicExpression",
    "CellEditDuplicate",
    "CellElementsBoundingBox",
    "CellElementSpacings",
    "CellEpilog",
    "CellEvaluationDuplicate",
    "CellEvaluationFunction",
    "CellEvaluationLanguage",
    "CellEventActions",
    "CellFrame",
    "CellFrameColor",
    "CellFrameLabelMargins",
    "CellFrameLabels",
    "CellFrameMargins",
    "CellFrameStyle",
    "CellGroup",
    "CellGroupData",
    "CellGrouping",
    "CellGroupingRules",
    "CellHorizontalScrolling",
    "CellID",
    "CellInsertionPointCell",
    "CellLabel",
    "CellLabelAutoDelete",
    "CellLabelMargins",
    "CellLabelPositioning",
    "CellLabelStyle",
    "CellLabelTemplate",
    "CellMargins",
    "CellObject",
    "CellOpen",
    "CellPrint",
    "CellProlog",
    "Cells",
    "CellSize",
    "CellStyle",
    "CellTags",
    "CellTrayPosition",
    "CellTrayWidgets",
    "CellularAutomaton",
    "CensoredDistribution",
    "Censoring",
    "Center",
    "CenterArray",
    "CenterDot",
    "CenteredInterval",
    "CentralFeature",
    "CentralMoment",
    "CentralMomentGeneratingFunction",
    "Cepstrogram",
    "CepstrogramArray",
    "CepstrumArray",
    "CForm",
    "ChampernowneNumber",
    "ChangeOptions",
    "ChannelBase",
    "ChannelBrokerAction",
    "ChannelDatabin",
    "ChannelHistoryLength",
    "ChannelListen",
    "ChannelListener",
    "ChannelListeners",
    "ChannelListenerWait",
    "ChannelObject",
    "ChannelPreSendFunction",
    "ChannelReceiverFunction",
    "ChannelSend",
    "ChannelSubscribers",
    "ChanVeseBinarize",
    "Character",
    "CharacterCounts",
    "CharacterEncoding",
    "CharacterEncodingsPath",
    "CharacteristicFunction",
    "CharacteristicPolynomial",
    "CharacterName",
    "CharacterNormalize",
    "CharacterRange",
    "Characters",
    "ChartBaseStyle",
    "ChartElementData",
    "ChartElementDataFunction",
    "ChartElementFunction",
    "ChartElements",
    "ChartLabels",
    "ChartLayout",
    "ChartLegends",
    "ChartStyle",
    "Chebyshev1FilterModel",
    "Chebyshev2FilterModel",
    "ChebyshevDistance",
    "ChebyshevT",
    "ChebyshevU",
    "Check",
    "CheckAbort",
    "CheckAll",
    "CheckArguments",
    "Checkbox",
    "CheckboxBar",
    "CheckboxBox",
    "CheckboxBoxOptions",
    "ChemicalConvert",
    "ChemicalData",
    "ChemicalFormula",
    "ChemicalInstance",
    "ChemicalReaction",
    "ChessboardDistance",
    "ChiDistribution",
    "ChineseRemainder",
    "ChiSquareDistribution",
    "ChoiceButtons",
    "ChoiceDialog",
    "CholeskyDecomposition",
    "Chop",
    "ChromaticityPlot",
    "ChromaticityPlot3D",
    "ChromaticPolynomial",
    "Circle",
    "CircleBox",
    "CircleDot",
    "CircleMinus",
    "CirclePlus",
    "CirclePoints",
    "CircleThrough",
    "CircleTimes",
    "CirculantGraph",
    "CircularArcThrough",
    "CircularOrthogonalMatrixDistribution",
    "CircularQuaternionMatrixDistribution",
    "CircularRealMatrixDistribution",
    "CircularSymplecticMatrixDistribution",
    "CircularUnitaryMatrixDistribution",
    "Circumsphere",
    "CityData",
    "ClassifierFunction",
    "ClassifierInformation",
    "ClassifierMeasurements",
    "ClassifierMeasurementsObject",
    "Classify",
    "ClassPriors",
    "Clear",
    "ClearAll",
    "ClearAttributes",
    "ClearCookies",
    "ClearPermissions",
    "ClearSystemCache",
    "ClebschGordan",
    "ClickPane",
    "ClickToCopy",
    "ClickToCopyEnabled",
    "Clip",
    "ClipboardNotebook",
    "ClipFill",
    "ClippingStyle",
    "ClipPlanes",
    "ClipPlanesStyle",
    "ClipRange",
    "Clock",
    "ClockGauge",
    "ClockwiseContourIntegral",
    "Close",
    "Closed",
    "CloseKernels",
    "ClosenessCentrality",
    "Closing",
    "ClosingAutoSave",
    "ClosingEvent",
    "CloudAccountData",
    "CloudBase",
    "CloudConnect",
    "CloudConnections",
    "CloudDeploy",
    "CloudDirectory",
    "CloudDisconnect",
    "CloudEvaluate",
    "CloudExport",
    "CloudExpression",
    "CloudExpressions",
    "CloudFunction",
    "CloudGet",
    "CloudImport",
    "CloudLoggingData",
    "CloudObject",
    "CloudObjectInformation",
    "CloudObjectInformationData",
    "CloudObjectNameFormat",
    "CloudObjects",
    "CloudObjectURLType",
    "CloudPublish",
    "CloudPut",
    "CloudRenderingMethod",
    "CloudSave",
    "CloudShare",
    "CloudSubmit",
    "CloudSymbol",
    "CloudUnshare",
    "CloudUserID",
    "ClusterClassify",
    "ClusterDissimilarityFunction",
    "ClusteringComponents",
    "ClusteringMeasurements",
    "ClusteringTree",
    "CMYKColor",
    "Coarse",
    "CodeAssistOptions",
    "Coefficient",
    "CoefficientArrays",
    "CoefficientDomain",
    "CoefficientList",
    "CoefficientRules",
    "CoifletWavelet",
    "Collect",
    "CollinearPoints",
    "Colon",
    "ColonForm",
    "ColorBalance",
    "ColorCombine",
    "ColorConvert",
    "ColorCoverage",
    "ColorData",
    "ColorDataFunction",
    "ColorDetect",
    "ColorDistance",
    "ColorFunction",
    "ColorFunctionBinning",
    "ColorFunctionScaling",
    "Colorize",
    "ColorNegate",
    "ColorOutput",
    "ColorProfileData",
    "ColorQ",
    "ColorQuantize",
    "ColorReplace",
    "ColorRules",
    "ColorSelectorSettings",
    "ColorSeparate",
    "ColorSetter",
    "ColorSetterBox",
    "ColorSetterBoxOptions",
    "ColorSlider",
    "ColorsNear",
    "ColorSpace",
    "ColorToneMapping",
    "Column",
    "ColumnAlignments",
    "ColumnBackgrounds",
    "ColumnForm",
    "ColumnLines",
    "ColumnsEqual",
    "ColumnSpacings",
    "ColumnWidths",
    "CombinatorB",
    "CombinatorC",
    "CombinatorI",
    "CombinatorK",
    "CombinatorS",
    "CombinatorW",
    "CombinatorY",
    "CombinedEntityClass",
    "CombinerFunction",
    "CometData",
    "CommonDefaultFormatTypes",
    "Commonest",
    "CommonestFilter",
    "CommonName",
    "CommonUnits",
    "CommunityBoundaryStyle",
    "CommunityGraphPlot",
    "CommunityLabels",
    "CommunityRegionStyle",
    "CompanyData",
    "CompatibleUnitQ",
    "CompilationOptions",
    "CompilationTarget",
    "Compile",
    "Compiled",
    "CompiledCodeFunction",
    "CompiledComponent",
    "CompiledExpressionDeclaration",
    "CompiledFunction",
    "CompiledLayer",
    "CompilerCallback",
    "CompilerEnvironment",
    "CompilerEnvironmentAppend",
    "CompilerEnvironmentAppendTo",
    "CompilerEnvironmentObject",
    "CompilerOptions",
    "Complement",
    "ComplementedEntityClass",
    "CompleteGraph",
    "CompleteGraphQ",
    "CompleteIntegral",
    "CompleteKaryTree",
    "CompletionsListPacket",
    "Complex",
    "ComplexArrayPlot",
    "ComplexContourPlot",
    "Complexes",
    "ComplexExpand",
    "ComplexInfinity",
    "ComplexityFunction",
    "ComplexListPlot",
    "ComplexPlot",
    "ComplexPlot3D",
    "ComplexRegionPlot",
    "ComplexStreamPlot",
    "ComplexVectorPlot",
    "ComponentMeasurements",
    "ComponentwiseContextMenu",
    "Compose",
    "ComposeList",
    "ComposeSeries",
    "CompositeQ",
    "Composition",
    "CompoundElement",
    "CompoundExpression",
    "CompoundPoissonDistribution",
    "CompoundPoissonProcess",
    "CompoundRenewalProcess",
    "Compress",
    "CompressedData",
    "CompressionLevel",
    "ComputeUncertainty",
    "ConcaveHullMesh",
    "Condition",
    "ConditionalExpression",
    "Conditioned",
    "Cone",
    "ConeBox",
    "ConfidenceLevel",
    "ConfidenceRange",
    "ConfidenceTransform",
    "ConfigurationPath",
    "Confirm",
    "ConfirmAssert",
    "ConfirmBy",
    "ConfirmMatch",
    "ConfirmQuiet",
    "ConformationMethod",
    "ConformAudio",
    "ConformImages",
    "Congruent",
    "ConicGradientFilling",
    "ConicHullRegion",
    "ConicHullRegion3DBox",
    "ConicHullRegion3DBoxOptions",
    "ConicHullRegionBox",
    "ConicHullRegionBoxOptions",
    "ConicOptimization",
    "Conjugate",
    "ConjugateTranspose",
    "Conjunction",
    "Connect",
    "ConnectedComponents",
    "ConnectedGraphComponents",
    "ConnectedGraphQ",
    "ConnectedMeshComponents",
    "ConnectedMoleculeComponents",
    "ConnectedMoleculeQ",
    "ConnectionSettings",
    "ConnectLibraryCallbackFunction",
    "ConnectSystemModelComponents",
    "ConnectSystemModelController",
    "ConnesWindow",
    "ConoverTest",
    "ConservativeConvectionPDETerm",
    "ConsoleMessage",
    "Constant",
    "ConstantArray",
    "ConstantArrayLayer",
    "ConstantImage",
    "ConstantPlusLayer",
    "ConstantRegionQ",
    "Constants",
    "ConstantTimesLayer",
    "ConstellationData",
    "ConstrainedMax",
    "ConstrainedMin",
    "Construct",
    "Containing",
    "ContainsAll",
    "ContainsAny",
    "ContainsExactly",
    "ContainsNone",
    "ContainsOnly",
    "ContentDetectorFunction",
    "ContentFieldOptions",
    "ContentLocationFunction",
    "ContentObject",
    "ContentPadding",
    "ContentsBoundingBox",
    "ContentSelectable",
    "ContentSize",
    "Context",
    "ContextMenu",
    "Contexts",
    "ContextToFileName",
    "Continuation",
    "Continue",
    "ContinuedFraction",
    "ContinuedFractionK",
    "ContinuousAction",
    "ContinuousMarkovProcess",
    "ContinuousTask",
    "ContinuousTimeModelQ",
    "ContinuousWaveletData",
    "ContinuousWaveletTransform",
    "ContourDetect",
    "ContourGraphics",
    "ContourIntegral",
    "ContourLabels",
    "ContourLines",
    "ContourPlot",
    "ContourPlot3D",
    "Contours",
    "ContourShading",
    "ContourSmoothing",
    "ContourStyle",
    "ContraharmonicMean",
    "ContrastiveLossLayer",
    "Control",
    "ControlActive",
    "ControlAlignment",
    "ControlGroupContentsBox",
    "ControllabilityGramian",
    "ControllabilityMatrix",
    "ControllableDecomposition",
    "ControllableModelQ",
    "ControllerDuration",
    "ControllerInformation",
    "ControllerInformationData",
    "ControllerLinking",
    "ControllerManipulate",
    "ControllerMethod",
    "ControllerPath",
    "ControllerState",
    "ControlPlacement",
    "ControlsRendering",
    "ControlType",
    "ConvectionPDETerm",
    "Convergents",
    "ConversionOptions",
    "ConversionRules",
    "ConvertToPostScript",
    "ConvertToPostScriptPacket",
    "ConvexHullMesh",
    "ConvexHullRegion",
    "ConvexOptimization",
    "ConvexPolygonQ",
    "ConvexPolyhedronQ",
    "ConvexRegionQ",
    "ConvolutionLayer",
    "Convolve",
    "ConwayGroupCo1",
    "ConwayGroupCo2",
    "ConwayGroupCo3",
    "CookieFunction",
    "Cookies",
    "CoordinateBoundingBox",
    "CoordinateBoundingBoxArray",
    "CoordinateBounds",
    "CoordinateBoundsArray",
    "CoordinateChartData",
    "CoordinatesToolOptions",
    "CoordinateTransform",
    "CoordinateTransformData",
    "CoplanarPoints",
    "CoprimeQ",
    "Coproduct",
    "CopulaDistribution",
    "Copyable",
    "CopyDatabin",
    "CopyDirectory",
    "CopyFile",
    "CopyFunction",
    "CopyTag",
    "CopyToClipboard",
    "CoreNilpotentDecomposition",
    "CornerFilter",
    "CornerNeighbors",
    "Correlation",
    "CorrelationDistance",
    "CorrelationFunction",
    "CorrelationTest",
    "Cos",
    "Cosh",
    "CoshIntegral",
    "CosineDistance",
    "CosineWindow",
    "CosIntegral",
    "Cot",
    "Coth",
    "CoulombF",
    "CoulombG",
    "CoulombH1",
    "CoulombH2",
    "Count",
    "CountDistinct",
    "CountDistinctBy",
    "CounterAssignments",
    "CounterBox",
    "CounterBoxOptions",
    "CounterClockwiseContourIntegral",
    "CounterEvaluator",
    "CounterFunction",
    "CounterIncrements",
    "CounterStyle",
    "CounterStyleMenuListing",
    "CountRoots",
    "CountryData",
    "Counts",
    "CountsBy",
    "Covariance",
    "CovarianceEstimatorFunction",
    "CovarianceFunction",
    "CoxianDistribution",
    "CoxIngersollRossProcess",
    "CoxModel",
    "CoxModelFit",
    "CramerVonMisesTest",
    "CreateArchive",
    "CreateCellID",
    "CreateChannel",
    "CreateCloudExpression",
    "CreateCompilerEnvironment",
    "CreateDatabin",
    "CreateDataStructure",
    "CreateDataSystemModel",
    "CreateDialog",
    "CreateDirectory",
    "CreateDocument",
    "CreateFile",
    "CreateIntermediateDirectories",
    "CreateLicenseEntitlement",
    "CreateManagedLibraryExpression",
    "CreateNotebook",
    "CreatePacletArchive",
    "CreatePalette",
    "CreatePermissionsGroup",
    "CreateScheduledTask",
    "CreateSearchIndex",
    "CreateSystemModel",
    "CreateTemporary",
    "CreateTypeInstance",
    "CreateUUID",
    "CreateWindow",
    "CriterionFunction",
    "CriticalityFailureImportance",
    "CriticalitySuccessImportance",
    "CriticalSection",
    "Cross",
    "CrossEntropyLossLayer",
    "CrossingCount",
    "CrossingDetect",
    "CrossingPolygon",
    "CrossMatrix",
    "Csc",
    "Csch",
    "CSGRegion",
    "CSGRegionQ",
    "CSGRegionTree",
    "CTCLossLayer",
    "Cube",
    "CubeRoot",
    "Cubics",
    "Cuboid",
    "CuboidBox",
    "CuboidBoxOptions",
    "Cumulant",
    "CumulantGeneratingFunction",
    "CumulativeFeatureImpactPlot",
    "Cup",
    "CupCap",
    "Curl",
    "CurlyDoubleQuote",
    "CurlyQuote",
    "CurrencyConvert",
    "CurrentDate",
    "CurrentImage",
    "CurrentNotebookImage",
    "CurrentScreenImage",
    "CurrentValue",
    "Curry",
    "CurryApplied",
    "CurvatureFlowFilter",
    "CurveClosed",
    "Cyan",
    "CycleGraph",
    "CycleIndexPolynomial",
    "Cycles",
    "CyclicGroup",
    "Cyclotomic",
    "Cylinder",
    "CylinderBox",
    "CylinderBoxOptions",
    "CylindricalDecomposition",
    "CylindricalDecompositionFunction",
    "D",
    "DagumDistribution",
    "DamData",
    "DamerauLevenshteinDistance",
    "DampingFactor",
    "Darker",
    "Dashed",
    "Dashing",
    "DatabaseConnect",
    "DatabaseDisconnect",
    "DatabaseReference",
    "Databin",
    "DatabinAdd",
    "DatabinRemove",
    "Databins",
    "DatabinSubmit",
    "DatabinUpload",
    "DataCompression",
    "DataDistribution",
    "DataRange",
    "DataReversed",
    "Dataset",
    "DatasetDisplayPanel",
    "DatasetTheme",
    "DataStructure",
    "DataStructureQ",
    "Date",
    "DateBounds",
    "Dated",
    "DateDelimiters",
    "DateDifference",
    "DatedUnit",
    "DateFormat",
    "DateFunction",
    "DateGranularity",
    "DateHistogram",
    "DateInterval",
    "DateList",
    "DateListLogPlot",
    "DateListPlot",
    "DateListStepPlot",
    "DateObject",
    "DateObjectQ",
    "DateOverlapsQ",
    "DatePattern",
    "DatePlus",
    "DateRange",
    "DateReduction",
    "DateScale",
    "DateSelect",
    "DateString",
    "DateTicksFormat",
    "DateValue",
    "DateWithinQ",
    "DaubechiesWavelet",
    "DavisDistribution",
    "DawsonF",
    "DayCount",
    "DayCountConvention",
    "DayHemisphere",
    "DaylightQ",
    "DayMatchQ",
    "DayName",
    "DayNightTerminator",
    "DayPlus",
    "DayRange",
    "DayRound",
    "DeBruijnGraph",
    "DeBruijnSequence",
    "Debug",
    "DebugTag",
    "Decapitalize",
    "Decimal",
    "DecimalForm",
    "DeclareCompiledComponent",
    "DeclareKnownSymbols",
    "DeclarePackage",
    "Decompose",
    "DeconvolutionLayer",
    "Decrement",
    "Decrypt",
    "DecryptFile",
    "DedekindEta",
    "DeepSpaceProbeData",
    "Default",
    "Default2DTool",
    "Default3DTool",
    "DefaultAttachedCellStyle",
    "DefaultAxesStyle",
    "DefaultBaseStyle",
    "DefaultBoxStyle",
    "DefaultButton",
    "DefaultColor",
    "DefaultControlPlacement",
    "DefaultDockedCellStyle",
    "DefaultDuplicateCellStyle",
    "DefaultDuration",
    "DefaultElement",
    "DefaultFaceGridsStyle",
    "DefaultFieldHintStyle",
    "DefaultFont",
    "DefaultFontProperties",
    "DefaultFormatType",
    "DefaultFrameStyle",
    "DefaultFrameTicksStyle",
    "DefaultGridLinesStyle",
    "DefaultInlineFormatType",
    "DefaultInputFormatType",
    "DefaultLabelStyle",
    "DefaultMenuStyle",
    "DefaultNaturalLanguage",
    "DefaultNewCellStyle",
    "DefaultNewInlineCellStyle",
    "DefaultNotebook",
    "DefaultOptions",
    "DefaultOutputFormatType",
    "DefaultPrintPrecision",
    "DefaultStyle",
    "DefaultStyleDefinitions",
    "DefaultTextFormatType",
    "DefaultTextInlineFormatType",
    "DefaultTicksStyle",
    "DefaultTooltipStyle",
    "DefaultValue",
    "DefaultValues",
    "Defer",
    "DefineExternal",
    "DefineInputStreamMethod",
    "DefineOutputStreamMethod",
    "DefineResourceFunction",
    "Definition",
    "Degree",
    "DegreeCentrality",
    "DegreeGraphDistribution",
    "DegreeLexicographic",
    "DegreeReverseLexicographic",
    "DEigensystem",
    "DEigenvalues",
    "Deinitialization",
    "Del",
    "DelaunayMesh",
    "Delayed",
    "Deletable",
    "Delete",
    "DeleteAdjacentDuplicates",
    "DeleteAnomalies",
    "DeleteBorderComponents",
    "DeleteCases",
    "DeleteChannel",
    "DeleteCloudExpression",
    "DeleteContents",
    "DeleteDirectory",
    "DeleteDuplicates",
    "DeleteDuplicatesBy",
    "DeleteElements",
    "DeleteFile",
    "DeleteMissing",
    "DeleteObject",
    "DeletePermissionsKey",
    "DeleteSearchIndex",
    "DeleteSmallComponents",
    "DeleteStopwords",
    "DeleteWithContents",
    "DeletionWarning",
    "DelimitedArray",
    "DelimitedSequence",
    "Delimiter",
    "DelimiterAutoMatching",
    "DelimiterFlashTime",
    "DelimiterMatching",
    "Delimiters",
    "DeliveryFunction",
    "Dendrogram",
    "Denominator",
    "DensityGraphics",
    "DensityHistogram",
    "DensityPlot",
    "DensityPlot3D",
    "DependentVariables",
    "Deploy",
    "Deployed",
    "Depth",
    "DepthFirstScan",
    "Derivative",
    "DerivativeFilter",
    "DerivativePDETerm",
    "DerivedKey",
    "DescriptorStateSpace",
    "DesignMatrix",
    "DestroyAfterEvaluation",
    "Det",
    "DeviceClose",
    "DeviceConfigure",
    "DeviceExecute",
    "DeviceExecuteAsynchronous",
    "DeviceObject",
    "DeviceOpen",
    "DeviceOpenQ",
    "DeviceRead",
    "DeviceReadBuffer",
    "DeviceReadLatest",
    "DeviceReadList",
    "DeviceReadTimeSeries",
    "Devices",
    "DeviceStreams",
    "DeviceWrite",
    "DeviceWriteBuffer",
    "DGaussianWavelet",
    "DiacriticalPositioning",
    "Diagonal",
    "DiagonalizableMatrixQ",
    "DiagonalMatrix",
    "DiagonalMatrixQ",
    "Dialog",
    "DialogIndent",
    "DialogInput",
    "DialogLevel",
    "DialogNotebook",
    "DialogProlog",
    "DialogReturn",
    "DialogSymbols",
    "Diamond",
    "DiamondMatrix",
    "DiceDissimilarity",
    "DictionaryLookup",
    "DictionaryWordQ",
    "DifferenceDelta",
    "DifferenceOrder",
    "DifferenceQuotient",
    "DifferenceRoot",
    "DifferenceRootReduce",
    "Differences",
    "DifferentialD",
    "DifferentialRoot",
    "DifferentialRootReduce",
    "DifferentiatorFilter",
    "DiffusionPDETerm",
    "DiggleGatesPointProcess",
    "DiggleGrattonPointProcess",
    "DigitalSignature",
    "DigitBlock",
    "DigitBlockMinimum",
    "DigitCharacter",
    "DigitCount",
    "DigitQ",
    "DihedralAngle",
    "DihedralGroup",
    "Dilation",
    "DimensionalCombinations",
    "DimensionalMeshComponents",
    "DimensionReduce",
    "DimensionReducerFunction",
    "DimensionReduction",
    "Dimensions",
    "DiracComb",
    "DiracDelta",
    "DirectedEdge",
    "DirectedEdges",
    "DirectedGraph",
    "DirectedGraphQ",
    "DirectedInfinity",
    "Direction",
    "DirectionalLight",
    "Directive",
    "Directory",
    "DirectoryName",
    "DirectoryQ",
    "DirectoryStack",
    "DirichletBeta",
    "DirichletCharacter",
    "DirichletCondition",
    "DirichletConvolve",
    "DirichletDistribution",
    "DirichletEta",
    "DirichletL",
    "DirichletLambda",
    "DirichletTransform",
    "DirichletWindow",
    "DisableConsolePrintPacket",
    "DisableFormatting",
    "DiscreteAsymptotic",
    "DiscreteChirpZTransform",
    "DiscreteConvolve",
    "DiscreteDelta",
    "DiscreteHadamardTransform",
    "DiscreteIndicator",
    "DiscreteInputOutputModel",
    "DiscreteLimit",
    "DiscreteLQEstimatorGains",
    "DiscreteLQRegulatorGains",
    "DiscreteLyapunovSolve",
    "DiscreteMarkovProcess",
    "DiscreteMaxLimit",
    "DiscreteMinLimit",
    "DiscretePlot",
    "DiscretePlot3D",
    "DiscreteRatio",
    "DiscreteRiccatiSolve",
    "DiscreteShift",
    "DiscreteTimeModelQ",
    "DiscreteUniformDistribution",
    "DiscreteVariables",
    "DiscreteWaveletData",
    "DiscreteWaveletPacketTransform",
    "DiscreteWaveletTransform",
    "DiscretizeGraphics",
    "DiscretizeRegion",
    "Discriminant",
    "DisjointQ",
    "Disjunction",
    "Disk",
    "DiskBox",
    "DiskBoxOptions",
    "DiskMatrix",
    "DiskSegment",
    "Dispatch",
    "DispatchQ",
    "DispersionEstimatorFunction",
    "Display",
    "DisplayAllSteps",
    "DisplayEndPacket",
    "DisplayForm",
    "DisplayFunction",
    "DisplayPacket",
    "DisplayRules",
    "DisplayString",
    "DisplayTemporary",
    "DisplayWith",
    "DisplayWithRef",
    "DisplayWithVariable",
    "DistanceFunction",
    "DistanceMatrix",
    "DistanceTransform",
    "Distribute",
    "Distributed",
    "DistributedContexts",
    "DistributeDefinitions",
    "DistributionChart",
    "DistributionDomain",
    "DistributionFitTest",
    "DistributionParameterAssumptions",
    "DistributionParameterQ",
    "Dithering",
    "Div",
    "Divergence",
    "Divide",
    "DivideBy",
    "Dividers",
    "DivideSides",
    "Divisible",
    "Divisors",
    "DivisorSigma",
    "DivisorSum",
    "DMSList",
    "DMSString",
    "Do",
    "DockedCell",
    "DockedCells",
    "DocumentGenerator",
    "DocumentGeneratorInformation",
    "DocumentGeneratorInformationData",
    "DocumentGenerators",
    "DocumentNotebook",
    "DocumentWeightingRules",
    "Dodecahedron",
    "DomainRegistrationInformation",
    "DominantColors",
    "DominatorTreeGraph",
    "DominatorVertexList",
    "DOSTextFormat",
    "Dot",
    "DotDashed",
    "DotEqual",
    "DotLayer",
    "DotPlusLayer",
    "Dotted",
    "DoubleBracketingBar",
    "DoubleContourIntegral",
    "DoubleDownArrow",
    "DoubleLeftArrow",
    "DoubleLeftRightArrow",
    "DoubleLeftTee",
    "DoubleLongLeftArrow",
    "DoubleLongLeftRightArrow",
    "DoubleLongRightArrow",
    "DoubleRightArrow",
    "DoubleRightTee",
    "DoubleUpArrow",
    "DoubleUpDownArrow",
    "DoubleVerticalBar",
    "DoublyInfinite",
    "Down",
    "DownArrow",
    "DownArrowBar",
    "DownArrowUpArrow",
    "DownLeftRightVector",
    "DownLeftTeeVector",
    "DownLeftVector",
    "DownLeftVectorBar",
    "DownRightTeeVector",
    "DownRightVector",
    "DownRightVectorBar",
    "Downsample",
    "DownTee",
    "DownTeeArrow",
    "DownValues",
    "DownValuesFunction",
    "DragAndDrop",
    "DrawBackFaces",
    "DrawEdges",
    "DrawFrontFaces",
    "DrawHighlighted",
    "DrazinInverse",
    "Drop",
    "DropoutLayer",
    "DropShadowing",
    "DSolve",
    "DSolveChangeVariables",
    "DSolveValue",
    "Dt",
    "DualLinearProgramming",
    "DualPlanarGraph",
    "DualPolyhedron",
    "DualSystemsModel",
    "DumpGet",
    "DumpSave",
    "DuplicateFreeQ",
    "Duration",
    "Dynamic",
    "DynamicBox",
    "DynamicBoxOptions",
    "DynamicEvaluationTimeout",
    "DynamicGeoGraphics",
    "DynamicImage",
    "DynamicLocation",
    "DynamicModule",
    "DynamicModuleBox",
    "DynamicModuleBoxOptions",
    "DynamicModuleParent",
    "DynamicModuleValues",
    "DynamicName",
    "DynamicNamespace",
    "DynamicReference",
    "DynamicSetting",
    "DynamicUpdating",
    "DynamicWrapper",
    "DynamicWrapperBox",
    "DynamicWrapperBoxOptions",
    "E",
    "EarthImpactData",
    "EarthquakeData",
    "EccentricityCentrality",
    "Echo",
    "EchoEvaluation",
    "EchoFunction",
    "EchoLabel",
    "EchoTiming",
    "EclipseType",
    "EdgeAdd",
    "EdgeBetweennessCentrality",
    "EdgeCapacity",
    "EdgeCapForm",
    "EdgeChromaticNumber",
    "EdgeColor",
    "EdgeConnectivity",
    "EdgeContract",
    "EdgeCost",
    "EdgeCount",
    "EdgeCoverQ",
    "EdgeCycleMatrix",
    "EdgeDashing",
    "EdgeDelete",
    "EdgeDetect",
    "EdgeForm",
    "EdgeIndex",
    "EdgeJoinForm",
    "EdgeLabeling",
    "EdgeLabels",
    "EdgeLabelStyle",
    "EdgeList",
    "EdgeOpacity",
    "EdgeQ",
    "EdgeRenderingFunction",
    "EdgeRules",
    "EdgeShapeFunction",
    "EdgeStyle",
    "EdgeTaggedGraph",
    "EdgeTaggedGraphQ",
    "EdgeTags",
    "EdgeThickness",
    "EdgeTransitiveGraphQ",
    "EdgeValueRange",
    "EdgeValueSizes",
    "EdgeWeight",
    "EdgeWeightedGraphQ",
    "Editable",
    "EditButtonSettings",
    "EditCellTagsSettings",
    "EditDistance",
    "EffectiveInterest",
    "Eigensystem",
    "Eigenvalues",
    "EigenvectorCentrality",
    "Eigenvectors",
    "Element",
    "ElementData",
    "ElementwiseLayer",
    "ElidedForms",
    "Eliminate",
    "EliminationOrder",
    "Ellipsoid",
    "EllipticE",
    "EllipticExp",
    "EllipticExpPrime",
    "EllipticF",
    "EllipticFilterModel",
    "EllipticK",
    "EllipticLog",
    "EllipticNomeQ",
    "EllipticPi",
    "EllipticReducedHalfPeriods",
    "EllipticTheta",
    "EllipticThetaPrime",
    "EmbedCode",
    "EmbeddedHTML",
    "EmbeddedService",
    "EmbeddedSQLEntityClass",
    "EmbeddedSQLExpression",
    "EmbeddingLayer",
    "EmbeddingObject",
    "EmitSound",
    "EmphasizeSyntaxErrors",
    "EmpiricalDistribution",
    "Empty",
    "EmptyGraphQ",
    "EmptyRegion",
    "EmptySpaceF",
    "EnableConsolePrintPacket",
    "Enabled",
    "Enclose",
    "Encode",
    "Encrypt",
    "EncryptedObject",
    "EncryptFile",
    "End",
    "EndAdd",
    "EndDialogPacket",
    "EndOfBuffer",
    "EndOfFile",
    "EndOfLine",
    "EndOfString",
    "EndPackage",
    "EngineEnvironment",
    "EngineeringForm",
    "Enter",
    "EnterExpressionPacket",
    "EnterTextPacket",
    "Entity",
    "EntityClass",
    "EntityClassList",
    "EntityCopies",
    "EntityFunction",
    "EntityGroup",
    "EntityInstance",
    "EntityList",
    "EntityPrefetch",
    "EntityProperties",
    "EntityProperty",
    "EntityPropertyClass",
    "EntityRegister",
    "EntityStore",
    "EntityStores",
    "EntityTypeName",
    "EntityUnregister",
    "EntityValue",
    "Entropy",
    "EntropyFilter",
    "Environment",
    "Epilog",
    "EpilogFunction",
    "Equal",
    "EqualColumns",
    "EqualRows",
    "EqualTilde",
    "EqualTo",
    "EquatedTo",
    "Equilibrium",
    "EquirippleFilterKernel",
    "Equivalent",
    "Erf",
    "Erfc",
    "Erfi",
    "ErlangB",
    "ErlangC",
    "ErlangDistribution",
    "Erosion",
    "ErrorBox",
    "ErrorBoxOptions",
    "ErrorNorm",
    "ErrorPacket",
    "ErrorsDialogSettings",
    "EscapeRadius",
    "EstimatedBackground",
    "EstimatedDistribution",
    "EstimatedPointNormals",
    "EstimatedPointProcess",
    "EstimatedProcess",
    "EstimatedVariogramModel",
    "EstimatorGains",
    "EstimatorRegulator",
    "EuclideanDistance",
    "EulerAngles",
    "EulerCharacteristic",
    "EulerE",
    "EulerGamma",
    "EulerianGraphQ",
    "EulerMatrix",
    "EulerPhi",
    "Evaluatable",
    "Evaluate",
    "Evaluated",
    "EvaluatePacket",
    "EvaluateScheduledTask",
    "EvaluationBox",
    "EvaluationCell",
    "EvaluationCompletionAction",
    "EvaluationData",
    "EvaluationElements",
    "EvaluationEnvironment",
    "EvaluationMode",
    "EvaluationMonitor",
    "EvaluationNotebook",
    "EvaluationObject",
    "EvaluationOrder",
    "EvaluationPrivileges",
    "EvaluationRateLimit",
    "Evaluator",
    "EvaluatorNames",
    "EvenQ",
    "EventData",
    "EventEvaluator",
    "EventHandler",
    "EventHandlerTag",
    "EventLabels",
    "EventSeries",
    "ExactBlackmanWindow",
    "ExactNumberQ",
    "ExactRootIsolation",
    "ExampleData",
    "Except",
    "ExcludedContexts",
    "ExcludedForms",
    "ExcludedLines",
    "ExcludedPhysicalQuantities",
    "ExcludePods",
    "Exclusions",
    "ExclusionsStyle",
    "Exists",
    "Exit",
    "ExitDialog",
    "ExoplanetData",
    "Exp",
    "Expand",
    "ExpandAll",
    "ExpandDenominator",
    "ExpandFileName",
    "ExpandNumerator",
    "Expectation",
    "ExpectationE",
    "ExpectedValue",
    "ExpGammaDistribution",
    "ExpIntegralE",
    "ExpIntegralEi",
    "ExpirationDate",
    "Exponent",
    "ExponentFunction",
    "ExponentialDistribution",
    "ExponentialFamily",
    "ExponentialGeneratingFunction",
    "ExponentialMovingAverage",
    "ExponentialPowerDistribution",
    "ExponentPosition",
    "ExponentStep",
    "Export",
    "ExportAutoReplacements",
    "ExportByteArray",
    "ExportForm",
    "ExportPacket",
    "ExportString",
    "Expression",
    "ExpressionCell",
    "ExpressionGraph",
    "ExpressionPacket",
    "ExpressionTree",
    "ExpressionUUID",
    "ExpToTrig",
    "ExtendedEntityClass",
    "ExtendedGCD",
    "Extension",
    "ExtentElementFunction",
    "ExtentMarkers",
    "ExtentSize",
    "ExternalBundle",
    "ExternalCall",
    "ExternalDataCharacterEncoding",
    "ExternalEvaluate",
    "ExternalFunction",
    "ExternalFunctionName",
    "ExternalIdentifier",
    "ExternalObject",
    "ExternalOptions",
    "ExternalSessionObject",
    "ExternalSessions",
    "ExternalStorageBase",
    "ExternalStorageDownload",
    "ExternalStorageGet",
    "ExternalStorageObject",
    "ExternalStoragePut",
    "ExternalStorageUpload",
    "ExternalTypeSignature",
    "ExternalValue",
    "Extract",
    "ExtractArchive",
    "ExtractLayer",
    "ExtractPacletArchive",
    "ExtremeValueDistribution",
    "FaceAlign",
    "FaceForm",
    "FaceGrids",
    "FaceGridsStyle",
    "FaceRecognize",
    "FacialFeatures",
    "Factor",
    "FactorComplete",
    "Factorial",
    "Factorial2",
    "FactorialMoment",
    "FactorialMomentGeneratingFunction",
    "FactorialPower",
    "FactorInteger",
    "FactorList",
    "FactorSquareFree",
    "FactorSquareFreeList",
    "FactorTerms",
    "FactorTermsList",
    "Fail",
    "Failure",
    "FailureAction",
    "FailureDistribution",
    "FailureQ",
    "False",
    "FareySequence",
    "FARIMAProcess",
    "FeatureDistance",
    "FeatureExtract",
    "FeatureExtraction",
    "FeatureExtractor",
    "FeatureExtractorFunction",
    "FeatureImpactPlot",
    "FeatureNames",
    "FeatureNearest",
    "FeatureSpacePlot",
    "FeatureSpacePlot3D",
    "FeatureTypes",
    "FeatureValueDependencyPlot",
    "FeatureValueImpactPlot",
    "FEDisableConsolePrintPacket",
    "FeedbackLinearize",
    "FeedbackSector",
    "FeedbackSectorStyle",
    "FeedbackType",
    "FEEnableConsolePrintPacket",
    "FetalGrowthData",
    "Fibonacci",
    "Fibonorial",
    "FieldCompletionFunction",
    "FieldHint",
    "FieldHintStyle",
    "FieldMasked",
    "FieldSize",
    "File",
    "FileBaseName",
    "FileByteCount",
    "FileConvert",
    "FileDate",
    "FileExistsQ",
    "FileExtension",
    "FileFormat",
    "FileFormatProperties",
    "FileFormatQ",
    "FileHandler",
    "FileHash",
    "FileInformation",
    "FileName",
    "FileNameDepth",
    "FileNameDialogSettings",
    "FileNameDrop",
    "FileNameForms",
    "FileNameJoin",
    "FileNames",
    "FileNameSetter",
    "FileNameSplit",
    "FileNameTake",
    "FileNameToFormatList",
    "FilePrint",
    "FileSize",
    "FileSystemMap",
    "FileSystemScan",
    "FileSystemTree",
    "FileTemplate",
    "FileTemplateApply",
    "FileType",
    "FilledCurve",
    "FilledCurveBox",
    "FilledCurveBoxOptions",
    "FilledTorus",
    "FillForm",
    "Filling",
    "FillingStyle",
    "FillingTransform",
    "FilteredEntityClass",
    "FilterRules",
    "FinancialBond",
    "FinancialData",
    "FinancialDerivative",
    "FinancialIndicator",
    "Find",
    "FindAnomalies",
    "FindArgMax",
    "FindArgMin",
    "FindChannels",
    "FindClique",
    "FindClusters",
    "FindCookies",
    "FindCurvePath",
    "FindCycle",
    "FindDevices",
    "FindDistribution",
    "FindDistributionParameters",
    "FindDivisions",
    "FindEdgeColoring",
    "FindEdgeCover",
    "FindEdgeCut",
    "FindEdgeIndependentPaths",
    "FindEquationalProof",
    "FindEulerianCycle",
    "FindExternalEvaluators",
    "FindFaces",
    "FindFile",
    "FindFit",
    "FindFormula",
    "FindFundamentalCycles",
    "FindGeneratingFunction",
    "FindGeoLocation",
    "FindGeometricConjectures",
    "FindGeometricTransform",
    "FindGraphCommunities",
    "FindGraphIsomorphism",
    "FindGraphPartition",
    "FindHamiltonianCycle",
    "FindHamiltonianPath",
    "FindHiddenMarkovStates",
    "FindImageText",
    "FindIndependentEdgeSet",
    "FindIndependentVertexSet",
    "FindInstance",
    "FindIntegerNullVector",
    "FindIsomers",
    "FindIsomorphicSubgraph",
    "FindKClan",
    "FindKClique",
    "FindKClub",
    "FindKPlex",
    "FindLibrary",
    "FindLinearRecurrence",
    "FindList",
    "FindMatchingColor",
    "FindMaximum",
    "FindMaximumCut",
    "FindMaximumFlow",
    "FindMaxValue",
    "FindMeshDefects",
    "FindMinimum",
    "FindMinimumCostFlow",
    "FindMinimumCut",
    "FindMinValue",
    "FindMoleculeSubstructure",
    "FindPath",
    "FindPeaks",
    "FindPermutation",
    "FindPlanarColoring",
    "FindPointProcessParameters",
    "FindPostmanTour",
    "FindProcessParameters",
    "FindRegionTransform",
    "FindRepeat",
    "FindRoot",
    "FindSequenceFunction",
    "FindSettings",
    "FindShortestPath",
    "FindShortestTour",
    "FindSpanningTree",
    "FindSubgraphIsomorphism",
    "FindSystemModelEquilibrium",
    "FindTextualAnswer",
    "FindThreshold",
    "FindTransientRepeat",
    "FindVertexColoring",
    "FindVertexCover",
    "FindVertexCut",
    "FindVertexIndependentPaths",
    "Fine",
    "FinishDynamic",
    "FiniteAbelianGroupCount",
    "FiniteGroupCount",
    "FiniteGroupData",
    "First",
    "FirstCase",
    "FirstPassageTimeDistribution",
    "FirstPosition",
    "FischerGroupFi22",
    "FischerGroupFi23",
    "FischerGroupFi24Prime",
    "FisherHypergeometricDistribution",
    "FisherRatioTest",
    "FisherZDistribution",
    "Fit",
    "FitAll",
    "FitRegularization",
    "FittedModel",
    "FixedOrder",
    "FixedPoint",
    "FixedPointList",
    "FlashSelection",
    "Flat",
    "FlatShading",
    "Flatten",
    "FlattenAt",
    "FlattenLayer",
    "FlatTopWindow",
    "FlightData",
    "FlipView",
    "Floor",
    "FlowPolynomial",
    "Fold",
    "FoldList",
    "FoldPair",
    "FoldPairList",
    "FoldWhile",
    "FoldWhileList",
    "FollowRedirects",
    "Font",
    "FontColor",
    "FontFamily",
    "FontForm",
    "FontName",
    "FontOpacity",
    "FontPostScriptName",
    "FontProperties",
    "FontReencoding",
    "FontSize",
    "FontSlant",
    "FontSubstitutions",
    "FontTracking",
    "FontVariations",
    "FontWeight",
    "For",
    "ForAll",
    "ForAllType",
    "ForceVersionInstall",
    "Format",
    "FormatRules",
    "FormatType",
    "FormatTypeAutoConvert",
    "FormatValues",
    "FormBox",
    "FormBoxOptions",
    "FormControl",
    "FormFunction",
    "FormLayoutFunction",
    "FormObject",
    "FormPage",
    "FormProtectionMethod",
    "FormTheme",
    "FormulaData",
    "FormulaLookup",
    "FortranForm",
    "Forward",
    "ForwardBackward",
    "ForwardCloudCredentials",
    "Fourier",
    "FourierCoefficient",
    "FourierCosCoefficient",
    "FourierCosSeries",
    "FourierCosTransform",
    "FourierDCT",
    "FourierDCTFilter",
    "FourierDCTMatrix",
    "FourierDST",
    "FourierDSTMatrix",
    "FourierMatrix",
    "FourierParameters",
    "FourierSequenceTransform",
    "FourierSeries",
    "FourierSinCoefficient",
    "FourierSinSeries",
    "FourierSinTransform",
    "FourierTransform",
    "FourierTrigSeries",
    "FoxH",
    "FoxHReduce",
    "FractionalBrownianMotionProcess",
    "FractionalD",
    "FractionalGaussianNoiseProcess",
    "FractionalPart",
    "FractionBox",
    "FractionBoxOptions",
    "FractionLine",
    "Frame",
    "FrameBox",
    "FrameBoxOptions",
    "Framed",
    "FrameInset",
    "FrameLabel",
    "Frameless",
    "FrameListVideo",
    "FrameMargins",
    "FrameRate",
    "FrameStyle",
    "FrameTicks",
    "FrameTicksStyle",
    "FRatioDistribution",
    "FrechetDistribution",
    "FreeQ",
    "FrenetSerretSystem",
    "FrequencySamplingFilterKernel",
    "FresnelC",
    "FresnelF",
    "FresnelG",
    "FresnelS",
    "Friday",
    "FrobeniusNumber",
    "FrobeniusSolve",
    "FromAbsoluteTime",
    "FromCharacterCode",
    "FromCoefficientRules",
    "FromContinuedFraction",
    "FromDate",
    "FromDateString",
    "FromDigits",
    "FromDMS",
    "FromEntity",
    "FromJulianDate",
    "FromLetterNumber",
    "FromPolarCoordinates",
    "FromRawPointer",
    "FromRomanNumeral",
    "FromSphericalCoordinates",
    "FromUnixTime",
    "Front",
    "FrontEndDynamicExpression",
    "FrontEndEventActions",
    "FrontEndExecute",
    "FrontEndObject",
    "FrontEndResource",
    "FrontEndResourceString",
    "FrontEndStackSize",
    "FrontEndToken",
    "FrontEndTokenExecute",
    "FrontEndValueCache",
    "FrontEndVersion",
    "FrontFaceColor",
    "FrontFaceGlowColor",
    "FrontFaceOpacity",
    "FrontFaceSpecularColor",
    "FrontFaceSpecularExponent",
    "FrontFaceSurfaceAppearance",
    "FrontFaceTexture",
    "Full",
    "FullAxes",
    "FullDefinition",
    "FullForm",
    "FullGraphics",
    "FullInformationOutputRegulator",
    "FullOptions",
    "FullRegion",
    "FullSimplify",
    "Function",
    "FunctionAnalytic",
    "FunctionBijective",
    "FunctionCompile",
    "FunctionCompileExport",
    "FunctionCompileExportByteArray",
    "FunctionCompileExportLibrary",
    "FunctionCompileExportString",
    "FunctionContinuous",
    "FunctionConvexity",
    "FunctionDeclaration",
    "FunctionDiscontinuities",
    "FunctionDomain",
    "FunctionExpand",
    "FunctionInjective",
    "FunctionInterpolation",
    "FunctionLayer",
    "FunctionMeromorphic",
    "FunctionMonotonicity",
    "FunctionPeriod",
    "FunctionPoles",
    "FunctionRange",
    "FunctionSign",
    "FunctionSingularities",
    "FunctionSpace",
    "FunctionSurjective",
    "FussellVeselyImportance",
    "GaborFilter",
    "GaborMatrix",
    "GaborWavelet",
    "GainMargins",
    "GainPhaseMargins",
    "GalaxyData",
    "GalleryView",
    "Gamma",
    "GammaDistribution",
    "GammaRegularized",
    "GapPenalty",
    "GARCHProcess",
    "GatedRecurrentLayer",
    "Gather",
    "GatherBy",
    "GaugeFaceElementFunction",
    "GaugeFaceStyle",
    "GaugeFrameElementFunction",
    "GaugeFrameSize",
    "GaugeFrameStyle",
    "GaugeLabels",
    "GaugeMarkers",
    "GaugeStyle",
    "GaussianFilter",
    "GaussianIntegers",
    "GaussianMatrix",
    "GaussianOrthogonalMatrixDistribution",
    "GaussianSymplecticMatrixDistribution",
    "GaussianUnitaryMatrixDistribution",
    "GaussianWindow",
    "GCD",
    "GegenbauerC",
    "General",
    "GeneralizedLinearModelFit",
    "GenerateAsymmetricKeyPair",
    "GenerateConditions",
    "GeneratedAssetFormat",
    "GeneratedAssetLocation",
    "GeneratedCell",
    "GeneratedCellStyles",
    "GeneratedDocumentBinding",
    "GenerateDerivedKey",
    "GenerateDigitalSignature",
    "GenerateDocument",
    "GeneratedParameters",
    "GeneratedQuantityMagnitudes",
    "GenerateFileSignature",
    "GenerateHTTPResponse",
    "GenerateSecuredAuthenticationKey",
    "GenerateSymmetricKey",
    "GeneratingFunction",
    "GeneratorDescription",
    "GeneratorHistoryLength",
    "GeneratorOutputType",
    "Generic",
    "GenericCylindricalDecomposition",
    "GenomeData",
    "GenomeLookup",
    "GeoAntipode",
    "GeoArea",
    "GeoArraySize",
    "GeoBackground",
    "GeoBoundary",
    "GeoBoundingBox",
    "GeoBounds",
    "GeoBoundsRegion",
    "GeoBoundsRegionBoundary",
    "GeoBubbleChart",
    "GeoCenter",
    "GeoCircle",
    "GeoContourPlot",
    "GeoDensityPlot",
    "GeodesicClosing",
    "GeodesicDilation",
    "GeodesicErosion",
    "GeodesicOpening",
    "GeodesicPolyhedron",
    "GeoDestination",
    "GeodesyData",
    "GeoDirection",
    "GeoDisk",
    "GeoDisplacement",
    "GeoDistance",
    "GeoDistanceList",
    "GeoElevationData",
    "GeoEntities",
    "GeoGraphics",
    "GeoGraphPlot",
    "GeoGraphValuePlot",
    "GeogravityModelData",
    "GeoGridDirectionDifference",
    "GeoGridLines",
    "GeoGridLinesStyle",
    "GeoGridPosition",
    "GeoGridRange",
    "GeoGridRangePadding",
    "GeoGridUnitArea",
    "GeoGridUnitDistance",
    "GeoGridVector",
    "GeoGroup",
    "GeoHemisphere",
    "GeoHemisphereBoundary",
    "GeoHistogram",
    "GeoIdentify",
    "GeoImage",
    "GeoLabels",
    "GeoLength",
    "GeoListPlot",
    "GeoLocation",
    "GeologicalPeriodData",
    "GeomagneticModelData",
    "GeoMarker",
    "GeometricAssertion",
    "GeometricBrownianMotionProcess",
    "GeometricDistribution",
    "GeometricMean",
    "GeometricMeanFilter",
    "GeometricOptimization",
    "GeometricScene",
    "GeometricStep",
    "GeometricStylingRules",
    "GeometricTest",
    "GeometricTransformation",
    "GeometricTransformation3DBox",
    "GeometricTransformation3DBoxOptions",
    "GeometricTransformationBox",
    "GeometricTransformationBoxOptions",
    "GeoModel",
    "GeoNearest",
    "GeoOrientationData",
    "GeoPath",
    "GeoPolygon",
    "GeoPosition",
    "GeoPositionENU",
    "GeoPositionXYZ",
    "GeoProjection",
    "GeoProjectionData",
    "GeoRange",
    "GeoRangePadding",
    "GeoRegionValuePlot",
    "GeoResolution",
    "GeoScaleBar",
    "GeoServer",
    "GeoSmoothHistogram",
    "GeoStreamPlot",
    "GeoStyling",
    "GeoStylingImageFunction",
    "GeoVariant",
    "GeoVector",
    "GeoVectorENU",
    "GeoVectorPlot",
    "GeoVectorXYZ",
    "GeoVisibleRegion",
    "GeoVisibleRegionBoundary",
    "GeoWithinQ",
    "GeoZoomLevel",
    "GestureHandler",
    "GestureHandlerTag",
    "Get",
    "GetContext",
    "GetEnvironment",
    "GetFileName",
    "GetLinebreakInformationPacket",
    "GibbsPointProcess",
    "Glaisher",
    "GlobalClusteringCoefficient",
    "GlobalPreferences",
    "GlobalSession",
    "Glow",
    "GoldenAngle",
    "GoldenRatio",
    "GompertzMakehamDistribution",
    "GoochShading",
    "GoodmanKruskalGamma",
    "GoodmanKruskalGammaTest",
    "Goto",
    "GouraudShading",
    "Grad",
    "Gradient",
    "GradientFilter",
    "GradientFittedMesh",
    "GradientOrientationFilter",
    "GrammarApply",
    "GrammarRules",
    "GrammarToken",
    "Graph",
    "Graph3D",
    "GraphAssortativity",
    "GraphAutomorphismGroup",
    "GraphCenter",
    "GraphComplement",
    "GraphData",
    "GraphDensity",
    "GraphDiameter",
    "GraphDifference",
    "GraphDisjointUnion",
    "GraphDistance",
    "GraphDistanceMatrix",
    "GraphEmbedding",
    "GraphHighlight",
    "GraphHighlightStyle",
    "GraphHub",
    "Graphics",
    "Graphics3D",
    "Graphics3DBox",
    "Graphics3DBoxOptions",
    "GraphicsArray",
    "GraphicsBaseline",
    "GraphicsBox",
    "GraphicsBoxOptions",
    "GraphicsColor",
    "GraphicsColumn",
    "GraphicsComplex",
    "GraphicsComplex3DBox",
    "GraphicsComplex3DBoxOptions",
    "GraphicsComplexBox",
    "GraphicsComplexBoxOptions",
    "GraphicsContents",
    "GraphicsData",
    "GraphicsGrid",
    "GraphicsGridBox",
    "GraphicsGroup",
    "GraphicsGroup3DBox",
    "GraphicsGroup3DBoxOptions",
    "GraphicsGroupBox",
    "GraphicsGroupBoxOptions",
    "GraphicsGrouping",
    "GraphicsHighlightColor",
    "GraphicsRow",
    "GraphicsSpacing",
    "GraphicsStyle",
    "GraphIntersection",
    "GraphJoin",
    "GraphLayerLabels",
    "GraphLayers",
    "GraphLayerStyle",
    "GraphLayout",
    "GraphLinkEfficiency",
    "GraphPeriphery",
    "GraphPlot",
    "GraphPlot3D",
    "GraphPower",
    "GraphProduct",
    "GraphPropertyDistribution",
    "GraphQ",
    "GraphRadius",
    "GraphReciprocity",
    "GraphRoot",
    "GraphStyle",
    "GraphSum",
    "GraphTree",
    "GraphUnion",
    "Gray",
    "GrayLevel",
    "Greater",
    "GreaterEqual",
    "GreaterEqualLess",
    "GreaterEqualThan",
    "GreaterFullEqual",
    "GreaterGreater",
    "GreaterLess",
    "GreaterSlantEqual",
    "GreaterThan",
    "GreaterTilde",
    "GreekStyle",
    "Green",
    "GreenFunction",
    "Grid",
    "GridBaseline",
    "GridBox",
    "GridBoxAlignment",
    "GridBoxBackground",
    "GridBoxDividers",
    "GridBoxFrame",
    "GridBoxItemSize",
    "GridBoxItemStyle",
    "GridBoxOptions",
    "GridBoxSpacings",
    "GridCreationSettings",
    "GridDefaultElement",
    "GridElementStyleOptions",
    "GridFrame",
    "GridFrameMargins",
    "GridGraph",
    "GridLines",
    "GridLinesStyle",
    "GridVideo",
    "GroebnerBasis",
    "GroupActionBase",
    "GroupBy",
    "GroupCentralizer",
    "GroupElementFromWord",
    "GroupElementPosition",
    "GroupElementQ",
    "GroupElements",
    "GroupElementToWord",
    "GroupGenerators",
    "Groupings",
    "GroupMultiplicationTable",
    "GroupOpenerColor",
    "GroupOpenerInsideFrame",
    "GroupOrbits",
    "GroupOrder",
    "GroupPageBreakWithin",
    "GroupSetwiseStabilizer",
    "GroupStabilizer",
    "GroupStabilizerChain",
    "GroupTogetherGrouping",
    "GroupTogetherNestedGrouping",
    "GrowCutComponents",
    "Gudermannian",
    "GuidedFilter",
    "GumbelDistribution",
    "HaarWavelet",
    "HadamardMatrix",
    "HalfLine",
    "HalfNormalDistribution",
    "HalfPlane",
    "HalfSpace",
    "HalftoneShading",
    "HamiltonianGraphQ",
    "HammingDistance",
    "HammingWindow",
    "HandlerFunctions",
    "HandlerFunctionsKeys",
    "HankelH1",
    "HankelH2",
    "HankelMatrix",
    "HankelTransform",
    "HannPoissonWindow",
    "HannWindow",
    "HaradaNortonGroupHN",
    "HararyGraph",
    "HardcorePointProcess",
    "HarmonicMean",
    "HarmonicMeanFilter",
    "HarmonicNumber",
    "Hash",
    "HatchFilling",
    "HatchShading",
    "Haversine",
    "HazardFunction",
    "Head",
    "HeadCompose",
    "HeaderAlignment",
    "HeaderBackground",
    "HeaderDisplayFunction",
    "HeaderLines",
    "Headers",
    "HeaderSize",
    "HeaderStyle",
    "Heads",
    "HeatFluxValue",
    "HeatInsulationValue",
    "HeatOutflowValue",
    "HeatRadiationValue",
    "HeatSymmetryValue",
    "HeatTemperatureCondition",
    "HeatTransferPDEComponent",
    "HeatTransferValue",
    "HeavisideLambda",
    "HeavisidePi",
    "HeavisideTheta",
    "HeldGroupHe",
    "HeldPart",
    "HelmholtzPDEComponent",
    "HelpBrowserLookup",
    "HelpBrowserNotebook",
    "HelpBrowserSettings",
    "HelpViewerSettings",
    "Here",
    "HermiteDecomposition",
    "HermiteH",
    "Hermitian",
    "HermitianMatrixQ",
    "HessenbergDecomposition",
    "Hessian",
    "HeunB",
    "HeunBPrime",
    "HeunC",
    "HeunCPrime",
    "HeunD",
    "HeunDPrime",
    "HeunG",
    "HeunGPrime",
    "HeunT",
    "HeunTPrime",
    "HexadecimalCharacter",
    "Hexahedron",
    "HexahedronBox",
    "HexahedronBoxOptions",
    "HiddenItems",
    "HiddenMarkovProcess",
    "HiddenSurface",
    "Highlighted",
    "HighlightGraph",
    "HighlightImage",
    "HighlightMesh",
    "HighlightString",
    "HighpassFilter",
    "HigmanSimsGroupHS",
    "HilbertCurve",
    "HilbertFilter",
    "HilbertMatrix",
    "Histogram",
    "Histogram3D",
    "HistogramDistribution",
    "HistogramList",
    "HistogramPointDensity",
    "HistogramTransform",
    "HistogramTransformInterpolation",
    "HistoricalPeriodData",
    "HitMissTransform",
    "HITSCentrality",
    "HjorthDistribution",
    "HodgeDual",
    "HoeffdingD",
    "HoeffdingDTest",
    "Hold",
    "HoldAll",
    "HoldAllComplete",
    "HoldComplete",
    "HoldFirst",
    "HoldForm",
    "HoldPattern",
    "HoldRest",
    "HolidayCalendar",
    "HomeDirectory",
    "HomePage",
    "Horizontal",
    "HorizontalForm",
    "HorizontalGauge",
    "HorizontalScrollPosition",
    "HornerForm",
    "HostLookup",
    "HotellingTSquareDistribution",
    "HoytDistribution",
    "HTMLSave",
    "HTTPErrorResponse",
    "HTTPRedirect",
    "HTTPRequest",
    "HTTPRequestData",
    "HTTPResponse",
    "Hue",
    "HumanGrowthData",
    "HumpDownHump",
    "HumpEqual",
    "HurwitzLerchPhi",
    "HurwitzZeta",
    "HyperbolicDistribution",
    "HypercubeGraph",
    "HyperexponentialDistribution",
    "Hyperfactorial",
    "Hypergeometric0F1",
    "Hypergeometric0F1Regularized",
    "Hypergeometric1F1",
    "Hypergeometric1F1Regularized",
    "Hypergeometric2F1",
    "Hypergeometric2F1Regularized",
    "HypergeometricDistribution",
    "HypergeometricPFQ",
    "HypergeometricPFQRegularized",
    "HypergeometricU",
    "Hyperlink",
    "HyperlinkAction",
    "HyperlinkCreationSettings",
    "Hyperplane",
    "Hyphenation",
    "HyphenationOptions",
    "HypoexponentialDistribution",
    "HypothesisTestData",
    "I",
    "IconData",
    "Iconize",
    "IconizedObject",
    "IconRules",
    "Icosahedron",
    "Identity",
    "IdentityMatrix",
    "If",
    "IfCompiled",
    "IgnoreCase",
    "IgnoreDiacritics",
    "IgnoreIsotopes",
    "IgnorePunctuation",
    "IgnoreSpellCheck",
    "IgnoreStereochemistry",
    "IgnoringInactive",
    "Im",
    "Image",
    "Image3D",
    "Image3DProjection",
    "Image3DSlices",
    "ImageAccumulate",
    "ImageAdd",
    "ImageAdjust",
    "ImageAlign",
    "ImageApply",
    "ImageApplyIndexed",
    "ImageAspectRatio",
    "ImageAssemble",
    "ImageAugmentationLayer",
    "ImageBoundingBoxes",
    "ImageCache",
    "ImageCacheValid",
    "ImageCapture",
    "ImageCaptureFunction",
    "ImageCases",
    "ImageChannels",
    "ImageClip",
    "ImageCollage",
    "ImageColorSpace",
    "ImageCompose",
    "ImageContainsQ",
    "ImageContents",
    "ImageConvolve",
    "ImageCooccurrence",
    "ImageCorners",
    "ImageCorrelate",
    "ImageCorrespondingPoints",
    "ImageCrop",
    "ImageData",
    "ImageDeconvolve",
    "ImageDemosaic",
    "ImageDifference",
    "ImageDimensions",
    "ImageDisplacements",
    "ImageDistance",
    "ImageEditMode",
    "ImageEffect",
    "ImageExposureCombine",
    "ImageFeatureTrack",
    "ImageFileApply",
    "ImageFileFilter",
    "ImageFileScan",
    "ImageFilter",
    "ImageFocusCombine",
    "ImageForestingComponents",
    "ImageFormattingWidth",
    "ImageForwardTransformation",
    "ImageGraphics",
    "ImageHistogram",
    "ImageIdentify",
    "ImageInstanceQ",
    "ImageKeypoints",
    "ImageLabels",
    "ImageLegends",
    "ImageLevels",
    "ImageLines",
    "ImageMargins",
    "ImageMarker",
    "ImageMarkers",
    "ImageMeasurements",
    "ImageMesh",
    "ImageMultiply",
    "ImageOffset",
    "ImagePad",
    "ImagePadding",
    "ImagePartition",
    "ImagePeriodogram",
    "ImagePerspectiveTransformation",
    "ImagePosition",
    "ImagePreviewFunction",
    "ImagePyramid",
    "ImagePyramidApply",
    "ImageQ",
    "ImageRangeCache",
    "ImageRecolor",
    "ImageReflect",
    "ImageRegion",
    "ImageResize",
    "ImageResolution",
    "ImageRestyle",
    "ImageRotate",
    "ImageRotated",
    "ImageSaliencyFilter",
    "ImageScaled",
    "ImageScan",
    "ImageSize",
    "ImageSizeAction",
    "ImageSizeCache",
    "ImageSizeMultipliers",
    "ImageSizeRaw",
    "ImageStitch",
    "ImageSubtract",
    "ImageTake",
    "ImageTransformation",
    "ImageTrim",
    "ImageType",
    "ImageValue",
    "ImageValuePositions",
    "ImageVectorscopePlot",
    "ImageWaveformPlot",
    "ImagingDevice",
    "ImplicitD",
    "ImplicitRegion",
    "Implies",
    "Import",
    "ImportAutoReplacements",
    "ImportByteArray",
    "ImportedObject",
    "ImportOptions",
    "ImportString",
    "ImprovementImportance",
    "In",
    "Inactivate",
    "Inactive",
    "InactiveStyle",
    "IncidenceGraph",
    "IncidenceList",
    "IncidenceMatrix",
    "IncludeAromaticBonds",
    "IncludeConstantBasis",
    "IncludedContexts",
    "IncludeDefinitions",
    "IncludeDirectories",
    "IncludeFileExtension",
    "IncludeGeneratorTasks",
    "IncludeHydrogens",
    "IncludeInflections",
    "IncludeMetaInformation",
    "IncludePods",
    "IncludeQuantities",
    "IncludeRelatedTables",
    "IncludeSingularSolutions",
    "IncludeSingularTerm",
    "IncludeWindowTimes",
    "Increment",
    "IndefiniteMatrixQ",
    "Indent",
    "IndentingNewlineSpacings",
    "IndentMaxFraction",
    "IndependenceTest",
    "IndependentEdgeSetQ",
    "IndependentPhysicalQuantity",
    "IndependentUnit",
    "IndependentUnitDimension",
    "IndependentVertexSetQ",
    "Indeterminate",
    "IndeterminateThreshold",
    "IndexCreationOptions",
    "Indexed",
    "IndexEdgeTaggedGraph",
    "IndexGraph",
    "IndexTag",
    "Inequality",
    "InertEvaluate",
    "InertExpression",
    "InexactNumberQ",
    "InexactNumbers",
    "InfiniteFuture",
    "InfiniteLine",
    "InfiniteLineThrough",
    "InfinitePast",
    "InfinitePlane",
    "Infinity",
    "Infix",
    "InflationAdjust",
    "InflationMethod",
    "Information",
    "InformationData",
    "InformationDataGrid",
    "Inherited",
    "InheritScope",
    "InhomogeneousPoissonPointProcess",
    "InhomogeneousPoissonProcess",
    "InitialEvaluationHistory",
    "Initialization",
    "InitializationCell",
    "InitializationCellEvaluation",
    "InitializationCellWarning",
    "InitializationObject",
    "InitializationObjects",
    "InitializationValue",
    "Initialize",
    "InitialSeeding",
    "InlineCounterAssignments",
    "InlineCounterIncrements",
    "InlineRules",
    "Inner",
    "InnerPolygon",
    "InnerPolyhedron",
    "Inpaint",
    "Input",
    "InputAliases",
    "InputAssumptions",
    "InputAutoReplacements",
    "InputField",
    "InputFieldBox",
    "InputFieldBoxOptions",
    "InputForm",
    "InputGrouping",
    "InputNamePacket",
    "InputNotebook",
    "InputPacket",
    "InputPorts",
    "InputSettings",
    "InputStream",
    "InputString",
    "InputStringPacket",
    "InputToBoxFormPacket",
    "Insert",
    "InsertionFunction",
    "InsertionPointObject",
    "InsertLinebreaks",
    "InsertResults",
    "Inset",
    "Inset3DBox",
    "Inset3DBoxOptions",
    "InsetBox",
    "InsetBoxOptions",
    "Insphere",
    "Install",
    "InstallService",
    "InstanceNormalizationLayer",
    "InString",
    "Integer",
    "IntegerDigits",
    "IntegerExponent",
    "IntegerLength",
    "IntegerName",
    "IntegerPart",
    "IntegerPartitions",
    "IntegerQ",
    "IntegerReverse",
    "Integers",
    "IntegerString",
    "Integral",
    "Integrate",
    "IntegrateChangeVariables",
    "Interactive",
    "InteractiveTradingChart",
    "InterfaceSwitched",
    "Interlaced",
    "Interleaving",
    "InternallyBalancedDecomposition",
    "InterpolatingFunction",
    "InterpolatingPolynomial",
    "Interpolation",
    "InterpolationOrder",
    "InterpolationPoints",
    "InterpolationPrecision",
    "Interpretation",
    "InterpretationBox",
    "InterpretationBoxOptions",
    "InterpretationFunction",
    "Interpreter",
    "InterpretTemplate",
    "InterquartileRange",
    "Interrupt",
    "InterruptSettings",
    "IntersectedEntityClass",
    "IntersectingQ",
    "Intersection",
    "Interval",
    "IntervalIntersection",
    "IntervalMarkers",
    "IntervalMarkersStyle",
    "IntervalMemberQ",
    "IntervalSlider",
    "IntervalUnion",
    "Into",
    "Inverse",
    "InverseBetaRegularized",
    "InverseBilateralLaplaceTransform",
    "InverseBilateralZTransform",
    "InverseCDF",
    "InverseChiSquareDistribution",
    "InverseContinuousWaveletTransform",
    "InverseDistanceTransform",
    "InverseEllipticNomeQ",
    "InverseErf",
    "InverseErfc",
    "InverseFourier",
    "InverseFourierCosTransform",
    "InverseFourierSequenceTransform",
    "InverseFourierSinTransform",
    "InverseFourierTransform",
    "InverseFunction",
    "InverseFunctions",
    "InverseGammaDistribution",
    "InverseGammaRegularized",
    "InverseGaussianDistribution",
    "InverseGudermannian",
    "InverseHankelTransform",
    "InverseHaversine",
    "InverseImagePyramid",
    "InverseJacobiCD",
    "InverseJacobiCN",
    "InverseJacobiCS",
    "InverseJacobiDC",
    "InverseJacobiDN",
    "InverseJacobiDS",
    "InverseJacobiNC",
    "InverseJacobiND",
    "InverseJacobiNS",
    "InverseJacobiSC",
    "InverseJacobiSD",
    "InverseJacobiSN",
    "InverseLaplaceTransform",
    "InverseMellinTransform",
    "InversePermutation",
    "InverseRadon",
    "InverseRadonTransform",
    "InverseSeries",
    "InverseShortTimeFourier",
    "InverseSpectrogram",
    "InverseSurvivalFunction",
    "InverseTransformedRegion",
    "InverseWaveletTransform",
    "InverseWeierstrassP",
    "InverseWishartMatrixDistribution",
    "InverseZTransform",
    "Invisible",
    "InvisibleApplication",
    "InvisibleTimes",
    "IPAddress",
    "IrreduciblePolynomialQ",
    "IslandData",
    "IsolatingInterval",
    "IsomorphicGraphQ",
    "IsomorphicSubgraphQ",
    "IsotopeData",
    "Italic",
    "Item",
    "ItemAspectRatio",
    "ItemBox",
    "ItemBoxOptions",
    "ItemDisplayFunction",
    "ItemSize",
    "ItemStyle",
    "ItoProcess",
    "JaccardDissimilarity",
    "JacobiAmplitude",
    "Jacobian",
    "JacobiCD",
    "JacobiCN",
    "JacobiCS",
    "JacobiDC",
    "JacobiDN",
    "JacobiDS",
    "JacobiEpsilon",
    "JacobiNC",
    "JacobiND",
    "JacobiNS",
    "JacobiP",
    "JacobiSC",
    "JacobiSD",
    "JacobiSN",
    "JacobiSymbol",
    "JacobiZeta",
    "JacobiZN",
    "JankoGroupJ1",
    "JankoGroupJ2",
    "JankoGroupJ3",
    "JankoGroupJ4",
    "JarqueBeraALMTest",
    "JohnsonDistribution",
    "Join",
    "JoinAcross",
    "Joined",
    "JoinedCurve",
    "JoinedCurveBox",
    "JoinedCurveBoxOptions",
    "JoinForm",
    "JordanDecomposition",
    "JordanModelDecomposition",
    "JulianDate",
    "JuliaSetBoettcher",
    "JuliaSetIterationCount",
    "JuliaSetPlot",
    "JuliaSetPoints",
    "K",
    "KagiChart",
    "KaiserBesselWindow",
    "KaiserWindow",
    "KalmanEstimator",
    "KalmanFilter",
    "KarhunenLoeveDecomposition",
    "KaryTree",
    "KatzCentrality",
    "KCoreComponents",
    "KDistribution",
    "KEdgeConnectedComponents",
    "KEdgeConnectedGraphQ",
    "KeepExistingVersion",
    "KelvinBei",
    "KelvinBer",
    "KelvinKei",
    "KelvinKer",
    "KendallTau",
    "KendallTauTest",
    "KernelConfiguration",
    "KernelExecute",
    "KernelFunction",
    "KernelMixtureDistribution",
    "KernelObject",
    "Kernels",
    "Ket",
    "Key",
    "KeyCollisionFunction",
    "KeyComplement",
    "KeyDrop",
    "KeyDropFrom",
    "KeyExistsQ",
    "KeyFreeQ",
    "KeyIntersection",
    "KeyMap",
    "KeyMemberQ",
    "KeypointStrength",
    "Keys",
    "KeySelect",
    "KeySort",
    "KeySortBy",
    "KeyTake",
    "KeyUnion",
    "KeyValueMap",
    "KeyValuePattern",
    "Khinchin",
    "KillProcess",
    "KirchhoffGraph",
    "KirchhoffMatrix",
    "KleinInvariantJ",
    "KnapsackSolve",
    "KnightTourGraph",
    "KnotData",
    "KnownUnitQ",
    "KochCurve",
    "KolmogorovSmirnovTest",
    "KroneckerDelta",
    "KroneckerModelDecomposition",
    "KroneckerProduct",
    "KroneckerSymbol",
    "KuiperTest",
    "KumaraswamyDistribution",
    "Kurtosis",
    "KuwaharaFilter",
    "KVertexConnectedComponents",
    "KVertexConnectedGraphQ",
    "LABColor",
    "Label",
    "Labeled",
    "LabeledSlider",
    "LabelingFunction",
    "LabelingSize",
    "LabelStyle",
    "LabelVisibility",
    "LaguerreL",
    "LakeData",
    "LambdaComponents",
    "LambertW",
    "LameC",
    "LameCPrime",
    "LameEigenvalueA",
    "LameEigenvalueB",
    "LameS",
    "LameSPrime",
    "LaminaData",
    "LanczosWindow",
    "LandauDistribution",
    "Language",
    "LanguageCategory",
    "LanguageData",
    "LanguageIdentify",
    "LanguageOptions",
    "LaplaceDistribution",
    "LaplaceTransform",
    "Laplacian",
    "LaplacianFilter",
    "LaplacianGaussianFilter",
    "LaplacianPDETerm",
    "Large",
    "Larger",
    "Last",
    "Latitude",
    "LatitudeLongitude",
    "LatticeData",
    "LatticeReduce",
    "Launch",
    "LaunchKernels",
    "LayeredGraphPlot",
    "LayeredGraphPlot3D",
    "LayerSizeFunction",
    "LayoutInformation",
    "LCHColor",
    "LCM",
    "LeaderSize",
    "LeafCount",
    "LeapVariant",
    "LeapYearQ",
    "LearnDistribution",
    "LearnedDistribution",
    "LearningRate",
    "LearningRateMultipliers",
    "LeastSquares",
    "LeastSquaresFilterKernel",
    "Left",
    "LeftArrow",
    "LeftArrowBar",
    "LeftArrowRightArrow",
    "LeftDownTeeVector",
    "LeftDownVector",
    "LeftDownVectorBar",
    "LeftRightArrow",
    "LeftRightVector",
    "LeftTee",
    "LeftTeeArrow",
    "LeftTeeVector",
    "LeftTriangle",
    "LeftTriangleBar",
    "LeftTriangleEqual",
    "LeftUpDownVector",
    "LeftUpTeeVector",
    "LeftUpVector",
    "LeftUpVectorBar",
    "LeftVector",
    "LeftVectorBar",
    "LegendAppearance",
    "Legended",
    "LegendFunction",
    "LegendLabel",
    "LegendLayout",
    "LegendMargins",
    "LegendMarkers",
    "LegendMarkerSize",
    "LegendreP",
    "LegendreQ",
    "LegendreType",
    "Length",
    "LengthWhile",
    "LerchPhi",
    "Less",
    "LessEqual",
    "LessEqualGreater",
    "LessEqualThan",
    "LessFullEqual",
    "LessGreater",
    "LessLess",
    "LessSlantEqual",
    "LessThan",
    "LessTilde",
    "LetterCharacter",
    "LetterCounts",
    "LetterNumber",
    "LetterQ",
    "Level",
    "LeveneTest",
    "LeviCivitaTensor",
    "LevyDistribution",
    "Lexicographic",
    "LexicographicOrder",
    "LexicographicSort",
    "LibraryDataType",
    "LibraryFunction",
    "LibraryFunctionDeclaration",
    "LibraryFunctionError",
    "LibraryFunctionInformation",
    "LibraryFunctionLoad",
    "LibraryFunctionUnload",
    "LibraryLoad",
    "LibraryUnload",
    "LicenseEntitlementObject",
    "LicenseEntitlements",
    "LicenseID",
    "LicensingSettings",
    "LiftingFilterData",
    "LiftingWaveletTransform",
    "LightBlue",
    "LightBrown",
    "LightCyan",
    "Lighter",
    "LightGray",
    "LightGreen",
    "Lighting",
    "LightingAngle",
    "LightMagenta",
    "LightOrange",
    "LightPink",
    "LightPurple",
    "LightRed",
    "LightSources",
    "LightYellow",
    "Likelihood",
    "Limit",
    "LimitsPositioning",
    "LimitsPositioningTokens",
    "LindleyDistribution",
    "Line",
    "Line3DBox",
    "Line3DBoxOptions",
    "LinearFilter",
    "LinearFractionalOptimization",
    "LinearFractionalTransform",
    "LinearGradientFilling",
    "LinearGradientImage",
    "LinearizingTransformationData",
    "LinearLayer",
    "LinearModelFit",
    "LinearOffsetFunction",
    "LinearOptimization",
    "LinearProgramming",
    "LinearRecurrence",
    "LinearSolve",
    "LinearSolveFunction",
    "LineBox",
    "LineBoxOptions",
    "LineBreak",
    "LinebreakAdjustments",
    "LineBreakChart",
    "LinebreakSemicolonWeighting",
    "LineBreakWithin",
    "LineColor",
    "LineGraph",
    "LineIndent",
    "LineIndentMaxFraction",
    "LineIntegralConvolutionPlot",
    "LineIntegralConvolutionScale",
    "LineLegend",
    "LineOpacity",
    "LineSpacing",
    "LineWrapParts",
    "LinkActivate",
    "LinkClose",
    "LinkConnect",
    "LinkConnectedQ",
    "LinkCreate",
    "LinkError",
    "LinkFlush",
    "LinkFunction",
    "LinkHost",
    "LinkInterrupt",
    "LinkLaunch",
    "LinkMode",
    "LinkObject",
    "LinkOpen",
    "LinkOptions",
    "LinkPatterns",
    "LinkProtocol",
    "LinkRankCentrality",
    "LinkRead",
    "LinkReadHeld",
    "LinkReadyQ",
    "Links",
    "LinkService",
    "LinkWrite",
    "LinkWriteHeld",
    "LiouvilleLambda",
    "List",
    "Listable",
    "ListAnimate",
    "ListContourPlot",
    "ListContourPlot3D",
    "ListConvolve",
    "ListCorrelate",
    "ListCurvePathPlot",
    "ListDeconvolve",
    "ListDensityPlot",
    "ListDensityPlot3D",
    "Listen",
    "ListFormat",
    "ListFourierSequenceTransform",
    "ListInterpolation",
    "ListLineIntegralConvolutionPlot",
    "ListLinePlot",
    "ListLinePlot3D",
    "ListLogLinearPlot",
    "ListLogLogPlot",
    "ListLogPlot",
    "ListPicker",
    "ListPickerBox",
    "ListPickerBoxBackground",
    "ListPickerBoxOptions",
    "ListPlay",
    "ListPlot",
    "ListPlot3D",
    "ListPointPlot3D",
    "ListPolarPlot",
    "ListQ",
    "ListSliceContourPlot3D",
    "ListSliceDensityPlot3D",
    "ListSliceVectorPlot3D",
    "ListStepPlot",
    "ListStreamDensityPlot",
    "ListStreamPlot",
    "ListStreamPlot3D",
    "ListSurfacePlot3D",
    "ListVectorDensityPlot",
    "ListVectorDisplacementPlot",
    "ListVectorDisplacementPlot3D",
    "ListVectorPlot",
    "ListVectorPlot3D",
    "ListZTransform",
    "Literal",
    "LiteralSearch",
    "LiteralType",
    "LoadCompiledComponent",
    "LocalAdaptiveBinarize",
    "LocalCache",
    "LocalClusteringCoefficient",
    "LocalEvaluate",
    "LocalizeDefinitions",
    "LocalizeVariables",
    "LocalObject",
    "LocalObjects",
    "LocalResponseNormalizationLayer",
    "LocalSubmit",
    "LocalSymbol",
    "LocalTime",
    "LocalTimeZone",
    "LocationEquivalenceTest",
    "LocationTest",
    "Locator",
    "LocatorAutoCreate",
    "LocatorBox",
    "LocatorBoxOptions",
    "LocatorCentering",
    "LocatorPane",
    "LocatorPaneBox",
    "LocatorPaneBoxOptions",
    "LocatorRegion",
    "Locked",
    "Log",
    "Log10",
    "Log2",
    "LogBarnesG",
    "LogGamma",
    "LogGammaDistribution",
    "LogicalExpand",
    "LogIntegral",
    "LogisticDistribution",
    "LogisticSigmoid",
    "LogitModelFit",
    "LogLikelihood",
    "LogLinearPlot",
    "LogLogisticDistribution",
    "LogLogPlot",
    "LogMultinormalDistribution",
    "LogNormalDistribution",
    "LogPlot",
    "LogRankTest",
    "LogSeriesDistribution",
    "LongEqual",
    "Longest",
    "LongestCommonSequence",
    "LongestCommonSequencePositions",
    "LongestCommonSubsequence",
    "LongestCommonSubsequencePositions",
    "LongestMatch",
    "LongestOrderedSequence",
    "LongForm",
    "Longitude",
    "LongLeftArrow",
    "LongLeftRightArrow",
    "LongRightArrow",
    "LongShortTermMemoryLayer",
    "Lookup",
    "Loopback",
    "LoopFreeGraphQ",
    "Looping",
    "LossFunction",
    "LowerCaseQ",
    "LowerLeftArrow",
    "LowerRightArrow",
    "LowerTriangularize",
    "LowerTriangularMatrix",
    "LowerTriangularMatrixQ",
    "LowpassFilter",
    "LQEstimatorGains",
    "LQGRegulator",
    "LQOutputRegulatorGains",
    "LQRegulatorGains",
    "LUBackSubstitution",
    "LucasL",
    "LuccioSamiComponents",
    "LUDecomposition",
    "LunarEclipse",
    "LUVColor",
    "LyapunovSolve",
    "LyonsGroupLy",
    "MachineID",
    "MachineName",
    "MachineNumberQ",
    "MachinePrecision",
    "MacintoshSystemPageSetup",
    "Magenta",
    "Magnification",
    "Magnify",
    "MailAddressValidation",
    "MailExecute",
    "MailFolder",
    "MailItem",
    "MailReceiverFunction",
    "MailResponseFunction",
    "MailSearch",
    "MailServerConnect",
    "MailServerConnection",
    "MailSettings",
    "MainSolve",
    "MaintainDynamicCaches",
    "Majority",
    "MakeBoxes",
    "MakeExpression",
    "MakeRules",
    "ManagedLibraryExpressionID",
    "ManagedLibraryExpressionQ",
    "MandelbrotSetBoettcher",
    "MandelbrotSetDistance",
    "MandelbrotSetIterationCount",
    "MandelbrotSetMemberQ",
    "MandelbrotSetPlot",
    "MangoldtLambda",
    "ManhattanDistance",
    "Manipulate",
    "Manipulator",
    "MannedSpaceMissionData",
    "MannWhitneyTest",
    "MantissaExponent",
    "Manual",
    "Map",
    "MapAll",
    "MapApply",
    "MapAt",
    "MapIndexed",
    "MAProcess",
    "MapThread",
    "MarchenkoPasturDistribution",
    "MarcumQ",
    "MardiaCombinedTest",
    "MardiaKurtosisTest",
    "MardiaSkewnessTest",
    "MarginalDistribution",
    "MarkovProcessProperties",
    "Masking",
    "MassConcentrationCondition",
    "MassFluxValue",
    "MassImpermeableBoundaryValue",
    "MassOutflowValue",
    "MassSymmetryValue",
    "MassTransferValue",
    "MassTransportPDEComponent",
    "MatchingDissimilarity",
    "MatchLocalNameQ",
    "MatchLocalNames",
    "MatchQ",
    "Material",
    "MaterialShading",
    "MaternPointProcess",
    "MathematicalFunctionData",
    "MathematicaNotation",
    "MathieuC",
    "MathieuCharacteristicA",
    "MathieuCharacteristicB",
    "MathieuCharacteristicExponent",
    "MathieuCPrime",
    "MathieuGroupM11",
    "MathieuGroupM12",
    "MathieuGroupM22",
    "MathieuGroupM23",
    "MathieuGroupM24",
    "MathieuS",
    "MathieuSPrime",
    "MathMLForm",
    "MathMLText",
    "Matrices",
    "MatrixExp",
    "MatrixForm",
    "MatrixFunction",
    "MatrixLog",
    "MatrixNormalDistribution",
    "MatrixPlot",
    "MatrixPower",
    "MatrixPropertyDistribution",
    "MatrixQ",
    "MatrixRank",
    "MatrixTDistribution",
    "Max",
    "MaxBend",
    "MaxCellMeasure",
    "MaxColorDistance",
    "MaxDate",
    "MaxDetect",
    "MaxDisplayedChildren",
    "MaxDuration",
    "MaxExtraBandwidths",
    "MaxExtraConditions",
    "MaxFeatureDisplacement",
    "MaxFeatures",
    "MaxFilter",
    "MaximalBy",
    "Maximize",
    "MaxItems",
    "MaxIterations",
    "MaxLimit",
    "MaxMemoryUsed",
    "MaxMixtureKernels",
    "MaxOverlapFraction",
    "MaxPlotPoints",
    "MaxPoints",
    "MaxRecursion",
    "MaxStableDistribution",
    "MaxStepFraction",
    "MaxSteps",
    "MaxStepSize",
    "MaxTrainingRounds",
    "MaxValue",
    "MaxwellDistribution",
    "MaxWordGap",
    "McLaughlinGroupMcL",
    "Mean",
    "MeanAbsoluteLossLayer",
    "MeanAround",
    "MeanClusteringCoefficient",
    "MeanDegreeConnectivity",
    "MeanDeviation",
    "MeanFilter",
    "MeanGraphDistance",
    "MeanNeighborDegree",
    "MeanPointDensity",
    "MeanShift",
    "MeanShiftFilter",
    "MeanSquaredLossLayer",
    "Median",
    "MedianDeviation",
    "MedianFilter",
    "MedicalTestData",
    "Medium",
    "MeijerG",
    "MeijerGReduce",
    "MeixnerDistribution",
    "MellinConvolve",
    "MellinTransform",
    "MemberQ",
    "MemoryAvailable",
    "MemoryConstrained",
    "MemoryConstraint",
    "MemoryInUse",
    "MengerMesh",
    "Menu",
    "MenuAppearance",
    "MenuCommandKey",
    "MenuEvaluator",
    "MenuItem",
    "MenuList",
    "MenuPacket",
    "MenuSortingValue",
    "MenuStyle",
    "MenuView",
    "Merge",
    "MergeDifferences",
    "MergingFunction",
    "MersennePrimeExponent",
    "MersennePrimeExponentQ",
    "Mesh",
    "MeshCellCentroid",
    "MeshCellCount",
    "MeshCellHighlight",
    "MeshCellIndex",
    "MeshCellLabel",
    "MeshCellMarker",
    "MeshCellMeasure",
    "MeshCellQuality",
    "MeshCells",
    "MeshCellShapeFunction",
    "MeshCellStyle",
    "MeshConnectivityGraph",
    "MeshCoordinates",
    "MeshFunctions",
    "MeshPrimitives",
    "MeshQualityGoal",
    "MeshRange",
    "MeshRefinementFunction",
    "MeshRegion",
    "MeshRegionQ",
    "MeshShading",
    "MeshStyle",
    "Message",
    "MessageDialog",
    "MessageList",
    "MessageName",
    "MessageObject",
    "MessageOptions",
    "MessagePacket",
    "Messages",
    "MessagesNotebook",
    "MetaCharacters",
    "MetaInformation",
    "MeteorShowerData",
    "Method",
    "MethodOptions",
    "MexicanHatWavelet",
    "MeyerWavelet",
    "Midpoint",
    "MIMETypeToFormatList",
    "Min",
    "MinColorDistance",
    "MinDate",
    "MinDetect",
    "MineralData",
    "MinFilter",
    "MinimalBy",
    "MinimalPolynomial",
    "MinimalStateSpaceModel",
    "Minimize",
    "MinimumTimeIncrement",
    "MinIntervalSize",
    "MinkowskiQuestionMark",
    "MinLimit",
    "MinMax",
    "MinorPlanetData",
    "Minors",
    "MinPointSeparation",
    "MinRecursion",
    "MinSize",
    "MinStableDistribution",
    "Minus",
    "MinusPlus",
    "MinValue",
    "Missing",
    "MissingBehavior",
    "MissingDataMethod",
    "MissingDataRules",
    "MissingQ",
    "MissingString",
    "MissingStyle",
    "MissingValuePattern",
    "MissingValueSynthesis",
    "MittagLefflerE",
    "MixedFractionParts",
    "MixedGraphQ",
    "MixedMagnitude",
    "MixedRadix",
    "MixedRadixQuantity",
    "MixedUnit",
    "MixtureDistribution",
    "Mod",
    "Modal",
    "Mode",
    "ModelPredictiveController",
    "Modular",
    "ModularInverse",
    "ModularLambda",
    "Module",
    "Modulus",
    "MoebiusMu",
    "Molecule",
    "MoleculeAlign",
    "MoleculeContainsQ",
    "MoleculeDraw",
    "MoleculeEquivalentQ",
    "MoleculeFreeQ",
    "MoleculeGraph",
    "MoleculeMatchQ",
    "MoleculeMaximumCommonSubstructure",
    "MoleculeModify",
    "MoleculeName",
    "MoleculePattern",
    "MoleculePlot",
    "MoleculePlot3D",
    "MoleculeProperty",
    "MoleculeQ",
    "MoleculeRecognize",
    "MoleculeSubstructureCount",
    "MoleculeValue",
    "Moment",
    "MomentConvert",
    "MomentEvaluate",
    "MomentGeneratingFunction",
    "MomentOfInertia",
    "Monday",
    "Monitor",
    "MonomialList",
    "MonomialOrder",
    "MonsterGroupM",
    "MoonPhase",
    "MoonPosition",
    "MorletWavelet",
    "MorphologicalBinarize",
    "MorphologicalBranchPoints",
    "MorphologicalComponents",
    "MorphologicalEulerNumber",
    "MorphologicalGraph",
    "MorphologicalPerimeter",
    "MorphologicalTransform",
    "MortalityData",
    "Most",
    "MountainData",
    "MouseAnnotation",
    "MouseAppearance",
    "MouseAppearanceTag",
    "MouseButtons",
    "Mouseover",
    "MousePointerNote",
    "MousePosition",
    "MovieData",
    "MovingAverage",
    "MovingMap",
    "MovingMedian",
    "MoyalDistribution",
    "MultiaxisArrangement",
    "Multicolumn",
    "MultiedgeStyle",
    "MultigraphQ",
    "MultilaunchWarning",
    "MultiLetterItalics",
    "MultiLetterStyle",
    "MultilineFunction",
    "Multinomial",
    "MultinomialDistribution",
    "MultinormalDistribution",
    "MultiplicativeOrder",
    "Multiplicity",
    "MultiplySides",
    "MultiscriptBoxOptions",
    "Multiselection",
    "MultivariateHypergeometricDistribution",
    "MultivariatePoissonDistribution",
    "MultivariateTDistribution",
    "N",
    "NakagamiDistribution",
    "NameQ",
    "Names",
    "NamespaceBox",
    "NamespaceBoxOptions",
    "Nand",
    "NArgMax",
    "NArgMin",
    "NBernoulliB",
    "NBodySimulation",
    "NBodySimulationData",
    "NCache",
    "NCaputoD",
    "NDEigensystem",
    "NDEigenvalues",
    "NDSolve",
    "NDSolveValue",
    "Nearest",
    "NearestFunction",
    "NearestMeshCells",
    "NearestNeighborG",
    "NearestNeighborGraph",
    "NearestTo",
    "NebulaData",
    "NeedlemanWunschSimilarity",
    "Needs",
    "Negative",
    "NegativeBinomialDistribution",
    "NegativeDefiniteMatrixQ",
    "NegativeIntegers",
    "NegativelyOrientedPoints",
    "NegativeMultinomialDistribution",
    "NegativeRationals",
    "NegativeReals",
    "NegativeSemidefiniteMatrixQ",
    "NeighborhoodData",
    "NeighborhoodGraph",
    "Nest",
    "NestedGreaterGreater",
    "NestedLessLess",
    "NestedScriptRules",
    "NestGraph",
    "NestList",
    "NestTree",
    "NestWhile",
    "NestWhileList",
    "NetAppend",
    "NetArray",
    "NetArrayLayer",
    "NetBidirectionalOperator",
    "NetChain",
    "NetDecoder",
    "NetDelete",
    "NetDrop",
    "NetEncoder",
    "NetEvaluationMode",
    "NetExternalObject",
    "NetExtract",
    "NetFlatten",
    "NetFoldOperator",
    "NetGANOperator",
    "NetGraph",
    "NetInformation",
    "NetInitialize",
    "NetInsert",
    "NetInsertSharedArrays",
    "NetJoin",
    "NetMapOperator",
    "NetMapThreadOperator",
    "NetMeasurements",
    "NetModel",
    "NetNestOperator",
    "NetPairEmbeddingOperator",
    "NetPort",
    "NetPortGradient",
    "NetPrepend",
    "NetRename",
    "NetReplace",
    "NetReplacePart",
    "NetSharedArray",
    "NetStateObject",
    "NetTake",
    "NetTrain",
    "NetTrainResultsObject",
    "NetUnfold",
    "NetworkPacketCapture",
    "NetworkPacketRecording",
    "NetworkPacketRecordingDuring",
    "NetworkPacketTrace",
    "NeumannValue",
    "NevilleThetaC",
    "NevilleThetaD",
    "NevilleThetaN",
    "NevilleThetaS",
    "NewPrimitiveStyle",
    "NExpectation",
    "Next",
    "NextCell",
    "NextDate",
    "NextPrime",
    "NextScheduledTaskTime",
    "NeymanScottPointProcess",
    "NFractionalD",
    "NHoldAll",
    "NHoldFirst",
    "NHoldRest",
    "NicholsGridLines",
    "NicholsPlot",
    "NightHemisphere",
    "NIntegrate",
    "NMaximize",
    "NMaxValue",
    "NMinimize",
    "NMinValue",
    "NominalScale",
    "NominalVariables",
    "NonAssociative",
    "NoncentralBetaDistribution",
    "NoncentralChiSquareDistribution",
    "NoncentralFRatioDistribution",
    "NoncentralStudentTDistribution",
    "NonCommutativeMultiply",
    "NonConstants",
    "NondimensionalizationTransform",
    "None",
    "NoneTrue",
    "NonlinearModelFit",
    "NonlinearStateSpaceModel",
    "NonlocalMeansFilter",
    "NonNegative",
    "NonNegativeIntegers",
    "NonNegativeRationals",
    "NonNegativeReals",
    "NonPositive",
    "NonPositiveIntegers",
    "NonPositiveRationals",
    "NonPositiveReals",
    "Nor",
    "NorlundB",
    "Norm",
    "Normal",
    "NormalDistribution",
    "NormalGrouping",
    "NormalizationLayer",
    "Normalize",
    "Normalized",
    "NormalizedSquaredEuclideanDistance",
    "NormalMatrixQ",
    "NormalsFunction",
    "NormFunction",
    "Not",
    "NotCongruent",
    "NotCupCap",
    "NotDoubleVerticalBar",
    "Notebook",
    "NotebookApply",
    "NotebookAutoSave",
    "NotebookBrowseDirectory",
    "NotebookClose",
    "NotebookConvertSettings",
    "NotebookCreate",
    "NotebookDefault",
    "NotebookDelete",
    "NotebookDirectory",
    "NotebookDynamicExpression",
    "NotebookEvaluate",
    "NotebookEventActions",
    "NotebookFileName",
    "NotebookFind",
    "NotebookGet",
    "NotebookImport",
    "NotebookInformation",
    "NotebookInterfaceObject",
    "NotebookLocate",
    "NotebookObject",
    "NotebookOpen",
    "NotebookPath",
    "NotebookPrint",
    "NotebookPut",
    "NotebookRead",
    "Notebooks",
    "NotebookSave",
    "NotebookSelection",
    "NotebooksMenu",
    "NotebookTemplate",
    "NotebookWrite",
    "NotElement",
    "NotEqualTilde",
    "NotExists",
    "NotGreater",
    "NotGreaterEqual",
    "NotGreaterFullEqual",
    "NotGreaterGreater",
    "NotGreaterLess",
    "NotGreaterSlantEqual",
    "NotGreaterTilde",
    "Nothing",
    "NotHumpDownHump",
    "NotHumpEqual",
    "NotificationFunction",
    "NotLeftTriangle",
    "NotLeftTriangleBar",
    "NotLeftTriangleEqual",
    "NotLess",
    "NotLessEqual",
    "NotLessFullEqual",
    "NotLessGreater",
    "NotLessLess",
    "NotLessSlantEqual",
    "NotLessTilde",
    "NotNestedGreaterGreater",
    "NotNestedLessLess",
    "NotPrecedes",
    "NotPrecedesEqual",
    "NotPrecedesSlantEqual",
    "NotPrecedesTilde",
    "NotReverseElement",
    "NotRightTriangle",
    "NotRightTriangleBar",
    "NotRightTriangleEqual",
    "NotSquareSubset",
    "NotSquareSubsetEqual",
    "NotSquareSuperset",
    "NotSquareSupersetEqual",
    "NotSubset",
    "NotSubsetEqual",
    "NotSucceeds",
    "NotSucceedsEqual",
    "NotSucceedsSlantEqual",
    "NotSucceedsTilde",
    "NotSuperset",
    "NotSupersetEqual",
    "NotTilde",
    "NotTildeEqual",
    "NotTildeFullEqual",
    "NotTildeTilde",
    "NotVerticalBar",
    "Now",
    "NoWhitespace",
    "NProbability",
    "NProduct",
    "NProductFactors",
    "NRoots",
    "NSolve",
    "NSolveValues",
    "NSum",
    "NSumTerms",
    "NuclearExplosionData",
    "NuclearReactorData",
    "Null",
    "NullRecords",
    "NullSpace",
    "NullWords",
    "Number",
    "NumberCompose",
    "NumberDecompose",
    "NumberDigit",
    "NumberExpand",
    "NumberFieldClassNumber",
    "NumberFieldDiscriminant",
    "NumberFieldFundamentalUnits",
    "NumberFieldIntegralBasis",
    "NumberFieldNormRepresentatives",
    "NumberFieldRegulator",
    "NumberFieldRootsOfUnity",
    "NumberFieldSignature",
    "NumberForm",
    "NumberFormat",
    "NumberLinePlot",
    "NumberMarks",
    "NumberMultiplier",
    "NumberPadding",
    "NumberPoint",
    "NumberQ",
    "NumberSeparator",
    "NumberSigns",
    "NumberString",
    "Numerator",
    "NumeratorDenominator",
    "NumericalOrder",
    "NumericalSort",
    "NumericArray",
    "NumericArrayQ",
    "NumericArrayType",
    "NumericFunction",
    "NumericQ",
    "NuttallWindow",
    "NValues",
    "NyquistGridLines",
    "NyquistPlot",
    "O",
    "ObjectExistsQ",
    "ObservabilityGramian",
    "ObservabilityMatrix",
    "ObservableDecomposition",
    "ObservableModelQ",
    "OceanData",
    "Octahedron",
    "OddQ",
    "Off",
    "Offset",
    "OLEData",
    "On",
    "ONanGroupON",
    "Once",
    "OneIdentity",
    "Opacity",
    "OpacityFunction",
    "OpacityFunctionScaling",
    "Open",
    "OpenAppend",
    "Opener",
    "OpenerBox",
    "OpenerBoxOptions",
    "OpenerView",
    "OpenFunctionInspectorPacket",
    "Opening",
    "OpenRead",
    "OpenSpecialOptions",
    "OpenTemporary",
    "OpenWrite",
    "Operate",
    "OperatingSystem",
    "OperatorApplied",
    "OptimumFlowData",
    "Optional",
    "OptionalElement",
    "OptionInspectorSettings",
    "OptionQ",
    "Options",
    "OptionsPacket",
    "OptionsPattern",
    "OptionValue",
    "OptionValueBox",
    "OptionValueBoxOptions",
    "Or",
    "Orange",
    "Order",
    "OrderDistribution",
    "OrderedQ",
    "Ordering",
    "OrderingBy",
    "OrderingLayer",
    "Orderless",
    "OrderlessPatternSequence",
    "OrdinalScale",
    "OrnsteinUhlenbeckProcess",
    "Orthogonalize",
    "OrthogonalMatrixQ",
    "Out",
    "Outer",
    "OuterPolygon",
    "OuterPolyhedron",
    "OutputAutoOverwrite",
    "OutputControllabilityMatrix",
    "OutputControllableModelQ",
    "OutputForm",
    "OutputFormData",
    "OutputGrouping",
    "OutputMathEditExpression",
    "OutputNamePacket",
    "OutputPorts",
    "OutputResponse",
    "OutputSizeLimit",
    "OutputStream",
    "Over",
    "OverBar",
    "OverDot",
    "Overflow",
    "OverHat",
    "Overlaps",
    "Overlay",
    "OverlayBox",
    "OverlayBoxOptions",
    "OverlayVideo",
    "Overscript",
    "OverscriptBox",
    "OverscriptBoxOptions",
    "OverTilde",
    "OverVector",
    "OverwriteTarget",
    "OwenT",
    "OwnValues",
    "Package",
    "PackingMethod",
    "PackPaclet",
    "PacletDataRebuild",
    "PacletDirectoryAdd",
    "PacletDirectoryLoad",
    "PacletDirectoryRemove",
    "PacletDirectoryUnload",
    "PacletDisable",
    "PacletEnable",
    "PacletFind",
    "PacletFindRemote",
    "PacletInformation",
    "PacletInstall",
    "PacletInstallSubmit",
    "PacletNewerQ",
    "PacletObject",
    "PacletObjectQ",
    "PacletSite",
    "PacletSiteObject",
    "PacletSiteRegister",
    "PacletSites",
    "PacletSiteUnregister",
    "PacletSiteUpdate",
    "PacletSymbol",
    "PacletUninstall",
    "PacletUpdate",
    "PaddedForm",
    "Padding",
    "PaddingLayer",
    "PaddingSize",
    "PadeApproximant",
    "PadLeft",
    "PadRight",
    "PageBreakAbove",
    "PageBreakBelow",
    "PageBreakWithin",
    "PageFooterLines",
    "PageFooters",
    "PageHeaderLines",
    "PageHeaders",
    "PageHeight",
    "PageRankCentrality",
    "PageTheme",
    "PageWidth",
    "Pagination",
    "PairCorrelationG",
    "PairedBarChart",
    "PairedHistogram",
    "PairedSmoothHistogram",
    "PairedTTest",
    "PairedZTest",
    "PaletteNotebook",
    "PalettePath",
    "PalettesMenuSettings",
    "PalindromeQ",
    "Pane",
    "PaneBox",
    "PaneBoxOptions",
    "Panel",
    "PanelBox",
    "PanelBoxOptions",
    "Paneled",
    "PaneSelector",
    "PaneSelectorBox",
    "PaneSelectorBoxOptions",
    "PaperWidth",
    "ParabolicCylinderD",
    "ParagraphIndent",
    "ParagraphSpacing",
    "ParallelArray",
    "ParallelAxisPlot",
    "ParallelCombine",
    "ParallelDo",
    "Parallelepiped",
    "ParallelEvaluate",
    "Parallelization",
    "Parallelize",
    "ParallelKernels",
    "ParallelMap",
    "ParallelNeeds",
    "Parallelogram",
    "ParallelProduct",
    "ParallelSubmit",
    "ParallelSum",
    "ParallelTable",
    "ParallelTry",
    "Parameter",
    "ParameterEstimator",
    "ParameterMixtureDistribution",
    "ParameterVariables",
    "ParametricConvexOptimization",
    "ParametricFunction",
    "ParametricNDSolve",
    "ParametricNDSolveValue",
    "ParametricPlot",
    "ParametricPlot3D",
    "ParametricRampLayer",
    "ParametricRegion",
    "ParentBox",
    "ParentCell",
    "ParentConnect",
    "ParentDirectory",
    "ParentEdgeLabel",
    "ParentEdgeLabelFunction",
    "ParentEdgeLabelStyle",
    "ParentEdgeShapeFunction",
    "ParentEdgeStyle",
    "ParentEdgeStyleFunction",
    "ParentForm",
    "Parenthesize",
    "ParentList",
    "ParentNotebook",
    "ParetoDistribution",
    "ParetoPickandsDistribution",
    "ParkData",
    "Part",
    "PartBehavior",
    "PartialCorrelationFunction",
    "PartialD",
    "ParticleAcceleratorData",
    "ParticleData",
    "Partition",
    "PartitionGranularity",
    "PartitionsP",
    "PartitionsQ",
    "PartLayer",
    "PartOfSpeech",
    "PartProtection",
    "ParzenWindow",
    "PascalDistribution",
    "PassEventsDown",
    "PassEventsUp",
    "Paste",
    "PasteAutoQuoteCharacters",
    "PasteBoxFormInlineCells",
    "PasteButton",
    "Path",
    "PathGraph",
    "PathGraphQ",
    "Pattern",
    "PatternFilling",
    "PatternReaction",
    "PatternSequence",
    "PatternTest",
    "PauliMatrix",
    "PaulWavelet",
    "Pause",
    "PausedTime",
    "PDF",
    "PeakDetect",
    "PeanoCurve",
    "PearsonChiSquareTest",
    "PearsonCorrelationTest",
    "PearsonDistribution",
    "PenttinenPointProcess",
    "PercentForm",
    "PerfectNumber",
    "PerfectNumberQ",
    "PerformanceGoal",
    "Perimeter",
    "PeriodicBoundaryCondition",
    "PeriodicInterpolation",
    "Periodogram",
    "PeriodogramArray",
    "Permanent",
    "Permissions",
    "PermissionsGroup",
    "PermissionsGroupMemberQ",
    "PermissionsGroups",
    "PermissionsKey",
    "PermissionsKeys",
    "PermutationCycles",
    "PermutationCyclesQ",
    "PermutationGroup",
    "PermutationLength",
    "PermutationList",
    "PermutationListQ",
    "PermutationMatrix",
    "PermutationMax",
    "PermutationMin",
    "PermutationOrder",
    "PermutationPower",
    "PermutationProduct",
    "PermutationReplace",
    "Permutations",
    "PermutationSupport",
    "Permute",
    "PeronaMalikFilter",
    "Perpendicular",
    "PerpendicularBisector",
    "PersistenceLocation",
    "PersistenceTime",
    "PersistentObject",
    "PersistentObjects",
    "PersistentSymbol",
    "PersistentValue",
    "PersonData",
    "PERTDistribution",
    "PetersenGraph",
    "PhaseMargins",
    "PhaseRange",
    "PhongShading",
    "PhysicalSystemData",
    "Pi",
    "Pick",
    "PickedElements",
    "PickMode",
    "PIDData",
    "PIDDerivativeFilter",
    "PIDFeedforward",
    "PIDTune",
    "Piecewise",
    "PiecewiseExpand",
    "PieChart",
    "PieChart3D",
    "PillaiTrace",
    "PillaiTraceTest",
    "PingTime",
    "Pink",
    "PitchRecognize",
    "Pivoting",
    "PixelConstrained",
    "PixelValue",
    "PixelValuePositions",
    "Placed",
    "Placeholder",
    "PlaceholderLayer",
    "PlaceholderReplace",
    "Plain",
    "PlanarAngle",
    "PlanarFaceList",
    "PlanarGraph",
    "PlanarGraphQ",
    "PlanckRadiationLaw",
    "PlaneCurveData",
    "PlanetaryMoonData",
    "PlanetData",
    "PlantData",
    "Play",
    "PlaybackSettings",
    "PlayRange",
    "Plot",
    "Plot3D",
    "Plot3Matrix",
    "PlotDivision",
    "PlotJoined",
    "PlotLabel",
    "PlotLabels",
    "PlotLayout",
    "PlotLegends",
    "PlotMarkers",
    "PlotPoints",
    "PlotRange",
    "PlotRangeClipping",
    "PlotRangeClipPlanesStyle",
    "PlotRangePadding",
    "PlotRegion",
    "PlotStyle",
    "PlotTheme",
    "Pluralize",
    "Plus",
    "PlusMinus",
    "Pochhammer",
    "PodStates",
    "PodWidth",
    "Point",
    "Point3DBox",
    "Point3DBoxOptions",
    "PointBox",
    "PointBoxOptions",
    "PointCountDistribution",
    "PointDensity",
    "PointDensityFunction",
    "PointFigureChart",
    "PointLegend",
    "PointLight",
    "PointProcessEstimator",
    "PointProcessFitTest",
    "PointProcessParameterAssumptions",
    "PointProcessParameterQ",
    "PointSize",
    "PointStatisticFunction",
    "PointValuePlot",
    "PoissonConsulDistribution",
    "PoissonDistribution",
    "PoissonPDEComponent",
    "PoissonPointProcess",
    "PoissonProcess",
    "PoissonWindow",
    "PolarAxes",
    "PolarAxesOrigin",
    "PolarGridLines",
    "PolarPlot",
    "PolarTicks",
    "PoleZeroMarkers",
    "PolyaAeppliDistribution",
    "PolyGamma",
    "Polygon",
    "Polygon3DBox",
    "Polygon3DBoxOptions",
    "PolygonalNumber",
    "PolygonAngle",
    "PolygonBox",
    "PolygonBoxOptions",
    "PolygonCoordinates",
    "PolygonDecomposition",
    "PolygonHoleScale",
    "PolygonIntersections",
    "PolygonScale",
    "Polyhedron",
    "PolyhedronAngle",
    "PolyhedronBox",
    "PolyhedronBoxOptions",
    "PolyhedronCoordinates",
    "PolyhedronData",
    "PolyhedronDecomposition",
    "PolyhedronGenus",
    "PolyLog",
    "PolynomialExpressionQ",
    "PolynomialExtendedGCD",
    "PolynomialForm",
    "PolynomialGCD",
    "PolynomialLCM",
    "PolynomialMod",
    "PolynomialQ",
    "PolynomialQuotient",
    "PolynomialQuotientRemainder",
    "PolynomialReduce",
    "PolynomialRemainder",
    "Polynomials",
    "PolynomialSumOfSquaresList",
    "PoolingLayer",
    "PopupMenu",
    "PopupMenuBox",
    "PopupMenuBoxOptions",
    "PopupView",
    "PopupWindow",
    "Position",
    "PositionIndex",
    "PositionLargest",
    "PositionSmallest",
    "Positive",
    "PositiveDefiniteMatrixQ",
    "PositiveIntegers",
    "PositivelyOrientedPoints",
    "PositiveRationals",
    "PositiveReals",
    "PositiveSemidefiniteMatrixQ",
    "PossibleZeroQ",
    "Postfix",
    "PostScript",
    "Power",
    "PowerDistribution",
    "PowerExpand",
    "PowerMod",
    "PowerModList",
    "PowerRange",
    "PowerSpectralDensity",
    "PowersRepresentations",
    "PowerSymmetricPolynomial",
    "Precedence",
    "PrecedenceForm",
    "Precedes",
    "PrecedesEqual",
    "PrecedesSlantEqual",
    "PrecedesTilde",
    "Precision",
    "PrecisionGoal",
    "PreDecrement",
    "Predict",
    "PredictionRoot",
    "PredictorFunction",
    "PredictorInformation",
    "PredictorMeasurements",
    "PredictorMeasurementsObject",
    "PreemptProtect",
    "PreferencesPath",
    "PreferencesSettings",
    "Prefix",
    "PreIncrement",
    "Prepend",
    "PrependLayer",
    "PrependTo",
    "PreprocessingRules",
    "PreserveColor",
    "PreserveImageOptions",
    "Previous",
    "PreviousCell",
    "PreviousDate",
    "PriceGraphDistribution",
    "PrimaryPlaceholder",
    "Prime",
    "PrimeNu",
    "PrimeOmega",
    "PrimePi",
    "PrimePowerQ",
    "PrimeQ",
    "Primes",
    "PrimeZetaP",
    "PrimitivePolynomialQ",
    "PrimitiveRoot",
    "PrimitiveRootList",
    "PrincipalComponents",
    "PrincipalValue",
    "Print",
    "PrintableASCIIQ",
    "PrintAction",
    "PrintForm",
    "PrintingCopies",
    "PrintingOptions",
    "PrintingPageRange",
    "PrintingStartingPageNumber",
    "PrintingStyleEnvironment",
    "Printout3D",
    "Printout3DPreviewer",
    "PrintPrecision",
    "PrintTemporary",
    "Prism",
    "PrismBox",
    "PrismBoxOptions",
    "PrivateCellOptions",
    "PrivateEvaluationOptions",
    "PrivateFontOptions",
    "PrivateFrontEndOptions",
    "PrivateKey",
    "PrivateNotebookOptions",
    "PrivatePaths",
    "Probability",
    "ProbabilityDistribution",
    "ProbabilityPlot",
    "ProbabilityPr",
    "ProbabilityScalePlot",
    "ProbitModelFit",
    "ProcessConnection",
    "ProcessDirectory",
    "ProcessEnvironment",
    "Processes",
    "ProcessEstimator",
    "ProcessInformation",
    "ProcessObject",
    "ProcessParameterAssumptions",
    "ProcessParameterQ",
    "ProcessStateDomain",
    "ProcessStatus",
    "ProcessTimeDomain",
    "Product",
    "ProductDistribution",
    "ProductLog",
    "ProgressIndicator",
    "ProgressIndicatorBox",
    "ProgressIndicatorBoxOptions",
    "ProgressReporting",
    "Projection",
    "Prolog",
    "PromptForm",
    "ProofObject",
    "PropagateAborts",
    "Properties",
    "Property",
    "PropertyList",
    "PropertyValue",
    "Proportion",
    "Proportional",
    "Protect",
    "Protected",
    "ProteinData",
    "Pruning",
    "PseudoInverse",
    "PsychrometricPropertyData",
    "PublicKey",
    "PublisherID",
    "PulsarData",
    "PunctuationCharacter",
    "Purple",
    "Put",
    "PutAppend",
    "Pyramid",
    "PyramidBox",
    "PyramidBoxOptions",
    "QBinomial",
    "QFactorial",
    "QGamma",
    "QHypergeometricPFQ",
    "QnDispersion",
    "QPochhammer",
    "QPolyGamma",
    "QRDecomposition",
    "QuadraticIrrationalQ",
    "QuadraticOptimization",
    "Quantile",
    "QuantilePlot",
    "Quantity",
    "QuantityArray",
    "QuantityDistribution",
    "QuantityForm",
    "QuantityMagnitude",
    "QuantityQ",
    "QuantityUnit",
    "QuantityVariable",
    "QuantityVariableCanonicalUnit",
    "QuantityVariableDimensions",
    "QuantityVariableIdentifier",
    "QuantityVariablePhysicalQuantity",
    "Quartics",
    "QuartileDeviation",
    "Quartiles",
    "QuartileSkewness",
    "Query",
    "QuestionGenerator",
    "QuestionInterface",
    "QuestionObject",
    "QuestionSelector",
    "QueueingNetworkProcess",
    "QueueingProcess",
    "QueueProperties",
    "Quiet",
    "QuietEcho",
    "Quit",
    "Quotient",
    "QuotientRemainder",
    "RadialAxisPlot",
    "RadialGradientFilling",
    "RadialGradientImage",
    "RadialityCentrality",
    "RadicalBox",
    "RadicalBoxOptions",
    "RadioButton",
    "RadioButtonBar",
    "RadioButtonBox",
    "RadioButtonBoxOptions",
    "Radon",
    "RadonTransform",
    "RamanujanTau",
    "RamanujanTauL",
    "RamanujanTauTheta",
    "RamanujanTauZ",
    "Ramp",
    "Random",
    "RandomArrayLayer",
    "RandomChoice",
    "RandomColor",
    "RandomComplex",
    "RandomDate",
    "RandomEntity",
    "RandomFunction",
    "RandomGeneratorState",
    "RandomGeoPosition",
    "RandomGraph",
    "RandomImage",
    "RandomInstance",
    "RandomInteger",
    "RandomPermutation",
    "RandomPoint",
    "RandomPointConfiguration",
    "RandomPolygon",
    "RandomPolyhedron",
    "RandomPrime",
    "RandomReal",
    "RandomSample",
    "RandomSeed",
    "RandomSeeding",
    "RandomTime",
    "RandomTree",
    "RandomVariate",
    "RandomWalkProcess",
    "RandomWord",
    "Range",
    "RangeFilter",
    "RangeSpecification",
    "RankedMax",
    "RankedMin",
    "RarerProbability",
    "Raster",
    "Raster3D",
    "Raster3DBox",
    "Raster3DBoxOptions",
    "RasterArray",
    "RasterBox",
    "RasterBoxOptions",
    "Rasterize",
    "RasterSize",
    "Rational",
    "RationalExpressionQ",
    "RationalFunctions",
    "Rationalize",
    "Rationals",
    "Ratios",
    "RawArray",
    "RawBoxes",
    "RawData",
    "RawMedium",
    "RayleighDistribution",
    "Re",
    "ReactionBalance",
    "ReactionBalancedQ",
    "ReactionPDETerm",
    "Read",
    "ReadByteArray",
    "ReadLine",
    "ReadList",
    "ReadProtected",
    "ReadString",
    "Real",
    "RealAbs",
    "RealBlockDiagonalForm",
    "RealDigits",
    "RealExponent",
    "Reals",
    "RealSign",
    "Reap",
    "RebuildPacletData",
    "RecalibrationFunction",
    "RecognitionPrior",
    "RecognitionThreshold",
    "ReconstructionMesh",
    "Record",
    "RecordLists",
    "RecordSeparators",
    "Rectangle",
    "RectangleBox",
    "RectangleBoxOptions",
    "RectangleChart",
    "RectangleChart3D",
    "RectangularRepeatingElement",
    "RecurrenceFilter",
    "RecurrenceTable",
    "RecurringDigitsForm",
    "Red",
    "Reduce",
    "RefBox",
    "ReferenceLineStyle",
    "ReferenceMarkers",
    "ReferenceMarkerStyle",
    "Refine",
    "ReflectionMatrix",
    "ReflectionTransform",
    "Refresh",
    "RefreshRate",
    "Region",
    "RegionBinarize",
    "RegionBoundary",
    "RegionBoundaryStyle",
    "RegionBounds",
    "RegionCentroid",
    "RegionCongruent",
    "RegionConvert",
    "RegionDifference",
    "RegionDilation",
    "RegionDimension",
    "RegionDisjoint",
    "RegionDistance",
    "RegionDistanceFunction",
    "RegionEmbeddingDimension",
    "RegionEqual",
    "RegionErosion",
    "RegionFillingStyle",
    "RegionFit",
    "RegionFunction",
    "RegionImage",
    "RegionIntersection",
    "RegionMeasure",
    "RegionMember",
    "RegionMemberFunction",
    "RegionMoment",
    "RegionNearest",
    "RegionNearestFunction",
    "RegionPlot",
    "RegionPlot3D",
    "RegionProduct",
    "RegionQ",
    "RegionResize",
    "RegionSimilar",
    "RegionSize",
    "RegionSymmetricDifference",
    "RegionUnion",
    "RegionWithin",
    "RegisterExternalEvaluator",
    "RegularExpression",
    "Regularization",
    "RegularlySampledQ",
    "RegularPolygon",
    "ReIm",
    "ReImLabels",
    "ReImPlot",
    "ReImStyle",
    "Reinstall",
    "RelationalDatabase",
    "RelationGraph",
    "Release",
    "ReleaseHold",
    "ReliabilityDistribution",
    "ReliefImage",
    "ReliefPlot",
    "RemoteAuthorizationCaching",
    "RemoteBatchJobAbort",
    "RemoteBatchJobObject",
    "RemoteBatchJobs",
    "RemoteBatchMapSubmit",
    "RemoteBatchSubmissionEnvironment",
    "RemoteBatchSubmit",
    "RemoteConnect",
    "RemoteConnectionObject",
    "RemoteEvaluate",
    "RemoteFile",
    "RemoteInputFiles",
    "RemoteKernelObject",
    "RemoteProviderSettings",
    "RemoteRun",
    "RemoteRunProcess",
    "RemovalConditions",
    "Remove",
    "RemoveAlphaChannel",
    "RemoveAsynchronousTask",
    "RemoveAudioStream",
    "RemoveBackground",
    "RemoveChannelListener",
    "RemoveChannelSubscribers",
    "Removed",
    "RemoveDiacritics",
    "RemoveInputStreamMethod",
    "RemoveOutputStreamMethod",
    "RemoveProperty",
    "RemoveScheduledTask",
    "RemoveUsers",
    "RemoveVideoStream",
    "RenameDirectory",
    "RenameFile",
    "RenderAll",
    "RenderingOptions",
    "RenewalProcess",
    "RenkoChart",
    "RepairMesh",
    "Repeated",
    "RepeatedNull",
    "RepeatedString",
    "RepeatedTiming",
    "RepeatingElement",
    "Replace",
    "ReplaceAll",
    "ReplaceAt",
    "ReplaceHeldPart",
    "ReplaceImageValue",
    "ReplaceList",
    "ReplacePart",
    "ReplacePixelValue",
    "ReplaceRepeated",
    "ReplicateLayer",
    "RequiredPhysicalQuantities",
    "Resampling",
    "ResamplingAlgorithmData",
    "ResamplingMethod",
    "Rescale",
    "RescalingTransform",
    "ResetDirectory",
    "ResetScheduledTask",
    "ReshapeLayer",
    "Residue",
    "ResidueSum",
    "ResizeLayer",
    "Resolve",
    "ResolveContextAliases",
    "ResourceAcquire",
    "ResourceData",
    "ResourceFunction",
    "ResourceObject",
    "ResourceRegister",
    "ResourceRemove",
    "ResourceSearch",
    "ResourceSubmissionObject",
    "ResourceSubmit",
    "ResourceSystemBase",
    "ResourceSystemPath",
    "ResourceUpdate",
    "ResourceVersion",
    "ResponseForm",
    "Rest",
    "RestartInterval",
    "Restricted",
    "Resultant",
    "ResumePacket",
    "Return",
    "ReturnCreatesNewCell",
    "ReturnEntersInput",
    "ReturnExpressionPacket",
    "ReturnInputFormPacket",
    "ReturnPacket",
    "ReturnReceiptFunction",
    "ReturnTextPacket",
    "Reverse",
    "ReverseApplied",
    "ReverseBiorthogonalSplineWavelet",
    "ReverseElement",
    "ReverseEquilibrium",
    "ReverseGraph",
    "ReverseSort",
    "ReverseSortBy",
    "ReverseUpEquilibrium",
    "RevolutionAxis",
    "RevolutionPlot3D",
    "RGBColor",
    "RiccatiSolve",
    "RiceDistribution",
    "RidgeFilter",
    "RiemannR",
    "RiemannSiegelTheta",
    "RiemannSiegelZ",
    "RiemannXi",
    "Riffle",
    "Right",
    "RightArrow",
    "RightArrowBar",
    "RightArrowLeftArrow",
    "RightComposition",
    "RightCosetRepresentative",
    "RightDownTeeVector",
    "RightDownVector",
    "RightDownVectorBar",
    "RightTee",
    "RightTeeArrow",
    "RightTeeVector",
    "RightTriangle",
    "RightTriangleBar",
    "RightTriangleEqual",
    "RightUpDownVector",
    "RightUpTeeVector",
    "RightUpVector",
    "RightUpVectorBar",
    "RightVector",
    "RightVectorBar",
    "RipleyK",
    "RipleyRassonRegion",
    "RiskAchievementImportance",
    "RiskReductionImportance",
    "RobustConvexOptimization",
    "RogersTanimotoDissimilarity",
    "RollPitchYawAngles",
    "RollPitchYawMatrix",
    "RomanNumeral",
    "Root",
    "RootApproximant",
    "RootIntervals",
    "RootLocusPlot",
    "RootMeanSquare",
    "RootOfUnityQ",
    "RootReduce",
    "Roots",
    "RootSum",
    "RootTree",
    "Rotate",
    "RotateLabel",
    "RotateLeft",
    "RotateRight",
    "RotationAction",
    "RotationBox",
    "RotationBoxOptions",
    "RotationMatrix",
    "RotationTransform",
    "Round",
    "RoundImplies",
    "RoundingRadius",
    "Row",
    "RowAlignments",
    "RowBackgrounds",
    "RowBox",
    "RowHeights",
    "RowLines",
    "RowMinHeight",
    "RowReduce",
    "RowsEqual",
    "RowSpacings",
    "RSolve",
    "RSolveValue",
    "RudinShapiro",
    "RudvalisGroupRu",
    "Rule",
    "RuleCondition",
    "RuleDelayed",
    "RuleForm",
    "RulePlot",
    "RulerUnits",
    "RulesTree",
    "Run",
    "RunProcess",
    "RunScheduledTask",
    "RunThrough",
    "RuntimeAttributes",
    "RuntimeOptions",
    "RussellRaoDissimilarity",
    "SameAs",
    "SameQ",
    "SameTest",
    "SameTestProperties",
    "SampledEntityClass",
    "SampleDepth",
    "SampledSoundFunction",
    "SampledSoundList",
    "SampleRate",
    "SamplingPeriod",
    "SARIMAProcess",
    "SARMAProcess",
    "SASTriangle",
    "SatelliteData",
    "SatisfiabilityCount",
    "SatisfiabilityInstances",
    "SatisfiableQ",
    "Saturday",
    "Save",
    "Saveable",
    "SaveAutoDelete",
    "SaveConnection",
    "SaveDefinitions",
    "SavitzkyGolayMatrix",
    "SawtoothWave",
    "Scale",
    "Scaled",
    "ScaleDivisions",
    "ScaledMousePosition",
    "ScaleOrigin",
    "ScalePadding",
    "ScaleRanges",
    "ScaleRangeStyle",
    "ScalingFunctions",
    "ScalingMatrix",
    "ScalingTransform",
    "Scan",
    "ScheduledTask",
    "ScheduledTaskActiveQ",
    "ScheduledTaskInformation",
    "ScheduledTaskInformationData",
    "ScheduledTaskObject",
    "ScheduledTasks",
    "SchurDecomposition",
    "ScientificForm",
    "ScientificNotationThreshold",
    "ScorerGi",
    "ScorerGiPrime",
    "ScorerHi",
    "ScorerHiPrime",
    "ScreenRectangle",
    "ScreenStyleEnvironment",
    "ScriptBaselineShifts",
    "ScriptForm",
    "ScriptLevel",
    "ScriptMinSize",
    "ScriptRules",
    "ScriptSizeMultipliers",
    "Scrollbars",
    "ScrollingOptions",
    "ScrollPosition",
    "SearchAdjustment",
    "SearchIndexObject",
    "SearchIndices",
    "SearchQueryString",
    "SearchResultObject",
    "Sec",
    "Sech",
    "SechDistribution",
    "SecondOrderConeOptimization",
    "SectionGrouping",
    "SectorChart",
    "SectorChart3D",
    "SectorOrigin",
    "SectorSpacing",
    "SecuredAuthenticationKey",
    "SecuredAuthenticationKeys",
    "SecurityCertificate",
    "SeedRandom",
    "Select",
    "Selectable",
    "SelectComponents",
    "SelectedCells",
    "SelectedNotebook",
    "SelectFirst",
    "Selection",
    "SelectionAnimate",
    "SelectionCell",
    "SelectionCellCreateCell",
    "SelectionCellDefaultStyle",
    "SelectionCellParentStyle",
    "SelectionCreateCell",
    "SelectionDebuggerTag",
    "SelectionEvaluate",
    "SelectionEvaluateCreateCell",
    "SelectionMove",
    "SelectionPlaceholder",
    "SelectWithContents",
    "SelfLoops",
    "SelfLoopStyle",
    "SemanticImport",
    "SemanticImportString",
    "SemanticInterpretation",
    "SemialgebraicComponentInstances",
    "SemidefiniteOptimization",
    "SendMail",
    "SendMessage",
    "Sequence",
    "SequenceAlignment",
    "SequenceAttentionLayer",
    "SequenceCases",
    "SequenceCount",
    "SequenceFold",
    "SequenceFoldList",
    "SequenceForm",
    "SequenceHold",
    "SequenceIndicesLayer",
    "SequenceLastLayer",
    "SequenceMostLayer",
    "SequencePosition",
    "SequencePredict",
    "SequencePredictorFunction",
    "SequenceReplace",
    "SequenceRestLayer",
    "SequenceReverseLayer",
    "SequenceSplit",
    "Series",
    "SeriesCoefficient",
    "SeriesData",
    "SeriesTermGoal",
    "ServiceConnect",
    "ServiceDisconnect",
    "ServiceExecute",
    "ServiceObject",
    "ServiceRequest",
    "ServiceResponse",
    "ServiceSubmit",
    "SessionSubmit",
    "SessionTime",
    "Set",
    "SetAccuracy",
    "SetAlphaChannel",
    "SetAttributes",
    "Setbacks",
    "SetCloudDirectory",
    "SetCookies",
    "SetDelayed",
    "SetDirectory",
    "SetEnvironment",
    "SetFileDate",
    "SetFileFormatProperties",
    "SetOptions",
    "SetOptionsPacket",
    "SetPermissions",
    "SetPrecision",
    "SetProperty",
    "SetSecuredAuthenticationKey",
    "SetSelectedNotebook",
    "SetSharedFunction",
    "SetSharedVariable",
    "SetStreamPosition",
    "SetSystemModel",
    "SetSystemOptions",
    "Setter",
    "SetterBar",
    "SetterBox",
    "SetterBoxOptions",
    "Setting",
    "SetUsers",
    "Shading",
    "Shallow",
    "ShannonWavelet",
    "ShapiroWilkTest",
    "Share",
    "SharingList",
    "Sharpen",
    "ShearingMatrix",
    "ShearingTransform",
    "ShellRegion",
    "ShenCastanMatrix",
    "ShiftedGompertzDistribution",
    "ShiftRegisterSequence",
    "Short",
    "ShortDownArrow",
    "Shortest",
    "ShortestMatch",
    "ShortestPathFunction",
    "ShortLeftArrow",
    "ShortRightArrow",
    "ShortTimeFourier",
    "ShortTimeFourierData",
    "ShortUpArrow",
    "Show",
    "ShowAutoConvert",
    "ShowAutoSpellCheck",
    "ShowAutoStyles",
    "ShowCellBracket",
    "ShowCellLabel",
    "ShowCellTags",
    "ShowClosedCellArea",
    "ShowCodeAssist",
    "ShowContents",
    "ShowControls",
    "ShowCursorTracker",
    "ShowGroupOpenCloseIcon",
    "ShowGroupOpener",
    "ShowInvisibleCharacters",
    "ShowPageBreaks",
    "ShowPredictiveInterface",
    "ShowSelection",
    "ShowShortBoxForm",
    "ShowSpecialCharacters",
    "ShowStringCharacters",
    "ShowSyntaxStyles",
    "ShrinkingDelay",
    "ShrinkWrapBoundingBox",
    "SiderealTime",
    "SiegelTheta",
    "SiegelTukeyTest",
    "SierpinskiCurve",
    "SierpinskiMesh",
    "Sign",
    "Signature",
    "SignedRankTest",
    "SignedRegionDistance",
    "SignificanceLevel",
    "SignPadding",
    "SignTest",
    "SimilarityRules",
    "SimpleGraph",
    "SimpleGraphQ",
    "SimplePolygonQ",
    "SimplePolyhedronQ",
    "Simplex",
    "Simplify",
    "Sin",
    "Sinc",
    "SinghMaddalaDistribution",
    "SingleEvaluation",
    "SingleLetterItalics",
    "SingleLetterStyle",
    "SingularValueDecomposition",
    "SingularValueList",
    "SingularValuePlot",
    "SingularValues",
    "Sinh",
    "SinhIntegral",
    "SinIntegral",
    "SixJSymbol",
    "Skeleton",
    "SkeletonTransform",
    "SkellamDistribution",
    "Skewness",
    "SkewNormalDistribution",
    "SkinStyle",
    "Skip",
    "SliceContourPlot3D",
    "SliceDensityPlot3D",
    "SliceDistribution",
    "SliceVectorPlot3D",
    "Slider",
    "Slider2D",
    "Slider2DBox",
    "Slider2DBoxOptions",
    "SliderBox",
    "SliderBoxOptions",
    "SlideShowVideo",
    "SlideView",
    "Slot",
    "SlotSequence",
    "Small",
    "SmallCircle",
    "Smaller",
    "SmithDecomposition",
    "SmithDelayCompensator",
    "SmithWatermanSimilarity",
    "SmoothDensityHistogram",
    "SmoothHistogram",
    "SmoothHistogram3D",
    "SmoothKernelDistribution",
    "SmoothPointDensity",
    "SnDispersion",
    "Snippet",
    "SnippetsVideo",
    "SnubPolyhedron",
    "SocialMediaData",
    "Socket",
    "SocketConnect",
    "SocketListen",
    "SocketListener",
    "SocketObject",
    "SocketOpen",
    "SocketReadMessage",
    "SocketReadyQ",
    "Sockets",
    "SocketWaitAll",
    "SocketWaitNext",
    "SoftmaxLayer",
    "SokalSneathDissimilarity",
    "SolarEclipse",
    "SolarSystemFeatureData",
    "SolarTime",
    "SolidAngle",
    "SolidBoundaryLoadValue",
    "SolidData",
    "SolidDisplacementCondition",
    "SolidFixedCondition",
    "SolidMechanicsPDEComponent",
    "SolidMechanicsStrain",
    "SolidMechanicsStress",
    "SolidRegionQ",
    "Solve",
    "SolveAlways",
    "SolveDelayed",
    "SolveValues",
    "Sort",
    "SortBy",
    "SortedBy",
    "SortedEntityClass",
    "Sound",
    "SoundAndGraphics",
    "SoundNote",
    "SoundVolume",
    "SourceLink",
    "SourcePDETerm",
    "Sow",
    "Space",
    "SpaceCurveData",
    "SpaceForm",
    "Spacer",
    "Spacings",
    "Span",
    "SpanAdjustments",
    "SpanCharacterRounding",
    "SpanFromAbove",
    "SpanFromBoth",
    "SpanFromLeft",
    "SpanLineThickness",
    "SpanMaxSize",
    "SpanMinSize",
    "SpanningCharacters",
    "SpanSymmetric",
    "SparseArray",
    "SparseArrayQ",
    "SpatialBinnedPointData",
    "SpatialBoundaryCorrection",
    "SpatialEstimate",
    "SpatialEstimatorFunction",
    "SpatialGraphDistribution",
    "SpatialJ",
    "SpatialMedian",
    "SpatialNoiseLevel",
    "SpatialObservationRegionQ",
    "SpatialPointData",
    "SpatialPointSelect",
    "SpatialRandomnessTest",
    "SpatialTransformationLayer",
    "SpatialTrendFunction",
    "Speak",
    "SpeakerMatchQ",
    "SpearmanRankTest",
    "SpearmanRho",
    "SpeciesData",
    "SpecificityGoal",
    "SpectralLineData",
    "Spectrogram",
    "SpectrogramArray",
    "Specularity",
    "SpeechCases",
    "SpeechInterpreter",
    "SpeechRecognize",
    "SpeechSynthesize",
    "SpellingCorrection",
    "SpellingCorrectionList",
    "SpellingDictionaries",
    "SpellingDictionariesPath",
    "SpellingOptions",
    "Sphere",
    "SphereBox",
    "SphereBoxOptions",
    "SpherePoints",
    "SphericalBesselJ",
    "SphericalBesselY",
    "SphericalHankelH1",
    "SphericalHankelH2",
    "SphericalHarmonicY",
    "SphericalPlot3D",
    "SphericalRegion",
    "SphericalShell",
    "SpheroidalEigenvalue",
    "SpheroidalJoiningFactor",
    "SpheroidalPS",
    "SpheroidalPSPrime",
    "SpheroidalQS",
    "SpheroidalQSPrime",
    "SpheroidalRadialFactor",
    "SpheroidalS1",
    "SpheroidalS1Prime",
    "SpheroidalS2",
    "SpheroidalS2Prime",
    "Splice",
    "SplicedDistribution",
    "SplineClosed",
    "SplineDegree",
    "SplineKnots",
    "SplineWeights",
    "Split",
    "SplitBy",
    "SpokenString",
    "SpotLight",
    "Sqrt",
    "SqrtBox",
    "SqrtBoxOptions",
    "Square",
    "SquaredEuclideanDistance",
    "SquareFreeQ",
    "SquareIntersection",
    "SquareMatrixQ",
    "SquareRepeatingElement",
    "SquaresR",
    "SquareSubset",
    "SquareSubsetEqual",
    "SquareSuperset",
    "SquareSupersetEqual",
    "SquareUnion",
    "SquareWave",
    "SSSTriangle",
    "StabilityMargins",
    "StabilityMarginsStyle",
    "StableDistribution",
    "Stack",
    "StackBegin",
    "StackComplete",
    "StackedDateListPlot",
    "StackedListPlot",
    "StackInhibit",
    "StadiumShape",
    "StandardAtmosphereData",
    "StandardDeviation",
    "StandardDeviationFilter",
    "StandardForm",
    "Standardize",
    "Standardized",
    "StandardOceanData",
    "StandbyDistribution",
    "Star",
    "StarClusterData",
    "StarData",
    "StarGraph",
    "StartAsynchronousTask",
    "StartExternalSession",
    "StartingStepSize",
    "StartOfLine",
    "StartOfString",
    "StartProcess",
    "StartScheduledTask",
    "StartupSound",
    "StartWebSession",
    "StateDimensions",
    "StateFeedbackGains",
    "StateOutputEstimator",
    "StateResponse",
    "StateSpaceModel",
    "StateSpaceRealization",
    "StateSpaceTransform",
    "StateTransformationLinearize",
    "StationaryDistribution",
    "StationaryWaveletPacketTransform",
    "StationaryWaveletTransform",
    "StatusArea",
    "StatusCentrality",
    "StepMonitor",
    "StereochemistryElements",
    "StieltjesGamma",
    "StippleShading",
    "StirlingS1",
    "StirlingS2",
    "StopAsynchronousTask",
    "StoppingPowerData",
    "StopScheduledTask",
    "StrataVariables",
    "StratonovichProcess",
    "StraussHardcorePointProcess",
    "StraussPointProcess",
    "StreamColorFunction",
    "StreamColorFunctionScaling",
    "StreamDensityPlot",
    "StreamMarkers",
    "StreamPlot",
    "StreamPlot3D",
    "StreamPoints",
    "StreamPosition",
    "Streams",
    "StreamScale",
    "StreamStyle",
    "StrictInequalities",
    "String",
    "StringBreak",
    "StringByteCount",
    "StringCases",
    "StringContainsQ",
    "StringCount",
    "StringDelete",
    "StringDrop",
    "StringEndsQ",
    "StringExpression",
    "StringExtract",
    "StringForm",
    "StringFormat",
    "StringFormatQ",
    "StringFreeQ",
    "StringInsert",
    "StringJoin",
    "StringLength",
    "StringMatchQ",
    "StringPadLeft",
    "StringPadRight",
    "StringPart",
    "StringPartition",
    "StringPosition",
    "StringQ",
    "StringRepeat",
    "StringReplace",
    "StringReplaceList",
    "StringReplacePart",
    "StringReverse",
    "StringRiffle",
    "StringRotateLeft",
    "StringRotateRight",
    "StringSkeleton",
    "StringSplit",
    "StringStartsQ",
    "StringTake",
    "StringTakeDrop",
    "StringTemplate",
    "StringToByteArray",
    "StringToStream",
    "StringTrim",
    "StripBoxes",
    "StripOnInput",
    "StripStyleOnPaste",
    "StripWrapperBoxes",
    "StrokeForm",
    "Struckthrough",
    "StructuralImportance",
    "StructuredArray",
    "StructuredArrayHeadQ",
    "StructuredSelection",
    "StruveH",
    "StruveL",
    "Stub",
    "StudentTDistribution",
    "Style",
    "StyleBox",
    "StyleBoxAutoDelete",
    "StyleData",
    "StyleDefinitions",
    "StyleForm",
    "StyleHints",
    "StyleKeyMapping",
    "StyleMenuListing",
    "StyleNameDialogSettings",
    "StyleNames",
    "StylePrint",
    "StyleSheetPath",
    "Subdivide",
    "Subfactorial",
    "Subgraph",
    "SubMinus",
    "SubPlus",
    "SubresultantPolynomialRemainders",
    "SubresultantPolynomials",
    "Subresultants",
    "Subscript",
    "SubscriptBox",
    "SubscriptBoxOptions",
    "Subscripted",
    "Subsequences",
    "Subset",
    "SubsetCases",
    "SubsetCount",
    "SubsetEqual",
    "SubsetMap",
    "SubsetPosition",
    "SubsetQ",
    "SubsetReplace",
    "Subsets",
    "SubStar",
    "SubstitutionSystem",
    "Subsuperscript",
    "SubsuperscriptBox",
    "SubsuperscriptBoxOptions",
    "SubtitleEncoding",
    "SubtitleTrackSelection",
    "Subtract",
    "SubtractFrom",
    "SubtractSides",
    "SubValues",
    "Succeeds",
    "SucceedsEqual",
    "SucceedsSlantEqual",
    "SucceedsTilde",
    "Success",
    "SuchThat",
    "Sum",
    "SumConvergence",
    "SummationLayer",
    "Sunday",
    "SunPosition",
    "Sunrise",
    "Sunset",
    "SuperDagger",
    "SuperMinus",
    "SupernovaData",
    "SuperPlus",
    "Superscript",
    "SuperscriptBox",
    "SuperscriptBoxOptions",
    "Superset",
    "SupersetEqual",
    "SuperStar",
    "Surd",
    "SurdForm",
    "SurfaceAppearance",
    "SurfaceArea",
    "SurfaceColor",
    "SurfaceData",
    "SurfaceGraphics",
    "SurvivalDistribution",
    "SurvivalFunction",
    "SurvivalModel",
    "SurvivalModelFit",
    "SuspendPacket",
    "SuzukiDistribution",
    "SuzukiGroupSuz",
    "SwatchLegend",
    "Switch",
    "Symbol",
    "SymbolName",
    "SymletWavelet",
    "Symmetric",
    "SymmetricDifference",
    "SymmetricGroup",
    "SymmetricKey",
    "SymmetricMatrixQ",
    "SymmetricPolynomial",
    "SymmetricReduction",
    "Symmetrize",
    "SymmetrizedArray",
    "SymmetrizedArrayRules",
    "SymmetrizedDependentComponents",
    "SymmetrizedIndependentComponents",
    "SymmetrizedReplacePart",
    "SynchronousInitialization",
    "SynchronousUpdating",
    "Synonyms",
    "Syntax",
    "SyntaxForm",
    "SyntaxInformation",
    "SyntaxLength",
    "SyntaxPacket",
    "SyntaxQ",
    "SynthesizeMissingValues",
    "SystemCredential",
    "SystemCredentialData",
    "SystemCredentialKey",
    "SystemCredentialKeys",
    "SystemCredentialStoreObject",
    "SystemDialogInput",
    "SystemException",
    "SystemGet",
    "SystemHelpPath",
    "SystemInformation",
    "SystemInformationData",
    "SystemInstall",
    "SystemModel",
    "SystemModeler",
    "SystemModelExamples",
    "SystemModelLinearize",
    "SystemModelMeasurements",
    "SystemModelParametricSimulate",
    "SystemModelPlot",
    "SystemModelProgressReporting",
    "SystemModelReliability",
    "SystemModels",
    "SystemModelSimulate",
    "SystemModelSimulateSensitivity",
    "SystemModelSimulationData",
    "SystemOpen",
    "SystemOptions",
    "SystemProcessData",
    "SystemProcesses",
    "SystemsConnectionsModel",
    "SystemsModelControllerData",
    "SystemsModelDelay",
    "SystemsModelDelayApproximate",
    "SystemsModelDelete",
    "SystemsModelDimensions",
    "SystemsModelExtract",
    "SystemsModelFeedbackConnect",
    "SystemsModelLabels",
    "SystemsModelLinearity",
    "SystemsModelMerge",
    "SystemsModelOrder",
    "SystemsModelParallelConnect",
    "SystemsModelSeriesConnect",
    "SystemsModelStateFeedbackConnect",
    "SystemsModelVectorRelativeOrders",
    "SystemStub",
    "SystemTest",
    "Tab",
    "TabFilling",
    "Table",
    "TableAlignments",
    "TableDepth",
    "TableDirections",
    "TableForm",
    "TableHeadings",
    "TableSpacing",
    "TableView",
    "TableViewBox",
    "TableViewBoxAlignment",
    "TableViewBoxBackground",
    "TableViewBoxHeaders",
    "TableViewBoxItemSize",
    "TableViewBoxItemStyle",
    "TableViewBoxOptions",
    "TabSpacings",
    "TabView",
    "TabViewBox",
    "TabViewBoxOptions",
    "TagBox",
    "TagBoxNote",
    "TagBoxOptions",
    "TaggingRules",
    "TagSet",
    "TagSetDelayed",
    "TagStyle",
    "TagUnset",
    "Take",
    "TakeDrop",
    "TakeLargest",
    "TakeLargestBy",
    "TakeList",
    "TakeSmallest",
    "TakeSmallestBy",
    "TakeWhile",
    "Tally",
    "Tan",
    "Tanh",
    "TargetDevice",
    "TargetFunctions",
    "TargetSystem",
    "TargetUnits",
    "TaskAbort",
    "TaskExecute",
    "TaskObject",
    "TaskRemove",
    "TaskResume",
    "Tasks",
    "TaskSuspend",
    "TaskWait",
    "TautologyQ",
    "TelegraphProcess",
    "TemplateApply",
    "TemplateArgBox",
    "TemplateBox",
    "TemplateBoxOptions",
    "TemplateEvaluate",
    "TemplateExpression",
    "TemplateIf",
    "TemplateObject",
    "TemplateSequence",
    "TemplateSlot",
    "TemplateSlotSequence",
    "TemplateUnevaluated",
    "TemplateVerbatim",
    "TemplateWith",
    "TemporalData",
    "TemporalRegularity",
    "Temporary",
    "TemporaryVariable",
    "TensorContract",
    "TensorDimensions",
    "TensorExpand",
    "TensorProduct",
    "TensorQ",
    "TensorRank",
    "TensorReduce",
    "TensorSymmetry",
    "TensorTranspose",
    "TensorWedge",
    "TerminatedEvaluation",
    "TernaryListPlot",
    "TernaryPlotCorners",
    "TestID",
    "TestReport",
    "TestReportObject",
    "TestResultObject",
    "Tetrahedron",
    "TetrahedronBox",
    "TetrahedronBoxOptions",
    "TeXForm",
    "TeXSave",
    "Text",
    "Text3DBox",
    "Text3DBoxOptions",
    "TextAlignment",
    "TextBand",
    "TextBoundingBox",
    "TextBox",
    "TextCases",
    "TextCell",
    "TextClipboardType",
    "TextContents",
    "TextData",
    "TextElement",
    "TextForm",
    "TextGrid",
    "TextJustification",
    "TextLine",
    "TextPacket",
    "TextParagraph",
    "TextPosition",
    "TextRecognize",
    "TextSearch",
    "TextSearchReport",
    "TextSentences",
    "TextString",
    "TextStructure",
    "TextStyle",
    "TextTranslation",
    "Texture",
    "TextureCoordinateFunction",
    "TextureCoordinateScaling",
    "TextWords",
    "Therefore",
    "ThermodynamicData",
    "ThermometerGauge",
    "Thick",
    "Thickness",
    "Thin",
    "Thinning",
    "ThisLink",
    "ThomasPointProcess",
    "ThompsonGroupTh",
    "Thread",
    "Threaded",
    "ThreadingLayer",
    "ThreeJSymbol",
    "Threshold",
    "Through",
    "Throw",
    "ThueMorse",
    "Thumbnail",
    "Thursday",
    "TickDirection",
    "TickLabelOrientation",
    "TickLabelPositioning",
    "TickLabels",
    "TickLengths",
    "TickPositions",
    "Ticks",
    "TicksStyle",
    "TideData",
    "Tilde",
    "TildeEqual",
    "TildeFullEqual",
    "TildeTilde",
    "TimeConstrained",
    "TimeConstraint",
    "TimeDirection",
    "TimeFormat",
    "TimeGoal",
    "TimelinePlot",
    "TimeObject",
    "TimeObjectQ",
    "TimeRemaining",
    "Times",
    "TimesBy",
    "TimeSeries",
    "TimeSeriesAggregate",
    "TimeSeriesForecast",
    "TimeSeriesInsert",
    "TimeSeriesInvertibility",
    "TimeSeriesMap",
    "TimeSeriesMapThread",
    "TimeSeriesModel",
    "TimeSeriesModelFit",
    "TimeSeriesResample",
    "TimeSeriesRescale",
    "TimeSeriesShift",
    "TimeSeriesThread",
    "TimeSeriesWindow",
    "TimeSystem",
    "TimeSystemConvert",
    "TimeUsed",
    "TimeValue",
    "TimeWarpingCorrespondence",
    "TimeWarpingDistance",
    "TimeZone",
    "TimeZoneConvert",
    "TimeZoneOffset",
    "Timing",
    "Tiny",
    "TitleGrouping",
    "TitsGroupT",
    "ToBoxes",
    "ToCharacterCode",
    "ToColor",
    "ToContinuousTimeModel",
    "ToDate",
    "Today",
    "ToDiscreteTimeModel",
    "ToEntity",
    "ToeplitzMatrix",
    "ToExpression",
    "ToFileName",
    "Together",
    "Toggle",
    "ToggleFalse",
    "Toggler",
    "TogglerBar",
    "TogglerBox",
    "TogglerBoxOptions",
    "ToHeldExpression",
    "ToInvertibleTimeSeries",
    "TokenWords",
    "Tolerance",
    "ToLowerCase",
    "Tomorrow",
    "ToNumberField",
    "TooBig",
    "Tooltip",
    "TooltipBox",
    "TooltipBoxOptions",
    "TooltipDelay",
    "TooltipStyle",
    "ToonShading",
    "Top",
    "TopHatTransform",
    "ToPolarCoordinates",
    "TopologicalSort",
    "ToRadicals",
    "ToRawPointer",
    "ToRules",
    "Torus",
    "TorusGraph",
    "ToSphericalCoordinates",
    "ToString",
    "Total",
    "TotalHeight",
    "TotalLayer",
    "TotalVariationFilter",
    "TotalWidth",
    "TouchPosition",
    "TouchscreenAutoZoom",
    "TouchscreenControlPlacement",
    "ToUpperCase",
    "TourVideo",
    "Tr",
    "Trace",
    "TraceAbove",
    "TraceAction",
    "TraceBackward",
    "TraceDepth",
    "TraceDialog",
    "TraceForward",
    "TraceInternal",
    "TraceLevel",
    "TraceOff",
    "TraceOn",
    "TraceOriginal",
    "TracePrint",
    "TraceScan",
    "TrackCellChangeTimes",
    "TrackedSymbols",
    "TrackingFunction",
    "TracyWidomDistribution",
    "TradingChart",
    "TraditionalForm",
    "TraditionalFunctionNotation",
    "TraditionalNotation",
    "TraditionalOrder",
    "TrainImageContentDetector",
    "TrainingProgressCheckpointing",
    "TrainingProgressFunction",
    "TrainingProgressMeasurements",
    "TrainingProgressReporting",
    "TrainingStoppingCriterion",
    "TrainingUpdateSchedule",
    "TrainTextContentDetector",
    "TransferFunctionCancel",
    "TransferFunctionExpand",
    "TransferFunctionFactor",
    "TransferFunctionModel",
    "TransferFunctionPoles",
    "TransferFunctionTransform",
    "TransferFunctionZeros",
    "TransformationClass",
    "TransformationFunction",
    "TransformationFunctions",
    "TransformationMatrix",
    "TransformedDistribution",
    "TransformedField",
    "TransformedProcess",
    "TransformedRegion",
    "TransitionDirection",
    "TransitionDuration",
    "TransitionEffect",
    "TransitiveClosureGraph",
    "TransitiveReductionGraph",
    "Translate",
    "TranslationOptions",
    "TranslationTransform",
    "Transliterate",
    "Transparent",
    "TransparentColor",
    "Transpose",
    "TransposeLayer",
    "TrapEnterKey",
    "TrapSelection",
    "TravelDirections",
    "TravelDirectionsData",
    "TravelDistance",
    "TravelDistanceList",
    "TravelMethod",
    "TravelTime",
    "Tree",
    "TreeCases",
    "TreeChildren",
    "TreeCount",
    "TreeData",
    "TreeDelete",
    "TreeDepth",
    "TreeElementCoordinates",
    "TreeElementLabel",
    "TreeElementLabelFunction",
    "TreeElementLabelStyle",
    "TreeElementShape",
    "TreeElementShapeFunction",
    "TreeElementSize",
    "TreeElementSizeFunction",
    "TreeElementStyle",
    "TreeElementStyleFunction",
    "TreeExpression",
    "TreeExtract",
    "TreeFold",
    "TreeForm",
    "TreeGraph",
    "TreeGraphQ",
    "TreeInsert",
    "TreeLayout",
    "TreeLeafCount",
    "TreeLeafQ",
    "TreeLeaves",
    "TreeLevel",
    "TreeMap",
    "TreeMapAt",
    "TreeOutline",
    "TreePlot",
    "TreePosition",
    "TreeQ",
    "TreeReplacePart",
    "TreeRules",
    "TreeScan",
    "TreeSelect",
    "TreeSize",
    "TreeTraversalOrder",
    "TrendStyle",
    "Triangle",
    "TriangleCenter",
    "TriangleConstruct",
    "TriangleMeasurement",
    "TriangleWave",
    "TriangularDistribution",
    "TriangulateMesh",
    "Trig",
    "TrigExpand",
    "TrigFactor",
    "TrigFactorList",
    "Trigger",
    "TrigReduce",
    "TrigToExp",
    "TrimmedMean",
    "TrimmedVariance",
    "TropicalStormData",
    "True",
    "TrueQ",
    "TruncatedDistribution",
    "TruncatedPolyhedron",
    "TsallisQExponentialDistribution",
    "TsallisQGaussianDistribution",
    "TTest",
    "Tube",
    "TubeBezierCurveBox",
    "TubeBezierCurveBoxOptions",
    "TubeBox",
    "TubeBoxOptions",
    "TubeBSplineCurveBox",
    "TubeBSplineCurveBoxOptions",
    "Tuesday",
    "TukeyLambdaDistribution",
    "TukeyWindow",
    "TunnelData",
    "Tuples",
    "TuranGraph",
    "TuringMachine",
    "TuttePolynomial",
    "TwoWayRule",
    "Typed",
    "TypeDeclaration",
    "TypeEvaluate",
    "TypeHint",
    "TypeOf",
    "TypeSpecifier",
    "UnateQ",
    "Uncompress",
    "UnconstrainedParameters",
    "Undefined",
    "UnderBar",
    "Underflow",
    "Underlined",
    "Underoverscript",
    "UnderoverscriptBox",
    "UnderoverscriptBoxOptions",
    "Underscript",
    "UnderscriptBox",
    "UnderscriptBoxOptions",
    "UnderseaFeatureData",
    "UndirectedEdge",
    "UndirectedGraph",
    "UndirectedGraphQ",
    "UndoOptions",
    "UndoTrackedVariables",
    "Unequal",
    "UnequalTo",
    "Unevaluated",
    "UniformDistribution",
    "UniformGraphDistribution",
    "UniformPolyhedron",
    "UniformSumDistribution",
    "Uninstall",
    "Union",
    "UnionedEntityClass",
    "UnionPlus",
    "Unique",
    "UniqueElements",
    "UnitaryMatrixQ",
    "UnitBox",
    "UnitConvert",
    "UnitDimensions",
    "Unitize",
    "UnitRootTest",
    "UnitSimplify",
    "UnitStep",
    "UnitSystem",
    "UnitTriangle",
    "UnitVector",
    "UnitVectorLayer",
    "UnityDimensions",
    "UniverseModelData",
    "UniversityData",
    "UnixTime",
    "UnlabeledTree",
    "UnmanageObject",
    "Unprotect",
    "UnregisterExternalEvaluator",
    "UnsameQ",
    "UnsavedVariables",
    "Unset",
    "UnsetShared",
    "Until",
    "UntrackedVariables",
    "Up",
    "UpArrow",
    "UpArrowBar",
    "UpArrowDownArrow",
    "Update",
    "UpdateDynamicObjects",
    "UpdateDynamicObjectsSynchronous",
    "UpdateInterval",
    "UpdatePacletSites",
    "UpdateSearchIndex",
    "UpDownArrow",
    "UpEquilibrium",
    "UpperCaseQ",
    "UpperLeftArrow",
    "UpperRightArrow",
    "UpperTriangularize",
    "UpperTriangularMatrix",
    "UpperTriangularMatrixQ",
    "Upsample",
    "UpSet",
    "UpSetDelayed",
    "UpTee",
    "UpTeeArrow",
    "UpTo",
    "UpValues",
    "URL",
    "URLBuild",
    "URLDecode",
    "URLDispatcher",
    "URLDownload",
    "URLDownloadSubmit",
    "URLEncode",
    "URLExecute",
    "URLExpand",
    "URLFetch",
    "URLFetchAsynchronous",
    "URLParse",
    "URLQueryDecode",
    "URLQueryEncode",
    "URLRead",
    "URLResponseTime",
    "URLSave",
    "URLSaveAsynchronous",
    "URLShorten",
    "URLSubmit",
    "UseEmbeddedLibrary",
    "UseGraphicsRange",
    "UserDefinedWavelet",
    "Using",
    "UsingFrontEnd",
    "UtilityFunction",
    "V2Get",
    "ValenceErrorHandling",
    "ValenceFilling",
    "ValidationLength",
    "ValidationSet",
    "ValueBox",
    "ValueBoxOptions",
    "ValueDimensions",
    "ValueForm",
    "ValuePreprocessingFunction",
    "ValueQ",
    "Values",
    "ValuesData",
    "VandermondeMatrix",
    "Variables",
    "Variance",
    "VarianceEquivalenceTest",
    "VarianceEstimatorFunction",
    "VarianceGammaDistribution",
    "VarianceGammaPointProcess",
    "VarianceTest",
    "VariogramFunction",
    "VariogramModel",
    "VectorAngle",
    "VectorAround",
    "VectorAspectRatio",
    "VectorColorFunction",
    "VectorColorFunctionScaling",
    "VectorDensityPlot",
    "VectorDisplacementPlot",
    "VectorDisplacementPlot3D",
    "VectorGlyphData",
    "VectorGreater",
    "VectorGreaterEqual",
    "VectorLess",
    "VectorLessEqual",
    "VectorMarkers",
    "VectorPlot",
    "VectorPlot3D",
    "VectorPoints",
    "VectorQ",
    "VectorRange",
    "Vectors",
    "VectorScale",
    "VectorScaling",
    "VectorSizes",
    "VectorStyle",
    "Vee",
    "Verbatim",
    "Verbose",
    "VerificationTest",
    "VerifyConvergence",
    "VerifyDerivedKey",
    "VerifyDigitalSignature",
    "VerifyFileSignature",
    "VerifyInterpretation",
    "VerifySecurityCertificates",
    "VerifySolutions",
    "VerifyTestAssumptions",
    "VersionedPreferences",
    "VertexAdd",
    "VertexCapacity",
    "VertexChromaticNumber",
    "VertexColors",
    "VertexComponent",
    "VertexConnectivity",
    "VertexContract",
    "VertexCoordinateRules",
    "VertexCoordinates",
    "VertexCorrelationSimilarity",
    "VertexCosineSimilarity",
    "VertexCount",
    "VertexCoverQ",
    "VertexDataCoordinates",
    "VertexDegree",
    "VertexDelete",
    "VertexDiceSimilarity",
    "VertexEccentricity",
    "VertexInComponent",
    "VertexInComponentGraph",
    "VertexInDegree",
    "VertexIndex",
    "VertexJaccardSimilarity",
    "VertexLabeling",
    "VertexLabels",
    "VertexLabelStyle",
    "VertexList",
    "VertexNormals",
    "VertexOutComponent",
    "VertexOutComponentGraph",
    "VertexOutDegree",
    "VertexQ",
    "VertexRenderingFunction",
    "VertexReplace",
    "VertexShape",
    "VertexShapeFunction",
    "VertexSize",
    "VertexStyle",
    "VertexTextureCoordinates",
    "VertexTransitiveGraphQ",
    "VertexWeight",
    "VertexWeightedGraphQ",
    "Vertical",
    "VerticalBar",
    "VerticalForm",
    "VerticalGauge",
    "VerticalSeparator",
    "VerticalSlider",
    "VerticalTilde",
    "Video",
    "VideoCapture",
    "VideoCombine",
    "VideoDelete",
    "VideoEncoding",
    "VideoExtractFrames",
    "VideoFrameList",
    "VideoFrameMap",
    "VideoGenerator",
    "VideoInsert",
    "VideoIntervals",
    "VideoJoin",
    "VideoMap",
    "VideoMapList",
    "VideoMapTimeSeries",
    "VideoPadding",
    "VideoPause",
    "VideoPlay",
    "VideoQ",
    "VideoRecord",
    "VideoReplace",
    "VideoScreenCapture",
    "VideoSplit",
    "VideoStop",
    "VideoStream",
    "VideoStreams",
    "VideoTimeStretch",
    "VideoTrackSelection",
    "VideoTranscode",
    "VideoTransparency",
    "VideoTrim",
    "ViewAngle",
    "ViewCenter",
    "ViewMatrix",
    "ViewPoint",
    "ViewPointSelectorSettings",
    "ViewPort",
    "ViewProjection",
    "ViewRange",
    "ViewVector",
    "ViewVertical",
    "VirtualGroupData",
    "Visible",
    "VisibleCell",
    "VoiceStyleData",
    "VoigtDistribution",
    "VolcanoData",
    "Volume",
    "VonMisesDistribution",
    "VoronoiMesh",
    "WaitAll",
    "WaitAsynchronousTask",
    "WaitNext",
    "WaitUntil",
    "WakebyDistribution",
    "WalleniusHypergeometricDistribution",
    "WaringYuleDistribution",
    "WarpingCorrespondence",
    "WarpingDistance",
    "WatershedComponents",
    "WatsonUSquareTest",
    "WattsStrogatzGraphDistribution",
    "WaveletBestBasis",
    "WaveletFilterCoefficients",
    "WaveletImagePlot",
    "WaveletListPlot",
    "WaveletMapIndexed",
    "WaveletMatrixPlot",
    "WaveletPhi",
    "WaveletPsi",
    "WaveletScale",
    "WaveletScalogram",
    "WaveletThreshold",
    "WavePDEComponent",
    "WeaklyConnectedComponents",
    "WeaklyConnectedGraphComponents",
    "WeaklyConnectedGraphQ",
    "WeakStationarity",
    "WeatherData",
    "WeatherForecastData",
    "WebAudioSearch",
    "WebColumn",
    "WebElementObject",
    "WeberE",
    "WebExecute",
    "WebImage",
    "WebImageSearch",
    "WebItem",
    "WebPageMetaInformation",
    "WebRow",
    "WebSearch",
    "WebSessionObject",
    "WebSessions",
    "WebWindowObject",
    "Wedge",
    "Wednesday",
    "WeibullDistribution",
    "WeierstrassE1",
    "WeierstrassE2",
    "WeierstrassE3",
    "WeierstrassEta1",
    "WeierstrassEta2",
    "WeierstrassEta3",
    "WeierstrassHalfPeriods",
    "WeierstrassHalfPeriodW1",
    "WeierstrassHalfPeriodW2",
    "WeierstrassHalfPeriodW3",
    "WeierstrassInvariantG2",
    "WeierstrassInvariantG3",
    "WeierstrassInvariants",
    "WeierstrassP",
    "WeierstrassPPrime",
    "WeierstrassSigma",
    "WeierstrassZeta",
    "WeightedAdjacencyGraph",
    "WeightedAdjacencyMatrix",
    "WeightedData",
    "WeightedGraphQ",
    "Weights",
    "WelchWindow",
    "WheelGraph",
    "WhenEvent",
    "Which",
    "While",
    "White",
    "WhiteNoiseProcess",
    "WhitePoint",
    "Whitespace",
    "WhitespaceCharacter",
    "WhittakerM",
    "WhittakerW",
    "WholeCellGroupOpener",
    "WienerFilter",
    "WienerProcess",
    "WignerD",
    "WignerSemicircleDistribution",
    "WikidataData",
    "WikidataSearch",
    "WikipediaData",
    "WikipediaSearch",
    "WilksW",
    "WilksWTest",
    "WindDirectionData",
    "WindingCount",
    "WindingPolygon",
    "WindowClickSelect",
    "WindowElements",
    "WindowFloating",
    "WindowFrame",
    "WindowFrameElements",
    "WindowMargins",
    "WindowMovable",
    "WindowOpacity",
    "WindowPersistentStyles",
    "WindowSelected",
    "WindowSize",
    "WindowStatusArea",
    "WindowTitle",
    "WindowToolbars",
    "WindowWidth",
    "WindSpeedData",
    "WindVectorData",
    "WinsorizedMean",
    "WinsorizedVariance",
    "WishartMatrixDistribution",
    "With",
    "WithCleanup",
    "WithLock",
    "WolframAlpha",
    "WolframAlphaDate",
    "WolframAlphaQuantity",
    "WolframAlphaResult",
    "WolframCloudSettings",
    "WolframLanguageData",
    "Word",
    "WordBoundary",
    "WordCharacter",
    "WordCloud",
    "WordCount",
    "WordCounts",
    "WordData",
    "WordDefinition",
    "WordFrequency",
    "WordFrequencyData",
    "WordList",
    "WordOrientation",
    "WordSearch",
    "WordSelectionFunction",
    "WordSeparators",
    "WordSpacings",
    "WordStem",
    "WordTranslation",
    "WorkingPrecision",
    "WrapAround",
    "Write",
    "WriteLine",
    "WriteString",
    "Wronskian",
    "XMLElement",
    "XMLObject",
    "XMLTemplate",
    "Xnor",
    "Xor",
    "XYZColor",
    "Yellow",
    "Yesterday",
    "YuleDissimilarity",
    "ZernikeR",
    "ZeroSymmetric",
    "ZeroTest",
    "ZeroWidthTimes",
    "Zeta",
    "ZetaZero",
    "ZIPCodeData",
    "ZipfDistribution",
    "ZoomCenter",
    "ZoomFactor",
    "ZTest",
    "ZTransform",
    "$Aborted",
    "$ActivationGroupID",
    "$ActivationKey",
    "$ActivationUserRegistered",
    "$AddOnsDirectory",
    "$AllowDataUpdates",
    "$AllowExternalChannelFunctions",
    "$AllowInternet",
    "$AssertFunction",
    "$Assumptions",
    "$AsynchronousTask",
    "$AudioDecoders",
    "$AudioEncoders",
    "$AudioInputDevices",
    "$AudioOutputDevices",
    "$BaseDirectory",
    "$BasePacletsDirectory",
    "$BatchInput",
    "$BatchOutput",
    "$BlockchainBase",
    "$BoxForms",
    "$ByteOrdering",
    "$CacheBaseDirectory",
    "$Canceled",
    "$ChannelBase",
    "$CharacterEncoding",
    "$CharacterEncodings",
    "$CloudAccountName",
    "$CloudBase",
    "$CloudConnected",
    "$CloudConnection",
    "$CloudCreditsAvailable",
    "$CloudEvaluation",
    "$CloudExpressionBase",
    "$CloudObjectNameFormat",
    "$CloudObjectURLType",
    "$CloudRootDirectory",
    "$CloudSymbolBase",
    "$CloudUserID",
    "$CloudUserUUID",
    "$CloudVersion",
    "$CloudVersionNumber",
    "$CloudWolframEngineVersionNumber",
    "$CommandLine",
    "$CompilationTarget",
    "$CompilerEnvironment",
    "$ConditionHold",
    "$ConfiguredKernels",
    "$Context",
    "$ContextAliases",
    "$ContextPath",
    "$ControlActiveSetting",
    "$Cookies",
    "$CookieStore",
    "$CreationDate",
    "$CryptographicEllipticCurveNames",
    "$CurrentLink",
    "$CurrentTask",
    "$CurrentWebSession",
    "$DataStructures",
    "$DateStringFormat",
    "$DefaultAudioInputDevice",
    "$DefaultAudioOutputDevice",
    "$DefaultFont",
    "$DefaultFrontEnd",
    "$DefaultImagingDevice",
    "$DefaultKernels",
    "$DefaultLocalBase",
    "$DefaultLocalKernel",
    "$DefaultMailbox",
    "$DefaultNetworkInterface",
    "$DefaultPath",
    "$DefaultProxyRules",
    "$DefaultRemoteBatchSubmissionEnvironment",
    "$DefaultRemoteKernel",
    "$DefaultSystemCredentialStore",
    "$Display",
    "$DisplayFunction",
    "$DistributedContexts",
    "$DynamicEvaluation",
    "$Echo",
    "$EmbedCodeEnvironments",
    "$EmbeddableServices",
    "$EntityStores",
    "$Epilog",
    "$EvaluationCloudBase",
    "$EvaluationCloudObject",
    "$EvaluationEnvironment",
    "$ExportFormats",
    "$ExternalIdentifierTypes",
    "$ExternalStorageBase",
    "$Failed",
    "$FinancialDataSource",
    "$FontFamilies",
    "$FormatType",
    "$FrontEnd",
    "$FrontEndSession",
    "$GeneratedAssetLocation",
    "$GeoEntityTypes",
    "$GeoLocation",
    "$GeoLocationCity",
    "$GeoLocationCountry",
    "$GeoLocationPrecision",
    "$GeoLocationSource",
    "$HistoryLength",
    "$HomeDirectory",
    "$HTMLExportRules",
    "$HTTPCookies",
    "$HTTPRequest",
    "$IgnoreEOF",
    "$ImageFormattingWidth",
    "$ImageResolution",
    "$ImagingDevice",
    "$ImagingDevices",
    "$ImportFormats",
    "$IncomingMailSettings",
    "$InitialDirectory",
    "$Initialization",
    "$InitializationContexts",
    "$Input",
    "$InputFileName",
    "$InputStreamMethods",
    "$Inspector",
    "$InstallationDate",
    "$InstallationDirectory",
    "$InterfaceEnvironment",
    "$InterpreterTypes",
    "$IterationLimit",
    "$KernelCount",
    "$KernelID",
    "$Language",
    "$LaunchDirectory",
    "$LibraryPath",
    "$LicenseExpirationDate",
    "$LicenseID",
    "$LicenseProcesses",
    "$LicenseServer",
    "$LicenseSubprocesses",
    "$LicenseType",
    "$Line",
    "$Linked",
    "$LinkSupported",
    "$LoadedFiles",
    "$LocalBase",
    "$LocalSymbolBase",
    "$MachineAddresses",
    "$MachineDomain",
    "$MachineDomains",
    "$MachineEpsilon",
    "$MachineID",
    "$MachineName",
    "$MachinePrecision",
    "$MachineType",
    "$MaxDisplayedChildren",
    "$MaxExtraPrecision",
    "$MaxLicenseProcesses",
    "$MaxLicenseSubprocesses",
    "$MaxMachineNumber",
    "$MaxNumber",
    "$MaxPiecewiseCases",
    "$MaxPrecision",
    "$MaxRootDegree",
    "$MessageGroups",
    "$MessageList",
    "$MessagePrePrint",
    "$Messages",
    "$MinMachineNumber",
    "$MinNumber",
    "$MinorReleaseNumber",
    "$MinPrecision",
    "$MobilePhone",
    "$ModuleNumber",
    "$NetworkConnected",
    "$NetworkInterfaces",
    "$NetworkLicense",
    "$NewMessage",
    "$NewSymbol",
    "$NotebookInlineStorageLimit",
    "$Notebooks",
    "$NoValue",
    "$NumberMarks",
    "$Off",
    "$OperatingSystem",
    "$Output",
    "$OutputForms",
    "$OutputSizeLimit",
    "$OutputStreamMethods",
    "$Packages",
    "$ParentLink",
    "$ParentProcessID",
    "$PasswordFile",
    "$PatchLevelID",
    "$Path",
    "$PathnameSeparator",
    "$PerformanceGoal",
    "$Permissions",
    "$PermissionsGroupBase",
    "$PersistenceBase",
    "$PersistencePath",
    "$PipeSupported",
    "$PlotTheme",
    "$Post",
    "$Pre",
    "$PreferencesDirectory",
    "$PreInitialization",
    "$PrePrint",
    "$PreRead",
    "$PrintForms",
    "$PrintLiteral",
    "$Printout3DPreviewer",
    "$ProcessID",
    "$ProcessorCount",
    "$ProcessorType",
    "$ProductInformation",
    "$ProgramName",
    "$ProgressReporting",
    "$PublisherID",
    "$RandomGeneratorState",
    "$RandomState",
    "$RecursionLimit",
    "$RegisteredDeviceClasses",
    "$RegisteredUserName",
    "$ReleaseNumber",
    "$RequesterAddress",
    "$RequesterCloudUserID",
    "$RequesterCloudUserUUID",
    "$RequesterWolframID",
    "$RequesterWolframUUID",
    "$ResourceSystemBase",
    "$ResourceSystemPath",
    "$RootDirectory",
    "$ScheduledTask",
    "$ScriptCommandLine",
    "$ScriptInputString",
    "$SecuredAuthenticationKeyTokens",
    "$ServiceCreditsAvailable",
    "$Services",
    "$SessionID",
    "$SetParentLink",
    "$SharedFunctions",
    "$SharedVariables",
    "$SoundDisplay",
    "$SoundDisplayFunction",
    "$SourceLink",
    "$SSHAuthentication",
    "$SubtitleDecoders",
    "$SubtitleEncoders",
    "$SummaryBoxDataSizeLimit",
    "$SuppressInputFormHeads",
    "$SynchronousEvaluation",
    "$SyntaxHandler",
    "$System",
    "$SystemCharacterEncoding",
    "$SystemCredentialStore",
    "$SystemID",
    "$SystemMemory",
    "$SystemShell",
    "$SystemTimeZone",
    "$SystemWordLength",
    "$TargetSystems",
    "$TemplatePath",
    "$TemporaryDirectory",
    "$TemporaryPrefix",
    "$TestFileName",
    "$TextStyle",
    "$TimedOut",
    "$TimeUnit",
    "$TimeZone",
    "$TimeZoneEntity",
    "$TopDirectory",
    "$TraceOff",
    "$TraceOn",
    "$TracePattern",
    "$TracePostAction",
    "$TracePreAction",
    "$UnitSystem",
    "$Urgent",
    "$UserAddOnsDirectory",
    "$UserAgentLanguages",
    "$UserAgentMachine",
    "$UserAgentName",
    "$UserAgentOperatingSystem",
    "$UserAgentString",
    "$UserAgentVersion",
    "$UserBaseDirectory",
    "$UserBasePacletsDirectory",
    "$UserDocumentsDirectory",
    "$Username",
    "$UserName",
    "$UserURLBase",
    "$Version",
    "$VersionNumber",
    "$VideoDecoders",
    "$VideoEncoders",
    "$VoiceStyles",
    "$WolframDocumentsDirectory",
    "$WolframID",
    "$WolframUUID"
  ];
  module.exports = mathematica;
});

// node_modules/highlight.js/lib/languages/matlab.js
var require_matlab = __commonJS((exports, module) => {
  var matlab = function(hljs) {
    const TRANSPOSE_RE = "(\'|\\.\')+";
    const TRANSPOSE = {
      relevance: 0,
      contains: [{ begin: TRANSPOSE_RE }]
    };
    return {
      name: "Matlab",
      keywords: {
        keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
        built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
      },
      illegal: '(//|"|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              variants: [
                {
                  begin: "\\(",
                  end: "\\)"
                },
                {
                  begin: "\\[",
                  end: "\\]"
                }
              ]
            }
          ]
        },
        {
          className: "built_in",
          begin: /true|false/,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          begin: "[a-zA-Z][a-zA-Z_0-9]*" + TRANSPOSE_RE,
          relevance: 0
        },
        {
          className: "number",
          begin: hljs.C_NUMBER_RE,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          className: "string",
          begin: "\'",
          end: "\'",
          contains: [{ begin: "\'\'" }]
        },
        {
          begin: /\]|\}|\)/,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }],
          starts: TRANSPOSE
        },
        hljs.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
        hljs.COMMENT("%", "$")
      ]
    };
  };
  module.exports = matlab;
});

// node_modules/highlight.js/lib/languages/maxima.js
var require_maxima = __commonJS((exports, module) => {
  var maxima = function(hljs) {
    const KEYWORDS2 = "if then else elseif for thru do while unless step in and or not";
    const LITERALS = "true false unknown inf minf ind und %e %i %pi %phi %gamma";
    const BUILTIN_FUNCTIONS = " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest";
    const SYMBOLS = "_ __ %|0 %%|0";
    return {
      name: "Maxima",
      keywords: {
        $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
        keyword: KEYWORDS2,
        literal: LITERALS,
        built_in: BUILTIN_FUNCTIONS,
        symbol: SYMBOLS
      },
      contains: [
        {
          className: "comment",
          begin: "/\\*",
          end: "\\*/",
          contains: ["self"]
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          relevance: 0,
          variants: [
            {
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
            },
            {
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
              relevance: 10
            },
            {
              begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
            },
            {
              begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
            }
          ]
        }
      ],
      illegal: /@/
    };
  };
  module.exports = maxima;
});

// node_modules/highlight.js/lib/languages/mel.js
var require_mel = __commonJS((exports, module) => {
  var mel = function(hljs) {
    return {
      name: "MEL",
      keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
      illegal: "</",
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  };
  module.exports = mel;
});

// node_modules/highlight.js/lib/languages/mercury.js
var require_mercury = __commonJS((exports, module) => {
  var mercury = function(hljs) {
    const KEYWORDS2 = {
      keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
      meta: "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing",
      built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
    };
    const COMMENT = hljs.COMMENT("%", "$");
    const NUMCODE = {
      className: "number",
      begin: "0'.\\|0[box][0-9a-fA-F]*"
    };
    const ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
    const STRING_FMT = {
      className: "subst",
      begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
      relevance: 0
    };
    STRING.contains = STRING.contains.slice();
    STRING.contains.push(STRING_FMT);
    const IMPLICATION = {
      className: "built_in",
      variants: [
        { begin: "<=>" },
        {
          begin: "<=",
          relevance: 0
        },
        {
          begin: "=>",
          relevance: 0
        },
        { begin: "/\\\\" },
        { begin: "\\\\/" }
      ]
    };
    const HEAD_BODY_CONJUNCTION = {
      className: "built_in",
      variants: [
        { begin: ":-\\|-->" },
        {
          begin: "=",
          relevance: 0
        }
      ]
    };
    return {
      name: "Mercury",
      aliases: [
        "m",
        "moo"
      ],
      keywords: KEYWORDS2,
      contains: [
        IMPLICATION,
        HEAD_BODY_CONJUNCTION,
        COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMCODE,
        hljs.NUMBER_MODE,
        ATOM,
        STRING,
        {
          begin: /:-/
        },
        {
          begin: /\.$/
        }
      ]
    };
  };
  module.exports = mercury;
});

// node_modules/highlight.js/lib/languages/mipsasm.js
var require_mipsasm = __commonJS((exports, module) => {
  var mipsasm = function(hljs) {
    return {
      name: "MIPS Assembly",
      case_insensitive: true,
      aliases: ["mips"],
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        meta: ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ",
        built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
          end: "\\s"
        },
        hljs.COMMENT("[;#](?!\\s*$)", "$"),
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\'",
          end: "[^\\\\]\'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              begin: "0x[0-9a-f]+"
            },
            {
              begin: "\\b-?\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              begin: "^\\s*[0-9]+:"
            },
            {
              begin: "[0-9]+[bf]"
            }
          ],
          relevance: 0
        }
      ],
      illegal: /\//
    };
  };
  module.exports = mipsasm;
});

// node_modules/highlight.js/lib/languages/mizar.js
var require_mizar = __commonJS((exports, module) => {
  var mizar = function(hljs) {
    return {
      name: "Mizar",
      keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
      contains: [hljs.COMMENT("::", "$")]
    };
  };
  module.exports = mizar;
});

// node_modules/highlight.js/lib/languages/perl.js
var require_perl = __commonJS((exports, module) => {
  var perl = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = [
      "abs",
      "accept",
      "alarm",
      "and",
      "atan2",
      "bind",
      "binmode",
      "bless",
      "break",
      "caller",
      "chdir",
      "chmod",
      "chomp",
      "chop",
      "chown",
      "chr",
      "chroot",
      "close",
      "closedir",
      "connect",
      "continue",
      "cos",
      "crypt",
      "dbmclose",
      "dbmopen",
      "defined",
      "delete",
      "die",
      "do",
      "dump",
      "each",
      "else",
      "elsif",
      "endgrent",
      "endhostent",
      "endnetent",
      "endprotoent",
      "endpwent",
      "endservent",
      "eof",
      "eval",
      "exec",
      "exists",
      "exit",
      "exp",
      "fcntl",
      "fileno",
      "flock",
      "for",
      "foreach",
      "fork",
      "format",
      "formline",
      "getc",
      "getgrent",
      "getgrgid",
      "getgrnam",
      "gethostbyaddr",
      "gethostbyname",
      "gethostent",
      "getlogin",
      "getnetbyaddr",
      "getnetbyname",
      "getnetent",
      "getpeername",
      "getpgrp",
      "getpriority",
      "getprotobyname",
      "getprotobynumber",
      "getprotoent",
      "getpwent",
      "getpwnam",
      "getpwuid",
      "getservbyname",
      "getservbyport",
      "getservent",
      "getsockname",
      "getsockopt",
      "given",
      "glob",
      "gmtime",
      "goto",
      "grep",
      "gt",
      "hex",
      "if",
      "index",
      "int",
      "ioctl",
      "join",
      "keys",
      "kill",
      "last",
      "lc",
      "lcfirst",
      "length",
      "link",
      "listen",
      "local",
      "localtime",
      "log",
      "lstat",
      "lt",
      "ma",
      "map",
      "mkdir",
      "msgctl",
      "msgget",
      "msgrcv",
      "msgsnd",
      "my",
      "ne",
      "next",
      "no",
      "not",
      "oct",
      "open",
      "opendir",
      "or",
      "ord",
      "our",
      "pack",
      "package",
      "pipe",
      "pop",
      "pos",
      "print",
      "printf",
      "prototype",
      "push",
      "q|0",
      "qq",
      "quotemeta",
      "qw",
      "qx",
      "rand",
      "read",
      "readdir",
      "readline",
      "readlink",
      "readpipe",
      "recv",
      "redo",
      "ref",
      "rename",
      "require",
      "reset",
      "return",
      "reverse",
      "rewinddir",
      "rindex",
      "rmdir",
      "say",
      "scalar",
      "seek",
      "seekdir",
      "select",
      "semctl",
      "semget",
      "semop",
      "send",
      "setgrent",
      "sethostent",
      "setnetent",
      "setpgrp",
      "setpriority",
      "setprotoent",
      "setpwent",
      "setservent",
      "setsockopt",
      "shift",
      "shmctl",
      "shmget",
      "shmread",
      "shmwrite",
      "shutdown",
      "sin",
      "sleep",
      "socket",
      "socketpair",
      "sort",
      "splice",
      "split",
      "sprintf",
      "sqrt",
      "srand",
      "stat",
      "state",
      "study",
      "sub",
      "substr",
      "symlink",
      "syscall",
      "sysopen",
      "sysread",
      "sysseek",
      "system",
      "syswrite",
      "tell",
      "telldir",
      "tie",
      "tied",
      "time",
      "times",
      "tr",
      "truncate",
      "uc",
      "ucfirst",
      "umask",
      "undef",
      "unless",
      "unlink",
      "unpack",
      "unshift",
      "untie",
      "until",
      "use",
      "utime",
      "values",
      "vec",
      "wait",
      "waitpid",
      "wantarray",
      "warn",
      "when",
      "while",
      "write",
      "x|0",
      "xor",
      "y|0"
    ];
    const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/;
    const PERL_KEYWORDS = {
      $pattern: /[\w.]+/,
      keyword: KEYWORDS2.join(" ")
    };
    const SUBST = {
      className: "subst",
      begin: "[$@]\\{",
      end: "\\}",
      keywords: PERL_KEYWORDS
    };
    const METHOD = {
      begin: /->\{/,
      end: /\}/
    };
    const VAR = { variants: [
      { begin: /\$\d/ },
      { begin: regex6.concat(/[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/, `(?![A-Za-z])(?![@\$%])`) },
      {
        begin: /[$%@][^\s\w{]/,
        relevance: 0
      }
    ] };
    const STRING_CONTAINS = [
      hljs.BACKSLASH_ESCAPE,
      SUBST,
      VAR
    ];
    const REGEX_DELIMS = [
      /!/,
      /\//,
      /\|/,
      /\?/,
      /'/,
      /"/,
      /#/
    ];
    const PAIRED_DOUBLE_RE = (prefix, open, close = "\\1") => {
      const middle = close === "\\1" ? close : regex6.concat(close, open);
      return regex6.concat(regex6.concat("(?:", prefix, ")"), open, /(?:\\.|[^\\\/])*?/, middle, /(?:\\.|[^\\\/])*?/, close, REGEX_MODIFIERS);
    };
    const PAIRED_RE = (prefix, open, close) => {
      return regex6.concat(regex6.concat("(?:", prefix, ")"), open, /(?:\\.|[^\\\/])*?/, close, REGEX_MODIFIERS);
    };
    const PERL_DEFAULT_CONTAINS = [
      VAR,
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT(/^=\w/, /=cut/, { endsWithParent: true }),
      METHOD,
      {
        className: "string",
        contains: STRING_CONTAINS,
        variants: [
          {
            begin: "q[qwxr]?\\s*\\(",
            end: "\\)",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\[",
            end: "\\]",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\{",
            end: "\\}",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\|",
            end: "\\|",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*<",
            end: ">",
            relevance: 5
          },
          {
            begin: "qw\\s+q",
            end: "q",
            relevance: 5
          },
          {
            begin: "\'",
            end: "\'",
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '"',
            end: '"'
          },
          {
            begin: "`",
            end: "`",
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /\{\w+\}/,
            relevance: 0
          },
          {
            begin: "-?\\w+\\s*=>",
            relevance: 0
          }
        ]
      },
      {
        className: "number",
        begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
        relevance: 0
      },
      {
        begin: "(\\/\\/|" + hljs.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
        keywords: "split return print reverse grep",
        relevance: 0,
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            className: "regexp",
            variants: [
              { begin: PAIRED_DOUBLE_RE("s|tr|y", regex6.either(...REGEX_DELIMS, { capture: true })) },
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
            ],
            relevance: 2
          },
          {
            className: "regexp",
            variants: [
              {
                begin: /(m|qr)\/\//,
                relevance: 0
              },
              { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
              { begin: PAIRED_RE("m|qr", regex6.either(...REGEX_DELIMS, { capture: true }), /\1/) },
              { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
              { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
              { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
            ]
          }
        ]
      },
      {
        className: "function",
        beginKeywords: "sub",
        end: "(\\s*\\(.*?\\))?[;{]",
        excludeEnd: true,
        relevance: 5,
        contains: [hljs.TITLE_MODE]
      },
      {
        begin: "-\\w\\b",
        relevance: 0
      },
      {
        begin: "^__DATA__$",
        end: "^__END__$",
        subLanguage: "mojolicious",
        contains: [
          {
            begin: "^@@.*",
            end: "$",
            className: "comment"
          }
        ]
      }
    ];
    SUBST.contains = PERL_DEFAULT_CONTAINS;
    METHOD.contains = PERL_DEFAULT_CONTAINS;
    return {
      name: "Perl",
      aliases: [
        "pl",
        "pm"
      ],
      keywords: PERL_KEYWORDS,
      contains: PERL_DEFAULT_CONTAINS
    };
  };
  module.exports = perl;
});

// node_modules/highlight.js/lib/languages/mojolicious.js
var require_mojolicious = __commonJS((exports, module) => {
  var mojolicious = function(hljs) {
    return {
      name: "Mojolicious",
      subLanguage: "xml",
      contains: [
        {
          className: "meta",
          begin: "^__(END|DATA)__$"
        },
        {
          begin: "^\\s*%{1,2}={0,2}",
          end: "$",
          subLanguage: "perl"
        },
        {
          begin: "<%{1,2}={0,2}",
          end: "={0,1}%>",
          subLanguage: "perl",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  };
  module.exports = mojolicious;
});

// node_modules/highlight.js/lib/languages/monkey.js
var require_monkey = __commonJS((exports, module) => {
  var monkey = function(hljs) {
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: "[$][a-fA-F0-9]+" },
        hljs.NUMBER_MODE
      ]
    };
    const FUNC_DEFINITION = {
      variants: [
        { match: [
          /(function|method)/,
          /\s+/,
          hljs.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(class|interface|extends|implements)/,
          /\s+/,
          hljs.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    const BUILT_INS = [
      "DebugLog",
      "DebugStop",
      "Error",
      "Print",
      "ACos",
      "ACosr",
      "ASin",
      "ASinr",
      "ATan",
      "ATan2",
      "ATan2r",
      "ATanr",
      "Abs",
      "Abs",
      "Ceil",
      "Clamp",
      "Clamp",
      "Cos",
      "Cosr",
      "Exp",
      "Floor",
      "Log",
      "Max",
      "Max",
      "Min",
      "Min",
      "Pow",
      "Sgn",
      "Sgn",
      "Sin",
      "Sinr",
      "Sqrt",
      "Tan",
      "Tanr",
      "Seed",
      "PI",
      "HALFPI",
      "TWOPI"
    ];
    const LITERALS = [
      "true",
      "false",
      "null"
    ];
    const KEYWORDS2 = [
      "public",
      "private",
      "property",
      "continue",
      "exit",
      "extern",
      "new",
      "try",
      "catch",
      "eachin",
      "not",
      "abstract",
      "final",
      "select",
      "case",
      "default",
      "const",
      "local",
      "global",
      "field",
      "end",
      "if",
      "then",
      "else",
      "elseif",
      "endif",
      "while",
      "wend",
      "repeat",
      "until",
      "forever",
      "for",
      "to",
      "step",
      "next",
      "return",
      "module",
      "inline",
      "throw",
      "import",
      "and",
      "or",
      "shl",
      "shr",
      "mod"
    ];
    return {
      name: "Monkey",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS,
        literal: LITERALS
      },
      illegal: /\/\*/,
      contains: [
        hljs.COMMENT("#rem", "#end"),
        hljs.COMMENT("'", "$", { relevance: 0 }),
        FUNC_DEFINITION,
        CLASS_DEFINITION,
        {
          className: "variable.language",
          begin: /\b(self|super)\b/
        },
        {
          className: "meta",
          begin: /\s*#/,
          end: "$",
          keywords: { keyword: "if else elseif endif end then" }
        },
        {
          match: [
            /^\s*/,
            /strict\b/
          ],
          scope: { 2: "meta" }
        },
        {
          beginKeywords: "alias",
          end: "=",
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        hljs.QUOTE_STRING_MODE,
        NUMBER
      ]
    };
  };
  module.exports = monkey;
});

// node_modules/highlight.js/lib/languages/moonscript.js
var require_moonscript = __commonJS((exports, module) => {
  var moonscript = function(hljs) {
    const KEYWORDS2 = {
      keyword: "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using",
      literal: "true false nil",
      built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
    };
    const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const EXPRESSIONS = [
      hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      {
        className: "string",
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: "@__" + hljs.IDENT_RE
      },
      {
        begin: "@" + hljs.IDENT_RE
      },
      {
        begin: hljs.IDENT_RE + "\\\\" + hljs.IDENT_RE
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
    const PARAMS = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    return {
      name: "MoonScript",
      aliases: ["moon"],
      keywords: KEYWORDS2,
      illegal: /\/\*/,
      contains: EXPRESSIONS.concat([
        hljs.COMMENT("--", "$"),
        {
          className: "function",
          begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            TITLE,
            PARAMS
          ]
        },
        {
          begin: /[\(,:=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: POSSIBLE_PARAMS_RE,
              end: "[-=]>",
              returnBegin: true,
              contains: [PARAMS]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class",
          end: "$",
          illegal: /[:="\[\]]/,
          contains: [
            {
              beginKeywords: "extends",
              endsWithParent: true,
              illegal: /[:="\[\]]/,
              contains: [TITLE]
            },
            TITLE
          ]
        },
        {
          className: "name",
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  };
  module.exports = moonscript;
});

// node_modules/highlight.js/lib/languages/n1ql.js
var require_n1ql = __commonJS((exports, module) => {
  var n1ql = function(hljs) {
    const KEYWORDS2 = [
      "all",
      "alter",
      "analyze",
      "and",
      "any",
      "array",
      "as",
      "asc",
      "begin",
      "between",
      "binary",
      "boolean",
      "break",
      "bucket",
      "build",
      "by",
      "call",
      "case",
      "cast",
      "cluster",
      "collate",
      "collection",
      "commit",
      "connect",
      "continue",
      "correlate",
      "cover",
      "create",
      "database",
      "dataset",
      "datastore",
      "declare",
      "decrement",
      "delete",
      "derived",
      "desc",
      "describe",
      "distinct",
      "do",
      "drop",
      "each",
      "element",
      "else",
      "end",
      "every",
      "except",
      "exclude",
      "execute",
      "exists",
      "explain",
      "fetch",
      "first",
      "flatten",
      "for",
      "force",
      "from",
      "function",
      "grant",
      "group",
      "gsi",
      "having",
      "if",
      "ignore",
      "ilike",
      "in",
      "include",
      "increment",
      "index",
      "infer",
      "inline",
      "inner",
      "insert",
      "intersect",
      "into",
      "is",
      "join",
      "key",
      "keys",
      "keyspace",
      "known",
      "last",
      "left",
      "let",
      "letting",
      "like",
      "limit",
      "lsm",
      "map",
      "mapping",
      "matched",
      "materialized",
      "merge",
      "minus",
      "namespace",
      "nest",
      "not",
      "number",
      "object",
      "offset",
      "on",
      "option",
      "or",
      "order",
      "outer",
      "over",
      "parse",
      "partition",
      "password",
      "path",
      "pool",
      "prepare",
      "primary",
      "private",
      "privilege",
      "procedure",
      "public",
      "raw",
      "realm",
      "reduce",
      "rename",
      "return",
      "returning",
      "revoke",
      "right",
      "role",
      "rollback",
      "satisfies",
      "schema",
      "select",
      "self",
      "semi",
      "set",
      "show",
      "some",
      "start",
      "statistics",
      "string",
      "system",
      "then",
      "to",
      "transaction",
      "trigger",
      "truncate",
      "under",
      "union",
      "unique",
      "unknown",
      "unnest",
      "unset",
      "update",
      "upsert",
      "use",
      "user",
      "using",
      "validate",
      "value",
      "valued",
      "values",
      "via",
      "view",
      "when",
      "where",
      "while",
      "with",
      "within",
      "work",
      "xor"
    ];
    const LITERALS = [
      "true",
      "false",
      "null",
      "missing|5"
    ];
    const BUILT_INS = [
      "array_agg",
      "array_append",
      "array_concat",
      "array_contains",
      "array_count",
      "array_distinct",
      "array_ifnull",
      "array_length",
      "array_max",
      "array_min",
      "array_position",
      "array_prepend",
      "array_put",
      "array_range",
      "array_remove",
      "array_repeat",
      "array_replace",
      "array_reverse",
      "array_sort",
      "array_sum",
      "avg",
      "count",
      "max",
      "min",
      "sum",
      "greatest",
      "least",
      "ifmissing",
      "ifmissingornull",
      "ifnull",
      "missingif",
      "nullif",
      "ifinf",
      "ifnan",
      "ifnanorinf",
      "naninf",
      "neginfif",
      "posinfif",
      "clock_millis",
      "clock_str",
      "date_add_millis",
      "date_add_str",
      "date_diff_millis",
      "date_diff_str",
      "date_part_millis",
      "date_part_str",
      "date_trunc_millis",
      "date_trunc_str",
      "duration_to_str",
      "millis",
      "str_to_millis",
      "millis_to_str",
      "millis_to_utc",
      "millis_to_zone_name",
      "now_millis",
      "now_str",
      "str_to_duration",
      "str_to_utc",
      "str_to_zone_name",
      "decode_json",
      "encode_json",
      "encoded_size",
      "poly_length",
      "base64",
      "base64_encode",
      "base64_decode",
      "meta",
      "uuid",
      "abs",
      "acos",
      "asin",
      "atan",
      "atan2",
      "ceil",
      "cos",
      "degrees",
      "e",
      "exp",
      "ln",
      "log",
      "floor",
      "pi",
      "power",
      "radians",
      "random",
      "round",
      "sign",
      "sin",
      "sqrt",
      "tan",
      "trunc",
      "object_length",
      "object_names",
      "object_pairs",
      "object_inner_pairs",
      "object_values",
      "object_inner_values",
      "object_add",
      "object_put",
      "object_remove",
      "object_unwrap",
      "regexp_contains",
      "regexp_like",
      "regexp_position",
      "regexp_replace",
      "contains",
      "initcap",
      "length",
      "lower",
      "ltrim",
      "position",
      "repeat",
      "replace",
      "rtrim",
      "split",
      "substr",
      "title",
      "trim",
      "upper",
      "isarray",
      "isatom",
      "isboolean",
      "isnumber",
      "isobject",
      "isstring",
      "type",
      "toarray",
      "toatom",
      "toboolean",
      "tonumber",
      "toobject",
      "tostring"
    ];
    return {
      name: "N1QL",
      case_insensitive: true,
      contains: [
        {
          beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
          end: /;/,
          keywords: {
            keyword: KEYWORDS2,
            literal: LITERALS,
            built_in: BUILT_INS
          },
          contains: [
            {
              className: "string",
              begin: "\'",
              end: "\'",
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              className: "string",
              begin: '"',
              end: '"',
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              className: "symbol",
              begin: "`",
              end: "`",
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            hljs.C_NUMBER_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  };
  module.exports = n1ql;
});

// node_modules/highlight.js/lib/languages/nestedtext.js
var require_nestedtext = __commonJS((exports, module) => {
  var nestedtext = function(hljs) {
    const NESTED = {
      match: [
        /^\s*(?=\S)/,
        /[^:]+/,
        /:\s*/,
        /$/
      ],
      className: {
        2: "attribute",
        3: "punctuation"
      }
    };
    const DICTIONARY_ITEM = {
      match: [
        /^\s*(?=\S)/,
        /[^:]*[^: ]/,
        /[ ]*:/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "attribute",
        3: "punctuation",
        5: "string"
      }
    };
    const STRING = {
      match: [
        /^\s*/,
        />/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "punctuation",
        4: "string"
      }
    };
    const LIST_ITEM = {
      variants: [
        { match: [
          /^\s*/,
          /-/,
          /[ ]/,
          /.*$/
        ] },
        { match: [
          /^\s*/,
          /-$/
        ] }
      ],
      className: {
        2: "bullet",
        4: "string"
      }
    };
    return {
      name: "Nested Text",
      aliases: ["nt"],
      contains: [
        hljs.inherit(hljs.HASH_COMMENT_MODE, {
          begin: /^\s*(?=#)/,
          excludeBegin: true
        }),
        LIST_ITEM,
        STRING,
        NESTED,
        DICTIONARY_ITEM
      ]
    };
  };
  module.exports = nestedtext;
});

// node_modules/highlight.js/lib/languages/nginx.js
var require_nginx = __commonJS((exports, module) => {
  var nginx = function(hljs) {
    const regex6 = hljs.regex;
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$\d+/ },
        { begin: /\$\{\w+\}/ },
        { begin: regex6.concat(/[$@]/, hljs.UNDERSCORE_IDENT_RE) }
      ]
    };
    const LITERALS = [
      "on",
      "off",
      "yes",
      "no",
      "true",
      "false",
      "none",
      "blocked",
      "debug",
      "info",
      "notice",
      "warn",
      "error",
      "crit",
      "select",
      "break",
      "last",
      "permanent",
      "redirect",
      "kqueue",
      "rtsig",
      "epoll",
      "poll",
      "/dev/poll"
    ];
    const DEFAULT = {
      endsWithParent: true,
      keywords: {
        $pattern: /[a-z_]{2,}|\/dev\/poll/,
        literal: LITERALS
      },
      relevance: 0,
      illegal: "=>",
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: "string",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VAR
          ],
          variants: [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            }
          ]
        },
        {
          begin: "([a-z]+):/",
          end: "\\s",
          endsWithParent: true,
          excludeEnd: true,
          contains: [VAR]
        },
        {
          className: "regexp",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VAR
          ],
          variants: [
            {
              begin: "\\s\\^",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            {
              begin: "~\\*?\\s+",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            { begin: "\\*(\\.[a-z\\-]+)+" },
            { begin: "([a-z\\-]+\\.)+\\*" }
          ]
        },
        {
          className: "number",
          begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
        },
        {
          className: "number",
          begin: "\\b\\d+[kKmMgGdshdwy]?\\b",
          relevance: 0
        },
        VAR
      ]
    };
    return {
      name: "Nginx config",
      aliases: ["nginxconf"],
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          beginKeywords: "upstream location",
          end: /;|\{/,
          contains: DEFAULT.contains,
          keywords: { section: "upstream location" }
        },
        {
          className: "section",
          begin: regex6.concat(hljs.UNDERSCORE_IDENT_RE + regex6.lookahead(/\s+\{/)),
          relevance: 0
        },
        {
          begin: regex6.lookahead(hljs.UNDERSCORE_IDENT_RE + "\\s"),
          end: ";|\\{",
          contains: [
            {
              className: "attribute",
              begin: hljs.UNDERSCORE_IDENT_RE,
              starts: DEFAULT
            }
          ],
          relevance: 0
        }
      ],
      illegal: "[^\\s\\}\\{]"
    };
  };
  module.exports = nginx;
});

// node_modules/highlight.js/lib/languages/nim.js
var require_nim = __commonJS((exports, module) => {
  var nim = function(hljs) {
    const TYPES = [
      "int",
      "int8",
      "int16",
      "int32",
      "int64",
      "uint",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "float",
      "float32",
      "float64",
      "bool",
      "char",
      "string",
      "cstring",
      "pointer",
      "expr",
      "stmt",
      "void",
      "auto",
      "any",
      "range",
      "array",
      "openarray",
      "varargs",
      "seq",
      "set",
      "clong",
      "culong",
      "cchar",
      "cschar",
      "cshort",
      "cint",
      "csize",
      "clonglong",
      "cfloat",
      "cdouble",
      "clongdouble",
      "cuchar",
      "cushort",
      "cuint",
      "culonglong",
      "cstringarray",
      "semistatic"
    ];
    const KEYWORDS2 = [
      "addr",
      "and",
      "as",
      "asm",
      "bind",
      "block",
      "break",
      "case",
      "cast",
      "const",
      "continue",
      "converter",
      "discard",
      "distinct",
      "div",
      "do",
      "elif",
      "else",
      "end",
      "enum",
      "except",
      "export",
      "finally",
      "for",
      "from",
      "func",
      "generic",
      "guarded",
      "if",
      "import",
      "in",
      "include",
      "interface",
      "is",
      "isnot",
      "iterator",
      "let",
      "macro",
      "method",
      "mixin",
      "mod",
      "nil",
      "not",
      "notin",
      "object",
      "of",
      "or",
      "out",
      "proc",
      "ptr",
      "raise",
      "ref",
      "return",
      "shared",
      "shl",
      "shr",
      "static",
      "template",
      "try",
      "tuple",
      "type",
      "using",
      "var",
      "when",
      "while",
      "with",
      "without",
      "xor",
      "yield"
    ];
    const BUILT_INS = [
      "stdin",
      "stdout",
      "stderr",
      "result"
    ];
    const LITERALS = [
      "true",
      "false"
    ];
    return {
      name: "Nim",
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS,
        type: TYPES,
        built_in: BUILT_INS
      },
      contains: [
        {
          className: "meta",
          begin: /\{\./,
          end: /\.\}/,
          relevance: 10
        },
        {
          className: "string",
          begin: /[a-zA-Z]\w*"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        },
        {
          className: "string",
          begin: /([a-zA-Z]\w*)?"""/,
          end: /"""/
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "type",
          begin: /\b[A-Z]\w+\b/,
          relevance: 0
        },
        {
          className: "number",
          relevance: 0,
          variants: [
            { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
            { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
          ]
        },
        hljs.HASH_COMMENT_MODE
      ]
    };
  };
  module.exports = nim;
});

// node_modules/highlight.js/lib/languages/nix.js
var require_nix = __commonJS((exports, module) => {
  var nix = function(hljs) {
    const KEYWORDS2 = {
      keyword: [
        "rec",
        "with",
        "let",
        "in",
        "inherit",
        "assert",
        "if",
        "else",
        "then"
      ],
      literal: [
        "true",
        "false",
        "or",
        "and",
        "null"
      ],
      built_in: [
        "import",
        "abort",
        "baseNameOf",
        "dirOf",
        "isNull",
        "builtins",
        "map",
        "removeAttrs",
        "throw",
        "toString",
        "derivation"
      ]
    };
    const ANTIQUOTE = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const ESCAPED_DOLLAR = {
      className: "char.escape",
      begin: /''\$/
    };
    const ATTRS = {
      begin: /[a-zA-Z0-9-_]+(\s*=)/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: /\S+/,
          relevance: 0.2
        }
      ]
    };
    const STRING = {
      className: "string",
      contains: [ESCAPED_DOLLAR, ANTIQUOTE],
      variants: [
        {
          begin: "''",
          end: "''"
        },
        {
          begin: '"',
          end: '"'
        }
      ]
    };
    const EXPRESSIONS = [
      hljs.NUMBER_MODE,
      hljs.HASH_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      STRING,
      ATTRS
    ];
    ANTIQUOTE.contains = EXPRESSIONS;
    return {
      name: "Nix",
      aliases: ["nixos"],
      keywords: KEYWORDS2,
      contains: EXPRESSIONS
    };
  };
  module.exports = nix;
});

// node_modules/highlight.js/lib/languages/node-repl.js
var require_node_repl = __commonJS((exports, module) => {
  var nodeRepl = function(hljs) {
    return {
      name: "Node REPL",
      contains: [
        {
          className: "meta.prompt",
          starts: {
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "javascript"
            }
          },
          variants: [
            { begin: /^>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  };
  module.exports = nodeRepl;
});

// node_modules/highlight.js/lib/languages/nsis.js
var require_nsis = __commonJS((exports, module) => {
  var nsis = function(hljs) {
    const regex6 = hljs.regex;
    const LANGUAGE_CONSTANTS = [
      "ADMINTOOLS",
      "APPDATA",
      "CDBURN_AREA",
      "CMDLINE",
      "COMMONFILES32",
      "COMMONFILES64",
      "COMMONFILES",
      "COOKIES",
      "DESKTOP",
      "DOCUMENTS",
      "EXEDIR",
      "EXEFILE",
      "EXEPATH",
      "FAVORITES",
      "FONTS",
      "HISTORY",
      "HWNDPARENT",
      "INSTDIR",
      "INTERNET_CACHE",
      "LANGUAGE",
      "LOCALAPPDATA",
      "MUSIC",
      "NETHOOD",
      "OUTDIR",
      "PICTURES",
      "PLUGINSDIR",
      "PRINTHOOD",
      "PROFILE",
      "PROGRAMFILES32",
      "PROGRAMFILES64",
      "PROGRAMFILES",
      "QUICKLAUNCH",
      "RECENT",
      "RESOURCES_LOCALIZED",
      "RESOURCES",
      "SENDTO",
      "SMPROGRAMS",
      "SMSTARTUP",
      "STARTMENU",
      "SYSDIR",
      "TEMP",
      "TEMPLATES",
      "VIDEOS",
      "WINDIR"
    ];
    const PARAM_NAMES = [
      "ARCHIVE",
      "FILE_ATTRIBUTE_ARCHIVE",
      "FILE_ATTRIBUTE_NORMAL",
      "FILE_ATTRIBUTE_OFFLINE",
      "FILE_ATTRIBUTE_READONLY",
      "FILE_ATTRIBUTE_SYSTEM",
      "FILE_ATTRIBUTE_TEMPORARY",
      "HKCR",
      "HKCU",
      "HKDD",
      "HKEY_CLASSES_ROOT",
      "HKEY_CURRENT_CONFIG",
      "HKEY_CURRENT_USER",
      "HKEY_DYN_DATA",
      "HKEY_LOCAL_MACHINE",
      "HKEY_PERFORMANCE_DATA",
      "HKEY_USERS",
      "HKLM",
      "HKPD",
      "HKU",
      "IDABORT",
      "IDCANCEL",
      "IDIGNORE",
      "IDNO",
      "IDOK",
      "IDRETRY",
      "IDYES",
      "MB_ABORTRETRYIGNORE",
      "MB_DEFBUTTON1",
      "MB_DEFBUTTON2",
      "MB_DEFBUTTON3",
      "MB_DEFBUTTON4",
      "MB_ICONEXCLAMATION",
      "MB_ICONINFORMATION",
      "MB_ICONQUESTION",
      "MB_ICONSTOP",
      "MB_OK",
      "MB_OKCANCEL",
      "MB_RETRYCANCEL",
      "MB_RIGHT",
      "MB_RTLREADING",
      "MB_SETFOREGROUND",
      "MB_TOPMOST",
      "MB_USERICON",
      "MB_YESNO",
      "NORMAL",
      "OFFLINE",
      "READONLY",
      "SHCTX",
      "SHELL_CONTEXT",
      "SYSTEM|TEMPORARY"
    ];
    const COMPILER_FLAGS = [
      "addincludedir",
      "addplugindir",
      "appendfile",
      "assert",
      "cd",
      "define",
      "delfile",
      "echo",
      "else",
      "endif",
      "error",
      "execute",
      "finalize",
      "getdllversion",
      "gettlbversion",
      "if",
      "ifdef",
      "ifmacrodef",
      "ifmacrondef",
      "ifndef",
      "include",
      "insertmacro",
      "macro",
      "macroend",
      "makensis",
      "packhdr",
      "searchparse",
      "searchreplace",
      "system",
      "tempfile",
      "undef",
      "uninstfinalize",
      "verbose",
      "warning"
    ];
    const CONSTANTS = {
      className: "variable.constant",
      begin: regex6.concat(/\$/, regex6.either(...LANGUAGE_CONSTANTS))
    };
    const DEFINES = {
      className: "variable",
      begin: /\$+\{[\!\w.:-]+\}/
    };
    const VARIABLES = {
      className: "variable",
      begin: /\$+\w[\w\.]*/,
      illegal: /\(\)\{\}/
    };
    const LANGUAGES = {
      className: "variable",
      begin: /\$+\([\w^.:!-]+\)/
    };
    const PARAMETERS = {
      className: "params",
      begin: regex6.either(...PARAM_NAMES)
    };
    const COMPILER = {
      className: "keyword",
      begin: regex6.concat(/!/, regex6.either(...COMPILER_FLAGS))
    };
    const ESCAPE_CHARS = {
      className: "char.escape",
      begin: /\$(\\[nrt]|\$)/
    };
    const PLUGINS = {
      className: "title.function",
      begin: /\w+::\w+/
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "\'",
          end: "\'"
        },
        {
          begin: "`",
          end: "`"
        }
      ],
      illegal: /\n/,
      contains: [
        ESCAPE_CHARS,
        CONSTANTS,
        DEFINES,
        VARIABLES,
        LANGUAGES
      ]
    };
    const KEYWORDS2 = [
      "Abort",
      "AddBrandingImage",
      "AddSize",
      "AllowRootDirInstall",
      "AllowSkipFiles",
      "AutoCloseWindow",
      "BGFont",
      "BGGradient",
      "BrandingText",
      "BringToFront",
      "Call",
      "CallInstDLL",
      "Caption",
      "ChangeUI",
      "CheckBitmap",
      "ClearErrors",
      "CompletedText",
      "ComponentText",
      "CopyFiles",
      "CRCCheck",
      "CreateDirectory",
      "CreateFont",
      "CreateShortCut",
      "Delete",
      "DeleteINISec",
      "DeleteINIStr",
      "DeleteRegKey",
      "DeleteRegValue",
      "DetailPrint",
      "DetailsButtonText",
      "DirText",
      "DirVar",
      "DirVerify",
      "EnableWindow",
      "EnumRegKey",
      "EnumRegValue",
      "Exch",
      "Exec",
      "ExecShell",
      "ExecShellWait",
      "ExecWait",
      "ExpandEnvStrings",
      "File",
      "FileBufSize",
      "FileClose",
      "FileErrorText",
      "FileOpen",
      "FileRead",
      "FileReadByte",
      "FileReadUTF16LE",
      "FileReadWord",
      "FileWriteUTF16LE",
      "FileSeek",
      "FileWrite",
      "FileWriteByte",
      "FileWriteWord",
      "FindClose",
      "FindFirst",
      "FindNext",
      "FindWindow",
      "FlushINI",
      "GetCurInstType",
      "GetCurrentAddress",
      "GetDlgItem",
      "GetDLLVersion",
      "GetDLLVersionLocal",
      "GetErrorLevel",
      "GetFileTime",
      "GetFileTimeLocal",
      "GetFullPathName",
      "GetFunctionAddress",
      "GetInstDirError",
      "GetKnownFolderPath",
      "GetLabelAddress",
      "GetTempFileName",
      "GetWinVer",
      "Goto",
      "HideWindow",
      "Icon",
      "IfAbort",
      "IfErrors",
      "IfFileExists",
      "IfRebootFlag",
      "IfRtlLanguage",
      "IfShellVarContextAll",
      "IfSilent",
      "InitPluginsDir",
      "InstallButtonText",
      "InstallColors",
      "InstallDir",
      "InstallDirRegKey",
      "InstProgressFlags",
      "InstType",
      "InstTypeGetText",
      "InstTypeSetText",
      "Int64Cmp",
      "Int64CmpU",
      "Int64Fmt",
      "IntCmp",
      "IntCmpU",
      "IntFmt",
      "IntOp",
      "IntPtrCmp",
      "IntPtrCmpU",
      "IntPtrOp",
      "IsWindow",
      "LangString",
      "LicenseBkColor",
      "LicenseData",
      "LicenseForceSelection",
      "LicenseLangString",
      "LicenseText",
      "LoadAndSetImage",
      "LoadLanguageFile",
      "LockWindow",
      "LogSet",
      "LogText",
      "ManifestDPIAware",
      "ManifestLongPathAware",
      "ManifestMaxVersionTested",
      "ManifestSupportedOS",
      "MessageBox",
      "MiscButtonText",
      "Name|0",
      "Nop",
      "OutFile",
      "Page",
      "PageCallbacks",
      "PEAddResource",
      "PEDllCharacteristics",
      "PERemoveResource",
      "PESubsysVer",
      "Pop",
      "Push",
      "Quit",
      "ReadEnvStr",
      "ReadINIStr",
      "ReadRegDWORD",
      "ReadRegStr",
      "Reboot",
      "RegDLL",
      "Rename",
      "RequestExecutionLevel",
      "ReserveFile",
      "Return",
      "RMDir",
      "SearchPath",
      "SectionGetFlags",
      "SectionGetInstTypes",
      "SectionGetSize",
      "SectionGetText",
      "SectionIn",
      "SectionSetFlags",
      "SectionSetInstTypes",
      "SectionSetSize",
      "SectionSetText",
      "SendMessage",
      "SetAutoClose",
      "SetBrandingImage",
      "SetCompress",
      "SetCompressor",
      "SetCompressorDictSize",
      "SetCtlColors",
      "SetCurInstType",
      "SetDatablockOptimize",
      "SetDateSave",
      "SetDetailsPrint",
      "SetDetailsView",
      "SetErrorLevel",
      "SetErrors",
      "SetFileAttributes",
      "SetFont",
      "SetOutPath",
      "SetOverwrite",
      "SetRebootFlag",
      "SetRegView",
      "SetShellVarContext",
      "SetSilent",
      "ShowInstDetails",
      "ShowUninstDetails",
      "ShowWindow",
      "SilentInstall",
      "SilentUnInstall",
      "Sleep",
      "SpaceTexts",
      "StrCmp",
      "StrCmpS",
      "StrCpy",
      "StrLen",
      "SubCaption",
      "Unicode",
      "UninstallButtonText",
      "UninstallCaption",
      "UninstallIcon",
      "UninstallSubCaption",
      "UninstallText",
      "UninstPage",
      "UnRegDLL",
      "Var",
      "VIAddVersionKey",
      "VIFileVersion",
      "VIProductVersion",
      "WindowIcon",
      "WriteINIStr",
      "WriteRegBin",
      "WriteRegDWORD",
      "WriteRegExpandStr",
      "WriteRegMultiStr",
      "WriteRegNone",
      "WriteRegStr",
      "WriteUninstaller",
      "XPStyle"
    ];
    const LITERALS = [
      "admin",
      "all",
      "auto",
      "both",
      "bottom",
      "bzip2",
      "colored",
      "components",
      "current",
      "custom",
      "directory",
      "false",
      "force",
      "hide",
      "highest",
      "ifdiff",
      "ifnewer",
      "instfiles",
      "lastused",
      "leave",
      "left",
      "license",
      "listonly",
      "lzma",
      "nevershow",
      "none",
      "normal",
      "notset",
      "off",
      "on",
      "open",
      "print",
      "right",
      "show",
      "silent",
      "silentlog",
      "smooth",
      "textonly",
      "top",
      "true",
      "try",
      "un.components",
      "un.custom",
      "un.directory",
      "un.instfiles",
      "un.license",
      "uninstConfirm",
      "user",
      "Win10",
      "Win7",
      "Win8",
      "WinVista",
      "zlib"
    ];
    const FUNCTION_DEFINITION = {
      match: [
        /Function/,
        /\s+/,
        regex6.concat(/(\.)?/, hljs.IDENT_RE)
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    };
    const VARIABLE_NAME_RE = /[A-Za-z][\w.]*/;
    const VARIABLE_DEFINITION = {
      match: [
        /Var/,
        /\s+/,
        /(?:\/GLOBAL\s+)?/,
        VARIABLE_NAME_RE
      ],
      scope: {
        1: "keyword",
        3: "params",
        4: "variable"
      }
    };
    return {
      name: "NSIS",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(";", "$", { relevance: 0 }),
        VARIABLE_DEFINITION,
        FUNCTION_DEFINITION,
        { beginKeywords: "Function PageEx Section SectionGroup FunctionEnd SectionEnd" },
        STRING,
        COMPILER,
        DEFINES,
        VARIABLES,
        LANGUAGES,
        PARAMETERS,
        PLUGINS,
        hljs.NUMBER_MODE
      ]
    };
  };
  module.exports = nsis;
});

// node_modules/highlight.js/lib/languages/objectivec.js
var require_objectivec = __commonJS((exports, module) => {
  var objectivec = function(hljs) {
    const API_CLASS = {
      className: "built_in",
      begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
    };
    const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
    const TYPES = [
      "int",
      "float",
      "char",
      "unsigned",
      "signed",
      "short",
      "long",
      "double",
      "wchar_t",
      "unichar",
      "void",
      "bool",
      "BOOL",
      "id|0",
      "_Bool"
    ];
    const KWS = [
      "while",
      "export",
      "sizeof",
      "typedef",
      "const",
      "struct",
      "for",
      "union",
      "volatile",
      "static",
      "mutable",
      "if",
      "do",
      "return",
      "goto",
      "enum",
      "else",
      "break",
      "extern",
      "asm",
      "case",
      "default",
      "register",
      "explicit",
      "typename",
      "switch",
      "continue",
      "inline",
      "readonly",
      "assign",
      "readwrite",
      "self",
      "@synchronized",
      "id",
      "typeof",
      "nonatomic",
      "IBOutlet",
      "IBAction",
      "strong",
      "weak",
      "copy",
      "in",
      "out",
      "inout",
      "bycopy",
      "byref",
      "oneway",
      "__strong",
      "__weak",
      "__block",
      "__autoreleasing",
      "@private",
      "@protected",
      "@public",
      "@try",
      "@property",
      "@end",
      "@throw",
      "@catch",
      "@finally",
      "@autoreleasepool",
      "@synthesize",
      "@dynamic",
      "@selector",
      "@optional",
      "@required",
      "@encode",
      "@package",
      "@import",
      "@defs",
      "@compatibility_alias",
      "__bridge",
      "__bridge_transfer",
      "__bridge_retained",
      "__bridge_retain",
      "__covariant",
      "__contravariant",
      "__kindof",
      "_Nonnull",
      "_Nullable",
      "_Null_unspecified",
      "__FUNCTION__",
      "__PRETTY_FUNCTION__",
      "__attribute__",
      "getter",
      "setter",
      "retain",
      "unsafe_unretained",
      "nonnull",
      "nullable",
      "null_unspecified",
      "null_resettable",
      "class",
      "instancetype",
      "NS_DESIGNATED_INITIALIZER",
      "NS_UNAVAILABLE",
      "NS_REQUIRES_SUPER",
      "NS_RETURNS_INNER_POINTER",
      "NS_INLINE",
      "NS_AVAILABLE",
      "NS_DEPRECATED",
      "NS_ENUM",
      "NS_OPTIONS",
      "NS_SWIFT_UNAVAILABLE",
      "NS_ASSUME_NONNULL_BEGIN",
      "NS_ASSUME_NONNULL_END",
      "NS_REFINED_FOR_SWIFT",
      "NS_SWIFT_NAME",
      "NS_SWIFT_NOTHROW",
      "NS_DURING",
      "NS_HANDLER",
      "NS_ENDHANDLER",
      "NS_VALUERETURN",
      "NS_VOIDRETURN"
    ];
    const LITERALS = [
      "false",
      "true",
      "FALSE",
      "TRUE",
      "nil",
      "YES",
      "NO",
      "NULL"
    ];
    const BUILT_INS = [
      "dispatch_once_t",
      "dispatch_queue_t",
      "dispatch_sync",
      "dispatch_async",
      "dispatch_once"
    ];
    const KEYWORDS2 = {
      "variable.language": [
        "this",
        "super"
      ],
      $pattern: IDENTIFIER_RE,
      keyword: KWS,
      literal: LITERALS,
      built_in: BUILT_INS,
      type: TYPES
    };
    const CLASS_KEYWORDS = {
      $pattern: IDENTIFIER_RE,
      keyword: [
        "@interface",
        "@class",
        "@protocol",
        "@implementation"
      ]
    };
    return {
      name: "Objective-C",
      aliases: [
        "mm",
        "objc",
        "obj-c",
        "obj-c++",
        "objective-c++"
      ],
      keywords: KEYWORDS2,
      illegal: "</",
      contains: [
        API_CLASS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: '@"',
              end: '"',
              illegal: "\\n",
              contains: [hljs.BACKSLASH_ESCAPE]
            }
          ]
        },
        {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/,
              end: /$/,
              illegal: "\\n"
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "class",
          begin: "(" + CLASS_KEYWORDS.keyword.join("|") + ")\\b",
          end: /(\{|$)/,
          excludeEnd: true,
          keywords: CLASS_KEYWORDS,
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        {
          begin: "\\." + hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
  };
  module.exports = objectivec;
});

// node_modules/highlight.js/lib/languages/ocaml.js
var require_ocaml = __commonJS((exports, module) => {
  var ocaml = function(hljs) {
    return {
      name: "OCaml",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
        built_in: "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref",
        literal: "true false"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: "\\[(\\|\\|)?\\]|\\(\\)",
          relevance: 0
        },
        hljs.COMMENT("\\(\\*", "\\*\\)", { contains: ["self"] }),
        {
          className: "symbol",
          begin: "\'[A-Za-z_](?!\')[\\w\']*"
        },
        {
          className: "type",
          begin: "`[A-Z][\\w\']*"
        },
        {
          className: "type",
          begin: "\\b[A-Z][\\w\']*",
          relevance: 0
        },
        {
          begin: "[a-z_]\\w*\'[\\w\']*",
          relevance: 0
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /->/
        }
      ]
    };
  };
  module.exports = ocaml;
});

// node_modules/highlight.js/lib/languages/openscad.js
var require_openscad = __commonJS((exports, module) => {
  var openscad = function(hljs) {
    const SPECIAL_VARS = {
      className: "keyword",
      begin: "\\$(f[asn]|t|vp[rtd]|children)"
    };
    const LITERALS = {
      className: "literal",
      begin: "false|true|PI|undef"
    };
    const NUMBERS = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
      relevance: 0
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const PREPRO = {
      className: "meta",
      keywords: { keyword: "include use" },
      begin: "include|use <",
      end: ">"
    };
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        NUMBERS,
        STRING,
        SPECIAL_VARS,
        LITERALS
      ]
    };
    const MODIFIERS = {
      begin: "[*!#%]",
      relevance: 0
    };
    const FUNCTIONS = {
      className: "function",
      beginKeywords: "module function",
      end: /=|\{/,
      contains: [
        PARAMS,
        hljs.UNDERSCORE_TITLE_MODE
      ]
    };
    return {
      name: "OpenSCAD",
      aliases: ["scad"],
      keywords: {
        keyword: "function module include use for intersection_for if else \\%",
        literal: "false true PI undef",
        built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        PREPRO,
        STRING,
        SPECIAL_VARS,
        MODIFIERS,
        FUNCTIONS
      ]
    };
  };
  module.exports = openscad;
});

// node_modules/highlight.js/lib/languages/oxygene.js
var require_oxygene = __commonJS((exports, module) => {
  var oxygene = function(hljs) {
    const OXYGENE_KEYWORDS = {
      $pattern: /\.?\w+/,
      keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
    };
    const CURLY_COMMENT = hljs.COMMENT(/\{/, /\}/, { relevance: 0 });
    const PAREN_COMMENT = hljs.COMMENT("\\(\\*", "\\*\\)", { relevance: 10 });
    const STRING = {
      className: "string",
      begin: "\'",
      end: "\'",
      contains: [{ begin: "\'\'" }]
    };
    const CHAR_STRING = {
      className: "string",
      begin: "(#\\d+)+"
    };
    const FUNCTION = {
      beginKeywords: "function constructor destructor procedure method",
      end: "[:;]",
      keywords: "function constructor|10 destructor|10 procedure|10 method|10",
      contains: [
        hljs.inherit(hljs.TITLE_MODE, { scope: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          keywords: OXYGENE_KEYWORDS,
          contains: [
            STRING,
            CHAR_STRING
          ]
        },
        CURLY_COMMENT,
        PAREN_COMMENT
      ]
    };
    const SEMICOLON = {
      scope: "punctuation",
      match: /;/,
      relevance: 0
    };
    return {
      name: "Oxygene",
      case_insensitive: true,
      keywords: OXYGENE_KEYWORDS,
      illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
      contains: [
        CURLY_COMMENT,
        PAREN_COMMENT,
        hljs.C_LINE_COMMENT_MODE,
        STRING,
        CHAR_STRING,
        hljs.NUMBER_MODE,
        FUNCTION,
        SEMICOLON
      ]
    };
  };
  module.exports = oxygene;
});

// node_modules/highlight.js/lib/languages/parser3.js
var require_parser3 = __commonJS((exports, module) => {
  var parser3 = function(hljs) {
    const CURLY_SUBCOMMENT = hljs.COMMENT(/\{/, /\}/, { contains: ["self"] });
    return {
      name: "Parser3",
      subLanguage: "xml",
      relevance: 0,
      contains: [
        hljs.COMMENT("^#", "$"),
        hljs.COMMENT(/\^rem\{/, /\}/, {
          relevance: 10,
          contains: [CURLY_SUBCOMMENT]
        }),
        {
          className: "meta",
          begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
          relevance: 10
        },
        {
          className: "title",
          begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
        },
        {
          className: "variable",
          begin: /\$\{?[\w\-.:]+\}?/
        },
        {
          className: "keyword",
          begin: /\^[\w\-.:]+/
        },
        {
          className: "number",
          begin: "\\^#[0-9a-fA-F]+"
        },
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = parser3;
});

// node_modules/highlight.js/lib/languages/pf.js
var require_pf = __commonJS((exports, module) => {
  var pf = function(hljs) {
    const MACRO = {
      className: "variable",
      begin: /\$[\w\d#@][\w\d_]*/,
      relevance: 0
    };
    const TABLE = {
      className: "variable",
      begin: /<(?!\/)/,
      end: />/
    };
    return {
      name: "Packet Filter config",
      aliases: ["pf.conf"],
      keywords: {
        $pattern: /[a-z0-9_<>-]+/,
        built_in: "block match pass load anchor|5 antispoof|10 set table",
        keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
        literal: "all any no-route self urpf-failed egress|5 unknown"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        MACRO,
        TABLE
      ]
    };
  };
  module.exports = pf;
});

// node_modules/highlight.js/lib/languages/pgsql.js
var require_pgsql = __commonJS((exports, module) => {
  var pgsql = function(hljs) {
    const COMMENT_MODE = hljs.COMMENT("--", "$");
    const UNQUOTED_IDENT = "[a-zA-Z_][a-zA-Z_0-9$]*";
    const DOLLAR_STRING = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$";
    const LABEL = "<<\\s*" + UNQUOTED_IDENT + "\\s*>>";
    const SQL_KW = "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY ";
    const ROLE_ATTRS = "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ";
    const PLPGSQL_KW = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ";
    const TYPES = "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ";
    const TYPES_RE = TYPES.trim().split(" ").map(function(val) {
      return val.split("|")[0];
    }).join("|");
    const SQL_BI = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ";
    const PLPGSQL_BI = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ";
    const PLPGSQL_EXCEPTIONS = "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED ";
    const FUNCTIONS = "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ";
    const FUNCTIONS_RE = FUNCTIONS.trim().split(" ").map(function(val) {
      return val.split("|")[0];
    }).join("|");
    return {
      name: "PostgreSQL",
      aliases: [
        "postgres",
        "postgresql"
      ],
      supersetOf: "sql",
      case_insensitive: true,
      keywords: {
        keyword: SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
        built_in: SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
      },
      illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
      contains: [
        {
          className: "keyword",
          variants: [
            { begin: /\bTEXT\s*SEARCH\b/ },
            { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
            { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
            { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
            { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
            { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
            { begin: /\bEVENT\s+TRIGGER\b/ },
            { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
            { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
            { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
            { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
            { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
            { begin: /\bPRESERVE\s+ROWS\b/ },
            { begin: /\bDISCARD\s+PLANS\b/ },
            { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
            { begin: /\bSKIP\s+LOCKED\b/ },
            { begin: /\bGROUPING\s+SETS\b/ },
            { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
            { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
            { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
            { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
            { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
            { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
            { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
            { begin: /\bSECURITY\s+LABEL\b/ },
            { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
            { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
            { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
            { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
            { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
            { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
            { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
            { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
            { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
            { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
            { begin: /\bAT\s+TIME\s+ZONE\b/ },
            { begin: /\bGRANTED\s+BY\b/ },
            { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
            { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
            { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
            { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
            { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
          ]
        },
        {
          begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
        },
        {
          begin: /\bINCLUDE\s*\(/,
          keywords: "INCLUDE"
        },
        { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
        { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
        {
          begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
          relevance: 10
        },
        {
          begin: /\bEXTRACT\s*\(/,
          end: /\bFROM\b/,
          returnEnd: true,
          keywords: {
            type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
          }
        },
        {
          begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
          keywords: {
            keyword: "NAME"
          }
        },
        {
          begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
          keywords: {
            keyword: "DOCUMENT CONTENT"
          }
        },
        {
          beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
          end: hljs.C_NUMBER_RE,
          returnEnd: true,
          keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
        },
        {
          className: "type",
          begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
        },
        {
          className: "type",
          begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },
        {
          begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
          keywords: {
            keyword: "RETURNS",
            type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
          }
        },
        {
          begin: "\\b(" + FUNCTIONS_RE + ")\\s*\\("
        },
        {
          begin: "\\.(" + TYPES_RE + ")\\b"
        },
        {
          begin: "\\b(" + TYPES_RE + ")\\s+PATH\\b",
          keywords: {
            keyword: "PATH",
            type: TYPES.replace("PATH ", "")
          }
        },
        {
          className: "type",
          begin: "\\b(" + TYPES_RE + ")\\b"
        },
        {
          className: "string",
          begin: "\'",
          end: "\'",
          contains: [{ begin: "\'\'" }]
        },
        {
          className: "string",
          begin: "(e|E|u&|U&)\'",
          end: "\'",
          contains: [{ begin: "\\\\." }],
          relevance: 10
        },
        hljs.END_SAME_AS_BEGIN({
          begin: DOLLAR_STRING,
          end: DOLLAR_STRING,
          contains: [
            {
              subLanguage: [
                "pgsql",
                "perl",
                "python",
                "tcl",
                "r",
                "lua",
                "java",
                "php",
                "ruby",
                "bash",
                "scheme",
                "xml",
                "json"
              ],
              endsWithParent: true
            }
          ]
        }),
        {
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }]
        },
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        COMMENT_MODE,
        {
          className: "meta",
          variants: [
            {
              begin: "%(ROW)?TYPE",
              relevance: 10
            },
            {
              begin: "\\$\\d+"
            },
            {
              begin: "^#\\w",
              end: "$"
            }
          ]
        },
        {
          className: "symbol",
          begin: LABEL,
          relevance: 10
        }
      ]
    };
  };
  module.exports = pgsql;
});

// node_modules/highlight.js/lib/languages/php.js
var require_php = __commonJS((exports, module) => {
  var php = function(hljs) {
    const regex6 = hljs.regex;
    const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
    const IDENT_RE = regex6.concat(/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/, NOT_PERL_ETC);
    const PASCAL_CASE_CLASS_NAME_RE = regex6.concat(/(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/, NOT_PERL_ETC);
    const VARIABLE = {
      scope: "variable",
      match: "\\$+" + IDENT_RE
    };
    const PREPROCESSOR = {
      scope: "meta",
      variants: [
        { begin: /<\?php/, relevance: 10 },
        { begin: /<\?=/ },
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ }
      ]
    };
    const SUBST = {
      scope: "subst",
      variants: [
        { begin: /\$\w+/ },
        {
          begin: /\{\$/,
          end: /\}/
        }
      ]
    };
    const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null });
    const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
      illegal: null,
      contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)
    });
    const HEREDOC = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
      "on:begin": (m4, resp) => {
        resp.data._beginMatch = m4[1] || m4[2];
      },
      "on:end": (m4, resp) => {
        if (resp.data._beginMatch !== m4[1])
          resp.ignoreMatch();
      }
    };
    const NOWDOC = hljs.END_SAME_AS_BEGIN({
      begin: /<<<[ \t]*'(\w+)'\n/,
      end: /[ \t]*(\w+)\b/
    });
    const WHITESPACE = "[ \t\n]";
    const STRING = {
      scope: "string",
      variants: [
        DOUBLE_QUOTED,
        SINGLE_QUOTED,
        HEREDOC,
        NOWDOC
      ]
    };
    const NUMBER = {
      scope: "number",
      variants: [
        { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` },
        { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` },
        { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` },
        { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
      ],
      relevance: 0
    };
    const LITERALS = [
      "false",
      "null",
      "true"
    ];
    const KWS = [
      "__CLASS__",
      "__DIR__",
      "__FILE__",
      "__FUNCTION__",
      "__COMPILER_HALT_OFFSET__",
      "__LINE__",
      "__METHOD__",
      "__NAMESPACE__",
      "__TRAIT__",
      "die",
      "echo",
      "exit",
      "include",
      "include_once",
      "print",
      "require",
      "require_once",
      "array",
      "abstract",
      "and",
      "as",
      "binary",
      "bool",
      "boolean",
      "break",
      "callable",
      "case",
      "catch",
      "class",
      "clone",
      "const",
      "continue",
      "declare",
      "default",
      "do",
      "double",
      "else",
      "elseif",
      "empty",
      "enddeclare",
      "endfor",
      "endforeach",
      "endif",
      "endswitch",
      "endwhile",
      "enum",
      "eval",
      "extends",
      "final",
      "finally",
      "float",
      "for",
      "foreach",
      "from",
      "global",
      "goto",
      "if",
      "implements",
      "instanceof",
      "insteadof",
      "int",
      "integer",
      "interface",
      "isset",
      "iterable",
      "list",
      "match|0",
      "mixed",
      "new",
      "never",
      "object",
      "or",
      "private",
      "protected",
      "public",
      "readonly",
      "real",
      "return",
      "string",
      "switch",
      "throw",
      "trait",
      "try",
      "unset",
      "use",
      "var",
      "void",
      "while",
      "xor",
      "yield"
    ];
    const BUILT_INS = [
      "Error|0",
      "AppendIterator",
      "ArgumentCountError",
      "ArithmeticError",
      "ArrayIterator",
      "ArrayObject",
      "AssertionError",
      "BadFunctionCallException",
      "BadMethodCallException",
      "CachingIterator",
      "CallbackFilterIterator",
      "CompileError",
      "Countable",
      "DirectoryIterator",
      "DivisionByZeroError",
      "DomainException",
      "EmptyIterator",
      "ErrorException",
      "Exception",
      "FilesystemIterator",
      "FilterIterator",
      "GlobIterator",
      "InfiniteIterator",
      "InvalidArgumentException",
      "IteratorIterator",
      "LengthException",
      "LimitIterator",
      "LogicException",
      "MultipleIterator",
      "NoRewindIterator",
      "OutOfBoundsException",
      "OutOfRangeException",
      "OuterIterator",
      "OverflowException",
      "ParentIterator",
      "ParseError",
      "RangeException",
      "RecursiveArrayIterator",
      "RecursiveCachingIterator",
      "RecursiveCallbackFilterIterator",
      "RecursiveDirectoryIterator",
      "RecursiveFilterIterator",
      "RecursiveIterator",
      "RecursiveIteratorIterator",
      "RecursiveRegexIterator",
      "RecursiveTreeIterator",
      "RegexIterator",
      "RuntimeException",
      "SeekableIterator",
      "SplDoublyLinkedList",
      "SplFileInfo",
      "SplFileObject",
      "SplFixedArray",
      "SplHeap",
      "SplMaxHeap",
      "SplMinHeap",
      "SplObjectStorage",
      "SplObserver",
      "SplPriorityQueue",
      "SplQueue",
      "SplStack",
      "SplSubject",
      "SplTempFileObject",
      "TypeError",
      "UnderflowException",
      "UnexpectedValueException",
      "UnhandledMatchError",
      "ArrayAccess",
      "BackedEnum",
      "Closure",
      "Fiber",
      "Generator",
      "Iterator",
      "IteratorAggregate",
      "Serializable",
      "Stringable",
      "Throwable",
      "Traversable",
      "UnitEnum",
      "WeakReference",
      "WeakMap",
      "Directory",
      "__PHP_Incomplete_Class",
      "parent",
      "php_user_filter",
      "self",
      "static",
      "stdClass"
    ];
    const dualCase = (items) => {
      const result = [];
      items.forEach((item) => {
        result.push(item);
        if (item.toLowerCase() === item) {
          result.push(item.toUpperCase());
        } else {
          result.push(item.toLowerCase());
        }
      });
      return result;
    };
    const KEYWORDS2 = {
      keyword: KWS,
      literal: dualCase(LITERALS),
      built_in: BUILT_INS
    };
    const normalizeKeywords = (items) => {
      return items.map((item) => {
        return item.replace(/\|\d+$/, "");
      });
    };
    const CONSTRUCTOR_CALL = { variants: [
      {
        match: [
          /new/,
          regex6.concat(WHITESPACE, "+"),
          regex6.concat("(?!", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
          PASCAL_CASE_CLASS_NAME_RE
        ],
        scope: {
          1: "keyword",
          4: "title.class"
        }
      }
    ] };
    const CONSTANT_REFERENCE = regex6.concat(IDENT_RE, "\\b(?!\\()");
    const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
      {
        match: [
          regex6.concat(/::/, regex6.lookahead(/(?!class\b)/)),
          CONSTANT_REFERENCE
        ],
        scope: { 2: "variable.constant" }
      },
      {
        match: [
          /::/,
          /class/
        ],
        scope: { 2: "variable.language" }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          regex6.concat(/::/, regex6.lookahead(/(?!class\b)/)),
          CONSTANT_REFERENCE
        ],
        scope: {
          1: "title.class",
          3: "variable.constant"
        }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          regex6.concat("::", regex6.lookahead(/(?!class\b)/))
        ],
        scope: { 1: "title.class" }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          /::/,
          /class/
        ],
        scope: {
          1: "title.class",
          3: "variable.language"
        }
      }
    ] };
    const NAMED_ARGUMENT = {
      scope: "attr",
      match: regex6.concat(IDENT_RE, regex6.lookahead(":"), regex6.lookahead(/(?!::)/))
    };
    const PARAMS_MODE = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      contains: [
        NAMED_ARGUMENT,
        VARIABLE,
        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING,
        NUMBER,
        CONSTRUCTOR_CALL
      ]
    };
    const FUNCTION_INVOKE = {
      relevance: 0,
      match: [
        /\b/,
        regex6.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
        IDENT_RE,
        regex6.concat(WHITESPACE, "*"),
        regex6.lookahead(/(?=\()/)
      ],
      scope: { 3: "title.function.invoke" },
      contains: [PARAMS_MODE]
    };
    PARAMS_MODE.contains.push(FUNCTION_INVOKE);
    const ATTRIBUTE_CONTAINS = [
      NAMED_ARGUMENT,
      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
      hljs.C_BLOCK_COMMENT_MODE,
      STRING,
      NUMBER,
      CONSTRUCTOR_CALL
    ];
    const ATTRIBUTES = {
      begin: regex6.concat(/#\[\s*/, PASCAL_CASE_CLASS_NAME_RE),
      beginScope: "meta",
      end: /]/,
      endScope: "meta",
      keywords: {
        literal: LITERALS,
        keyword: [
          "new",
          "array"
        ]
      },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: {
            literal: LITERALS,
            keyword: [
              "new",
              "array"
            ]
          },
          contains: [
            "self",
            ...ATTRIBUTE_CONTAINS
          ]
        },
        ...ATTRIBUTE_CONTAINS,
        {
          scope: "meta",
          match: PASCAL_CASE_CLASS_NAME_RE
        }
      ]
    };
    return {
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        ATTRIBUTES,
        hljs.HASH_COMMENT_MODE,
        hljs.COMMENT("//", "$"),
        hljs.COMMENT("/\\*", "\\*/", { contains: [
          {
            scope: "doctag",
            match: "@[A-Za-z]+"
          }
        ] }),
        {
          match: /__halt_compiler\(\);/,
          keywords: "__halt_compiler",
          starts: {
            scope: "comment",
            end: hljs.MATCH_NOTHING_RE,
            contains: [
              {
                match: /\?>/,
                scope: "meta",
                endsParent: true
              }
            ]
          }
        },
        PREPROCESSOR,
        {
          scope: "variable.language",
          match: /\$this\b/
        },
        VARIABLE,
        FUNCTION_INVOKE,
        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
        {
          match: [
            /const/,
            /\s/,
            IDENT_RE
          ],
          scope: {
            1: "keyword",
            3: "variable.constant"
          }
        },
        CONSTRUCTOR_CALL,
        {
          scope: "function",
          relevance: 0,
          beginKeywords: "fn function",
          end: /[;{]/,
          excludeEnd: true,
          illegal: "[$%\\[]",
          contains: [
            { beginKeywords: "use" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              begin: "=>",
              endsParent: true
            },
            {
              scope: "params",
              begin: "\\(",
              end: "\\)",
              excludeBegin: true,
              excludeEnd: true,
              keywords: KEYWORDS2,
              contains: [
                "self",
                VARIABLE,
                LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
                hljs.C_BLOCK_COMMENT_MODE,
                STRING,
                NUMBER
              ]
            }
          ]
        },
        {
          scope: "class",
          variants: [
            {
              beginKeywords: "enum",
              illegal: /[($"]/
            },
            {
              beginKeywords: "class interface trait",
              illegal: /[:($"]/
            }
          ],
          relevance: 0,
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: ";",
          illegal: /[.']/,
          contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
        },
        {
          beginKeywords: "use",
          relevance: 0,
          end: ";",
          contains: [
            {
              match: /\b(as|const|function)\b/,
              scope: "keyword"
            },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        STRING,
        NUMBER
      ]
    };
  };
  module.exports = php;
});

// node_modules/highlight.js/lib/languages/php-template.js
var require_php_template = __commonJS((exports, module) => {
  var phpTemplate = function(hljs) {
    return {
      name: "PHP template",
      subLanguage: "xml",
      contains: [
        {
          begin: /<\?(php|=)?/,
          end: /\?>/,
          subLanguage: "php",
          contains: [
            {
              begin: "/\\*",
              end: "\\*/",
              skip: true
            },
            {
              begin: 'b"',
              end: '"',
              skip: true
            },
            {
              begin: "b\'",
              end: "\'",
              skip: true
            },
            hljs.inherit(hljs.APOS_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            }),
            hljs.inherit(hljs.QUOTE_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            })
          ]
        }
      ]
    };
  };
  module.exports = phpTemplate;
});

// node_modules/highlight.js/lib/languages/plaintext.js
var require_plaintext = __commonJS((exports, module) => {
  var plaintext = function(hljs) {
    return {
      name: "Plain text",
      aliases: [
        "text",
        "txt"
      ],
      disableAutodetect: true
    };
  };
  module.exports = plaintext;
});

// node_modules/highlight.js/lib/languages/pony.js
var require_pony = __commonJS((exports, module) => {
  var pony = function(hljs) {
    const KEYWORDS2 = {
      keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
      meta: "iso val tag trn box ref",
      literal: "this false true"
    };
    const TRIPLE_QUOTE_STRING_MODE = {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    };
    const QUOTE_STRING_MODE = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const SINGLE_QUOTE_CHAR_MODE = {
      className: "string",
      begin: "\'",
      end: "\'",
      contains: [hljs.BACKSLASH_ESCAPE],
      relevance: 0
    };
    const TYPE_NAME = {
      className: "type",
      begin: "\\b_?[A-Z][\\w]*",
      relevance: 0
    };
    const PRIMED_NAME = {
      begin: hljs.IDENT_RE + "\'",
      relevance: 0
    };
    const NUMBER_MODE = {
      className: "number",
      begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
      relevance: 0
    };
    return {
      name: "Pony",
      keywords: KEYWORDS2,
      contains: [
        TYPE_NAME,
        TRIPLE_QUOTE_STRING_MODE,
        QUOTE_STRING_MODE,
        SINGLE_QUOTE_CHAR_MODE,
        PRIMED_NAME,
        NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  };
  module.exports = pony;
});

// node_modules/highlight.js/lib/languages/powershell.js
var require_powershell = __commonJS((exports, module) => {
  var powershell = function(hljs) {
    const TYPES = [
      "string",
      "char",
      "byte",
      "int",
      "long",
      "bool",
      "decimal",
      "single",
      "double",
      "DateTime",
      "xml",
      "array",
      "hashtable",
      "void"
    ];
    const VALID_VERBS = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where";
    const COMPARISON_OPERATORS = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor";
    const KEYWORDS2 = {
      $pattern: /-?[A-z\.\-]+\b/,
      keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
      built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
    };
    const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;
    const BACKTICK_ESCAPE = {
      begin: "`[\\s\\S]",
      relevance: 0
    };
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$\B/ },
        {
          className: "keyword",
          begin: /\$this/
        },
        { begin: /\$[\w\d][\w\d_:]*/ }
      ]
    };
    const LITERAL = {
      className: "literal",
      begin: /\$(null|true|false)\b/
    };
    const QUOTE_STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /@"/,
          end: /^"@/
        }
      ],
      contains: [
        BACKTICK_ESCAPE,
        VAR,
        {
          className: "variable",
          begin: /\$[A-z]/,
          end: /[^A-z]/
        }
      ]
    };
    const APOS_STRING = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /@'/,
          end: /^'@/
        }
      ]
    };
    const PS_HELPTAGS = {
      className: "doctag",
      variants: [
        { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
        { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
      ]
    };
    const PS_COMMENT = hljs.inherit(hljs.COMMENT(null, null), {
      variants: [
        {
          begin: /#/,
          end: /$/
        },
        {
          begin: /<#/,
          end: /#>/
        }
      ],
      contains: [PS_HELPTAGS]
    });
    const CMDLETS = {
      className: "built_in",
      variants: [{ begin: "(".concat(VALID_VERBS, ")+(-)[\\w\\d]+") }]
    };
    const PS_CLASS = {
      className: "class",
      beginKeywords: "class enum",
      end: /\s*[{]/,
      excludeEnd: true,
      relevance: 0,
      contains: [hljs.TITLE_MODE]
    };
    const PS_FUNCTION = {
      className: "function",
      begin: /function\s+/,
      end: /\s*\{|$/,
      excludeEnd: true,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: "function",
          relevance: 0,
          className: "keyword"
        },
        {
          className: "title",
          begin: TITLE_NAME_RE,
          relevance: 0
        },
        {
          begin: /\(/,
          end: /\)/,
          className: "params",
          relevance: 0,
          contains: [VAR]
        }
      ]
    };
    const PS_USING = {
      begin: /using\s/,
      end: /$/,
      returnBegin: true,
      contains: [
        QUOTE_STRING,
        APOS_STRING,
        {
          className: "keyword",
          begin: /(using|assembly|command|module|namespace|type)/
        }
      ]
    };
    const PS_ARGUMENTS = { variants: [
      {
        className: "operator",
        begin: "(".concat(COMPARISON_OPERATORS, ")\\b")
      },
      {
        className: "literal",
        begin: /(-){1,2}[\w\d-]+/,
        relevance: 0
      }
    ] };
    const HASH_SIGNS = {
      className: "selector-tag",
      begin: /@\B/,
      relevance: 0
    };
    const PS_METHODS = {
      className: "function",
      begin: /\[.*\]\s*[\w]+[ ]??\(/,
      end: /$/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          begin: "(".concat(KEYWORDS2.keyword.toString().replace(/\s/g, "|"), ")\\b"),
          endsParent: true,
          relevance: 0
        },
        hljs.inherit(hljs.TITLE_MODE, { endsParent: true })
      ]
    };
    const GENTLEMANS_SET = [
      PS_METHODS,
      PS_COMMENT,
      BACKTICK_ESCAPE,
      hljs.NUMBER_MODE,
      QUOTE_STRING,
      APOS_STRING,
      CMDLETS,
      VAR,
      LITERAL,
      HASH_SIGNS
    ];
    const PS_TYPE = {
      begin: /\[/,
      end: /\]/,
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0,
      contains: [].concat("self", GENTLEMANS_SET, {
        begin: "(" + TYPES.join("|") + ")",
        className: "built_in",
        relevance: 0
      }, {
        className: "type",
        begin: /[\.\w\d]+/,
        relevance: 0
      })
    };
    PS_METHODS.contains.unshift(PS_TYPE);
    return {
      name: "PowerShell",
      aliases: [
        "pwsh",
        "ps",
        "ps1"
      ],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: GENTLEMANS_SET.concat(PS_CLASS, PS_FUNCTION, PS_USING, PS_ARGUMENTS, PS_TYPE)
    };
  };
  module.exports = powershell;
});

// node_modules/highlight.js/lib/languages/processing.js
var require_processing = __commonJS((exports, module) => {
  var processing2 = function(hljs) {
    const regex6 = hljs.regex;
    const BUILT_INS = [
      "displayHeight",
      "displayWidth",
      "mouseY",
      "mouseX",
      "mousePressed",
      "pmouseX",
      "pmouseY",
      "key",
      "keyCode",
      "pixels",
      "focused",
      "frameCount",
      "frameRate",
      "height",
      "width",
      "size",
      "createGraphics",
      "beginDraw",
      "createShape",
      "loadShape",
      "PShape",
      "arc",
      "ellipse",
      "line",
      "point",
      "quad",
      "rect",
      "triangle",
      "bezier",
      "bezierDetail",
      "bezierPoint",
      "bezierTangent",
      "curve",
      "curveDetail",
      "curvePoint",
      "curveTangent",
      "curveTightness",
      "shape",
      "shapeMode",
      "beginContour",
      "beginShape",
      "bezierVertex",
      "curveVertex",
      "endContour",
      "endShape",
      "quadraticVertex",
      "vertex",
      "ellipseMode",
      "noSmooth",
      "rectMode",
      "smooth",
      "strokeCap",
      "strokeJoin",
      "strokeWeight",
      "mouseClicked",
      "mouseDragged",
      "mouseMoved",
      "mousePressed",
      "mouseReleased",
      "mouseWheel",
      "keyPressed",
      "keyPressedkeyReleased",
      "keyTyped",
      "print",
      "println",
      "save",
      "saveFrame",
      "day",
      "hour",
      "millis",
      "minute",
      "month",
      "second",
      "year",
      "background",
      "clear",
      "colorMode",
      "fill",
      "noFill",
      "noStroke",
      "stroke",
      "alpha",
      "blue",
      "brightness",
      "color",
      "green",
      "hue",
      "lerpColor",
      "red",
      "saturation",
      "modelX",
      "modelY",
      "modelZ",
      "screenX",
      "screenY",
      "screenZ",
      "ambient",
      "emissive",
      "shininess",
      "specular",
      "add",
      "createImage",
      "beginCamera",
      "camera",
      "endCamera",
      "frustum",
      "ortho",
      "perspective",
      "printCamera",
      "printProjection",
      "cursor",
      "frameRate",
      "noCursor",
      "exit",
      "loop",
      "noLoop",
      "popStyle",
      "pushStyle",
      "redraw",
      "binary",
      "boolean",
      "byte",
      "char",
      "float",
      "hex",
      "int",
      "str",
      "unbinary",
      "unhex",
      "join",
      "match",
      "matchAll",
      "nf",
      "nfc",
      "nfp",
      "nfs",
      "split",
      "splitTokens",
      "trim",
      "append",
      "arrayCopy",
      "concat",
      "expand",
      "reverse",
      "shorten",
      "sort",
      "splice",
      "subset",
      "box",
      "sphere",
      "sphereDetail",
      "createInput",
      "createReader",
      "loadBytes",
      "loadJSONArray",
      "loadJSONObject",
      "loadStrings",
      "loadTable",
      "loadXML",
      "open",
      "parseXML",
      "saveTable",
      "selectFolder",
      "selectInput",
      "beginRaw",
      "beginRecord",
      "createOutput",
      "createWriter",
      "endRaw",
      "endRecord",
      "PrintWritersaveBytes",
      "saveJSONArray",
      "saveJSONObject",
      "saveStream",
      "saveStrings",
      "saveXML",
      "selectOutput",
      "popMatrix",
      "printMatrix",
      "pushMatrix",
      "resetMatrix",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "shearX",
      "shearY",
      "translate",
      "ambientLight",
      "directionalLight",
      "lightFalloff",
      "lights",
      "lightSpecular",
      "noLights",
      "normal",
      "pointLight",
      "spotLight",
      "image",
      "imageMode",
      "loadImage",
      "noTint",
      "requestImage",
      "tint",
      "texture",
      "textureMode",
      "textureWrap",
      "blend",
      "copy",
      "filter",
      "get",
      "loadPixels",
      "set",
      "updatePixels",
      "blendMode",
      "loadShader",
      "PShaderresetShader",
      "shader",
      "createFont",
      "loadFont",
      "text",
      "textFont",
      "textAlign",
      "textLeading",
      "textMode",
      "textSize",
      "textWidth",
      "textAscent",
      "textDescent",
      "abs",
      "ceil",
      "constrain",
      "dist",
      "exp",
      "floor",
      "lerp",
      "log",
      "mag",
      "map",
      "max",
      "min",
      "norm",
      "pow",
      "round",
      "sq",
      "sqrt",
      "acos",
      "asin",
      "atan",
      "atan2",
      "cos",
      "degrees",
      "radians",
      "sin",
      "tan",
      "noise",
      "noiseDetail",
      "noiseSeed",
      "random",
      "randomGaussian",
      "randomSeed"
    ];
    const IDENT = hljs.IDENT_RE;
    const FUNC_NAME = { variants: [
      {
        match: regex6.concat(regex6.either(...BUILT_INS), regex6.lookahead(/\s*\(/)),
        className: "built_in"
      },
      {
        relevance: 0,
        match: regex6.concat(/\b(?!for|if|while)/, IDENT, regex6.lookahead(/\s*\(/)),
        className: "title.function"
      }
    ] };
    const NEW_CLASS = {
      match: [
        /new\s+/,
        IDENT
      ],
      className: {
        1: "keyword",
        2: "class.title"
      }
    };
    const PROPERTY = {
      relevance: 0,
      match: [
        /\./,
        IDENT
      ],
      className: { 2: "property" }
    };
    const CLASS = {
      variants: [
        { match: [
          /class/,
          /\s+/,
          IDENT,
          /\s+/,
          /extends/,
          /\s+/,
          IDENT
        ] },
        { match: [
          /class/,
          /\s+/,
          IDENT
        ] }
      ],
      className: {
        1: "keyword",
        3: "title.class",
        5: "keyword",
        7: "title.class.inherited"
      }
    };
    const TYPES = [
      "boolean",
      "byte",
      "char",
      "color",
      "double",
      "float",
      "int",
      "long",
      "short"
    ];
    const CLASSES = [
      "BufferedReader",
      "PVector",
      "PFont",
      "PImage",
      "PGraphics",
      "HashMap",
      "String",
      "Array",
      "FloatDict",
      "ArrayList",
      "FloatList",
      "IntDict",
      "IntList",
      "JSONArray",
      "JSONObject",
      "Object",
      "StringDict",
      "StringList",
      "Table",
      "TableRow",
      "XML"
    ];
    const JAVA_KEYWORDS = [
      "abstract",
      "assert",
      "break",
      "case",
      "catch",
      "const",
      "continue",
      "default",
      "else",
      "enum",
      "final",
      "finally",
      "for",
      "if",
      "import",
      "instanceof",
      "long",
      "native",
      "new",
      "package",
      "private",
      "private",
      "protected",
      "protected",
      "public",
      "public",
      "return",
      "static",
      "strictfp",
      "switch",
      "synchronized",
      "throw",
      "throws",
      "transient",
      "try",
      "void",
      "volatile",
      "while"
    ];
    return {
      name: "Processing",
      aliases: ["pde"],
      keywords: {
        keyword: [...JAVA_KEYWORDS],
        literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false",
        title: "setup draw",
        variable: "super this",
        built_in: [
          ...BUILT_INS,
          ...CLASSES
        ],
        type: TYPES
      },
      contains: [
        CLASS,
        NEW_CLASS,
        FUNC_NAME,
        PROPERTY,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = processing2;
});

// node_modules/highlight.js/lib/languages/profile.js
var require_profile = __commonJS((exports, module) => {
  var profile = function(hljs) {
    return {
      name: "Python profiler",
      contains: [
        hljs.C_NUMBER_MODE,
        {
          begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
          end: ":",
          excludeEnd: true
        },
        {
          begin: "(ncalls|tottime|cumtime)",
          end: "$",
          keywords: "ncalls tottime|10 cumtime|10 filename",
          relevance: 10
        },
        {
          begin: "function calls",
          end: "$",
          contains: [hljs.C_NUMBER_MODE],
          relevance: 10
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\\(",
          end: "\\)$",
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        }
      ]
    };
  };
  module.exports = profile;
});

// node_modules/highlight.js/lib/languages/prolog.js
var require_prolog = __commonJS((exports, module) => {
  var prolog = function(hljs) {
    const ATOM = {
      begin: /[a-z][A-Za-z0-9_]*/,
      relevance: 0
    };
    const VAR = {
      className: "symbol",
      variants: [
        { begin: /[A-Z][a-zA-Z0-9_]*/ },
        { begin: /_[A-Za-z0-9_]*/ }
      ],
      relevance: 0
    };
    const PARENTED = {
      begin: /\(/,
      end: /\)/,
      relevance: 0
    };
    const LIST = {
      begin: /\[/,
      end: /\]/
    };
    const LINE_COMMENT = {
      className: "comment",
      begin: /%/,
      end: /$/,
      contains: [hljs.PHRASAL_WORDS_MODE]
    };
    const BACKTICK_STRING = {
      className: "string",
      begin: /`/,
      end: /`/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const CHAR_CODE = {
      className: "string",
      begin: /0'(\\'|.)/
    };
    const SPACE_CODE = {
      className: "string",
      begin: /0'\\s/
    };
    const PRED_OP = {
      begin: /:-/
    };
    const inner = [
      ATOM,
      VAR,
      PARENTED,
      PRED_OP,
      LIST,
      LINE_COMMENT,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,
      BACKTICK_STRING,
      CHAR_CODE,
      SPACE_CODE,
      hljs.C_NUMBER_MODE
    ];
    PARENTED.contains = inner;
    LIST.contains = inner;
    return {
      name: "Prolog",
      contains: inner.concat([
        {
          begin: /\.$/
        }
      ])
    };
  };
  module.exports = prolog;
});

// node_modules/highlight.js/lib/languages/properties.js
var require_properties = __commonJS((exports, module) => {
  var properties = function(hljs) {
    const WS0 = "[ \\t\\f]*";
    const WS1 = "[ \\t\\f]+";
    const EQUAL_DELIM = WS0 + "[:=]" + WS0;
    const WS_DELIM = WS1;
    const DELIM = "(" + EQUAL_DELIM + "|" + WS_DELIM + ")";
    const KEY = "([^\\\\:= \\t\\f\\n]|\\\\.)+";
    const DELIM_AND_VALUE = {
      end: DELIM,
      relevance: 0,
      starts: {
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: true,
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        hljs.COMMENT("^\\s*[!#]", "$"),
        {
          returnBegin: true,
          variants: [
            { begin: KEY + EQUAL_DELIM },
            { begin: KEY + WS_DELIM }
          ],
          contains: [
            {
              className: "attr",
              begin: KEY,
              endsParent: true
            }
          ],
          starts: DELIM_AND_VALUE
        },
        {
          className: "attr",
          begin: KEY + WS0 + "$"
        }
      ]
    };
  };
  module.exports = properties;
});

// node_modules/highlight.js/lib/languages/protobuf.js
var require_protobuf = __commonJS((exports, module) => {
  var protobuf = function(hljs) {
    const KEYWORDS2 = [
      "package",
      "import",
      "option",
      "optional",
      "required",
      "repeated",
      "group",
      "oneof"
    ];
    const TYPES = [
      "double",
      "float",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    const CLASS_DEFINITION = {
      match: [
        /(message|enum|service)\s+/,
        hljs.IDENT_RE
      ],
      scope: {
        1: "keyword",
        2: "title.class"
      }
    };
    return {
      name: "Protocol Buffers",
      aliases: ["proto"],
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES,
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CLASS_DEFINITION,
        {
          className: "function",
          beginKeywords: "rpc",
          end: /[{;]/,
          excludeEnd: true,
          keywords: "rpc returns"
        },
        {
          begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
        }
      ]
    };
  };
  module.exports = protobuf;
});

// node_modules/highlight.js/lib/languages/puppet.js
var require_puppet = __commonJS((exports, module) => {
  var puppet = function(hljs) {
    const PUPPET_KEYWORDS = {
      keyword: "and case default else elsif false if in import enherits node or true undef unless main settings $string ",
      literal: "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted",
      built_in: "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
    };
    const COMMENT = hljs.COMMENT("#", "$");
    const IDENT_RE = "([A-Za-z_]|::)(\\w|::)*";
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE });
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + IDENT_RE
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VARIABLE
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    return {
      name: "Puppet",
      aliases: ["pp"],
      contains: [
        COMMENT,
        VARIABLE,
        STRING,
        {
          beginKeywords: "class",
          end: "\\{|;",
          illegal: /=/,
          contains: [
            TITLE,
            COMMENT
          ]
        },
        {
          beginKeywords: "define",
          end: /\{/,
          contains: [
            {
              className: "section",
              begin: hljs.IDENT_RE,
              endsParent: true
            }
          ]
        },
        {
          begin: hljs.IDENT_RE + "\\s+\\{",
          returnBegin: true,
          end: /\S/,
          contains: [
            {
              className: "keyword",
              begin: hljs.IDENT_RE,
              relevance: 0.2
            },
            {
              begin: /\{/,
              end: /\}/,
              keywords: PUPPET_KEYWORDS,
              relevance: 0,
              contains: [
                STRING,
                COMMENT,
                {
                  begin: "[a-zA-Z_]+\\s*=>",
                  returnBegin: true,
                  end: "=>",
                  contains: [
                    {
                      className: "attr",
                      begin: hljs.IDENT_RE
                    }
                  ]
                },
                {
                  className: "number",
                  begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                  relevance: 0
                },
                VARIABLE
              ]
            }
          ],
          relevance: 0
        }
      ]
    };
  };
  module.exports = puppet;
});

// node_modules/highlight.js/lib/languages/purebasic.js
var require_purebasic = __commonJS((exports, module) => {
  var purebasic = function(hljs) {
    const STRINGS = {
      className: "string",
      begin: '(~)?"',
      end: '"',
      illegal: "\\n"
    };
    const CONSTANTS = {
      className: "symbol",
      begin: "#[a-zA-Z_]\\w*\\$?"
    };
    return {
      name: "PureBASIC",
      aliases: [
        "pb",
        "pbi"
      ],
      keywords: "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr",
      contains: [
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "function",
          begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
          end: "\\(",
          excludeEnd: true,
          returnBegin: true,
          contains: [
            {
              className: "keyword",
              begin: "(Procedure|Declare)(C|CDLL|DLL)?",
              excludeEnd: true
            },
            {
              className: "type",
              begin: "\\.\\w*"
            },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        STRINGS,
        CONSTANTS
      ]
    };
  };
  module.exports = purebasic;
});

// node_modules/highlight.js/lib/languages/python.js
var require_python = __commonJS((exports, module) => {
  var python = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = /[\p{XID_Start}_]\p{XID_Continue}*/u;
    const RESERVED_WORDS3 = [
      "and",
      "as",
      "assert",
      "async",
      "await",
      "break",
      "case",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "match",
      "nonlocal|10",
      "not",
      "or",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield"
    ];
    const BUILT_INS = [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ];
    const LITERALS = [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ];
    const TYPES = [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ];
    const KEYWORDS2 = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: RESERVED_WORDS3,
      built_in: BUILT_INS,
      literal: LITERALS,
      type: TYPES
    };
    const PROMPT = {
      className: "meta",
      begin: /^(>>>|\.\.\.) /
    };
    const SUBST = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS2,
      illegal: /#/
    };
    const LITERAL_BRACKET = {
      begin: /\{\{/,
      relevance: 0
    };
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT
          ],
          relevance: 10
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT
          ],
          relevance: 10
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([uU]|[rR])'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /([uU]|[rR])"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])'/,
          end: /'/
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])"/,
          end: /"/
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'/,
          end: /'/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"/,
          end: /"/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    const digitpart = "[0-9](_?[0-9])*";
    const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
    const lookahead = `\\b|${RESERVED_WORDS3.join("|")}`;
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        {
          begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`
        },
        {
          begin: `(${pointfloat})[jJ]?`
        },
        {
          begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`
        },
        {
          begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead})`
        },
        {
          begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`
        },
        {
          begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`
        },
        {
          begin: `\\b(${digitpart})[jJ](?=${lookahead})`
        }
      ]
    };
    const COMMENT_TYPE = {
      className: "comment",
      begin: regex6.lookahead(/# type:/),
      end: /$/,
      keywords: KEYWORDS2,
      contains: [
        {
          begin: /# type:/
        },
        {
          begin: /#/,
          end: /\b\B/,
          endsWithParent: true
        }
      ]
    };
    const PARAMS = {
      className: "params",
      variants: [
        {
          className: "",
          begin: /\(\s*\)/,
          skip: true
        },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          keywords: KEYWORDS2,
          contains: [
            "self",
            PROMPT,
            NUMBER,
            STRING,
            hljs.HASH_COMMENT_MODE
          ]
        }
      ]
    };
    SUBST.contains = [
      STRING,
      NUMBER,
      PROMPT
    ];
    return {
      name: "Python",
      aliases: [
        "py",
        "gyp",
        "ipython"
      ],
      unicodeRegex: true,
      keywords: KEYWORDS2,
      illegal: /(<\/|\?)|=>/,
      contains: [
        PROMPT,
        NUMBER,
        {
          begin: /\bself\b/
        },
        {
          beginKeywords: "if",
          relevance: 0
        },
        STRING,
        COMMENT_TYPE,
        hljs.HASH_COMMENT_MODE,
        {
          match: [
            /\bdef/,
            /\s+/,
            IDENT_RE
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [PARAMS]
        },
        {
          variants: [
            {
              match: [
                /\bclass/,
                /\s+/,
                IDENT_RE,
                /\s*/,
                /\(\s*/,
                IDENT_RE,
                /\s*\)/
              ]
            },
            {
              match: [
                /\bclass/,
                /\s+/,
                IDENT_RE
              ]
            }
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            6: "title.class.inherited"
          }
        },
        {
          className: "meta",
          begin: /^[\t ]*@/,
          end: /(?=#)|$/,
          contains: [
            NUMBER,
            PARAMS,
            STRING
          ]
        }
      ]
    };
  };
  module.exports = python;
});

// node_modules/highlight.js/lib/languages/python-repl.js
var require_python_repl = __commonJS((exports, module) => {
  var pythonRepl = function(hljs) {
    return {
      aliases: ["pycon"],
      contains: [
        {
          className: "meta.prompt",
          starts: {
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "python"
            }
          },
          variants: [
            { begin: /^>>>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  };
  module.exports = pythonRepl;
});

// node_modules/highlight.js/lib/languages/q.js
var require_q = __commonJS((exports, module) => {
  var q2 = function(hljs) {
    const KEYWORDS2 = {
      $pattern: /(`?)[A-Za-z0-9_]+\b/,
      keyword: "do while select delete by update from",
      literal: "0b 1b",
      built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
      type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
    };
    return {
      name: "Q",
      aliases: [
        "k",
        "kdb"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = q2;
});

// node_modules/highlight.js/lib/languages/qml.js
var require_qml = __commonJS((exports, module) => {
  var qml = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = {
      keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
      literal: "true false null undefined NaN Infinity",
      built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
    };
    const QML_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9\\._]*";
    const PROPERTY = {
      className: "keyword",
      begin: "\\bproperty\\b",
      starts: {
        className: "string",
        end: "(:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    };
    const SIGNAL = {
      className: "keyword",
      begin: "\\bsignal\\b",
      starts: {
        className: "string",
        end: "(\\(|:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    };
    const ID_ID = {
      className: "attribute",
      begin: "\\bid\\s*:",
      starts: {
        className: "string",
        end: QML_IDENT_RE,
        returnEnd: false
      }
    };
    const QML_ATTRIBUTE = {
      begin: QML_IDENT_RE + "\\s*:",
      returnBegin: true,
      contains: [
        {
          className: "attribute",
          begin: QML_IDENT_RE,
          end: "\\s*:",
          excludeEnd: true,
          relevance: 0
        }
      ],
      relevance: 0
    };
    const QML_OBJECT = {
      begin: regex6.concat(QML_IDENT_RE, /\s*\{/),
      end: /\{/,
      returnBegin: true,
      relevance: 0,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE })]
    };
    return {
      name: "QML",
      aliases: ["qt"],
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        {
          className: "meta",
          begin: /^\s*['"]use (strict|asm)['"]/
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: "\\$\\{",
              end: "\\}"
            }
          ]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          variants: [
            { begin: "\\b(0[bB][01]+)" },
            { begin: "\\b(0[oO][0-7]+)" },
            { begin: hljs.C_NUMBER_RE }
          ],
          relevance: 0
        },
        {
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.REGEXP_MODE,
            {
              begin: /</,
              end: />\s*[);\]]/,
              relevance: 0,
              subLanguage: "xml"
            }
          ],
          relevance: 0
        },
        SIGNAL,
        PROPERTY,
        {
          className: "function",
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: [
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            }
          ],
          illegal: /\[|%/
        },
        {
          begin: "\\." + hljs.IDENT_RE,
          relevance: 0
        },
        ID_ID,
        QML_ATTRIBUTE,
        QML_OBJECT
      ],
      illegal: /#/
    };
  };
  module.exports = qml;
});

// node_modules/highlight.js/lib/languages/r.js
var require_r = __commonJS((exports, module) => {
  var r = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
    const NUMBER_TYPES_RE = regex6.either(/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/, /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/, /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/);
    const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
    const PUNCTUATION_RE = regex6.either(/[()]/, /[{}]/, /\[\[/, /[[\]]/, /\\/, /,/);
    return {
      name: "R",
      keywords: {
        $pattern: IDENT_RE,
        keyword: "function if in break next repeat else for while",
        literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
        built_in: "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
      },
      contains: [
        hljs.COMMENT(/#'/, /$/, { contains: [
          {
            scope: "doctag",
            match: /@examples/,
            starts: {
              end: regex6.lookahead(regex6.either(/\n^#'\s*(?=@[a-zA-Z]+)/, /\n^(?!#')/)),
              endsParent: true
            }
          },
          {
            scope: "doctag",
            begin: "@param",
            end: /$/,
            contains: [
              {
                scope: "variable",
                variants: [
                  { match: IDENT_RE },
                  { match: /`(?:\\.|[^`\\])+`/ }
                ],
                endsParent: true
              }
            ]
          },
          {
            scope: "doctag",
            match: /@[a-zA-Z]+/
          },
          {
            scope: "keyword",
            match: /\\[a-zA-Z]+/
          }
        ] }),
        hljs.HASH_COMMENT_MODE,
        {
          scope: "string",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\(/,
              end: /\)(-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\{/,
              end: /\}(-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\[/,
              end: /\](-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\(/,
              end: /\)(-*)'/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\{/,
              end: /\}(-*)'/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\[/,
              end: /\](-*)'/
            }),
            {
              begin: '"',
              end: '"',
              relevance: 0
            },
            {
              begin: "'",
              end: "'",
              relevance: 0
            }
          ]
        },
        {
          relevance: 0,
          variants: [
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                OPERATORS_RE,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                /%[^%]*%/,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: {
                1: "punctuation",
                2: "number"
              },
              match: [
                PUNCTUATION_RE,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: { 2: "number" },
              match: [
                /[^a-zA-Z0-9._]|^/,
                NUMBER_TYPES_RE
              ]
            }
          ]
        },
        {
          scope: { 3: "operator" },
          match: [
            IDENT_RE,
            /\s+/,
            /<-/,
            /\s+/
          ]
        },
        {
          scope: "operator",
          relevance: 0,
          variants: [
            { match: OPERATORS_RE },
            { match: /%[^%]*%/ }
          ]
        },
        {
          scope: "punctuation",
          relevance: 0,
          match: PUNCTUATION_RE
        },
        {
          begin: "`",
          end: "`",
          contains: [{ begin: /\\./ }]
        }
      ]
    };
  };
  module.exports = r;
});

// node_modules/highlight.js/lib/languages/reasonml.js
var require_reasonml = __commonJS((exports, module) => {
  var reasonml = function(hljs) {
    const BUILT_IN_TYPES = [
      "array",
      "bool",
      "bytes",
      "char",
      "exn|5",
      "float",
      "int",
      "int32",
      "int64",
      "list",
      "lazy_t|5",
      "nativeint|5",
      "ref",
      "string",
      "unit"
    ];
    return {
      name: "ReasonML",
      aliases: ["re"],
      keywords: {
        $pattern: /[a-z_]\w*!?/,
        keyword: [
          "and",
          "as",
          "asr",
          "assert",
          "begin",
          "class",
          "constraint",
          "do",
          "done",
          "downto",
          "else",
          "end",
          "esfun",
          "exception",
          "external",
          "for",
          "fun",
          "function",
          "functor",
          "if",
          "in",
          "include",
          "inherit",
          "initializer",
          "land",
          "lazy",
          "let",
          "lor",
          "lsl",
          "lsr",
          "lxor",
          "mod",
          "module",
          "mutable",
          "new",
          "nonrec",
          "object",
          "of",
          "open",
          "or",
          "pri",
          "pub",
          "rec",
          "sig",
          "struct",
          "switch",
          "then",
          "to",
          "try",
          "type",
          "val",
          "virtual",
          "when",
          "while",
          "with"
        ],
        built_in: BUILT_IN_TYPES,
        literal: ["true", "false"]
      },
      illegal: /(:-|:=|\$\{|\+=)/,
      contains: [
        {
          scope: "literal",
          match: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
        {
          scope: "symbol",
          match: /\'[A-Za-z_](?!\')[\w\']*/
        },
        {
          scope: "type",
          match: /`[A-Z][\w\']*/
        },
        {
          scope: "type",
          match: /\b[A-Z][\w\']*/,
          relevance: 0
        },
        {
          match: /[a-z_]\w*\'[\w\']*/,
          relevance: 0
        },
        {
          scope: "operator",
          match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
          relevance: 0
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          scope: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          scope: "number",
          variants: [
            { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
            { match: /\b0[oO][0-7_]+[Lln]?/ },
            { match: /\b0[bB][01_]+[Lln]?/ },
            { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }
          ],
          relevance: 0
        }
      ]
    };
  };
  module.exports = reasonml;
});

// node_modules/highlight.js/lib/languages/rib.js
var require_rib = __commonJS((exports, module) => {
  var rib = function(hljs) {
    return {
      name: "RenderMan RIB",
      keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
      illegal: "</",
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
  };
  module.exports = rib;
});

// node_modules/highlight.js/lib/languages/roboconf.js
var require_roboconf = __commonJS((exports, module) => {
  var roboconf = function(hljs) {
    const IDENTIFIER = "[a-zA-Z-_][^\\n{]+\\{";
    const PROPERTY = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: true,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: true,
      keywords: "import",
      contains: [
        {
          begin: "^facet " + IDENTIFIER,
          end: /\}/,
          keywords: "facet",
          contains: [
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        {
          begin: "^\\s*instance of " + IDENTIFIER,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        {
          begin: "^" + IDENTIFIER,
          end: /\}/,
          contains: [
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        hljs.HASH_COMMENT_MODE
      ]
    };
  };
  module.exports = roboconf;
});

// node_modules/highlight.js/lib/languages/routeros.js
var require_routeros = __commonJS((exports, module) => {
  var routeros = function(hljs) {
    const STATEMENTS = "foreach do while for if from to step else on-error and or not in";
    const GLOBAL_COMMANDS = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime";
    const COMMON_COMMANDS = "add remove enable disable set get print export edit find run debug error info warning";
    const LITERALS = "true false yes no nothing nil null";
    const OBJECTS = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw";
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VAR,
        {
          className: "variable",
          begin: /\$\(/,
          end: /\)/,
          contains: [hljs.BACKSLASH_ESCAPE]
        }
      ]
    };
    const APOS_STRING = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    return {
      name: "MikroTik RouterOS script",
      aliases: ["mikrotik"],
      case_insensitive: true,
      keywords: {
        $pattern: /:?[\w-]+/,
        literal: LITERALS,
        keyword: STATEMENTS + " :" + STATEMENTS.split(" ").join(" :") + " :" + GLOBAL_COMMANDS.split(" ").join(" :")
      },
      contains: [
        {
          variants: [
            {
              begin: /\/\*/,
              end: /\*\//
            },
            {
              begin: /\/\//,
              end: /$/
            },
            {
              begin: /<\//,
              end: />/
            }
          ],
          illegal: /./
        },
        hljs.COMMENT("^#", "$"),
        QUOTE_STRING,
        APOS_STRING,
        VAR,
        {
          begin: /[\w-]+=([^\s{}[\]()>]+)/,
          relevance: 0,
          returnBegin: true,
          contains: [
            {
              className: "attribute",
              begin: /[^=]+/
            },
            {
              begin: /=/,
              endsWithParent: true,
              relevance: 0,
              contains: [
                QUOTE_STRING,
                APOS_STRING,
                VAR,
                {
                  className: "literal",
                  begin: "\\b(" + LITERALS.split(" ").join("|") + ")\\b"
                },
                {
                  begin: /("[^"]*"|[^\s{}[\]]+)/
                }
              ]
            }
          ]
        },
        {
          className: "number",
          begin: /\*[0-9a-fA-F]+/
        },
        {
          begin: "\\b(" + COMMON_COMMANDS.split(" ").join("|") + ")([\\s[(\\]|])",
          returnBegin: true,
          contains: [
            {
              className: "built_in",
              begin: /\w+/
            }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "(\\.\\./|/|\\s)((" + OBJECTS.split(" ").join("|") + ");?\\s)+" },
            {
              begin: /\.\./,
              relevance: 0
            }
          ]
        }
      ]
    };
  };
  module.exports = routeros;
});

// node_modules/highlight.js/lib/languages/rsl.js
var require_rsl = __commonJS((exports, module) => {
  var rsl = function(hljs) {
    const BUILT_INS = [
      "abs",
      "acos",
      "ambient",
      "area",
      "asin",
      "atan",
      "atmosphere",
      "attribute",
      "calculatenormal",
      "ceil",
      "cellnoise",
      "clamp",
      "comp",
      "concat",
      "cos",
      "degrees",
      "depth",
      "Deriv",
      "diffuse",
      "distance",
      "Du",
      "Dv",
      "environment",
      "exp",
      "faceforward",
      "filterstep",
      "floor",
      "format",
      "fresnel",
      "incident",
      "length",
      "lightsource",
      "log",
      "match",
      "max",
      "min",
      "mod",
      "noise",
      "normalize",
      "ntransform",
      "opposite",
      "option",
      "phong",
      "pnoise",
      "pow",
      "printf",
      "ptlined",
      "radians",
      "random",
      "reflect",
      "refract",
      "renderinfo",
      "round",
      "setcomp",
      "setxcomp",
      "setycomp",
      "setzcomp",
      "shadow",
      "sign",
      "sin",
      "smoothstep",
      "specular",
      "specularbrdf",
      "spline",
      "sqrt",
      "step",
      "tan",
      "texture",
      "textureinfo",
      "trace",
      "transform",
      "vtransform",
      "xcomp",
      "ycomp",
      "zcomp"
    ];
    const TYPES = [
      "matrix",
      "float",
      "color",
      "point",
      "normal",
      "vector"
    ];
    const KEYWORDS2 = [
      "while",
      "for",
      "if",
      "do",
      "return",
      "else",
      "break",
      "extern",
      "continue"
    ];
    const CLASS_DEFINITION = {
      match: [
        /(surface|displacement|light|volume|imager)/,
        /\s+/,
        hljs.IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "RenderMan RSL",
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS,
        type: TYPES
      },
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        CLASS_DEFINITION,
        {
          beginKeywords: "illuminate illuminance gather",
          end: "\\("
        }
      ]
    };
  };
  module.exports = rsl;
});

// node_modules/highlight.js/lib/languages/ruleslanguage.js
var require_ruleslanguage = __commonJS((exports, module) => {
  var ruleslanguage = function(hljs) {
    return {
      name: "Oracle Rules Language",
      keywords: {
        keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
        built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "literal",
          variants: [
            {
              begin: "#\\s+",
              relevance: 0
            },
            { begin: "#[a-zA-Z .]+" }
          ]
        }
      ]
    };
  };
  module.exports = ruleslanguage;
});

// node_modules/highlight.js/lib/languages/rust.js
var require_rust = __commonJS((exports, module) => {
  var rust = function(hljs) {
    const regex6 = hljs.regex;
    const FUNCTION_INVOKE = {
      className: "title.function.invoke",
      relevance: 0,
      begin: regex6.concat(/\b/, /(?!let|for|while|if|else|match\b)/, hljs.IDENT_RE, regex6.lookahead(/\s*\(/))
    };
    const NUMBER_SUFFIX = "([ui](8|16|32|64|128|size)|f(32|64))?";
    const KEYWORDS2 = [
      "abstract",
      "as",
      "async",
      "await",
      "become",
      "box",
      "break",
      "const",
      "continue",
      "crate",
      "do",
      "dyn",
      "else",
      "enum",
      "extern",
      "false",
      "final",
      "fn",
      "for",
      "if",
      "impl",
      "in",
      "let",
      "loop",
      "macro",
      "match",
      "mod",
      "move",
      "mut",
      "override",
      "priv",
      "pub",
      "ref",
      "return",
      "self",
      "Self",
      "static",
      "struct",
      "super",
      "trait",
      "true",
      "try",
      "type",
      "typeof",
      "unsafe",
      "unsized",
      "use",
      "virtual",
      "where",
      "while",
      "yield"
    ];
    const LITERALS = [
      "true",
      "false",
      "Some",
      "None",
      "Ok",
      "Err"
    ];
    const BUILTINS = [
      "drop ",
      "Copy",
      "Send",
      "Sized",
      "Sync",
      "Drop",
      "Fn",
      "FnMut",
      "FnOnce",
      "ToOwned",
      "Clone",
      "Debug",
      "PartialEq",
      "PartialOrd",
      "Eq",
      "Ord",
      "AsRef",
      "AsMut",
      "Into",
      "From",
      "Default",
      "Iterator",
      "Extend",
      "IntoIterator",
      "DoubleEndedIterator",
      "ExactSizeIterator",
      "SliceConcatExt",
      "ToString",
      "assert!",
      "assert_eq!",
      "bitflags!",
      "bytes!",
      "cfg!",
      "col!",
      "concat!",
      "concat_idents!",
      "debug_assert!",
      "debug_assert_eq!",
      "env!",
      "eprintln!",
      "panic!",
      "file!",
      "format!",
      "format_args!",
      "include_bytes!",
      "include_str!",
      "line!",
      "local_data_key!",
      "module_path!",
      "option_env!",
      "print!",
      "println!",
      "select!",
      "stringify!",
      "try!",
      "unimplemented!",
      "unreachable!",
      "vec!",
      "write!",
      "writeln!",
      "macro_rules!",
      "assert_ne!",
      "debug_assert_ne!"
    ];
    const TYPES = [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usize",
      "f32",
      "f64",
      "str",
      "char",
      "bool",
      "Box",
      "Option",
      "Result",
      "String",
      "Vec"
    ];
    return {
      name: "Rust",
      aliases: ["rs"],
      keywords: {
        $pattern: hljs.IDENT_RE + "!?",
        type: TYPES,
        keyword: KEYWORDS2,
        literal: LITERALS,
        built_in: BUILTINS
      },
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {
          begin: /b?"/,
          illegal: null
        }),
        {
          className: "string",
          variants: [
            { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
            { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
          ]
        },
        {
          className: "symbol",
          begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
        },
        {
          className: "number",
          variants: [
            { begin: "\\b0b([01_]+)" + NUMBER_SUFFIX },
            { begin: "\\b0o([0-7_]+)" + NUMBER_SUFFIX },
            { begin: "\\b0x([A-Fa-f0-9_]+)" + NUMBER_SUFFIX },
            { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + NUMBER_SUFFIX }
          ],
          relevance: 0
        },
        {
          begin: [
            /fn/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.function"
          }
        },
        {
          className: "meta",
          begin: "#!?\\[",
          end: "\\]",
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          begin: [
            /let/,
            /\s+/,
            /(?:mut\s+)?/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "keyword",
            4: "variable"
          }
        },
        {
          begin: [
            /for/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE,
            /\s+/,
            /in/
          ],
          className: {
            1: "keyword",
            3: "variable",
            5: "keyword"
          }
        },
        {
          begin: [
            /type/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: [
            /(?:trait|enum|struct|union|impl|for)/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: hljs.IDENT_RE + "::",
          keywords: {
            keyword: "Self",
            built_in: BUILTINS,
            type: TYPES
          }
        },
        {
          className: "punctuation",
          begin: "->"
        },
        FUNCTION_INVOKE
      ]
    };
  };
  module.exports = rust;
});

// node_modules/highlight.js/lib/languages/sas.js
var require_sas = __commonJS((exports, module) => {
  var sas = function(hljs) {
    const regex6 = hljs.regex;
    const SAS_KEYWORDS = [
      "do",
      "if",
      "then",
      "else",
      "end",
      "until",
      "while",
      "abort",
      "array",
      "attrib",
      "by",
      "call",
      "cards",
      "cards4",
      "catname",
      "continue",
      "datalines",
      "datalines4",
      "delete",
      "delim",
      "delimiter",
      "display",
      "dm",
      "drop",
      "endsas",
      "error",
      "file",
      "filename",
      "footnote",
      "format",
      "goto",
      "in",
      "infile",
      "informat",
      "input",
      "keep",
      "label",
      "leave",
      "length",
      "libname",
      "link",
      "list",
      "lostcard",
      "merge",
      "missing",
      "modify",
      "options",
      "output",
      "out",
      "page",
      "put",
      "redirect",
      "remove",
      "rename",
      "replace",
      "retain",
      "return",
      "select",
      "set",
      "skip",
      "startsas",
      "stop",
      "title",
      "update",
      "waitsas",
      "where",
      "window",
      "x|0",
      "systask",
      "add",
      "and",
      "alter",
      "as",
      "cascade",
      "check",
      "create",
      "delete",
      "describe",
      "distinct",
      "drop",
      "foreign",
      "from",
      "group",
      "having",
      "index",
      "insert",
      "into",
      "in",
      "key",
      "like",
      "message",
      "modify",
      "msgtype",
      "not",
      "null",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "reset",
      "restrict",
      "select",
      "set",
      "table",
      "unique",
      "update",
      "validate",
      "view",
      "where"
    ];
    const FUNCTIONS = [
      "abs",
      "addr",
      "airy",
      "arcos",
      "arsin",
      "atan",
      "attrc",
      "attrn",
      "band",
      "betainv",
      "blshift",
      "bnot",
      "bor",
      "brshift",
      "bxor",
      "byte",
      "cdf",
      "ceil",
      "cexist",
      "cinv",
      "close",
      "cnonct",
      "collate",
      "compbl",
      "compound",
      "compress",
      "cos",
      "cosh",
      "css",
      "curobs",
      "cv",
      "daccdb",
      "daccdbsl",
      "daccsl",
      "daccsyd",
      "dacctab",
      "dairy",
      "date",
      "datejul",
      "datepart",
      "datetime",
      "day",
      "dclose",
      "depdb",
      "depdbsl",
      "depdbsl",
      "depsl",
      "depsl",
      "depsyd",
      "depsyd",
      "deptab",
      "deptab",
      "dequote",
      "dhms",
      "dif",
      "digamma",
      "dim",
      "dinfo",
      "dnum",
      "dopen",
      "doptname",
      "doptnum",
      "dread",
      "dropnote",
      "dsname",
      "erf",
      "erfc",
      "exist",
      "exp",
      "fappend",
      "fclose",
      "fcol",
      "fdelete",
      "fetch",
      "fetchobs",
      "fexist",
      "fget",
      "fileexist",
      "filename",
      "fileref",
      "finfo",
      "finv",
      "fipname",
      "fipnamel",
      "fipstate",
      "floor",
      "fnonct",
      "fnote",
      "fopen",
      "foptname",
      "foptnum",
      "fpoint",
      "fpos",
      "fput",
      "fread",
      "frewind",
      "frlen",
      "fsep",
      "fuzz",
      "fwrite",
      "gaminv",
      "gamma",
      "getoption",
      "getvarc",
      "getvarn",
      "hbound",
      "hms",
      "hosthelp",
      "hour",
      "ibessel",
      "index",
      "indexc",
      "indexw",
      "input",
      "inputc",
      "inputn",
      "int",
      "intck",
      "intnx",
      "intrr",
      "irr",
      "jbessel",
      "juldate",
      "kurtosis",
      "lag",
      "lbound",
      "left",
      "length",
      "lgamma",
      "libname",
      "libref",
      "log",
      "log10",
      "log2",
      "logpdf",
      "logpmf",
      "logsdf",
      "lowcase",
      "max",
      "mdy",
      "mean",
      "min",
      "minute",
      "mod",
      "month",
      "mopen",
      "mort",
      "n",
      "netpv",
      "nmiss",
      "normal",
      "note",
      "npv",
      "open",
      "ordinal",
      "pathname",
      "pdf",
      "peek",
      "peekc",
      "pmf",
      "point",
      "poisson",
      "poke",
      "probbeta",
      "probbnml",
      "probchi",
      "probf",
      "probgam",
      "probhypr",
      "probit",
      "probnegb",
      "probnorm",
      "probt",
      "put",
      "putc",
      "putn",
      "qtr",
      "quote",
      "ranbin",
      "rancau",
      "ranexp",
      "rangam",
      "range",
      "rank",
      "rannor",
      "ranpoi",
      "rantbl",
      "rantri",
      "ranuni",
      "repeat",
      "resolve",
      "reverse",
      "rewind",
      "right",
      "round",
      "saving",
      "scan",
      "sdf",
      "second",
      "sign",
      "sin",
      "sinh",
      "skewness",
      "soundex",
      "spedis",
      "sqrt",
      "std",
      "stderr",
      "stfips",
      "stname",
      "stnamel",
      "substr",
      "sum",
      "symget",
      "sysget",
      "sysmsg",
      "sysprod",
      "sysrc",
      "system",
      "tan",
      "tanh",
      "time",
      "timepart",
      "tinv",
      "tnonct",
      "today",
      "translate",
      "tranwrd",
      "trigamma",
      "trim",
      "trimn",
      "trunc",
      "uniform",
      "upcase",
      "uss",
      "var",
      "varfmt",
      "varinfmt",
      "varlabel",
      "varlen",
      "varname",
      "varnum",
      "varray",
      "varrayx",
      "vartype",
      "verify",
      "vformat",
      "vformatd",
      "vformatdx",
      "vformatn",
      "vformatnx",
      "vformatw",
      "vformatwx",
      "vformatx",
      "vinarray",
      "vinarrayx",
      "vinformat",
      "vinformatd",
      "vinformatdx",
      "vinformatn",
      "vinformatnx",
      "vinformatw",
      "vinformatwx",
      "vinformatx",
      "vlabel",
      "vlabelx",
      "vlength",
      "vlengthx",
      "vname",
      "vnamex",
      "vtype",
      "vtypex",
      "weekday",
      "year",
      "yyq",
      "zipfips",
      "zipname",
      "zipnamel",
      "zipstate"
    ];
    const MACRO_FUNCTIONS = [
      "bquote",
      "nrbquote",
      "cmpres",
      "qcmpres",
      "compstor",
      "datatyp",
      "display",
      "do",
      "else",
      "end",
      "eval",
      "global",
      "goto",
      "if",
      "index",
      "input",
      "keydef",
      "label",
      "left",
      "length",
      "let",
      "local",
      "lowcase",
      "macro",
      "mend",
      "nrbquote",
      "nrquote",
      "nrstr",
      "put",
      "qcmpres",
      "qleft",
      "qlowcase",
      "qscan",
      "qsubstr",
      "qsysfunc",
      "qtrim",
      "quote",
      "qupcase",
      "scan",
      "str",
      "substr",
      "superq",
      "syscall",
      "sysevalf",
      "sysexec",
      "sysfunc",
      "sysget",
      "syslput",
      "sysprod",
      "sysrc",
      "sysrput",
      "then",
      "to",
      "trim",
      "unquote",
      "until",
      "upcase",
      "verify",
      "while",
      "window"
    ];
    const LITERALS = [
      "null",
      "missing",
      "_all_",
      "_automatic_",
      "_character_",
      "_infile_",
      "_n_",
      "_name_",
      "_null_",
      "_numeric_",
      "_user_",
      "_webout_"
    ];
    return {
      name: "SAS",
      case_insensitive: true,
      keywords: {
        literal: LITERALS,
        keyword: SAS_KEYWORDS
      },
      contains: [
        {
          className: "keyword",
          begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
        },
        {
          className: "variable",
          begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
        },
        {
          begin: [
            /^\s*/,
            /datalines;|cards;/,
            /(?:.*\n)+/,
            /^\s*;\s*$/
          ],
          className: {
            2: "keyword",
            3: "string"
          }
        },
        {
          begin: [
            /%mend|%macro/,
            /\s+/,
            /[a-zA-Z_&][a-zA-Z0-9_]*/
          ],
          className: {
            1: "built_in",
            3: "title.function"
          }
        },
        {
          className: "built_in",
          begin: "%" + regex6.either(...MACRO_FUNCTIONS)
        },
        {
          className: "title.function",
          begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
        },
        {
          className: "meta",
          begin: regex6.either(...FUNCTIONS) + "(?=\\()"
        },
        {
          className: "string",
          variants: [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        },
        hljs.COMMENT("\\*", ";"),
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  };
  module.exports = sas;
});

// node_modules/highlight.js/lib/languages/scala.js
var require_scala = __commonJS((exports, module) => {
  var scala = function(hljs) {
    const regex6 = hljs.regex;
    const ANNOTATION = {
      className: "meta",
      begin: "@[A-Za-z]+"
    };
    const SUBST = {
      className: "subst",
      variants: [
        { begin: "\\$[A-Za-z0-9_]+" },
        {
          begin: /\$\{/,
          end: /\}/
        }
      ]
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""'
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '[a-z]+"',
          end: '"',
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ]
        },
        {
          className: "string",
          begin: '[a-z]+"""',
          end: '"""',
          contains: [SUBST],
          relevance: 10
        }
      ]
    };
    const TYPE = {
      className: "type",
      begin: "\\b[A-Z][A-Za-z0-9_]*",
      relevance: 0
    };
    const NAME = {
      className: "title",
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
      relevance: 0
    };
    const CLASS = {
      className: "class",
      beginKeywords: "class object trait type",
      end: /[:={\[\n;]/,
      excludeEnd: true,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          beginKeywords: "extends with",
          relevance: 10
        },
        {
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            TYPE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            TYPE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        NAME
      ]
    };
    const METHOD = {
      className: "function",
      beginKeywords: "def",
      end: regex6.lookahead(/[:={\[(\n;]/),
      contains: [NAME]
    };
    const EXTENSION = {
      begin: [
        /^\s*/,
        "extension",
        /\s+(?=[[(])/
      ],
      beginScope: { 2: "keyword" }
    };
    const END = {
      begin: [
        /^\s*/,
        /end/,
        /\s+/,
        /(extension\b)?/
      ],
      beginScope: {
        2: "keyword",
        4: "keyword"
      }
    };
    const INLINE_MODES = [
      { match: /\.inline\b/ },
      {
        begin: /\binline(?=\s)/,
        keywords: "inline"
      }
    ];
    const USING_PARAM_CLAUSE = {
      begin: [
        /\(\s*/,
        /using/,
        /\s+(?!\))/
      ],
      beginScope: { 2: "keyword" }
    };
    const DIRECTIVE_VALUE = {
      className: "string",
      begin: /\S+/
    };
    const USING_DIRECTIVE = {
      begin: [
        "//>",
        /\s+/,
        /using/,
        /\s+/,
        /\S+/
      ],
      beginScope: {
        1: "comment",
        3: "keyword",
        5: "type"
      },
      end: /$/,
      contains: [
        DIRECTIVE_VALUE
      ]
    };
    return {
      name: "Scala",
      keywords: {
        literal: "true false null",
        keyword: "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent"
      },
      contains: [
        USING_DIRECTIVE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING,
        TYPE,
        METHOD,
        CLASS,
        hljs.C_NUMBER_MODE,
        EXTENSION,
        END,
        ...INLINE_MODES,
        USING_PARAM_CLAUSE,
        ANNOTATION
      ]
    };
  };
  module.exports = scala;
});

// node_modules/highlight.js/lib/languages/scheme.js
var require_scheme = __commonJS((exports, module) => {
  var scheme = function(hljs) {
    const SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
    const SCHEME_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+([./]\\d+)?";
    const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + "[+\\-]" + SCHEME_SIMPLE_NUMBER_RE + "i";
    const KEYWORDS2 = {
      $pattern: SCHEME_IDENT_RE,
      built_in: "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
    };
    const LITERAL = {
      className: "literal",
      begin: "(#t|#f|#\\\\" + SCHEME_IDENT_RE + "|#\\\\.)"
    };
    const NUMBER = {
      className: "number",
      variants: [
        {
          begin: SCHEME_SIMPLE_NUMBER_RE,
          relevance: 0
        },
        {
          begin: SCHEME_COMPLEX_NUMBER_RE,
          relevance: 0
        },
        { begin: "#b[0-1]+(/[0-1]+)?" },
        { begin: "#o[0-7]+(/[0-7]+)?" },
        { begin: "#x[0-9a-f]+(/[0-9a-f]+)?" }
      ]
    };
    const STRING = hljs.QUOTE_STRING_MODE;
    const COMMENT_MODES = [
      hljs.COMMENT(";", "$", { relevance: 0 }),
      hljs.COMMENT("#\\|", "\\|#")
    ];
    const IDENT = {
      begin: SCHEME_IDENT_RE,
      relevance: 0
    };
    const QUOTED_IDENT = {
      className: "symbol",
      begin: "\'" + SCHEME_IDENT_RE
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const QUOTED_LIST = {
      variants: [
        { begin: /'/ },
        { begin: "`" }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            LITERAL,
            STRING,
            NUMBER,
            IDENT,
            QUOTED_IDENT
          ]
        }
      ]
    };
    const NAME = {
      className: "name",
      relevance: 0,
      begin: SCHEME_IDENT_RE,
      keywords: KEYWORDS2
    };
    const LAMBDA = {
      begin: /lambda/,
      endsWithParent: true,
      returnBegin: true,
      contains: [
        NAME,
        {
          endsParent: true,
          variants: [
            {
              begin: /\(/,
              end: /\)/
            },
            {
              begin: /\[/,
              end: /\]/
            }
          ],
          contains: [IDENT]
        }
      ]
    };
    const LIST = {
      variants: [
        {
          begin: "\\(",
          end: "\\)"
        },
        {
          begin: "\\[",
          end: "\\]"
        }
      ],
      contains: [
        LAMBDA,
        NAME,
        BODY
      ]
    };
    BODY.contains = [
      LITERAL,
      NUMBER,
      STRING,
      IDENT,
      QUOTED_IDENT,
      QUOTED_LIST,
      LIST
    ].concat(COMMENT_MODES);
    return {
      name: "Scheme",
      aliases: ["scm"],
      illegal: /\S/,
      contains: [
        hljs.SHEBANG(),
        NUMBER,
        STRING,
        QUOTED_IDENT,
        QUOTED_LIST,
        LIST
      ].concat(COMMENT_MODES)
    };
  };
  module.exports = scheme;
});

// node_modules/highlight.js/lib/languages/scilab.js
var require_scilab = __commonJS((exports, module) => {
  var scilab = function(hljs) {
    const COMMON_CONTAINS = [
      hljs.C_NUMBER_MODE,
      {
        className: "string",
        begin: "\'|\"",
        end: "\'|\"",
        contains: [
          hljs.BACKSLASH_ESCAPE,
          { begin: "\'\'" }
        ]
      }
    ];
    return {
      name: "Scilab",
      aliases: ["sci"],
      keywords: {
        $pattern: /%?\w+/,
        keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
        literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
        built_in: "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
      },
      illegal: '("|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.\']+",
          relevance: 0
        },
        {
          begin: "\\[",
          end: "\\][\\.\']*",
          relevance: 0,
          contains: COMMON_CONTAINS
        },
        hljs.COMMENT("//", "$")
      ].concat(COMMON_CONTAINS)
    };
  };
  module.exports = scilab;
});

// node_modules/highlight.js/lib/languages/scss.js
var require_scss = __commonJS((exports, module) => {
  var scss = function(hljs) {
    const modes = MODES(hljs);
    const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;
    const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;
    const AT_IDENTIFIER = "@[a-z-]+";
    const AT_MODIFIERS = "and or not only";
    const IDENT_RE = "[a-zA-Z-][a-zA-Z0-9_-]*";
    const VARIABLE = {
      className: "variable",
      begin: "(\\$" + IDENT_RE + ")\\b",
      relevance: 0
    };
    return {
      name: "SCSS",
      case_insensitive: true,
      illegal: "[=/|\']",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        modes.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: "#[A-Za-z0-9_-]+",
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\.[A-Za-z0-9_-]+",
          relevance: 0
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-tag",
          begin: "\\b(" + TAGS.join("|") + ")\\b",
          relevance: 0
        },
        {
          className: "selector-pseudo",
          begin: ":(" + PSEUDO_CLASSES$1.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + PSEUDO_ELEMENTS$1.join("|") + ")"
        },
        VARIABLE,
        {
          begin: /\(/,
          end: /\)/,
          contains: [modes.CSS_NUMBER_MODE]
        },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b"
        },
        { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
        {
          begin: /:/,
          end: /[;}{]/,
          relevance: 0,
          contains: [
            modes.BLOCK_COMMENT,
            VARIABLE,
            modes.HEXCOLOR,
            modes.CSS_NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            modes.IMPORTANT,
            modes.FUNCTION_DISPATCH
          ]
        },
        {
          begin: "@(page|font-face)",
          keywords: {
            $pattern: AT_IDENTIFIER,
            keyword: "@page @font-face"
          }
        },
        {
          begin: "@",
          end: "[{;]",
          returnBegin: true,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: AT_MODIFIERS,
            attribute: MEDIA_FEATURES.join(" ")
          },
          contains: [
            {
              begin: AT_IDENTIFIER,
              className: "keyword"
            },
            {
              begin: /[a-z-]+(?=:)/,
              className: "attribute"
            },
            VARIABLE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            modes.HEXCOLOR,
            modes.CSS_NUMBER_MODE
          ]
        },
        modes.FUNCTION_DISPATCH
      ]
    };
  };
  var MODES = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  var TAGS = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  var MEDIA_FEATURES = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ];
  var PSEUDO_CLASSES = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    "host",
    "host-context",
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    "lang",
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    "nth-child",
    "nth-col",
    "nth-last-child",
    "nth-last-col",
    "nth-last-of-type",
    "nth-of-type",
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
  ];
  var PSEUDO_ELEMENTS = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ];
  var ATTRIBUTES = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
  ].reverse();
  module.exports = scss;
});

// node_modules/highlight.js/lib/languages/shell.js
var require_shell = __commonJS((exports, module) => {
  var shell = function(hljs) {
    return {
      name: "Shell Session",
      aliases: [
        "console",
        "shellsession"
      ],
      contains: [
        {
          className: "meta.prompt",
          begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
          starts: {
            end: /[^\\](?=\s*$)/,
            subLanguage: "bash"
          }
        }
      ]
    };
  };
  module.exports = shell;
});

// node_modules/highlight.js/lib/languages/smali.js
var require_smali = __commonJS((exports, module) => {
  var smali = function(hljs) {
    const smali_instr_low_prio = [
      "add",
      "and",
      "cmp",
      "cmpg",
      "cmpl",
      "const",
      "div",
      "double",
      "float",
      "goto",
      "if",
      "int",
      "long",
      "move",
      "mul",
      "neg",
      "new",
      "nop",
      "not",
      "or",
      "rem",
      "return",
      "shl",
      "shr",
      "sput",
      "sub",
      "throw",
      "ushr",
      "xor"
    ];
    const smali_instr_high_prio = [
      "aget",
      "aput",
      "array",
      "check",
      "execute",
      "fill",
      "filled",
      "goto/16",
      "goto/32",
      "iget",
      "instance",
      "invoke",
      "iput",
      "monitor",
      "packed",
      "sget",
      "sparse"
    ];
    const smali_keywords = [
      "transient",
      "constructor",
      "abstract",
      "final",
      "synthetic",
      "public",
      "private",
      "protected",
      "static",
      "bridge",
      "system"
    ];
    return {
      name: "Smali",
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0
        },
        hljs.COMMENT("#", "$", { relevance: 0 }),
        {
          className: "keyword",
          variants: [
            { begin: "\\s*\\.end\\s[a-zA-Z0-9]*" },
            {
              begin: "^[ ]*\\.[a-zA-Z]*",
              relevance: 0
            },
            {
              begin: "\\s:[a-zA-Z_0-9]*",
              relevance: 0
            },
            { begin: "\\s(" + smali_keywords.join("|") + ")" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "\\s(" + smali_instr_low_prio.join("|") + ")\\s" },
            {
              begin: "\\s(" + smali_instr_low_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
              relevance: 10
            },
            {
              begin: "\\s(" + smali_instr_high_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
              relevance: 10
            }
          ]
        },
        {
          className: "class",
          begin: `L[^(;:
]*;`,
          relevance: 0
        },
        { begin: "[vp][0-9]+" }
      ]
    };
  };
  module.exports = smali;
});

// node_modules/highlight.js/lib/languages/smalltalk.js
var require_smalltalk = __commonJS((exports, module) => {
  var smalltalk = function(hljs) {
    const VAR_IDENT_RE = "[a-z][a-zA-Z0-9_]*";
    const CHAR = {
      className: "string",
      begin: "\\$.{1}"
    };
    const SYMBOL = {
      className: "symbol",
      begin: "#" + hljs.UNDERSCORE_IDENT_RE
    };
    return {
      name: "Smalltalk",
      aliases: ["st"],
      keywords: [
        "self",
        "super",
        "nil",
        "true",
        "false",
        "thisContext"
      ],
      contains: [
        hljs.COMMENT('"', '"'),
        hljs.APOS_STRING_MODE,
        {
          className: "type",
          begin: "\\b[A-Z][A-Za-z0-9_]*",
          relevance: 0
        },
        {
          begin: VAR_IDENT_RE + ":",
          relevance: 0
        },
        hljs.C_NUMBER_MODE,
        SYMBOL,
        CHAR,
        {
          begin: "\\|[ ]*" + VAR_IDENT_RE + "([ ]+" + VAR_IDENT_RE + ")*[ ]*\\|",
          returnBegin: true,
          end: /\|/,
          illegal: /\S/,
          contains: [{ begin: "(\\|[ ]*)?" + VAR_IDENT_RE }]
        },
        {
          begin: "#\\(",
          end: "\\)",
          contains: [
            hljs.APOS_STRING_MODE,
            CHAR,
            hljs.C_NUMBER_MODE,
            SYMBOL
          ]
        }
      ]
    };
  };
  module.exports = smalltalk;
});

// node_modules/highlight.js/lib/languages/sml.js
var require_sml = __commonJS((exports, module) => {
  var sml = function(hljs) {
    return {
      name: "SML (Standard ML)",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while",
        built_in: "array bool char exn int list option order real ref string substring vector unit word",
        literal: "true false NONE SOME LESS EQUAL GREATER nil"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        hljs.COMMENT("\\(\\*", "\\*\\)", { contains: ["self"] }),
        {
          className: "symbol",
          begin: "\'[A-Za-z_](?!\')[\\w\']*"
        },
        {
          className: "type",
          begin: "`[A-Z][\\w\']*"
        },
        {
          className: "type",
          begin: "\\b[A-Z][\\w\']*",
          relevance: 0
        },
        {
          begin: "[a-z_]\\w*\'[\\w\']*"
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /[-=]>/
        }
      ]
    };
  };
  module.exports = sml;
});

// node_modules/highlight.js/lib/languages/sqf.js
var require_sqf = __commonJS((exports, module) => {
  var sqf = function(hljs) {
    const VARIABLE = {
      className: "variable",
      begin: /\b_+[a-zA-Z]\w*/
    };
    const FUNCTION = {
      className: "title",
      begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
    };
    const STRINGS = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: '""',
              relevance: 0
            }
          ]
        },
        {
          begin: "\'",
          end: "\'",
          contains: [
            {
              begin: "\'\'",
              relevance: 0
            }
          ]
        }
      ]
    };
    const KEYWORDS2 = [
      "break",
      "breakWith",
      "breakOut",
      "breakTo",
      "case",
      "catch",
      "continue",
      "continueWith",
      "default",
      "do",
      "else",
      "exit",
      "exitWith",
      "for",
      "forEach",
      "from",
      "if",
      "local",
      "private",
      "switch",
      "step",
      "then",
      "throw",
      "to",
      "try",
      "waitUntil",
      "while",
      "with"
    ];
    const LITERAL = [
      "blufor",
      "civilian",
      "configNull",
      "controlNull",
      "displayNull",
      "diaryRecordNull",
      "east",
      "endl",
      "false",
      "grpNull",
      "independent",
      "lineBreak",
      "locationNull",
      "nil",
      "objNull",
      "opfor",
      "pi",
      "resistance",
      "scriptNull",
      "sideAmbientLife",
      "sideEmpty",
      "sideEnemy",
      "sideFriendly",
      "sideLogic",
      "sideUnknown",
      "taskNull",
      "teamMemberNull",
      "true",
      "west"
    ];
    const BUILT_IN = [
      "abs",
      "accTime",
      "acos",
      "action",
      "actionIDs",
      "actionKeys",
      "actionKeysEx",
      "actionKeysImages",
      "actionKeysNames",
      "actionKeysNamesArray",
      "actionName",
      "actionParams",
      "activateAddons",
      "activatedAddons",
      "activateKey",
      "activeTitleEffectParams",
      "add3DENConnection",
      "add3DENEventHandler",
      "add3DENLayer",
      "addAction",
      "addBackpack",
      "addBackpackCargo",
      "addBackpackCargoGlobal",
      "addBackpackGlobal",
      "addBinocularItem",
      "addCamShake",
      "addCuratorAddons",
      "addCuratorCameraArea",
      "addCuratorEditableObjects",
      "addCuratorEditingArea",
      "addCuratorPoints",
      "addEditorObject",
      "addEventHandler",
      "addForce",
      "addForceGeneratorRTD",
      "addGoggles",
      "addGroupIcon",
      "addHandgunItem",
      "addHeadgear",
      "addItem",
      "addItemCargo",
      "addItemCargoGlobal",
      "addItemPool",
      "addItemToBackpack",
      "addItemToUniform",
      "addItemToVest",
      "addLiveStats",
      "addMagazine",
      "addMagazineAmmoCargo",
      "addMagazineCargo",
      "addMagazineCargoGlobal",
      "addMagazineGlobal",
      "addMagazinePool",
      "addMagazines",
      "addMagazineTurret",
      "addMenu",
      "addMenuItem",
      "addMissionEventHandler",
      "addMPEventHandler",
      "addMusicEventHandler",
      "addonFiles",
      "addOwnedMine",
      "addPlayerScores",
      "addPrimaryWeaponItem",
      "addPublicVariableEventHandler",
      "addRating",
      "addResources",
      "addScore",
      "addScoreSide",
      "addSecondaryWeaponItem",
      "addSwitchableUnit",
      "addTeamMember",
      "addToRemainsCollector",
      "addTorque",
      "addUniform",
      "addUserActionEventHandler",
      "addVehicle",
      "addVest",
      "addWaypoint",
      "addWeapon",
      "addWeaponCargo",
      "addWeaponCargoGlobal",
      "addWeaponGlobal",
      "addWeaponItem",
      "addWeaponPool",
      "addWeaponTurret",
      "addWeaponWithAttachmentsCargo",
      "addWeaponWithAttachmentsCargoGlobal",
      "admin",
      "agent",
      "agents",
      "AGLToASL",
      "aimedAtTarget",
      "aimPos",
      "airDensityCurveRTD",
      "airDensityRTD",
      "airplaneThrottle",
      "airportSide",
      "AISFinishHeal",
      "alive",
      "all3DENEntities",
      "allActiveTitleEffects",
      "allAddonsInfo",
      "allAirports",
      "allControls",
      "allCurators",
      "allCutLayers",
      "allDead",
      "allDeadMen",
      "allDiaryRecords",
      "allDiarySubjects",
      "allDisplays",
      "allEnv3DSoundSources",
      "allGroups",
      "allLODs",
      "allMapMarkers",
      "allMines",
      "allMissionObjects",
      "allObjects",
      "allow3DMode",
      "allowCrewInImmobile",
      "allowCuratorLogicIgnoreAreas",
      "allowDamage",
      "allowDammage",
      "allowedService",
      "allowFileOperations",
      "allowFleeing",
      "allowGetIn",
      "allowService",
      "allowSprint",
      "allPlayers",
      "allSimpleObjects",
      "allSites",
      "allTurrets",
      "allUnits",
      "allUnitsUAV",
      "allUsers",
      "allVariables",
      "ambientTemperature",
      "ammo",
      "ammoOnPylon",
      "and",
      "animate",
      "animateBay",
      "animateDoor",
      "animatePylon",
      "animateSource",
      "animationNames",
      "animationPhase",
      "animationSourcePhase",
      "animationState",
      "apertureParams",
      "append",
      "apply",
      "armoryPoints",
      "arrayIntersect",
      "asin",
      "ASLToAGL",
      "ASLToATL",
      "assert",
      "assignAsCargo",
      "assignAsCargoIndex",
      "assignAsCommander",
      "assignAsDriver",
      "assignAsGunner",
      "assignAsTurret",
      "assignCurator",
      "assignedCargo",
      "assignedCommander",
      "assignedDriver",
      "assignedGroup",
      "assignedGunner",
      "assignedItems",
      "assignedTarget",
      "assignedTeam",
      "assignedVehicle",
      "assignedVehicleRole",
      "assignedVehicles",
      "assignItem",
      "assignTeam",
      "assignToAirport",
      "atan",
      "atan2",
      "atg",
      "ATLToASL",
      "attachedObject",
      "attachedObjects",
      "attachedTo",
      "attachObject",
      "attachTo",
      "attackEnabled",
      "awake",
      "backpack",
      "backpackCargo",
      "backpackContainer",
      "backpackItems",
      "backpackMagazines",
      "backpackSpaceFor",
      "behaviour",
      "benchmark",
      "bezierInterpolation",
      "binocular",
      "binocularItems",
      "binocularMagazine",
      "boundingBox",
      "boundingBoxReal",
      "boundingCenter",
      "brakesDisabled",
      "briefingName",
      "buildingExit",
      "buildingPos",
      "buldozer_EnableRoadDiag",
      "buldozer_IsEnabledRoadDiag",
      "buldozer_LoadNewRoads",
      "buldozer_reloadOperMap",
      "buttonAction",
      "buttonSetAction",
      "cadetMode",
      "calculatePath",
      "calculatePlayerVisibilityByFriendly",
      "call",
      "callExtension",
      "camCommand",
      "camCommit",
      "camCommitPrepared",
      "camCommitted",
      "camConstuctionSetParams",
      "camCreate",
      "camDestroy",
      "cameraEffect",
      "cameraEffectEnableHUD",
      "cameraInterest",
      "cameraOn",
      "cameraView",
      "campaignConfigFile",
      "camPreload",
      "camPreloaded",
      "camPrepareBank",
      "camPrepareDir",
      "camPrepareDive",
      "camPrepareFocus",
      "camPrepareFov",
      "camPrepareFovRange",
      "camPreparePos",
      "camPrepareRelPos",
      "camPrepareTarget",
      "camSetBank",
      "camSetDir",
      "camSetDive",
      "camSetFocus",
      "camSetFov",
      "camSetFovRange",
      "camSetPos",
      "camSetRelPos",
      "camSetTarget",
      "camTarget",
      "camUseNVG",
      "canAdd",
      "canAddItemToBackpack",
      "canAddItemToUniform",
      "canAddItemToVest",
      "cancelSimpleTaskDestination",
      "canDeployWeapon",
      "canFire",
      "canMove",
      "canSlingLoad",
      "canStand",
      "canSuspend",
      "canTriggerDynamicSimulation",
      "canUnloadInCombat",
      "canVehicleCargo",
      "captive",
      "captiveNum",
      "cbChecked",
      "cbSetChecked",
      "ceil",
      "channelEnabled",
      "cheatsEnabled",
      "checkAIFeature",
      "checkVisibility",
      "className",
      "clear3DENAttribute",
      "clear3DENInventory",
      "clearAllItemsFromBackpack",
      "clearBackpackCargo",
      "clearBackpackCargoGlobal",
      "clearForcesRTD",
      "clearGroupIcons",
      "clearItemCargo",
      "clearItemCargoGlobal",
      "clearItemPool",
      "clearMagazineCargo",
      "clearMagazineCargoGlobal",
      "clearMagazinePool",
      "clearOverlay",
      "clearRadio",
      "clearWeaponCargo",
      "clearWeaponCargoGlobal",
      "clearWeaponPool",
      "clientOwner",
      "closeDialog",
      "closeDisplay",
      "closeOverlay",
      "collapseObjectTree",
      "collect3DENHistory",
      "collectiveRTD",
      "collisionDisabledWith",
      "combatBehaviour",
      "combatMode",
      "commandArtilleryFire",
      "commandChat",
      "commander",
      "commandFire",
      "commandFollow",
      "commandFSM",
      "commandGetOut",
      "commandingMenu",
      "commandMove",
      "commandRadio",
      "commandStop",
      "commandSuppressiveFire",
      "commandTarget",
      "commandWatch",
      "comment",
      "commitOverlay",
      "compatibleItems",
      "compatibleMagazines",
      "compile",
      "compileFinal",
      "compileScript",
      "completedFSM",
      "composeText",
      "configClasses",
      "configFile",
      "configHierarchy",
      "configName",
      "configOf",
      "configProperties",
      "configSourceAddonList",
      "configSourceMod",
      "configSourceModList",
      "confirmSensorTarget",
      "connectTerminalToUAV",
      "connectToServer",
      "controlsGroupCtrl",
      "conversationDisabled",
      "copyFromClipboard",
      "copyToClipboard",
      "copyWaypoints",
      "cos",
      "count",
      "countEnemy",
      "countFriendly",
      "countSide",
      "countType",
      "countUnknown",
      "create3DENComposition",
      "create3DENEntity",
      "createAgent",
      "createCenter",
      "createDialog",
      "createDiaryLink",
      "createDiaryRecord",
      "createDiarySubject",
      "createDisplay",
      "createGearDialog",
      "createGroup",
      "createGuardedPoint",
      "createHashMap",
      "createHashMapFromArray",
      "createLocation",
      "createMarker",
      "createMarkerLocal",
      "createMenu",
      "createMine",
      "createMissionDisplay",
      "createMPCampaignDisplay",
      "createSimpleObject",
      "createSimpleTask",
      "createSite",
      "createSoundSource",
      "createTask",
      "createTeam",
      "createTrigger",
      "createUnit",
      "createVehicle",
      "createVehicleCrew",
      "createVehicleLocal",
      "crew",
      "ctAddHeader",
      "ctAddRow",
      "ctClear",
      "ctCurSel",
      "ctData",
      "ctFindHeaderRows",
      "ctFindRowHeader",
      "ctHeaderControls",
      "ctHeaderCount",
      "ctRemoveHeaders",
      "ctRemoveRows",
      "ctrlActivate",
      "ctrlAddEventHandler",
      "ctrlAngle",
      "ctrlAnimateModel",
      "ctrlAnimationPhaseModel",
      "ctrlAt",
      "ctrlAutoScrollDelay",
      "ctrlAutoScrollRewind",
      "ctrlAutoScrollSpeed",
      "ctrlBackgroundColor",
      "ctrlChecked",
      "ctrlClassName",
      "ctrlCommit",
      "ctrlCommitted",
      "ctrlCreate",
      "ctrlDelete",
      "ctrlEnable",
      "ctrlEnabled",
      "ctrlFade",
      "ctrlFontHeight",
      "ctrlForegroundColor",
      "ctrlHTMLLoaded",
      "ctrlIDC",
      "ctrlIDD",
      "ctrlMapAnimAdd",
      "ctrlMapAnimClear",
      "ctrlMapAnimCommit",
      "ctrlMapAnimDone",
      "ctrlMapCursor",
      "ctrlMapMouseOver",
      "ctrlMapPosition",
      "ctrlMapScale",
      "ctrlMapScreenToWorld",
      "ctrlMapSetPosition",
      "ctrlMapWorldToScreen",
      "ctrlModel",
      "ctrlModelDirAndUp",
      "ctrlModelScale",
      "ctrlMousePosition",
      "ctrlParent",
      "ctrlParentControlsGroup",
      "ctrlPosition",
      "ctrlRemoveAllEventHandlers",
      "ctrlRemoveEventHandler",
      "ctrlScale",
      "ctrlScrollValues",
      "ctrlSetActiveColor",
      "ctrlSetAngle",
      "ctrlSetAutoScrollDelay",
      "ctrlSetAutoScrollRewind",
      "ctrlSetAutoScrollSpeed",
      "ctrlSetBackgroundColor",
      "ctrlSetChecked",
      "ctrlSetDisabledColor",
      "ctrlSetEventHandler",
      "ctrlSetFade",
      "ctrlSetFocus",
      "ctrlSetFont",
      "ctrlSetFontH1",
      "ctrlSetFontH1B",
      "ctrlSetFontH2",
      "ctrlSetFontH2B",
      "ctrlSetFontH3",
      "ctrlSetFontH3B",
      "ctrlSetFontH4",
      "ctrlSetFontH4B",
      "ctrlSetFontH5",
      "ctrlSetFontH5B",
      "ctrlSetFontH6",
      "ctrlSetFontH6B",
      "ctrlSetFontHeight",
      "ctrlSetFontHeightH1",
      "ctrlSetFontHeightH2",
      "ctrlSetFontHeightH3",
      "ctrlSetFontHeightH4",
      "ctrlSetFontHeightH5",
      "ctrlSetFontHeightH6",
      "ctrlSetFontHeightSecondary",
      "ctrlSetFontP",
      "ctrlSetFontPB",
      "ctrlSetFontSecondary",
      "ctrlSetForegroundColor",
      "ctrlSetModel",
      "ctrlSetModelDirAndUp",
      "ctrlSetModelScale",
      "ctrlSetMousePosition",
      "ctrlSetPixelPrecision",
      "ctrlSetPosition",
      "ctrlSetPositionH",
      "ctrlSetPositionW",
      "ctrlSetPositionX",
      "ctrlSetPositionY",
      "ctrlSetScale",
      "ctrlSetScrollValues",
      "ctrlSetShadow",
      "ctrlSetStructuredText",
      "ctrlSetText",
      "ctrlSetTextColor",
      "ctrlSetTextColorSecondary",
      "ctrlSetTextSecondary",
      "ctrlSetTextSelection",
      "ctrlSetTooltip",
      "ctrlSetTooltipColorBox",
      "ctrlSetTooltipColorShade",
      "ctrlSetTooltipColorText",
      "ctrlSetTooltipMaxWidth",
      "ctrlSetURL",
      "ctrlSetURLOverlayMode",
      "ctrlShadow",
      "ctrlShow",
      "ctrlShown",
      "ctrlStyle",
      "ctrlText",
      "ctrlTextColor",
      "ctrlTextHeight",
      "ctrlTextSecondary",
      "ctrlTextSelection",
      "ctrlTextWidth",
      "ctrlTooltip",
      "ctrlType",
      "ctrlURL",
      "ctrlURLOverlayMode",
      "ctrlVisible",
      "ctRowControls",
      "ctRowCount",
      "ctSetCurSel",
      "ctSetData",
      "ctSetHeaderTemplate",
      "ctSetRowTemplate",
      "ctSetValue",
      "ctValue",
      "curatorAddons",
      "curatorCamera",
      "curatorCameraArea",
      "curatorCameraAreaCeiling",
      "curatorCoef",
      "curatorEditableObjects",
      "curatorEditingArea",
      "curatorEditingAreaType",
      "curatorMouseOver",
      "curatorPoints",
      "curatorRegisteredObjects",
      "curatorSelected",
      "curatorWaypointCost",
      "current3DENOperation",
      "currentChannel",
      "currentCommand",
      "currentMagazine",
      "currentMagazineDetail",
      "currentMagazineDetailTurret",
      "currentMagazineTurret",
      "currentMuzzle",
      "currentNamespace",
      "currentPilot",
      "currentTask",
      "currentTasks",
      "currentThrowable",
      "currentVisionMode",
      "currentWaypoint",
      "currentWeapon",
      "currentWeaponMode",
      "currentWeaponTurret",
      "currentZeroing",
      "cursorObject",
      "cursorTarget",
      "customChat",
      "customRadio",
      "customWaypointPosition",
      "cutFadeOut",
      "cutObj",
      "cutRsc",
      "cutText",
      "damage",
      "date",
      "dateToNumber",
      "dayTime",
      "deActivateKey",
      "debriefingText",
      "debugFSM",
      "debugLog",
      "decayGraphValues",
      "deg",
      "delete3DENEntities",
      "deleteAt",
      "deleteCenter",
      "deleteCollection",
      "deleteEditorObject",
      "deleteGroup",
      "deleteGroupWhenEmpty",
      "deleteIdentity",
      "deleteLocation",
      "deleteMarker",
      "deleteMarkerLocal",
      "deleteRange",
      "deleteResources",
      "deleteSite",
      "deleteStatus",
      "deleteTeam",
      "deleteVehicle",
      "deleteVehicleCrew",
      "deleteWaypoint",
      "detach",
      "detectedMines",
      "diag_activeMissionFSMs",
      "diag_activeScripts",
      "diag_activeSQFScripts",
      "diag_activeSQSScripts",
      "diag_allMissionEventHandlers",
      "diag_captureFrame",
      "diag_captureFrameToFile",
      "diag_captureSlowFrame",
      "diag_codePerformance",
      "diag_deltaTime",
      "diag_drawmode",
      "diag_dumpCalltraceToLog",
      "diag_dumpScriptAssembly",
      "diag_dumpTerrainSynth",
      "diag_dynamicSimulationEnd",
      "diag_enable",
      "diag_enabled",
      "diag_exportConfig",
      "diag_exportTerrainSVG",
      "diag_fps",
      "diag_fpsmin",
      "diag_frameno",
      "diag_getTerrainSegmentOffset",
      "diag_lightNewLoad",
      "diag_list",
      "diag_localized",
      "diag_log",
      "diag_logSlowFrame",
      "diag_mergeConfigFile",
      "diag_recordTurretLimits",
      "diag_resetFSM",
      "diag_resetshapes",
      "diag_scope",
      "diag_setLightNew",
      "diag_stacktrace",
      "diag_tickTime",
      "diag_toggle",
      "dialog",
      "diarySubjectExists",
      "didJIP",
      "didJIPOwner",
      "difficulty",
      "difficultyEnabled",
      "difficultyEnabledRTD",
      "difficultyOption",
      "direction",
      "directionStabilizationEnabled",
      "directSay",
      "disableAI",
      "disableBrakes",
      "disableCollisionWith",
      "disableConversation",
      "disableDebriefingStats",
      "disableMapIndicators",
      "disableNVGEquipment",
      "disableRemoteSensors",
      "disableSerialization",
      "disableTIEquipment",
      "disableUAVConnectability",
      "disableUserInput",
      "displayAddEventHandler",
      "displayChild",
      "displayCtrl",
      "displayParent",
      "displayRemoveAllEventHandlers",
      "displayRemoveEventHandler",
      "displaySetEventHandler",
      "displayUniqueName",
      "displayUpdate",
      "dissolveTeam",
      "distance",
      "distance2D",
      "distanceSqr",
      "distributionRegion",
      "do3DENAction",
      "doArtilleryFire",
      "doFire",
      "doFollow",
      "doFSM",
      "doGetOut",
      "doMove",
      "doorPhase",
      "doStop",
      "doSuppressiveFire",
      "doTarget",
      "doWatch",
      "drawArrow",
      "drawEllipse",
      "drawIcon",
      "drawIcon3D",
      "drawLaser",
      "drawLine",
      "drawLine3D",
      "drawLink",
      "drawLocation",
      "drawPolygon",
      "drawRectangle",
      "drawTriangle",
      "driver",
      "drop",
      "dynamicSimulationDistance",
      "dynamicSimulationDistanceCoef",
      "dynamicSimulationEnabled",
      "dynamicSimulationSystemEnabled",
      "echo",
      "edit3DENMissionAttributes",
      "editObject",
      "editorSetEventHandler",
      "effectiveCommander",
      "elevatePeriscope",
      "emptyPositions",
      "enableAI",
      "enableAIFeature",
      "enableAimPrecision",
      "enableAttack",
      "enableAudioFeature",
      "enableAutoStartUpRTD",
      "enableAutoTrimRTD",
      "enableCamShake",
      "enableCaustics",
      "enableChannel",
      "enableCollisionWith",
      "enableCopilot",
      "enableDebriefingStats",
      "enableDiagLegend",
      "enableDirectionStabilization",
      "enableDynamicSimulation",
      "enableDynamicSimulationSystem",
      "enableEndDialog",
      "enableEngineArtillery",
      "enableEnvironment",
      "enableFatigue",
      "enableGunLights",
      "enableInfoPanelComponent",
      "enableIRLasers",
      "enableMimics",
      "enablePersonTurret",
      "enableRadio",
      "enableReload",
      "enableRopeAttach",
      "enableSatNormalOnDetail",
      "enableSaving",
      "enableSentences",
      "enableSimulation",
      "enableSimulationGlobal",
      "enableStamina",
      "enableStressDamage",
      "enableTeamSwitch",
      "enableTraffic",
      "enableUAVConnectability",
      "enableUAVWaypoints",
      "enableVehicleCargo",
      "enableVehicleSensor",
      "enableWeaponDisassembly",
      "endLoadingScreen",
      "endMission",
      "engineOn",
      "enginesIsOnRTD",
      "enginesPowerRTD",
      "enginesRpmRTD",
      "enginesTorqueRTD",
      "entities",
      "environmentEnabled",
      "environmentVolume",
      "equipmentDisabled",
      "estimatedEndServerTime",
      "estimatedTimeLeft",
      "evalObjectArgument",
      "everyBackpack",
      "everyContainer",
      "exec",
      "execEditorScript",
      "execFSM",
      "execVM",
      "exp",
      "expectedDestination",
      "exportJIPMessages",
      "eyeDirection",
      "eyePos",
      "face",
      "faction",
      "fadeEnvironment",
      "fadeMusic",
      "fadeRadio",
      "fadeSound",
      "fadeSpeech",
      "failMission",
      "fileExists",
      "fillWeaponsFromPool",
      "find",
      "findAny",
      "findCover",
      "findDisplay",
      "findEditorObject",
      "findEmptyPosition",
      "findEmptyPositionReady",
      "findIf",
      "findNearestEnemy",
      "finishMissionInit",
      "finite",
      "fire",
      "fireAtTarget",
      "firstBackpack",
      "flag",
      "flagAnimationPhase",
      "flagOwner",
      "flagSide",
      "flagTexture",
      "flatten",
      "fleeing",
      "floor",
      "flyInHeight",
      "flyInHeightASL",
      "focusedCtrl",
      "fog",
      "fogForecast",
      "fogParams",
      "forceAddUniform",
      "forceAtPositionRTD",
      "forceCadetDifficulty",
      "forcedMap",
      "forceEnd",
      "forceFlagTexture",
      "forceFollowRoad",
      "forceGeneratorRTD",
      "forceMap",
      "forceRespawn",
      "forceSpeed",
      "forceUnicode",
      "forceWalk",
      "forceWeaponFire",
      "forceWeatherChange",
      "forEachMember",
      "forEachMemberAgent",
      "forEachMemberTeam",
      "forgetTarget",
      "format",
      "formation",
      "formationDirection",
      "formationLeader",
      "formationMembers",
      "formationPosition",
      "formationTask",
      "formatText",
      "formLeader",
      "freeExtension",
      "freeLook",
      "fromEditor",
      "fuel",
      "fullCrew",
      "gearIDCAmmoCount",
      "gearSlotAmmoCount",
      "gearSlotData",
      "gestureState",
      "get",
      "get3DENActionState",
      "get3DENAttribute",
      "get3DENCamera",
      "get3DENConnections",
      "get3DENEntity",
      "get3DENEntityID",
      "get3DENGrid",
      "get3DENIconsVisible",
      "get3DENLayerEntities",
      "get3DENLinesVisible",
      "get3DENMissionAttribute",
      "get3DENMouseOver",
      "get3DENSelected",
      "getAimingCoef",
      "getAllEnv3DSoundControllers",
      "getAllEnvSoundControllers",
      "getAllHitPointsDamage",
      "getAllOwnedMines",
      "getAllPylonsInfo",
      "getAllSoundControllers",
      "getAllUnitTraits",
      "getAmmoCargo",
      "getAnimAimPrecision",
      "getAnimSpeedCoef",
      "getArray",
      "getArtilleryAmmo",
      "getArtilleryComputerSettings",
      "getArtilleryETA",
      "getAssetDLCInfo",
      "getAssignedCuratorLogic",
      "getAssignedCuratorUnit",
      "getAttackTarget",
      "getAudioOptionVolumes",
      "getBackpackCargo",
      "getBleedingRemaining",
      "getBurningValue",
      "getCalculatePlayerVisibilityByFriendly",
      "getCameraViewDirection",
      "getCargoIndex",
      "getCenterOfMass",
      "getClientState",
      "getClientStateNumber",
      "getCompatiblePylonMagazines",
      "getConnectedUAV",
      "getConnectedUAVUnit",
      "getContainerMaxLoad",
      "getCorpse",
      "getCruiseControl",
      "getCursorObjectParams",
      "getCustomAimCoef",
      "getCustomSoundController",
      "getCustomSoundControllerCount",
      "getDammage",
      "getDebriefingText",
      "getDescription",
      "getDir",
      "getDirVisual",
      "getDiverState",
      "getDLCAssetsUsage",
      "getDLCAssetsUsageByName",
      "getDLCs",
      "getDLCUsageTime",
      "getEditorCamera",
      "getEditorMode",
      "getEditorObjectScope",
      "getElevationOffset",
      "getEngineTargetRPMRTD",
      "getEnv3DSoundController",
      "getEnvSoundController",
      "getEventHandlerInfo",
      "getFatigue",
      "getFieldManualStartPage",
      "getForcedFlagTexture",
      "getForcedSpeed",
      "getFriend",
      "getFSMVariable",
      "getFuelCargo",
      "getGraphValues",
      "getGroupIcon",
      "getGroupIconParams",
      "getGroupIcons",
      "getHideFrom",
      "getHit",
      "getHitIndex",
      "getHitPointDamage",
      "getItemCargo",
      "getLighting",
      "getLightingAt",
      "getLoadedModsInfo",
      "getMagazineCargo",
      "getMarkerColor",
      "getMarkerPos",
      "getMarkerSize",
      "getMarkerType",
      "getMass",
      "getMissionConfig",
      "getMissionConfigValue",
      "getMissionDLCs",
      "getMissionLayerEntities",
      "getMissionLayers",
      "getMissionPath",
      "getModelInfo",
      "getMousePosition",
      "getMusicPlayedTime",
      "getNumber",
      "getObjectArgument",
      "getObjectChildren",
      "getObjectDLC",
      "getObjectFOV",
      "getObjectID",
      "getObjectMaterials",
      "getObjectProxy",
      "getObjectScale",
      "getObjectTextures",
      "getObjectType",
      "getObjectViewDistance",
      "getOpticsMode",
      "getOrDefault",
      "getOrDefaultCall",
      "getOxygenRemaining",
      "getPersonUsedDLCs",
      "getPilotCameraDirection",
      "getPilotCameraPosition",
      "getPilotCameraRotation",
      "getPilotCameraTarget",
      "getPiPViewDistance",
      "getPlateNumber",
      "getPlayerChannel",
      "getPlayerID",
      "getPlayerScores",
      "getPlayerUID",
      "getPlayerVoNVolume",
      "getPos",
      "getPosASL",
      "getPosASLVisual",
      "getPosASLW",
      "getPosATL",
      "getPosATLVisual",
      "getPosVisual",
      "getPosWorld",
      "getPosWorldVisual",
      "getPylonMagazines",
      "getRelDir",
      "getRelPos",
      "getRemoteSensorsDisabled",
      "getRepairCargo",
      "getResolution",
      "getRoadInfo",
      "getRotorBrakeRTD",
      "getSensorTargets",
      "getSensorThreats",
      "getShadowDistance",
      "getShotParents",
      "getSlingLoad",
      "getSoundController",
      "getSoundControllerResult",
      "getSpeed",
      "getStamina",
      "getStatValue",
      "getSteamFriendsServers",
      "getSubtitleOptions",
      "getSuppression",
      "getTerrainGrid",
      "getTerrainHeight",
      "getTerrainHeightASL",
      "getTerrainInfo",
      "getText",
      "getTextRaw",
      "getTextureInfo",
      "getTextWidth",
      "getTiParameters",
      "getTotalDLCUsageTime",
      "getTrimOffsetRTD",
      "getTurretLimits",
      "getTurretOpticsMode",
      "getUnitFreefallInfo",
      "getUnitLoadout",
      "getUnitTrait",
      "getUnloadInCombat",
      "getUserInfo",
      "getUserMFDText",
      "getUserMFDValue",
      "getVariable",
      "getVehicleCargo",
      "getVehicleTiPars",
      "getWeaponCargo",
      "getWeaponSway",
      "getWingsOrientationRTD",
      "getWingsPositionRTD",
      "getWPPos",
      "glanceAt",
      "globalChat",
      "globalRadio",
      "goggles",
      "goto",
      "group",
      "groupChat",
      "groupFromNetId",
      "groupIconSelectable",
      "groupIconsVisible",
      "groupID",
      "groupOwner",
      "groupRadio",
      "groups",
      "groupSelectedUnits",
      "groupSelectUnit",
      "gunner",
      "gusts",
      "halt",
      "handgunItems",
      "handgunMagazine",
      "handgunWeapon",
      "handsHit",
      "hashValue",
      "hasInterface",
      "hasPilotCamera",
      "hasWeapon",
      "hcAllGroups",
      "hcGroupParams",
      "hcLeader",
      "hcRemoveAllGroups",
      "hcRemoveGroup",
      "hcSelected",
      "hcSelectGroup",
      "hcSetGroup",
      "hcShowBar",
      "hcShownBar",
      "headgear",
      "hideBody",
      "hideObject",
      "hideObjectGlobal",
      "hideSelection",
      "hint",
      "hintC",
      "hintCadet",
      "hintSilent",
      "hmd",
      "hostMission",
      "htmlLoad",
      "HUDMovementLevels",
      "humidity",
      "image",
      "importAllGroups",
      "importance",
      "in",
      "inArea",
      "inAreaArray",
      "incapacitatedState",
      "inflame",
      "inflamed",
      "infoPanel",
      "infoPanelComponentEnabled",
      "infoPanelComponents",
      "infoPanels",
      "inGameUISetEventHandler",
      "inheritsFrom",
      "initAmbientLife",
      "inPolygon",
      "inputAction",
      "inputController",
      "inputMouse",
      "inRangeOfArtillery",
      "insert",
      "insertEditorObject",
      "intersect",
      "is3DEN",
      "is3DENMultiplayer",
      "is3DENPreview",
      "isAbleToBreathe",
      "isActionMenuVisible",
      "isAgent",
      "isAimPrecisionEnabled",
      "isAllowedCrewInImmobile",
      "isArray",
      "isAutoHoverOn",
      "isAutonomous",
      "isAutoStartUpEnabledRTD",
      "isAutotest",
      "isAutoTrimOnRTD",
      "isAwake",
      "isBleeding",
      "isBurning",
      "isClass",
      "isCollisionLightOn",
      "isCopilotEnabled",
      "isDamageAllowed",
      "isDedicated",
      "isDLCAvailable",
      "isEngineOn",
      "isEqualRef",
      "isEqualTo",
      "isEqualType",
      "isEqualTypeAll",
      "isEqualTypeAny",
      "isEqualTypeArray",
      "isEqualTypeParams",
      "isFilePatchingEnabled",
      "isFinal",
      "isFlashlightOn",
      "isFlatEmpty",
      "isForcedWalk",
      "isFormationLeader",
      "isGameFocused",
      "isGamePaused",
      "isGroupDeletedWhenEmpty",
      "isHidden",
      "isInRemainsCollector",
      "isInstructorFigureEnabled",
      "isIRLaserOn",
      "isKeyActive",
      "isKindOf",
      "isLaserOn",
      "isLightOn",
      "isLocalized",
      "isManualFire",
      "isMarkedForCollection",
      "isMissionProfileNamespaceLoaded",
      "isMultiplayer",
      "isMultiplayerSolo",
      "isNil",
      "isNotEqualRef",
      "isNotEqualTo",
      "isNull",
      "isNumber",
      "isObjectHidden",
      "isObjectRTD",
      "isOnRoad",
      "isPiPEnabled",
      "isPlayer",
      "isRealTime",
      "isRemoteExecuted",
      "isRemoteExecutedJIP",
      "isSaving",
      "isSensorTargetConfirmed",
      "isServer",
      "isShowing3DIcons",
      "isSimpleObject",
      "isSprintAllowed",
      "isStaminaEnabled",
      "isSteamMission",
      "isSteamOverlayEnabled",
      "isStreamFriendlyUIEnabled",
      "isStressDamageEnabled",
      "isText",
      "isTouchingGround",
      "isTurnedOut",
      "isTutHintsEnabled",
      "isUAVConnectable",
      "isUAVConnected",
      "isUIContext",
      "isUniformAllowed",
      "isVehicleCargo",
      "isVehicleRadarOn",
      "isVehicleSensorEnabled",
      "isWalking",
      "isWeaponDeployed",
      "isWeaponRested",
      "itemCargo",
      "items",
      "itemsWithMagazines",
      "join",
      "joinAs",
      "joinAsSilent",
      "joinSilent",
      "joinString",
      "kbAddDatabase",
      "kbAddDatabaseTargets",
      "kbAddTopic",
      "kbHasTopic",
      "kbReact",
      "kbRemoveTopic",
      "kbTell",
      "kbWasSaid",
      "keyImage",
      "keyName",
      "keys",
      "knowsAbout",
      "land",
      "landAt",
      "landResult",
      "language",
      "laserTarget",
      "lbAdd",
      "lbClear",
      "lbColor",
      "lbColorRight",
      "lbCurSel",
      "lbData",
      "lbDelete",
      "lbIsSelected",
      "lbPicture",
      "lbPictureRight",
      "lbSelection",
      "lbSetColor",
      "lbSetColorRight",
      "lbSetCurSel",
      "lbSetData",
      "lbSetPicture",
      "lbSetPictureColor",
      "lbSetPictureColorDisabled",
      "lbSetPictureColorSelected",
      "lbSetPictureRight",
      "lbSetPictureRightColor",
      "lbSetPictureRightColorDisabled",
      "lbSetPictureRightColorSelected",
      "lbSetSelectColor",
      "lbSetSelectColorRight",
      "lbSetSelected",
      "lbSetText",
      "lbSetTextRight",
      "lbSetTooltip",
      "lbSetValue",
      "lbSize",
      "lbSort",
      "lbSortBy",
      "lbSortByValue",
      "lbText",
      "lbTextRight",
      "lbTooltip",
      "lbValue",
      "leader",
      "leaderboardDeInit",
      "leaderboardGetRows",
      "leaderboardInit",
      "leaderboardRequestRowsFriends",
      "leaderboardRequestRowsGlobal",
      "leaderboardRequestRowsGlobalAroundUser",
      "leaderboardsRequestUploadScore",
      "leaderboardsRequestUploadScoreKeepBest",
      "leaderboardState",
      "leaveVehicle",
      "libraryCredits",
      "libraryDisclaimers",
      "lifeState",
      "lightAttachObject",
      "lightDetachObject",
      "lightIsOn",
      "lightnings",
      "limitSpeed",
      "linearConversion",
      "lineIntersects",
      "lineIntersectsObjs",
      "lineIntersectsSurfaces",
      "lineIntersectsWith",
      "linkItem",
      "list",
      "listObjects",
      "listRemoteTargets",
      "listVehicleSensors",
      "ln",
      "lnbAddArray",
      "lnbAddColumn",
      "lnbAddRow",
      "lnbClear",
      "lnbColor",
      "lnbColorRight",
      "lnbCurSelRow",
      "lnbData",
      "lnbDeleteColumn",
      "lnbDeleteRow",
      "lnbGetColumnsPosition",
      "lnbPicture",
      "lnbPictureRight",
      "lnbSetColor",
      "lnbSetColorRight",
      "lnbSetColumnsPos",
      "lnbSetCurSelRow",
      "lnbSetData",
      "lnbSetPicture",
      "lnbSetPictureColor",
      "lnbSetPictureColorRight",
      "lnbSetPictureColorSelected",
      "lnbSetPictureColorSelectedRight",
      "lnbSetPictureRight",
      "lnbSetText",
      "lnbSetTextRight",
      "lnbSetTooltip",
      "lnbSetValue",
      "lnbSize",
      "lnbSort",
      "lnbSortBy",
      "lnbSortByValue",
      "lnbText",
      "lnbTextRight",
      "lnbValue",
      "load",
      "loadAbs",
      "loadBackpack",
      "loadConfig",
      "loadFile",
      "loadGame",
      "loadIdentity",
      "loadMagazine",
      "loadOverlay",
      "loadStatus",
      "loadUniform",
      "loadVest",
      "localize",
      "localNamespace",
      "locationPosition",
      "lock",
      "lockCameraTo",
      "lockCargo",
      "lockDriver",
      "locked",
      "lockedCameraTo",
      "lockedCargo",
      "lockedDriver",
      "lockedInventory",
      "lockedTurret",
      "lockIdentity",
      "lockInventory",
      "lockTurret",
      "lockWp",
      "log",
      "logEntities",
      "logNetwork",
      "logNetworkTerminate",
      "lookAt",
      "lookAtPos",
      "magazineCargo",
      "magazines",
      "magazinesAllTurrets",
      "magazinesAmmo",
      "magazinesAmmoCargo",
      "magazinesAmmoFull",
      "magazinesDetail",
      "magazinesDetailBackpack",
      "magazinesDetailUniform",
      "magazinesDetailVest",
      "magazinesTurret",
      "magazineTurretAmmo",
      "mapAnimAdd",
      "mapAnimClear",
      "mapAnimCommit",
      "mapAnimDone",
      "mapCenterOnCamera",
      "mapGridPosition",
      "markAsFinishedOnSteam",
      "markerAlpha",
      "markerBrush",
      "markerChannel",
      "markerColor",
      "markerDir",
      "markerPolyline",
      "markerPos",
      "markerShadow",
      "markerShape",
      "markerSize",
      "markerText",
      "markerType",
      "matrixMultiply",
      "matrixTranspose",
      "max",
      "maxLoad",
      "members",
      "menuAction",
      "menuAdd",
      "menuChecked",
      "menuClear",
      "menuCollapse",
      "menuData",
      "menuDelete",
      "menuEnable",
      "menuEnabled",
      "menuExpand",
      "menuHover",
      "menuPicture",
      "menuSetAction",
      "menuSetCheck",
      "menuSetData",
      "menuSetPicture",
      "menuSetShortcut",
      "menuSetText",
      "menuSetURL",
      "menuSetValue",
      "menuShortcut",
      "menuShortcutText",
      "menuSize",
      "menuSort",
      "menuText",
      "menuURL",
      "menuValue",
      "merge",
      "min",
      "mineActive",
      "mineDetectedBy",
      "missileTarget",
      "missileTargetPos",
      "missionConfigFile",
      "missionDifficulty",
      "missionEnd",
      "missionName",
      "missionNameSource",
      "missionNamespace",
      "missionProfileNamespace",
      "missionStart",
      "missionVersion",
      "mod",
      "modelToWorld",
      "modelToWorldVisual",
      "modelToWorldVisualWorld",
      "modelToWorldWorld",
      "modParams",
      "moonIntensity",
      "moonPhase",
      "morale",
      "move",
      "move3DENCamera",
      "moveInAny",
      "moveInCargo",
      "moveInCommander",
      "moveInDriver",
      "moveInGunner",
      "moveInTurret",
      "moveObjectToEnd",
      "moveOut",
      "moveTime",
      "moveTo",
      "moveToCompleted",
      "moveToFailed",
      "musicVolume",
      "name",
      "namedProperties",
      "nameSound",
      "nearEntities",
      "nearestBuilding",
      "nearestLocation",
      "nearestLocations",
      "nearestLocationWithDubbing",
      "nearestMines",
      "nearestObject",
      "nearestObjects",
      "nearestTerrainObjects",
      "nearObjects",
      "nearObjectsReady",
      "nearRoads",
      "nearSupplies",
      "nearTargets",
      "needReload",
      "needService",
      "netId",
      "netObjNull",
      "newOverlay",
      "nextMenuItemIndex",
      "nextWeatherChange",
      "nMenuItems",
      "not",
      "numberOfEnginesRTD",
      "numberToDate",
      "objectCurators",
      "objectFromNetId",
      "objectParent",
      "objStatus",
      "onBriefingGroup",
      "onBriefingNotes",
      "onBriefingPlan",
      "onBriefingTeamSwitch",
      "onCommandModeChanged",
      "onDoubleClick",
      "onEachFrame",
      "onGroupIconClick",
      "onGroupIconOverEnter",
      "onGroupIconOverLeave",
      "onHCGroupSelectionChanged",
      "onMapSingleClick",
      "onPlayerConnected",
      "onPlayerDisconnected",
      "onPreloadFinished",
      "onPreloadStarted",
      "onShowNewObject",
      "onTeamSwitch",
      "openCuratorInterface",
      "openDLCPage",
      "openGPS",
      "openMap",
      "openSteamApp",
      "openYoutubeVideo",
      "or",
      "orderGetIn",
      "overcast",
      "overcastForecast",
      "owner",
      "param",
      "params",
      "parseNumber",
      "parseSimpleArray",
      "parseText",
      "parsingNamespace",
      "particlesQuality",
      "periscopeElevation",
      "pickWeaponPool",
      "pitch",
      "pixelGrid",
      "pixelGridBase",
      "pixelGridNoUIScale",
      "pixelH",
      "pixelW",
      "playableSlotsNumber",
      "playableUnits",
      "playAction",
      "playActionNow",
      "player",
      "playerRespawnTime",
      "playerSide",
      "playersNumber",
      "playGesture",
      "playMission",
      "playMove",
      "playMoveNow",
      "playMusic",
      "playScriptedMission",
      "playSound",
      "playSound3D",
      "playSoundUI",
      "pose",
      "position",
      "positionCameraToWorld",
      "posScreenToWorld",
      "posWorldToScreen",
      "ppEffectAdjust",
      "ppEffectCommit",
      "ppEffectCommitted",
      "ppEffectCreate",
      "ppEffectDestroy",
      "ppEffectEnable",
      "ppEffectEnabled",
      "ppEffectForceInNVG",
      "precision",
      "preloadCamera",
      "preloadObject",
      "preloadSound",
      "preloadTitleObj",
      "preloadTitleRsc",
      "preprocessFile",
      "preprocessFileLineNumbers",
      "primaryWeapon",
      "primaryWeaponItems",
      "primaryWeaponMagazine",
      "priority",
      "processDiaryLink",
      "productVersion",
      "profileName",
      "profileNamespace",
      "profileNameSteam",
      "progressLoadingScreen",
      "progressPosition",
      "progressSetPosition",
      "publicVariable",
      "publicVariableClient",
      "publicVariableServer",
      "pushBack",
      "pushBackUnique",
      "putWeaponPool",
      "queryItemsPool",
      "queryMagazinePool",
      "queryWeaponPool",
      "rad",
      "radioChannelAdd",
      "radioChannelCreate",
      "radioChannelInfo",
      "radioChannelRemove",
      "radioChannelSetCallSign",
      "radioChannelSetLabel",
      "radioEnabled",
      "radioVolume",
      "rain",
      "rainbow",
      "rainParams",
      "random",
      "rank",
      "rankId",
      "rating",
      "rectangular",
      "regexFind",
      "regexMatch",
      "regexReplace",
      "registeredTasks",
      "registerTask",
      "reload",
      "reloadEnabled",
      "remoteControl",
      "remoteExec",
      "remoteExecCall",
      "remoteExecutedOwner",
      "remove3DENConnection",
      "remove3DENEventHandler",
      "remove3DENLayer",
      "removeAction",
      "removeAll3DENEventHandlers",
      "removeAllActions",
      "removeAllAssignedItems",
      "removeAllBinocularItems",
      "removeAllContainers",
      "removeAllCuratorAddons",
      "removeAllCuratorCameraAreas",
      "removeAllCuratorEditingAreas",
      "removeAllEventHandlers",
      "removeAllHandgunItems",
      "removeAllItems",
      "removeAllItemsWithMagazines",
      "removeAllMissionEventHandlers",
      "removeAllMPEventHandlers",
      "removeAllMusicEventHandlers",
      "removeAllOwnedMines",
      "removeAllPrimaryWeaponItems",
      "removeAllSecondaryWeaponItems",
      "removeAllUserActionEventHandlers",
      "removeAllWeapons",
      "removeBackpack",
      "removeBackpackGlobal",
      "removeBinocularItem",
      "removeCuratorAddons",
      "removeCuratorCameraArea",
      "removeCuratorEditableObjects",
      "removeCuratorEditingArea",
      "removeDiaryRecord",
      "removeDiarySubject",
      "removeDrawIcon",
      "removeDrawLinks",
      "removeEventHandler",
      "removeFromRemainsCollector",
      "removeGoggles",
      "removeGroupIcon",
      "removeHandgunItem",
      "removeHeadgear",
      "removeItem",
      "removeItemFromBackpack",
      "removeItemFromUniform",
      "removeItemFromVest",
      "removeItems",
      "removeMagazine",
      "removeMagazineGlobal",
      "removeMagazines",
      "removeMagazinesTurret",
      "removeMagazineTurret",
      "removeMenuItem",
      "removeMissionEventHandler",
      "removeMPEventHandler",
      "removeMusicEventHandler",
      "removeOwnedMine",
      "removePrimaryWeaponItem",
      "removeSecondaryWeaponItem",
      "removeSimpleTask",
      "removeSwitchableUnit",
      "removeTeamMember",
      "removeUniform",
      "removeUserActionEventHandler",
      "removeVest",
      "removeWeapon",
      "removeWeaponAttachmentCargo",
      "removeWeaponCargo",
      "removeWeaponGlobal",
      "removeWeaponTurret",
      "reportRemoteTarget",
      "requiredVersion",
      "resetCamShake",
      "resetSubgroupDirection",
      "resize",
      "resources",
      "respawnVehicle",
      "restartEditorCamera",
      "reveal",
      "revealMine",
      "reverse",
      "reversedMouseY",
      "roadAt",
      "roadsConnectedTo",
      "roleDescription",
      "ropeAttachedObjects",
      "ropeAttachedTo",
      "ropeAttachEnabled",
      "ropeAttachTo",
      "ropeCreate",
      "ropeCut",
      "ropeDestroy",
      "ropeDetach",
      "ropeEndPosition",
      "ropeLength",
      "ropes",
      "ropesAttachedTo",
      "ropeSegments",
      "ropeUnwind",
      "ropeUnwound",
      "rotorsForcesRTD",
      "rotorsRpmRTD",
      "round",
      "runInitScript",
      "safeZoneH",
      "safeZoneW",
      "safeZoneWAbs",
      "safeZoneX",
      "safeZoneXAbs",
      "safeZoneY",
      "save3DENInventory",
      "saveGame",
      "saveIdentity",
      "saveJoysticks",
      "saveMissionProfileNamespace",
      "saveOverlay",
      "saveProfileNamespace",
      "saveStatus",
      "saveVar",
      "savingEnabled",
      "say",
      "say2D",
      "say3D",
      "scopeName",
      "score",
      "scoreSide",
      "screenshot",
      "screenToWorld",
      "scriptDone",
      "scriptName",
      "scudState",
      "secondaryWeapon",
      "secondaryWeaponItems",
      "secondaryWeaponMagazine",
      "select",
      "selectBestPlaces",
      "selectDiarySubject",
      "selectedEditorObjects",
      "selectEditorObject",
      "selectionNames",
      "selectionPosition",
      "selectionVectorDirAndUp",
      "selectLeader",
      "selectMax",
      "selectMin",
      "selectNoPlayer",
      "selectPlayer",
      "selectRandom",
      "selectRandomWeighted",
      "selectWeapon",
      "selectWeaponTurret",
      "sendAUMessage",
      "sendSimpleCommand",
      "sendTask",
      "sendTaskResult",
      "sendUDPMessage",
      "sentencesEnabled",
      "serverCommand",
      "serverCommandAvailable",
      "serverCommandExecutable",
      "serverName",
      "serverNamespace",
      "serverTime",
      "set",
      "set3DENAttribute",
      "set3DENAttributes",
      "set3DENGrid",
      "set3DENIconsVisible",
      "set3DENLayer",
      "set3DENLinesVisible",
      "set3DENLogicType",
      "set3DENMissionAttribute",
      "set3DENMissionAttributes",
      "set3DENModelsVisible",
      "set3DENObjectType",
      "set3DENSelected",
      "setAccTime",
      "setActualCollectiveRTD",
      "setAirplaneThrottle",
      "setAirportSide",
      "setAmmo",
      "setAmmoCargo",
      "setAmmoOnPylon",
      "setAnimSpeedCoef",
      "setAperture",
      "setApertureNew",
      "setArmoryPoints",
      "setAttributes",
      "setAutonomous",
      "setBehaviour",
      "setBehaviourStrong",
      "setBleedingRemaining",
      "setBrakesRTD",
      "setCameraInterest",
      "setCamShakeDefParams",
      "setCamShakeParams",
      "setCamUseTi",
      "setCaptive",
      "setCenterOfMass",
      "setCollisionLight",
      "setCombatBehaviour",
      "setCombatMode",
      "setCompassOscillation",
      "setConvoySeparation",
      "setCruiseControl",
      "setCuratorCameraAreaCeiling",
      "setCuratorCoef",
      "setCuratorEditingAreaType",
      "setCuratorWaypointCost",
      "setCurrentChannel",
      "setCurrentTask",
      "setCurrentWaypoint",
      "setCustomAimCoef",
      "SetCustomMissionData",
      "setCustomSoundController",
      "setCustomWeightRTD",
      "setDamage",
      "setDammage",
      "setDate",
      "setDebriefingText",
      "setDefaultCamera",
      "setDestination",
      "setDetailMapBlendPars",
      "setDiaryRecordText",
      "setDiarySubjectPicture",
      "setDir",
      "setDirection",
      "setDrawIcon",
      "setDriveOnPath",
      "setDropInterval",
      "setDynamicSimulationDistance",
      "setDynamicSimulationDistanceCoef",
      "setEditorMode",
      "setEditorObjectScope",
      "setEffectCondition",
      "setEffectiveCommander",
      "setEngineRpmRTD",
      "setFace",
      "setFaceanimation",
      "setFatigue",
      "setFeatureType",
      "setFlagAnimationPhase",
      "setFlagOwner",
      "setFlagSide",
      "setFlagTexture",
      "setFog",
      "setForceGeneratorRTD",
      "setFormation",
      "setFormationTask",
      "setFormDir",
      "setFriend",
      "setFromEditor",
      "setFSMVariable",
      "setFuel",
      "setFuelCargo",
      "setGroupIcon",
      "setGroupIconParams",
      "setGroupIconsSelectable",
      "setGroupIconsVisible",
      "setGroupid",
      "setGroupIdGlobal",
      "setGroupOwner",
      "setGusts",
      "setHideBehind",
      "setHit",
      "setHitIndex",
      "setHitPointDamage",
      "setHorizonParallaxCoef",
      "setHUDMovementLevels",
      "setHumidity",
      "setIdentity",
      "setImportance",
      "setInfoPanel",
      "setLeader",
      "setLightAmbient",
      "setLightAttenuation",
      "setLightBrightness",
      "setLightColor",
      "setLightConePars",
      "setLightDayLight",
      "setLightFlareMaxDistance",
      "setLightFlareSize",
      "setLightIntensity",
      "setLightIR",
      "setLightnings",
      "setLightUseFlare",
      "setLightVolumeShape",
      "setLocalWindParams",
      "setMagazineTurretAmmo",
      "setMarkerAlpha",
      "setMarkerAlphaLocal",
      "setMarkerBrush",
      "setMarkerBrushLocal",
      "setMarkerColor",
      "setMarkerColorLocal",
      "setMarkerDir",
      "setMarkerDirLocal",
      "setMarkerPolyline",
      "setMarkerPolylineLocal",
      "setMarkerPos",
      "setMarkerPosLocal",
      "setMarkerShadow",
      "setMarkerShadowLocal",
      "setMarkerShape",
      "setMarkerShapeLocal",
      "setMarkerSize",
      "setMarkerSizeLocal",
      "setMarkerText",
      "setMarkerTextLocal",
      "setMarkerType",
      "setMarkerTypeLocal",
      "setMass",
      "setMaxLoad",
      "setMimic",
      "setMissileTarget",
      "setMissileTargetPos",
      "setMousePosition",
      "setMusicEffect",
      "setMusicEventHandler",
      "setName",
      "setNameSound",
      "setObjectArguments",
      "setObjectMaterial",
      "setObjectMaterialGlobal",
      "setObjectProxy",
      "setObjectScale",
      "setObjectTexture",
      "setObjectTextureGlobal",
      "setObjectViewDistance",
      "setOpticsMode",
      "setOvercast",
      "setOwner",
      "setOxygenRemaining",
      "setParticleCircle",
      "setParticleClass",
      "setParticleFire",
      "setParticleParams",
      "setParticleRandom",
      "setPilotCameraDirection",
      "setPilotCameraRotation",
      "setPilotCameraTarget",
      "setPilotLight",
      "setPiPEffect",
      "setPiPViewDistance",
      "setPitch",
      "setPlateNumber",
      "setPlayable",
      "setPlayerRespawnTime",
      "setPlayerVoNVolume",
      "setPos",
      "setPosASL",
      "setPosASL2",
      "setPosASLW",
      "setPosATL",
      "setPosition",
      "setPosWorld",
      "setPylonLoadout",
      "setPylonsPriority",
      "setRadioMsg",
      "setRain",
      "setRainbow",
      "setRandomLip",
      "setRank",
      "setRectangular",
      "setRepairCargo",
      "setRotorBrakeRTD",
      "setShadowDistance",
      "setShotParents",
      "setSide",
      "setSimpleTaskAlwaysVisible",
      "setSimpleTaskCustomData",
      "setSimpleTaskDescription",
      "setSimpleTaskDestination",
      "setSimpleTaskTarget",
      "setSimpleTaskType",
      "setSimulWeatherLayers",
      "setSize",
      "setSkill",
      "setSlingLoad",
      "setSoundEffect",
      "setSpeaker",
      "setSpeech",
      "setSpeedMode",
      "setStamina",
      "setStaminaScheme",
      "setStatValue",
      "setSuppression",
      "setSystemOfUnits",
      "setTargetAge",
      "setTaskMarkerOffset",
      "setTaskResult",
      "setTaskState",
      "setTerrainGrid",
      "setTerrainHeight",
      "setText",
      "setTimeMultiplier",
      "setTiParameter",
      "setTitleEffect",
      "setTowParent",
      "setTrafficDensity",
      "setTrafficDistance",
      "setTrafficGap",
      "setTrafficSpeed",
      "setTriggerActivation",
      "setTriggerArea",
      "setTriggerInterval",
      "setTriggerStatements",
      "setTriggerText",
      "setTriggerTimeout",
      "setTriggerType",
      "setTurretLimits",
      "setTurretOpticsMode",
      "setType",
      "setUnconscious",
      "setUnitAbility",
      "setUnitCombatMode",
      "setUnitFreefallHeight",
      "setUnitLoadout",
      "setUnitPos",
      "setUnitPosWeak",
      "setUnitRank",
      "setUnitRecoilCoefficient",
      "setUnitTrait",
      "setUnloadInCombat",
      "setUserActionText",
      "setUserMFDText",
      "setUserMFDValue",
      "setVariable",
      "setVectorDir",
      "setVectorDirAndUp",
      "setVectorUp",
      "setVehicleAmmo",
      "setVehicleAmmoDef",
      "setVehicleArmor",
      "setVehicleCargo",
      "setVehicleId",
      "setVehicleLock",
      "setVehiclePosition",
      "setVehicleRadar",
      "setVehicleReceiveRemoteTargets",
      "setVehicleReportOwnPosition",
      "setVehicleReportRemoteTargets",
      "setVehicleTiPars",
      "setVehicleVarName",
      "setVelocity",
      "setVelocityModelSpace",
      "setVelocityTransformation",
      "setViewDistance",
      "setVisibleIfTreeCollapsed",
      "setWantedRPMRTD",
      "setWaves",
      "setWaypointBehaviour",
      "setWaypointCombatMode",
      "setWaypointCompletionRadius",
      "setWaypointDescription",
      "setWaypointForceBehaviour",
      "setWaypointFormation",
      "setWaypointHousePosition",
      "setWaypointLoiterAltitude",
      "setWaypointLoiterRadius",
      "setWaypointLoiterType",
      "setWaypointName",
      "setWaypointPosition",
      "setWaypointScript",
      "setWaypointSpeed",
      "setWaypointStatements",
      "setWaypointTimeout",
      "setWaypointType",
      "setWaypointVisible",
      "setWeaponReloadingTime",
      "setWeaponZeroing",
      "setWind",
      "setWindDir",
      "setWindForce",
      "setWindStr",
      "setWingForceScaleRTD",
      "setWPPos",
      "show3DIcons",
      "showChat",
      "showCinemaBorder",
      "showCommandingMenu",
      "showCompass",
      "showCuratorCompass",
      "showGps",
      "showHUD",
      "showLegend",
      "showMap",
      "shownArtilleryComputer",
      "shownChat",
      "shownCompass",
      "shownCuratorCompass",
      "showNewEditorObject",
      "shownGps",
      "shownHUD",
      "shownMap",
      "shownPad",
      "shownRadio",
      "shownScoretable",
      "shownSubtitles",
      "shownUAVFeed",
      "shownWarrant",
      "shownWatch",
      "showPad",
      "showRadio",
      "showScoretable",
      "showSubtitles",
      "showUAVFeed",
      "showWarrant",
      "showWatch",
      "showWaypoint",
      "showWaypoints",
      "side",
      "sideChat",
      "sideRadio",
      "simpleTasks",
      "simulationEnabled",
      "simulCloudDensity",
      "simulCloudOcclusion",
      "simulInClouds",
      "simulWeatherSync",
      "sin",
      "size",
      "sizeOf",
      "skill",
      "skillFinal",
      "skipTime",
      "sleep",
      "sliderPosition",
      "sliderRange",
      "sliderSetPosition",
      "sliderSetRange",
      "sliderSetSpeed",
      "sliderSpeed",
      "slingLoadAssistantShown",
      "soldierMagazines",
      "someAmmo",
      "sort",
      "soundVolume",
      "spawn",
      "speaker",
      "speechVolume",
      "speed",
      "speedMode",
      "splitString",
      "sqrt",
      "squadParams",
      "stance",
      "startLoadingScreen",
      "stop",
      "stopEngineRTD",
      "stopped",
      "str",
      "sunOrMoon",
      "supportInfo",
      "suppressFor",
      "surfaceIsWater",
      "surfaceNormal",
      "surfaceTexture",
      "surfaceType",
      "swimInDepth",
      "switchableUnits",
      "switchAction",
      "switchCamera",
      "switchGesture",
      "switchLight",
      "switchMove",
      "synchronizedObjects",
      "synchronizedTriggers",
      "synchronizedWaypoints",
      "synchronizeObjectsAdd",
      "synchronizeObjectsRemove",
      "synchronizeTrigger",
      "synchronizeWaypoint",
      "systemChat",
      "systemOfUnits",
      "systemTime",
      "systemTimeUTC",
      "tan",
      "targetKnowledge",
      "targets",
      "targetsAggregate",
      "targetsQuery",
      "taskAlwaysVisible",
      "taskChildren",
      "taskCompleted",
      "taskCustomData",
      "taskDescription",
      "taskDestination",
      "taskHint",
      "taskMarkerOffset",
      "taskName",
      "taskParent",
      "taskResult",
      "taskState",
      "taskType",
      "teamMember",
      "teamName",
      "teams",
      "teamSwitch",
      "teamSwitchEnabled",
      "teamType",
      "terminate",
      "terrainIntersect",
      "terrainIntersectASL",
      "terrainIntersectAtASL",
      "text",
      "textLog",
      "textLogFormat",
      "tg",
      "time",
      "timeMultiplier",
      "titleCut",
      "titleFadeOut",
      "titleObj",
      "titleRsc",
      "titleText",
      "toArray",
      "toFixed",
      "toLower",
      "toLowerANSI",
      "toString",
      "toUpper",
      "toUpperANSI",
      "triggerActivated",
      "triggerActivation",
      "triggerAmmo",
      "triggerArea",
      "triggerAttachedVehicle",
      "triggerAttachObject",
      "triggerAttachVehicle",
      "triggerDynamicSimulation",
      "triggerInterval",
      "triggerStatements",
      "triggerText",
      "triggerTimeout",
      "triggerTimeoutCurrent",
      "triggerType",
      "trim",
      "turretLocal",
      "turretOwner",
      "turretUnit",
      "tvAdd",
      "tvClear",
      "tvCollapse",
      "tvCollapseAll",
      "tvCount",
      "tvCurSel",
      "tvData",
      "tvDelete",
      "tvExpand",
      "tvExpandAll",
      "tvIsSelected",
      "tvPicture",
      "tvPictureRight",
      "tvSelection",
      "tvSetColor",
      "tvSetCurSel",
      "tvSetData",
      "tvSetPicture",
      "tvSetPictureColor",
      "tvSetPictureColorDisabled",
      "tvSetPictureColorSelected",
      "tvSetPictureRight",
      "tvSetPictureRightColor",
      "tvSetPictureRightColorDisabled",
      "tvSetPictureRightColorSelected",
      "tvSetSelectColor",
      "tvSetSelected",
      "tvSetText",
      "tvSetTooltip",
      "tvSetValue",
      "tvSort",
      "tvSortAll",
      "tvSortByValue",
      "tvSortByValueAll",
      "tvText",
      "tvTooltip",
      "tvValue",
      "type",
      "typeName",
      "typeOf",
      "UAVControl",
      "uiNamespace",
      "uiSleep",
      "unassignCurator",
      "unassignItem",
      "unassignTeam",
      "unassignVehicle",
      "underwater",
      "uniform",
      "uniformContainer",
      "uniformItems",
      "uniformMagazines",
      "uniqueUnitItems",
      "unitAddons",
      "unitAimPosition",
      "unitAimPositionVisual",
      "unitBackpack",
      "unitCombatMode",
      "unitIsUAV",
      "unitPos",
      "unitReady",
      "unitRecoilCoefficient",
      "units",
      "unitsBelowHeight",
      "unitTurret",
      "unlinkItem",
      "unlockAchievement",
      "unregisterTask",
      "updateDrawIcon",
      "updateMenuItem",
      "updateObjectTree",
      "useAIOperMapObstructionTest",
      "useAISteeringComponent",
      "useAudioTimeForMoves",
      "userInputDisabled",
      "values",
      "vectorAdd",
      "vectorCos",
      "vectorCrossProduct",
      "vectorDiff",
      "vectorDir",
      "vectorDirVisual",
      "vectorDistance",
      "vectorDistanceSqr",
      "vectorDotProduct",
      "vectorFromTo",
      "vectorLinearConversion",
      "vectorMagnitude",
      "vectorMagnitudeSqr",
      "vectorModelToWorld",
      "vectorModelToWorldVisual",
      "vectorMultiply",
      "vectorNormalized",
      "vectorUp",
      "vectorUpVisual",
      "vectorWorldToModel",
      "vectorWorldToModelVisual",
      "vehicle",
      "vehicleCargoEnabled",
      "vehicleChat",
      "vehicleMoveInfo",
      "vehicleRadio",
      "vehicleReceiveRemoteTargets",
      "vehicleReportOwnPosition",
      "vehicleReportRemoteTargets",
      "vehicles",
      "vehicleVarName",
      "velocity",
      "velocityModelSpace",
      "verifySignature",
      "vest",
      "vestContainer",
      "vestItems",
      "vestMagazines",
      "viewDistance",
      "visibleCompass",
      "visibleGps",
      "visibleMap",
      "visiblePosition",
      "visiblePositionASL",
      "visibleScoretable",
      "visibleWatch",
      "waves",
      "waypointAttachedObject",
      "waypointAttachedVehicle",
      "waypointAttachObject",
      "waypointAttachVehicle",
      "waypointBehaviour",
      "waypointCombatMode",
      "waypointCompletionRadius",
      "waypointDescription",
      "waypointForceBehaviour",
      "waypointFormation",
      "waypointHousePosition",
      "waypointLoiterAltitude",
      "waypointLoiterRadius",
      "waypointLoiterType",
      "waypointName",
      "waypointPosition",
      "waypoints",
      "waypointScript",
      "waypointsEnabledUAV",
      "waypointShow",
      "waypointSpeed",
      "waypointStatements",
      "waypointTimeout",
      "waypointTimeoutCurrent",
      "waypointType",
      "waypointVisible",
      "weaponAccessories",
      "weaponAccessoriesCargo",
      "weaponCargo",
      "weaponDirection",
      "weaponInertia",
      "weaponLowered",
      "weaponReloadingTime",
      "weapons",
      "weaponsInfo",
      "weaponsItems",
      "weaponsItemsCargo",
      "weaponState",
      "weaponsTurret",
      "weightRTD",
      "WFSideText",
      "wind",
      "windDir",
      "windRTD",
      "windStr",
      "wingsForcesRTD",
      "worldName",
      "worldSize",
      "worldToModel",
      "worldToModelVisual",
      "worldToScreen"
    ];
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: "define undef ifdef ifndef else endif include if",
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS, { className: "string" }),
        {
          begin: /<[^\n>]*>/,
          end: /$/,
          illegal: "\\n"
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    return {
      name: "SQF",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN,
        literal: LITERAL
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.NUMBER_MODE,
        VARIABLE,
        FUNCTION,
        STRINGS,
        PREPROCESSOR
      ],
      illegal: [
        /\$[^a-fA-F0-9]/,
        /\w\$/,
        /\?/,
        /@/,
        / \| /,
        /[a-zA-Z_]\./,
        /\:\=/,
        /\[\:/
      ]
    };
  };
  module.exports = sqf;
});

// node_modules/highlight.js/lib/languages/sql.js
var require_sql = __commonJS((exports, module) => {
  var sql = function(hljs) {
    const regex6 = hljs.regex;
    const COMMENT_MODE = hljs.COMMENT("--", "$");
    const STRING = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [{ begin: /''/ }]
        }
      ]
    };
    const QUOTED_IDENTIFIER = {
      begin: /"/,
      end: /"/,
      contains: [{ begin: /""/ }]
    };
    const LITERALS = [
      "true",
      "false",
      "unknown"
    ];
    const MULTI_WORD_TYPES = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ];
    const TYPES = [
      "bigint",
      "binary",
      "blob",
      "boolean",
      "char",
      "character",
      "clob",
      "date",
      "dec",
      "decfloat",
      "decimal",
      "float",
      "int",
      "integer",
      "interval",
      "nchar",
      "nclob",
      "national",
      "numeric",
      "real",
      "row",
      "smallint",
      "time",
      "timestamp",
      "varchar",
      "varying",
      "varbinary"
    ];
    const NON_RESERVED_WORDS = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ];
    const RESERVED_WORDS3 = [
      "abs",
      "acos",
      "all",
      "allocate",
      "alter",
      "and",
      "any",
      "are",
      "array",
      "array_agg",
      "array_max_cardinality",
      "as",
      "asensitive",
      "asin",
      "asymmetric",
      "at",
      "atan",
      "atomic",
      "authorization",
      "avg",
      "begin",
      "begin_frame",
      "begin_partition",
      "between",
      "bigint",
      "binary",
      "blob",
      "boolean",
      "both",
      "by",
      "call",
      "called",
      "cardinality",
      "cascaded",
      "case",
      "cast",
      "ceil",
      "ceiling",
      "char",
      "char_length",
      "character",
      "character_length",
      "check",
      "classifier",
      "clob",
      "close",
      "coalesce",
      "collate",
      "collect",
      "column",
      "commit",
      "condition",
      "connect",
      "constraint",
      "contains",
      "convert",
      "copy",
      "corr",
      "corresponding",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "create",
      "cross",
      "cube",
      "cume_dist",
      "current",
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_row",
      "current_schema",
      "current_time",
      "current_timestamp",
      "current_path",
      "current_role",
      "current_transform_group_for_type",
      "current_user",
      "cursor",
      "cycle",
      "date",
      "day",
      "deallocate",
      "dec",
      "decimal",
      "decfloat",
      "declare",
      "default",
      "define",
      "delete",
      "dense_rank",
      "deref",
      "describe",
      "deterministic",
      "disconnect",
      "distinct",
      "double",
      "drop",
      "dynamic",
      "each",
      "element",
      "else",
      "empty",
      "end",
      "end_frame",
      "end_partition",
      "end-exec",
      "equals",
      "escape",
      "every",
      "except",
      "exec",
      "execute",
      "exists",
      "exp",
      "external",
      "extract",
      "false",
      "fetch",
      "filter",
      "first_value",
      "float",
      "floor",
      "for",
      "foreign",
      "frame_row",
      "free",
      "from",
      "full",
      "function",
      "fusion",
      "get",
      "global",
      "grant",
      "group",
      "grouping",
      "groups",
      "having",
      "hold",
      "hour",
      "identity",
      "in",
      "indicator",
      "initial",
      "inner",
      "inout",
      "insensitive",
      "insert",
      "int",
      "integer",
      "intersect",
      "intersection",
      "interval",
      "into",
      "is",
      "join",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "language",
      "large",
      "last_value",
      "lateral",
      "lead",
      "leading",
      "left",
      "like",
      "like_regex",
      "listagg",
      "ln",
      "local",
      "localtime",
      "localtimestamp",
      "log",
      "log10",
      "lower",
      "match",
      "match_number",
      "match_recognize",
      "matches",
      "max",
      "member",
      "merge",
      "method",
      "min",
      "minute",
      "mod",
      "modifies",
      "module",
      "month",
      "multiset",
      "national",
      "natural",
      "nchar",
      "nclob",
      "new",
      "no",
      "none",
      "normalize",
      "not",
      "nth_value",
      "ntile",
      "null",
      "nullif",
      "numeric",
      "octet_length",
      "occurrences_regex",
      "of",
      "offset",
      "old",
      "omit",
      "on",
      "one",
      "only",
      "open",
      "or",
      "order",
      "out",
      "outer",
      "over",
      "overlaps",
      "overlay",
      "parameter",
      "partition",
      "pattern",
      "per",
      "percent",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "period",
      "portion",
      "position",
      "position_regex",
      "power",
      "precedes",
      "precision",
      "prepare",
      "primary",
      "procedure",
      "ptf",
      "range",
      "rank",
      "reads",
      "real",
      "recursive",
      "ref",
      "references",
      "referencing",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "release",
      "result",
      "return",
      "returns",
      "revoke",
      "right",
      "rollback",
      "rollup",
      "row",
      "row_number",
      "rows",
      "running",
      "savepoint",
      "scope",
      "scroll",
      "search",
      "second",
      "seek",
      "select",
      "sensitive",
      "session_user",
      "set",
      "show",
      "similar",
      "sin",
      "sinh",
      "skip",
      "smallint",
      "some",
      "specific",
      "specifictype",
      "sql",
      "sqlexception",
      "sqlstate",
      "sqlwarning",
      "sqrt",
      "start",
      "static",
      "stddev_pop",
      "stddev_samp",
      "submultiset",
      "subset",
      "substring",
      "substring_regex",
      "succeeds",
      "sum",
      "symmetric",
      "system",
      "system_time",
      "system_user",
      "table",
      "tablesample",
      "tan",
      "tanh",
      "then",
      "time",
      "timestamp",
      "timezone_hour",
      "timezone_minute",
      "to",
      "trailing",
      "translate",
      "translate_regex",
      "translation",
      "treat",
      "trigger",
      "trim",
      "trim_array",
      "true",
      "truncate",
      "uescape",
      "union",
      "unique",
      "unknown",
      "unnest",
      "update",
      "upper",
      "user",
      "using",
      "value",
      "values",
      "value_of",
      "var_pop",
      "var_samp",
      "varbinary",
      "varchar",
      "varying",
      "versioning",
      "when",
      "whenever",
      "where",
      "width_bucket",
      "window",
      "with",
      "within",
      "without",
      "year"
    ];
    const RESERVED_FUNCTIONS = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket"
    ];
    const POSSIBLE_WITHOUT_PARENS = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ];
    const COMBOS = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "add constraint",
      "grouping sets",
      "on overflow",
      "character set",
      "respect nulls",
      "ignore nulls",
      "nulls first",
      "nulls last",
      "depth first",
      "breadth first"
    ];
    const FUNCTIONS = RESERVED_FUNCTIONS;
    const KEYWORDS2 = [
      ...RESERVED_WORDS3,
      ...NON_RESERVED_WORDS
    ].filter((keyword) => {
      return !RESERVED_FUNCTIONS.includes(keyword);
    });
    const VARIABLE = {
      className: "variable",
      begin: /@[a-z0-9][a-z0-9_]*/
    };
    const OPERATOR = {
      className: "operator",
      begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0
    };
    const FUNCTION_CALL = {
      begin: regex6.concat(/\b/, regex6.either(...FUNCTIONS), /\s*\(/),
      relevance: 0,
      keywords: { built_in: FUNCTIONS }
    };
    function reduceRelevancy(list3, {
      exceptions,
      when
    } = {}) {
      const qualifyFn = when;
      exceptions = exceptions || [];
      return list3.map((item) => {
        if (item.match(/\|\d+$/) || exceptions.includes(item)) {
          return item;
        } else if (qualifyFn(item)) {
          return `${item}|0`;
        } else {
          return item;
        }
      });
    }
    return {
      name: "SQL",
      case_insensitive: true,
      illegal: /[{}]|<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword: reduceRelevancy(KEYWORDS2, { when: (x2) => x2.length < 3 }),
        literal: LITERALS,
        type: TYPES,
        built_in: POSSIBLE_WITHOUT_PARENS
      },
      contains: [
        {
          begin: regex6.either(...COMBOS),
          relevance: 0,
          keywords: {
            $pattern: /[\w\.]+/,
            keyword: KEYWORDS2.concat(COMBOS),
            literal: LITERALS,
            type: TYPES
          }
        },
        {
          className: "type",
          begin: regex6.either(...MULTI_WORD_TYPES)
        },
        FUNCTION_CALL,
        VARIABLE,
        STRING,
        QUOTED_IDENTIFIER,
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        COMMENT_MODE,
        OPERATOR
      ]
    };
  };
  module.exports = sql;
});

// node_modules/highlight.js/lib/languages/stan.js
var require_stan = __commonJS((exports, module) => {
  var stan = function(hljs) {
    const regex6 = hljs.regex;
    const BLOCKS = [
      "functions",
      "model",
      "data",
      "parameters",
      "quantities",
      "transformed",
      "generated"
    ];
    const STATEMENTS = [
      "for",
      "in",
      "if",
      "else",
      "while",
      "break",
      "continue",
      "return"
    ];
    const TYPES = [
      "array",
      "tuple",
      "complex",
      "int",
      "real",
      "vector",
      "complex_vector",
      "ordered",
      "positive_ordered",
      "simplex",
      "unit_vector",
      "row_vector",
      "complex_row_vector",
      "matrix",
      "complex_matrix",
      "cholesky_factor_corr|10",
      "cholesky_factor_cov|10",
      "corr_matrix|10",
      "cov_matrix|10",
      "void"
    ];
    const FUNCTIONS = [
      "abs",
      "acos",
      "acosh",
      "add_diag",
      "algebra_solver",
      "algebra_solver_newton",
      "append_array",
      "append_col",
      "append_row",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "bessel_first_kind",
      "bessel_second_kind",
      "binary_log_loss",
      "block",
      "cbrt",
      "ceil",
      "chol2inv",
      "cholesky_decompose",
      "choose",
      "col",
      "cols",
      "columns_dot_product",
      "columns_dot_self",
      "complex_schur_decompose",
      "complex_schur_decompose_t",
      "complex_schur_decompose_u",
      "conj",
      "cos",
      "cosh",
      "cov_exp_quad",
      "crossprod",
      "csr_extract",
      "csr_extract_u",
      "csr_extract_v",
      "csr_extract_w",
      "csr_matrix_times_vector",
      "csr_to_dense_matrix",
      "cumulative_sum",
      "dae",
      "dae_tol",
      "determinant",
      "diag_matrix",
      "diagonal",
      "diag_post_multiply",
      "diag_pre_multiply",
      "digamma",
      "dims",
      "distance",
      "dot_product",
      "dot_self",
      "eigendecompose",
      "eigendecompose_sym",
      "eigenvalues",
      "eigenvalues_sym",
      "eigenvectors",
      "eigenvectors_sym",
      "erf",
      "erfc",
      "exp",
      "exp2",
      "expm1",
      "falling_factorial",
      "fdim",
      "fft",
      "fft2",
      "floor",
      "fma",
      "fmax",
      "fmin",
      "fmod",
      "gamma_p",
      "gamma_q",
      "generalized_inverse",
      "get_imag",
      "get_real",
      "head",
      "hmm_hidden_state_prob",
      "hmm_marginal",
      "hypot",
      "identity_matrix",
      "inc_beta",
      "integrate_1d",
      "integrate_ode",
      "integrate_ode_adams",
      "integrate_ode_bdf",
      "integrate_ode_rk45",
      "int_step",
      "inv",
      "inv_cloglog",
      "inv_erfc",
      "inverse",
      "inverse_spd",
      "inv_fft",
      "inv_fft2",
      "inv_inc_beta",
      "inv_logit",
      "inv_Phi",
      "inv_sqrt",
      "inv_square",
      "is_inf",
      "is_nan",
      "lambert_w0",
      "lambert_wm1",
      "lbeta",
      "lchoose",
      "ldexp",
      "lgamma",
      "linspaced_array",
      "linspaced_int_array",
      "linspaced_row_vector",
      "linspaced_vector",
      "lmgamma",
      "lmultiply",
      "log",
      "log1m",
      "log1m_exp",
      "log1m_inv_logit",
      "log1p",
      "log1p_exp",
      "log_determinant",
      "log_diff_exp",
      "log_falling_factorial",
      "log_inv_logit",
      "log_inv_logit_diff",
      "logit",
      "log_mix",
      "log_modified_bessel_first_kind",
      "log_rising_factorial",
      "log_softmax",
      "log_sum_exp",
      "machine_precision",
      "map_rect",
      "matrix_exp",
      "matrix_exp_multiply",
      "matrix_power",
      "max",
      "mdivide_left_spd",
      "mdivide_left_tri_low",
      "mdivide_right_spd",
      "mdivide_right_tri_low",
      "mean",
      "min",
      "modified_bessel_first_kind",
      "modified_bessel_second_kind",
      "multiply_lower_tri_self_transpose",
      "negative_infinity",
      "norm",
      "norm1",
      "norm2",
      "not_a_number",
      "num_elements",
      "ode_adams",
      "ode_adams_tol",
      "ode_adjoint_tol_ctl",
      "ode_bdf",
      "ode_bdf_tol",
      "ode_ckrk",
      "ode_ckrk_tol",
      "ode_rk45",
      "ode_rk45_tol",
      "one_hot_array",
      "one_hot_int_array",
      "one_hot_row_vector",
      "one_hot_vector",
      "ones_array",
      "ones_int_array",
      "ones_row_vector",
      "ones_vector",
      "owens_t",
      "Phi",
      "Phi_approx",
      "polar",
      "positive_infinity",
      "pow",
      "print",
      "prod",
      "proj",
      "qr",
      "qr_Q",
      "qr_R",
      "qr_thin",
      "qr_thin_Q",
      "qr_thin_R",
      "quad_form",
      "quad_form_diag",
      "quad_form_sym",
      "quantile",
      "rank",
      "reduce_sum",
      "reject",
      "rep_array",
      "rep_matrix",
      "rep_row_vector",
      "rep_vector",
      "reverse",
      "rising_factorial",
      "round",
      "row",
      "rows",
      "rows_dot_product",
      "rows_dot_self",
      "scale_matrix_exp_multiply",
      "sd",
      "segment",
      "sin",
      "singular_values",
      "sinh",
      "size",
      "softmax",
      "sort_asc",
      "sort_desc",
      "sort_indices_asc",
      "sort_indices_desc",
      "sqrt",
      "square",
      "squared_distance",
      "step",
      "sub_col",
      "sub_row",
      "sum",
      "svd",
      "svd_U",
      "svd_V",
      "symmetrize_from_lower_tri",
      "tail",
      "tan",
      "tanh",
      "target",
      "tcrossprod",
      "tgamma",
      "to_array_1d",
      "to_array_2d",
      "to_complex",
      "to_int",
      "to_matrix",
      "to_row_vector",
      "to_vector",
      "trace",
      "trace_gen_quad_form",
      "trace_quad_form",
      "trigamma",
      "trunc",
      "uniform_simplex",
      "variance",
      "zeros_array",
      "zeros_int_array",
      "zeros_row_vector"
    ];
    const DISTRIBUTIONS = [
      "bernoulli",
      "bernoulli_logit",
      "bernoulli_logit_glm",
      "beta",
      "beta_binomial",
      "beta_proportion",
      "binomial",
      "binomial_logit",
      "categorical",
      "categorical_logit",
      "categorical_logit_glm",
      "cauchy",
      "chi_square",
      "dirichlet",
      "discrete_range",
      "double_exponential",
      "exp_mod_normal",
      "exponential",
      "frechet",
      "gamma",
      "gaussian_dlm_obs",
      "gumbel",
      "hmm_latent",
      "hypergeometric",
      "inv_chi_square",
      "inv_gamma",
      "inv_wishart",
      "inv_wishart_cholesky",
      "lkj_corr",
      "lkj_corr_cholesky",
      "logistic",
      "loglogistic",
      "lognormal",
      "multi_gp",
      "multi_gp_cholesky",
      "multinomial",
      "multinomial_logit",
      "multi_normal",
      "multi_normal_cholesky",
      "multi_normal_prec",
      "multi_student_cholesky_t",
      "multi_student_t",
      "multi_student_t_cholesky",
      "neg_binomial",
      "neg_binomial_2",
      "neg_binomial_2_log",
      "neg_binomial_2_log_glm",
      "normal",
      "normal_id_glm",
      "ordered_logistic",
      "ordered_logistic_glm",
      "ordered_probit",
      "pareto",
      "pareto_type_2",
      "poisson",
      "poisson_log",
      "poisson_log_glm",
      "rayleigh",
      "scaled_inv_chi_square",
      "skew_double_exponential",
      "skew_normal",
      "std_normal",
      "std_normal_log",
      "student_t",
      "uniform",
      "von_mises",
      "weibull",
      "wiener",
      "wishart",
      "wishart_cholesky"
    ];
    const BLOCK_COMMENT = hljs.COMMENT(/\/\*/, /\*\//, {
      relevance: 0,
      contains: [
        {
          scope: "doctag",
          match: /@(return|param)/
        }
      ]
    });
    const INCLUDE = {
      scope: "meta",
      begin: /#include\b/,
      end: /$/,
      contains: [
        {
          match: /[a-z][a-z-._]+/,
          scope: "string"
        },
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const RANGE_CONSTRAINTS = [
      "lower",
      "upper",
      "offset",
      "multiplier"
    ];
    return {
      name: "Stan",
      aliases: ["stanfuncs"],
      keywords: {
        $pattern: hljs.IDENT_RE,
        title: BLOCKS,
        type: TYPES,
        keyword: STATEMENTS,
        built_in: FUNCTIONS
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        INCLUDE,
        hljs.HASH_COMMENT_MODE,
        BLOCK_COMMENT,
        {
          scope: "built_in",
          match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
          relevance: 0
        },
        {
          match: regex6.concat(/[<,]\s*/, regex6.either(...RANGE_CONSTRAINTS), /\s*=/),
          keywords: RANGE_CONSTRAINTS
        },
        {
          scope: "keyword",
          match: /\btarget(?=\s*\+=)/
        },
        {
          match: [
            /~\s*/,
            regex6.either(...DISTRIBUTIONS),
            /(?:\(\))/,
            /\s*T(?=\s*\[)/
          ],
          scope: {
            2: "built_in",
            4: "keyword"
          }
        },
        {
          scope: "built_in",
          keywords: DISTRIBUTIONS,
          begin: regex6.concat(/\w*/, regex6.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
        },
        {
          begin: [
            /~/,
            /\s*/,
            regex6.concat(regex6.either(...DISTRIBUTIONS), /(?=\s*[\(.*\)])/)
          ],
          scope: { 3: "built_in" }
        },
        {
          begin: [
            /~/,
            /\s*\w+(?=\s*[\(.*\)])/,
            "(?!.*/\b(" + regex6.either(...DISTRIBUTIONS) + ")\b)"
          ],
          scope: { 2: "title.function" }
        },
        {
          scope: "title.function",
          begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
        },
        {
          scope: "number",
          match: regex6.concat(/(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/, /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/),
          relevance: 0
        },
        {
          scope: "string",
          begin: /"/,
          end: /"/
        }
      ]
    };
  };
  module.exports = stan;
});

// node_modules/highlight.js/lib/languages/stata.js
var require_stata = __commonJS((exports, module) => {
  var stata = function(hljs) {
    return {
      name: "Stata",
      aliases: [
        "do",
        "ado"
      ],
      case_insensitive: true,
      keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
      contains: [
        {
          className: "symbol",
          begin: /`[a-zA-Z0-9_]+'/
        },
        {
          className: "variable",
          begin: /\$\{?[a-zA-Z0-9_]+\}?/,
          relevance: 0
        },
        {
          className: "string",
          variants: [
            { begin: '`"[^\r\n]*?"\'' },
            { begin: '"[^\r\n"]*"' }
          ]
        },
        {
          className: "built_in",
          variants: [{ begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()" }]
        },
        hljs.COMMENT("^[ \t]*\\*.*$", false),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  };
  module.exports = stata;
});

// node_modules/highlight.js/lib/languages/step21.js
var require_step21 = __commonJS((exports, module) => {
  var step21 = function(hljs) {
    const STEP21_IDENT_RE = "[A-Z_][A-Z0-9_.]*";
    const STEP21_KEYWORDS = {
      $pattern: STEP21_IDENT_RE,
      keyword: [
        "HEADER",
        "ENDSEC",
        "DATA"
      ]
    };
    const STEP21_START = {
      className: "meta",
      begin: "ISO-10303-21;",
      relevance: 10
    };
    const STEP21_CLOSE = {
      className: "meta",
      begin: "END-ISO-10303-21;",
      relevance: 10
    };
    return {
      name: "STEP Part 21",
      aliases: [
        "p21",
        "step",
        "stp"
      ],
      case_insensitive: true,
      keywords: STEP21_KEYWORDS,
      contains: [
        STEP21_START,
        STEP21_CLOSE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT("/\\*\\*!", "\\*/"),
        hljs.C_NUMBER_MODE,
        hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "#",
              end: "\\d+",
              illegal: "\\W"
            }
          ]
        }
      ]
    };
  };
  module.exports = step21;
});

// node_modules/highlight.js/lib/languages/stylus.js
var require_stylus = __commonJS((exports, module) => {
  var stylus = function(hljs) {
    const modes = MODES(hljs);
    const AT_MODIFIERS = "and or not only";
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + hljs.IDENT_RE
    };
    const AT_KEYWORDS = [
      "charset",
      "css",
      "debug",
      "extend",
      "font-face",
      "for",
      "import",
      "include",
      "keyframes",
      "media",
      "mixin",
      "page",
      "warn",
      "while"
    ];
    const LOOKAHEAD_TAG_END = "(?=[.\\s\\n[:,(])";
    const ILLEGAL = [
      "\\?",
      "(\\bReturn\\b)",
      "(\\bEnd\\b)",
      "(\\bend\\b)",
      "(\\bdef\\b)",
      ";",
      "#\\s",
      "\\*\\s",
      "===\\s",
      "\\|",
      "%"
    ];
    return {
      name: "Stylus",
      aliases: ["styl"],
      case_insensitive: false,
      keywords: "if else for in",
      illegal: "(" + ILLEGAL.join("|") + ")",
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        modes.HEXCOLOR,
        {
          begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
          className: "selector-class"
        },
        {
          begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
          className: "selector-id"
        },
        {
          begin: "\\b(" + TAGS.join("|") + ")" + LOOKAHEAD_TAG_END,
          className: "selector-tag"
        },
        {
          className: "selector-pseudo",
          begin: "&?:(" + PSEUDO_CLASSES.join("|") + ")" + LOOKAHEAD_TAG_END
        },
        {
          className: "selector-pseudo",
          begin: "&?:(:)?(" + PSEUDO_ELEMENTS.join("|") + ")" + LOOKAHEAD_TAG_END
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "keyword",
          begin: /@media/,
          starts: {
            end: /[{;}]/,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: AT_MODIFIERS,
              attribute: MEDIA_FEATURES.join(" ")
            },
            contains: [modes.CSS_NUMBER_MODE]
          }
        },
        {
          className: "keyword",
          begin: "@((-(o|moz|ms|webkit)-)?(" + AT_KEYWORDS.join("|") + "))\\b"
        },
        VARIABLE,
        modes.CSS_NUMBER_MODE,
        {
          className: "function",
          begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
          illegal: "[\\n]",
          returnBegin: true,
          contains: [
            {
              className: "title",
              begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                modes.HEXCOLOR,
                VARIABLE,
                hljs.APOS_STRING_MODE,
                modes.CSS_NUMBER_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            }
          ]
        },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b",
          starts: {
            end: /;|$/,
            contains: [
              modes.HEXCOLOR,
              VARIABLE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              modes.CSS_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              modes.IMPORTANT,
              modes.FUNCTION_DISPATCH
            ],
            illegal: /\./,
            relevance: 0
          }
        },
        modes.FUNCTION_DISPATCH
      ]
    };
  };
  var MODES = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  var TAGS = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  var MEDIA_FEATURES = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ];
  var PSEUDO_CLASSES = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    "host",
    "host-context",
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    "lang",
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    "nth-child",
    "nth-col",
    "nth-last-child",
    "nth-last-col",
    "nth-last-of-type",
    "nth-of-type",
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
  ];
  var PSEUDO_ELEMENTS = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ];
  var ATTRIBUTES = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
  ].reverse();
  module.exports = stylus;
});

// node_modules/highlight.js/lib/languages/subunit.js
var require_subunit = __commonJS((exports, module) => {
  var subunit = function(hljs) {
    const DETAILS = {
      className: "string",
      begin: "\\[\n(multipart)?",
      end: "\\]\n"
    };
    const TIME = {
      className: "string",
      begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
    };
    const PROGRESSVALUE = {
      className: "string",
      begin: "(\\+|-)\\d+"
    };
    const KEYWORDS2 = {
      className: "keyword",
      relevance: 10,
      variants: [
        { begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?" },
        { begin: "^progress(:?)(\\s+)?(pop|push)?" },
        { begin: "^tags:" },
        { begin: "^time:" }
      ]
    };
    return {
      name: "SubUnit",
      case_insensitive: true,
      contains: [
        DETAILS,
        TIME,
        PROGRESSVALUE,
        KEYWORDS2
      ]
    };
  };
  module.exports = subunit;
});

// node_modules/highlight.js/lib/languages/swift.js
var require_swift = __commonJS((exports, module) => {
  var source = function(re2) {
    if (!re2)
      return null;
    if (typeof re2 === "string")
      return re2;
    return re2.source;
  };
  var lookahead = function(re2) {
    return concat("(?=", re2, ")");
  };
  var concat = function(...args) {
    const joined = args.map((x2) => source(x2)).join("");
    return joined;
  };
  var stripOptionsFromArgs = function(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  };
  var either = function(...args) {
    const opts = stripOptionsFromArgs(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x2) => source(x2)).join("|") + ")";
    return joined;
  };
  var swift = function(hljs) {
    const WHITESPACE = {
      match: /\s+/,
      relevance: 0
    };
    const BLOCK_COMMENT = hljs.COMMENT("/\\*", "\\*/", { contains: ["self"] });
    const COMMENTS = [
      hljs.C_LINE_COMMENT_MODE,
      BLOCK_COMMENT
    ];
    const DOT_KEYWORD = {
      match: [
        /\./,
        either(...dotKeywords, ...optionalDotKeywords)
      ],
      className: { 2: "keyword" }
    };
    const KEYWORD_GUARD = {
      match: concat(/\./, either(...keywords)),
      relevance: 0
    };
    const PLAIN_KEYWORDS = keywords.filter((kw) => typeof kw === "string").concat(["_|0"]);
    const REGEX_KEYWORDS = keywords.filter((kw) => typeof kw !== "string").concat(keywordTypes).map(keywordWrapper);
    const KEYWORD = { variants: [
      {
        className: "keyword",
        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
      }
    ] };
    const KEYWORDS2 = {
      $pattern: either(/\b\w+/, /#\w+/),
      keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),
      literal: literals
    };
    const KEYWORD_MODES = [
      DOT_KEYWORD,
      KEYWORD_GUARD,
      KEYWORD
    ];
    const BUILT_IN_GUARD = {
      match: concat(/\./, either(...builtIns)),
      relevance: 0
    };
    const BUILT_IN = {
      className: "built_in",
      match: concat(/\b/, either(...builtIns), /(?=\()/)
    };
    const BUILT_INS = [
      BUILT_IN_GUARD,
      BUILT_IN
    ];
    const OPERATOR_GUARD = {
      match: /->/,
      relevance: 0
    };
    const OPERATOR = {
      className: "operator",
      relevance: 0,
      variants: [
        { match: operator },
        {
          match: `\\.(\\.|${operatorCharacter})+`
        }
      ]
    };
    const OPERATORS2 = [
      OPERATOR_GUARD,
      OPERATOR
    ];
    const decimalDigits = "([0-9]_*)+";
    const hexDigits = "([0-9a-fA-F]_*)+";
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
        { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
        { match: /\b0o([0-7]_*)+\b/ },
        { match: /\b0b([01]_*)+\b/ }
      ]
    };
    const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
      className: "subst",
      variants: [
        { match: concat(/\\/, rawDelimiter, /[0\\tnr"']/) },
        { match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
      ]
    });
    const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
      className: "subst",
      match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
    });
    const INTERPOLATION = (rawDelimiter = "") => ({
      className: "subst",
      label: "interpol",
      begin: concat(/\\/, rawDelimiter, /\(/),
      end: /\)/
    });
    const MULTILINE_STRING = (rawDelimiter = "") => ({
      begin: concat(rawDelimiter, /"""/),
      end: concat(/"""/, rawDelimiter),
      contains: [
        ESCAPED_CHARACTER(rawDelimiter),
        ESCAPED_NEWLINE(rawDelimiter),
        INTERPOLATION(rawDelimiter)
      ]
    });
    const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
      begin: concat(rawDelimiter, /"/),
      end: concat(/"/, rawDelimiter),
      contains: [
        ESCAPED_CHARACTER(rawDelimiter),
        INTERPOLATION(rawDelimiter)
      ]
    });
    const STRING = {
      className: "string",
      variants: [
        MULTILINE_STRING(),
        MULTILINE_STRING("#"),
        MULTILINE_STRING("##"),
        MULTILINE_STRING("###"),
        SINGLE_LINE_STRING(),
        SINGLE_LINE_STRING("#"),
        SINGLE_LINE_STRING("##"),
        SINGLE_LINE_STRING("###")
      ]
    };
    const REGEXP_CONTENTS = [
      hljs.BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ];
    const BARE_REGEXP_LITERAL = {
      begin: /\/[^\s](?=[^/\n]*\/)/,
      end: /\//,
      contains: REGEXP_CONTENTS
    };
    const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {
      const begin = concat(rawDelimiter, /\//);
      const end = concat(/\//, rawDelimiter);
      return {
        begin,
        end,
        contains: [
          ...REGEXP_CONTENTS,
          {
            scope: "comment",
            begin: `#(?!.*${end})`,
            end: /$/
          }
        ]
      };
    };
    const REGEXP = {
      scope: "regexp",
      variants: [
        EXTENDED_REGEXP_LITERAL("###"),
        EXTENDED_REGEXP_LITERAL("##"),
        EXTENDED_REGEXP_LITERAL("#"),
        BARE_REGEXP_LITERAL
      ]
    };
    const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };
    const IMPLICIT_PARAMETER = {
      className: "variable",
      match: /\$\d+/
    };
    const PROPERTY_WRAPPER_PROJECTION = {
      className: "variable",
      match: `\\\$${identifierCharacter}+`
    };
    const IDENTIFIERS = [
      QUOTED_IDENTIFIER,
      IMPLICIT_PARAMETER,
      PROPERTY_WRAPPER_PROJECTION
    ];
    const AVAILABLE_ATTRIBUTE = {
      match: /(@|#(un)?)available/,
      scope: "keyword",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: availabilityKeywords,
          contains: [
            ...OPERATORS2,
            NUMBER,
            STRING
          ]
        }
      ] }
    };
    const KEYWORD_ATTRIBUTE = {
      scope: "keyword",
      match: concat(/@/, either(...keywordAttributes))
    };
    const USER_DEFINED_ATTRIBUTE = {
      scope: "meta",
      match: concat(/@/, identifier)
    };
    const ATTRIBUTES = [
      AVAILABLE_ATTRIBUTE,
      KEYWORD_ATTRIBUTE,
      USER_DEFINED_ATTRIBUTE
    ];
    const TYPE = {
      match: lookahead(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          className: "type",
          match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, "+")
        },
        {
          className: "type",
          match: typeIdentifier,
          relevance: 0
        },
        {
          match: /[?!]+/,
          relevance: 0
        },
        {
          match: /\.\.\./,
          relevance: 0
        },
        {
          match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
          relevance: 0
        }
      ]
    };
    const GENERIC_ARGUMENTS = {
      begin: /</,
      end: />/,
      keywords: KEYWORDS2,
      contains: [
        ...COMMENTS,
        ...KEYWORD_MODES,
        ...ATTRIBUTES,
        OPERATOR_GUARD,
        TYPE
      ]
    };
    TYPE.contains.push(GENERIC_ARGUMENTS);
    const TUPLE_ELEMENT_NAME = {
      match: concat(identifier, /\s*:/),
      keywords: "_|0",
      relevance: 0
    };
    const TUPLE = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: KEYWORDS2,
      contains: [
        "self",
        TUPLE_ELEMENT_NAME,
        ...COMMENTS,
        REGEXP,
        ...KEYWORD_MODES,
        ...BUILT_INS,
        ...OPERATORS2,
        NUMBER,
        STRING,
        ...IDENTIFIERS,
        ...ATTRIBUTES,
        TYPE
      ]
    };
    const GENERIC_PARAMETERS = {
      begin: /</,
      end: />/,
      keywords: "repeat each",
      contains: [
        ...COMMENTS,
        TYPE
      ]
    };
    const FUNCTION_PARAMETER_NAME = {
      begin: either(lookahead(concat(identifier, /\s*:/)), lookahead(concat(identifier, /\s+/, identifier, /\s*:/))),
      end: /:/,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          match: /\b_\b/
        },
        {
          className: "params",
          match: identifier
        }
      ]
    };
    const FUNCTION_PARAMETERS = {
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      contains: [
        FUNCTION_PARAMETER_NAME,
        ...COMMENTS,
        ...KEYWORD_MODES,
        ...OPERATORS2,
        NUMBER,
        STRING,
        ...ATTRIBUTES,
        TYPE,
        TUPLE
      ],
      endsParent: true,
      illegal: /["']/
    };
    const FUNCTION_OR_MACRO = {
      match: [
        /(func|macro)/,
        /\s+/,
        either(QUOTED_IDENTIFIER.match, identifier, operator)
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        GENERIC_PARAMETERS,
        FUNCTION_PARAMETERS,
        WHITESPACE
      ],
      illegal: [
        /\[/,
        /%/
      ]
    };
    const INIT_SUBSCRIPT = {
      match: [
        /\b(?:subscript|init[?!]?)/,
        /\s*(?=[<(])/
      ],
      className: { 1: "keyword" },
      contains: [
        GENERIC_PARAMETERS,
        FUNCTION_PARAMETERS,
        WHITESPACE
      ],
      illegal: /\[|%/
    };
    const OPERATOR_DECLARATION = {
      match: [
        /operator/,
        /\s+/,
        operator
      ],
      className: {
        1: "keyword",
        3: "title"
      }
    };
    const PRECEDENCEGROUP = {
      begin: [
        /precedencegroup/,
        /\s+/,
        typeIdentifier
      ],
      className: {
        1: "keyword",
        3: "title"
      },
      contains: [TYPE],
      keywords: [
        ...precedencegroupKeywords,
        ...literals
      ],
      end: /}/
    };
    for (const variant of STRING.variants) {
      const interpolation = variant.contains.find((mode) => mode.label === "interpol");
      interpolation.keywords = KEYWORDS2;
      const submodes = [
        ...KEYWORD_MODES,
        ...BUILT_INS,
        ...OPERATORS2,
        NUMBER,
        STRING,
        ...IDENTIFIERS
      ];
      interpolation.contains = [
        ...submodes,
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            "self",
            ...submodes
          ]
        }
      ];
    }
    return {
      name: "Swift",
      keywords: KEYWORDS2,
      contains: [
        ...COMMENTS,
        FUNCTION_OR_MACRO,
        INIT_SUBSCRIPT,
        {
          beginKeywords: "struct protocol class extension enum actor",
          end: "\\{",
          excludeEnd: true,
          keywords: KEYWORDS2,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              className: "title.class",
              begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
            }),
            ...KEYWORD_MODES
          ]
        },
        OPERATOR_DECLARATION,
        PRECEDENCEGROUP,
        {
          beginKeywords: "import",
          end: /$/,
          contains: [...COMMENTS],
          relevance: 0
        },
        REGEXP,
        ...KEYWORD_MODES,
        ...BUILT_INS,
        ...OPERATORS2,
        NUMBER,
        STRING,
        ...IDENTIFIERS,
        ...ATTRIBUTES,
        TYPE,
        TUPLE
      ]
    };
  };
  var keywordWrapper = (keyword) => concat(/\b/, keyword, /\w$/.test(keyword) ? /\b/ : /\B/);
  var dotKeywords = [
    "Protocol",
    "Type"
  ].map(keywordWrapper);
  var optionalDotKeywords = [
    "init",
    "self"
  ].map(keywordWrapper);
  var keywordTypes = [
    "Any",
    "Self"
  ];
  var keywords = [
    "actor",
    "any",
    "associatedtype",
    "async",
    "await",
    /as\?/,
    /as!/,
    "as",
    "borrowing",
    "break",
    "case",
    "catch",
    "class",
    "consume",
    "consuming",
    "continue",
    "convenience",
    "copy",
    "default",
    "defer",
    "deinit",
    "didSet",
    "distributed",
    "do",
    "dynamic",
    "each",
    "else",
    "enum",
    "extension",
    "fallthrough",
    /fileprivate\(set\)/,
    "fileprivate",
    "final",
    "for",
    "func",
    "get",
    "guard",
    "if",
    "import",
    "indirect",
    "infix",
    /init\?/,
    /init!/,
    "inout",
    /internal\(set\)/,
    "internal",
    "in",
    "is",
    "isolated",
    "nonisolated",
    "lazy",
    "let",
    "macro",
    "mutating",
    "nonmutating",
    /open\(set\)/,
    "open",
    "operator",
    "optional",
    "override",
    "postfix",
    "precedencegroup",
    "prefix",
    /private\(set\)/,
    "private",
    "protocol",
    /public\(set\)/,
    "public",
    "repeat",
    "required",
    "rethrows",
    "return",
    "set",
    "some",
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throws",
    "throw",
    /try\?/,
    /try!/,
    "try",
    "typealias",
    /unowned\(safe\)/,
    /unowned\(unsafe\)/,
    "unowned",
    "var",
    "weak",
    "where",
    "while",
    "willSet"
  ];
  var literals = [
    "false",
    "nil",
    "true"
  ];
  var precedencegroupKeywords = [
    "assignment",
    "associativity",
    "higherThan",
    "left",
    "lowerThan",
    "none",
    "right"
  ];
  var numberSignKeywords = [
    "#colorLiteral",
    "#column",
    "#dsohandle",
    "#else",
    "#elseif",
    "#endif",
    "#error",
    "#file",
    "#fileID",
    "#fileLiteral",
    "#filePath",
    "#function",
    "#if",
    "#imageLiteral",
    "#keyPath",
    "#line",
    "#selector",
    "#sourceLocation",
    "#warning"
  ];
  var builtIns = [
    "abs",
    "all",
    "any",
    "assert",
    "assertionFailure",
    "debugPrint",
    "dump",
    "fatalError",
    "getVaList",
    "isKnownUniquelyReferenced",
    "max",
    "min",
    "numericCast",
    "pointwiseMax",
    "pointwiseMin",
    "precondition",
    "preconditionFailure",
    "print",
    "readLine",
    "repeatElement",
    "sequence",
    "stride",
    "swap",
    "swift_unboxFromSwiftValueWithType",
    "transcode",
    "type",
    "unsafeBitCast",
    "unsafeDowncast",
    "withExtendedLifetime",
    "withUnsafeMutablePointer",
    "withUnsafePointer",
    "withVaList",
    "withoutActuallyEscaping",
    "zip"
  ];
  var operatorHead = either(/[/=\-+!*%<>&|^~?]/, /[\u00A1-\u00A7]/, /[\u00A9\u00AB]/, /[\u00AC\u00AE]/, /[\u00B0\u00B1]/, /[\u00B6\u00BB\u00BF\u00D7\u00F7]/, /[\u2016-\u2017]/, /[\u2020-\u2027]/, /[\u2030-\u203E]/, /[\u2041-\u2053]/, /[\u2055-\u205E]/, /[\u2190-\u23FF]/, /[\u2500-\u2775]/, /[\u2794-\u2BFF]/, /[\u2E00-\u2E7F]/, /[\u3001-\u3003]/, /[\u3008-\u3020]/, /[\u3030]/);
  var operatorCharacter = either(operatorHead, /[\u0300-\u036F]/, /[\u1DC0-\u1DFF]/, /[\u20D0-\u20FF]/, /[\uFE00-\uFE0F]/, /[\uFE20-\uFE2F]/);
  var operator = concat(operatorHead, operatorCharacter, "*");
  var identifierHead = either(/[a-zA-Z_]/, /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/, /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/, /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/, /[\u1E00-\u1FFF]/, /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/, /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/, /[\u2C00-\u2DFF\u2E80-\u2FFF]/, /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/, /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/, /[\uFE47-\uFEFE\uFF00-\uFFFD]/);
  var identifierCharacter = either(identifierHead, /\d/, /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/);
  var identifier = concat(identifierHead, identifierCharacter, "*");
  var typeIdentifier = concat(/[A-Z]/, identifierCharacter, "*");
  var keywordAttributes = [
    "attached",
    "autoclosure",
    concat(/convention\(/, either("swift", "block", "c"), /\)/),
    "discardableResult",
    "dynamicCallable",
    "dynamicMemberLookup",
    "escaping",
    "freestanding",
    "frozen",
    "GKInspectable",
    "IBAction",
    "IBDesignable",
    "IBInspectable",
    "IBOutlet",
    "IBSegueAction",
    "inlinable",
    "main",
    "nonobjc",
    "NSApplicationMain",
    "NSCopying",
    "NSManaged",
    concat(/objc\(/, identifier, /\)/),
    "objc",
    "objcMembers",
    "propertyWrapper",
    "requires_stored_property_inits",
    "resultBuilder",
    "Sendable",
    "testable",
    "UIApplicationMain",
    "unchecked",
    "unknown",
    "usableFromInline",
    "warn_unqualified_access"
  ];
  var availabilityKeywords = [
    "iOS",
    "iOSApplicationExtension",
    "macOS",
    "macOSApplicationExtension",
    "macCatalyst",
    "macCatalystApplicationExtension",
    "watchOS",
    "watchOSApplicationExtension",
    "tvOS",
    "tvOSApplicationExtension",
    "swift"
  ];
  module.exports = swift;
});

// node_modules/highlight.js/lib/languages/taggerscript.js
var require_taggerscript = __commonJS((exports, module) => {
  var taggerscript = function(hljs) {
    const NOOP = {
      className: "comment",
      begin: /\$noop\(/,
      end: /\)/,
      contains: [
        { begin: /\\[()]/ },
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            { begin: /\\[()]/ },
            "self"
          ]
        }
      ],
      relevance: 10
    };
    const FUNCTION = {
      className: "keyword",
      begin: /\$[_a-zA-Z0-9]+(?=\()/
    };
    const VARIABLE = {
      className: "variable",
      begin: /%[_a-zA-Z0-9:]+%/
    };
    const ESCAPE_SEQUENCE_UNICODE = {
      className: "symbol",
      begin: /\\u[a-fA-F0-9]{4}/
    };
    const ESCAPE_SEQUENCE = {
      className: "symbol",
      begin: /\\[\\nt$%,()]/
    };
    return {
      name: "Tagger Script",
      contains: [
        NOOP,
        FUNCTION,
        VARIABLE,
        ESCAPE_SEQUENCE,
        ESCAPE_SEQUENCE_UNICODE
      ]
    };
  };
  module.exports = taggerscript;
});

// node_modules/highlight.js/lib/languages/yaml.js
var require_yaml = __commonJS((exports, module) => {
  var yaml = function(hljs) {
    const LITERALS = "true false yes no null";
    const URI_CHARACTERS = "[\\w#;/?:@&=+$,.~*\'()[\\]]+";
    const KEY = {
      className: "attr",
      variants: [
        { begin: "\\w[\\w :\\/.-]*:(?=[ \t]|$)" },
        {
          begin: '"\\w[\\w :\\/.-]*":(?=[ \t]|$)'
        },
        {
          begin: "\'\\w[\\w :\\/.-]*\':(?=[ \t]|$)"
        }
      ]
    };
    const TEMPLATE_VARIABLES = {
      className: "template-variable",
      variants: [
        {
          begin: /\{\{/,
          end: /\}\}/
        },
        {
          begin: /%\{/,
          end: /\}/
        }
      ]
    };
    const STRING = {
      className: "string",
      relevance: 0,
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        { begin: /\S+/ }
      ],
      contains: [
        hljs.BACKSLASH_ESCAPE,
        TEMPLATE_VARIABLES
      ]
    };
    const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /[^\s,{}[\]]+/ }
    ] });
    const DATE_RE = "[0-9]{4}(-[0-9][0-9]){0,2}";
    const TIME_RE = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?";
    const FRACTION_RE = "(\\.[0-9]*)?";
    const ZONE_RE = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?";
    const TIMESTAMP = {
      className: "number",
      begin: "\\b" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + "\\b"
    };
    const VALUE_CONTAINER = {
      end: ",",
      endsWithParent: true,
      excludeEnd: true,
      keywords: LITERALS,
      relevance: 0
    };
    const OBJECT = {
      begin: /\{/,
      end: /\}/,
      contains: [VALUE_CONTAINER],
      illegal: "\\n",
      relevance: 0
    };
    const ARRAY = {
      begin: "\\[",
      end: "\\]",
      contains: [VALUE_CONTAINER],
      illegal: "\\n",
      relevance: 0
    };
    const MODES = [
      KEY,
      {
        className: "meta",
        begin: "^---\\s*$",
        relevance: 10
      },
      {
        className: "string",
        begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
      },
      {
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      },
      {
        className: "type",
        begin: "!\\w+!" + URI_CHARACTERS
      },
      {
        className: "type",
        begin: "!<" + URI_CHARACTERS + ">"
      },
      {
        className: "type",
        begin: "!" + URI_CHARACTERS
      },
      {
        className: "type",
        begin: "!!" + URI_CHARACTERS
      },
      {
        className: "meta",
        begin: "&" + hljs.UNDERSCORE_IDENT_RE + "$"
      },
      {
        className: "meta",
        begin: "\\*" + hljs.UNDERSCORE_IDENT_RE + "$"
      },
      {
        className: "bullet",
        begin: "-(?=[ ]|$)",
        relevance: 0
      },
      hljs.HASH_COMMENT_MODE,
      {
        beginKeywords: LITERALS,
        keywords: { literal: LITERALS }
      },
      TIMESTAMP,
      {
        className: "number",
        begin: hljs.C_NUMBER_RE + "\\b",
        relevance: 0
      },
      OBJECT,
      ARRAY,
      STRING
    ];
    const VALUE_MODES = [...MODES];
    VALUE_MODES.pop();
    VALUE_MODES.push(CONTAINER_STRING);
    VALUE_CONTAINER.contains = VALUE_MODES;
    return {
      name: "YAML",
      case_insensitive: true,
      aliases: ["yml"],
      contains: MODES
    };
  };
  module.exports = yaml;
});

// node_modules/highlight.js/lib/languages/tap.js
var require_tap = __commonJS((exports, module) => {
  var tap = function(hljs) {
    return {
      name: "Test Anything Protocol",
      case_insensitive: true,
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: "meta",
          variants: [
            { begin: "^TAP version (\\d+)$" },
            { begin: "^1\\.\\.(\\d+)$" }
          ]
        },
        {
          begin: /---$/,
          end: "\\.\\.\\.$",
          subLanguage: "yaml",
          relevance: 0
        },
        {
          className: "number",
          begin: " (\\d+) "
        },
        {
          className: "symbol",
          variants: [
            { begin: "^ok" },
            { begin: "^not ok" }
          ]
        }
      ]
    };
  };
  module.exports = tap;
});

// node_modules/highlight.js/lib/languages/tcl.js
var require_tcl = __commonJS((exports, module) => {
  var tcl = function(hljs) {
    const regex6 = hljs.regex;
    const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;
    const NUMBER = {
      className: "number",
      variants: [
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const KEYWORDS2 = [
      "after",
      "append",
      "apply",
      "array",
      "auto_execok",
      "auto_import",
      "auto_load",
      "auto_mkindex",
      "auto_mkindex_old",
      "auto_qualify",
      "auto_reset",
      "bgerror",
      "binary",
      "break",
      "catch",
      "cd",
      "chan",
      "clock",
      "close",
      "concat",
      "continue",
      "dde",
      "dict",
      "encoding",
      "eof",
      "error",
      "eval",
      "exec",
      "exit",
      "expr",
      "fblocked",
      "fconfigure",
      "fcopy",
      "file",
      "fileevent",
      "filename",
      "flush",
      "for",
      "foreach",
      "format",
      "gets",
      "glob",
      "global",
      "history",
      "http",
      "if",
      "incr",
      "info",
      "interp",
      "join",
      "lappend|10",
      "lassign|10",
      "lindex|10",
      "linsert|10",
      "list",
      "llength|10",
      "load",
      "lrange|10",
      "lrepeat|10",
      "lreplace|10",
      "lreverse|10",
      "lsearch|10",
      "lset|10",
      "lsort|10",
      "mathfunc",
      "mathop",
      "memory",
      "msgcat",
      "namespace",
      "open",
      "package",
      "parray",
      "pid",
      "pkg::create",
      "pkg_mkIndex",
      "platform",
      "platform::shell",
      "proc",
      "puts",
      "pwd",
      "read",
      "refchan",
      "regexp",
      "registry",
      "regsub|10",
      "rename",
      "return",
      "safe",
      "scan",
      "seek",
      "set",
      "socket",
      "source",
      "split",
      "string",
      "subst",
      "switch",
      "tcl_endOfWord",
      "tcl_findLibrary",
      "tcl_startOfNextWord",
      "tcl_startOfPreviousWord",
      "tcl_wordBreakAfter",
      "tcl_wordBreakBefore",
      "tcltest",
      "tclvars",
      "tell",
      "time",
      "tm",
      "trace",
      "unknown",
      "unload",
      "unset",
      "update",
      "uplevel",
      "upvar",
      "variable",
      "vwait",
      "while"
    ];
    return {
      name: "Tcl",
      aliases: ["tk"],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(";[ \\t]*#", "$"),
        hljs.COMMENT("^[ \\t]*#", "$"),
        {
          beginKeywords: "proc",
          end: "[\\{]",
          excludeEnd: true,
          contains: [
            {
              className: "title",
              begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "[ \\t\\n\\r]",
              endsWithParent: true,
              excludeEnd: true
            }
          ]
        },
        {
          className: "variable",
          variants: [
            { begin: regex6.concat(/\$/, regex6.optional(/::/), TCL_IDENT, "(::", TCL_IDENT, ")*") },
            {
              begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "\\}",
              contains: [NUMBER]
            }
          ]
        },
        {
          className: "string",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })]
        },
        NUMBER
      ]
    };
  };
  module.exports = tcl;
});

// node_modules/highlight.js/lib/languages/thrift.js
var require_thrift = __commonJS((exports, module) => {
  var thrift = function(hljs) {
    const TYPES = [
      "bool",
      "byte",
      "i16",
      "i32",
      "i64",
      "double",
      "string",
      "binary"
    ];
    const KEYWORDS2 = [
      "namespace",
      "const",
      "typedef",
      "struct",
      "enum",
      "service",
      "exception",
      "void",
      "oneway",
      "set",
      "list",
      "map",
      "required",
      "optional"
    ];
    return {
      name: "Thrift",
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES,
        literal: "true false"
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "struct enum service exception",
          end: /\{/,
          illegal: /\n/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              starts: {
                endsWithParent: true,
                excludeEnd: true
              }
            })
          ]
        },
        {
          begin: "\\b(set|list|map)\\s*<",
          keywords: { type: [
            ...TYPES,
            "set",
            "list",
            "map"
          ] },
          end: ">",
          contains: ["self"]
        }
      ]
    };
  };
  module.exports = thrift;
});

// node_modules/highlight.js/lib/languages/tp.js
var require_tp = __commonJS((exports, module) => {
  var tp = function(hljs) {
    const TPID = {
      className: "number",
      begin: "[1-9][0-9]*",
      relevance: 0
    };
    const TPLABEL = {
      className: "symbol",
      begin: ":[^\\]]+"
    };
    const TPDATA = {
      className: "built_in",
      begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
      end: "\\]",
      contains: [
        "self",
        TPID,
        TPLABEL
      ]
    };
    const TPIO = {
      className: "built_in",
      begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
      end: "\\]",
      contains: [
        "self",
        TPID,
        hljs.QUOTE_STRING_MODE,
        TPLABEL
      ]
    };
    const KEYWORDS2 = [
      "ABORT",
      "ACC",
      "ADJUST",
      "AND",
      "AP_LD",
      "BREAK",
      "CALL",
      "CNT",
      "COL",
      "CONDITION",
      "CONFIG",
      "DA",
      "DB",
      "DIV",
      "DETECT",
      "ELSE",
      "END",
      "ENDFOR",
      "ERR_NUM",
      "ERROR_PROG",
      "FINE",
      "FOR",
      "GP",
      "GUARD",
      "INC",
      "IF",
      "JMP",
      "LINEAR_MAX_SPEED",
      "LOCK",
      "MOD",
      "MONITOR",
      "OFFSET",
      "Offset",
      "OR",
      "OVERRIDE",
      "PAUSE",
      "PREG",
      "PTH",
      "RT_LD",
      "RUN",
      "SELECT",
      "SKIP",
      "Skip",
      "TA",
      "TB",
      "TO",
      "TOOL_OFFSET",
      "Tool_Offset",
      "UF",
      "UT",
      "UFRAME_NUM",
      "UTOOL_NUM",
      "UNLOCK",
      "WAIT",
      "X",
      "Y",
      "Z",
      "W",
      "P",
      "R",
      "STRLEN",
      "SUBSTR",
      "FINDSTR",
      "VOFFSET",
      "PROG",
      "ATTR",
      "MN",
      "POS"
    ];
    const LITERALS = [
      "ON",
      "OFF",
      "max_speed",
      "LPOS",
      "JPOS",
      "ENABLE",
      "DISABLE",
      "START",
      "STOP",
      "RESET"
    ];
    return {
      name: "TP",
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS
      },
      contains: [
        TPDATA,
        TPIO,
        {
          className: "keyword",
          begin: "/(PROG|ATTR|MN|POS|END)\\b"
        },
        {
          className: "keyword",
          begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
        },
        {
          className: "keyword",
          begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
        },
        {
          className: "number",
          begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
          relevance: 0
        },
        hljs.COMMENT("//", "[;$]"),
        hljs.COMMENT("!", "[;$]"),
        hljs.COMMENT("--eg:", "$"),
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\'",
          end: "\'"
        },
        hljs.C_NUMBER_MODE,
        {
          className: "variable",
          begin: "\\$[A-Za-z0-9_]+"
        }
      ]
    };
  };
  module.exports = tp;
});

// node_modules/highlight.js/lib/languages/twig.js
var require_twig = __commonJS((exports, module) => {
  var twig = function(hljs) {
    const regex6 = hljs.regex;
    const FUNCTION_NAMES = [
      "absolute_url",
      "asset|0",
      "asset_version",
      "attribute",
      "block",
      "constant",
      "controller|0",
      "country_timezones",
      "csrf_token",
      "cycle",
      "date",
      "dump",
      "expression",
      "form|0",
      "form_end",
      "form_errors",
      "form_help",
      "form_label",
      "form_rest",
      "form_row",
      "form_start",
      "form_widget",
      "html_classes",
      "include",
      "is_granted",
      "logout_path",
      "logout_url",
      "max",
      "min",
      "parent",
      "path|0",
      "random",
      "range",
      "relative_path",
      "render",
      "render_esi",
      "source",
      "template_from_string",
      "url|0"
    ];
    const FILTERS = [
      "abs",
      "abbr_class",
      "abbr_method",
      "batch",
      "capitalize",
      "column",
      "convert_encoding",
      "country_name",
      "currency_name",
      "currency_symbol",
      "data_uri",
      "date",
      "date_modify",
      "default",
      "escape",
      "file_excerpt",
      "file_link",
      "file_relative",
      "filter",
      "first",
      "format",
      "format_args",
      "format_args_as_text",
      "format_currency",
      "format_date",
      "format_datetime",
      "format_file",
      "format_file_from_text",
      "format_number",
      "format_time",
      "html_to_markdown",
      "humanize",
      "inky_to_html",
      "inline_css",
      "join",
      "json_encode",
      "keys",
      "language_name",
      "last",
      "length",
      "locale_name",
      "lower",
      "map",
      "markdown",
      "markdown_to_html",
      "merge",
      "nl2br",
      "number_format",
      "raw",
      "reduce",
      "replace",
      "reverse",
      "round",
      "slice",
      "slug",
      "sort",
      "spaceless",
      "split",
      "striptags",
      "timezone_name",
      "title",
      "trans",
      "transchoice",
      "trim",
      "u|0",
      "upper",
      "url_encode",
      "yaml_dump",
      "yaml_encode"
    ];
    let TAG_NAMES = [
      "apply",
      "autoescape",
      "block",
      "cache",
      "deprecated",
      "do",
      "embed",
      "extends",
      "filter",
      "flush",
      "for",
      "form_theme",
      "from",
      "if",
      "import",
      "include",
      "macro",
      "sandbox",
      "set",
      "stopwatch",
      "trans",
      "trans_default_domain",
      "transchoice",
      "use",
      "verbatim",
      "with"
    ];
    TAG_NAMES = TAG_NAMES.concat(TAG_NAMES.map((t) => `end${t}`));
    const STRING = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    const NUMBER = {
      scope: "number",
      match: /\d+/
    };
    const PARAMS = {
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        STRING,
        NUMBER
      ]
    };
    const FUNCTIONS = {
      beginKeywords: FUNCTION_NAMES.join(" "),
      keywords: { name: FUNCTION_NAMES },
      relevance: 0,
      contains: [PARAMS]
    };
    const FILTER = {
      match: /\|(?=[A-Za-z_]+:?)/,
      beginScope: "punctuation",
      relevance: 0,
      contains: [
        {
          match: /[A-Za-z_]+:?/,
          keywords: FILTERS
        }
      ]
    };
    const tagNamed = (tagnames, { relevance }) => {
      return {
        beginScope: {
          1: "template-tag",
          3: "name"
        },
        relevance: relevance || 2,
        endScope: "template-tag",
        begin: [
          /\{%/,
          /\s*/,
          regex6.either(...tagnames)
        ],
        end: /%\}/,
        keywords: "in",
        contains: [
          FILTER,
          FUNCTIONS,
          STRING,
          NUMBER
        ]
      };
    };
    const CUSTOM_TAG_RE = /[a-z_]+/;
    const TAG = tagNamed(TAG_NAMES, { relevance: 2 });
    const CUSTOM_TAG = tagNamed([CUSTOM_TAG_RE], { relevance: 1 });
    return {
      name: "Twig",
      aliases: ["craftcms"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        hljs.COMMENT(/\{#/, /#\}/),
        TAG,
        CUSTOM_TAG,
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [
            "self",
            FILTER,
            FUNCTIONS,
            STRING,
            NUMBER
          ]
        }
      ]
    };
  };
  module.exports = twig;
});

// node_modules/highlight.js/lib/languages/typescript.js
var require_typescript = __commonJS((exports, module) => {
  var javascript = function(hljs) {
    const regex6 = hljs.regex;
    const hasClosingTag = (match2, { after }) => {
      const tag = "</" + match2[0].slice(1);
      const pos = match2.input.indexOf(tag, after);
      return pos !== -1;
    };
    const IDENT_RE$1 = IDENT_RE;
    const FRAGMENT = {
      begin: "<>",
      end: "</>"
    };
    const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
    const XML_TAG = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      isTrulyOpeningTag: (match2, response) => {
        const afterMatchIndex = match2[0].length + match2.index;
        const nextChar = match2.input[afterMatchIndex];
        if (nextChar === "<" || nextChar === ",") {
          response.ignoreMatch();
          return;
        }
        if (nextChar === ">") {
          if (!hasClosingTag(match2, { after: afterMatchIndex })) {
            response.ignoreMatch();
          }
        }
        let m4;
        const afterMatch = match2.input.substring(afterMatchIndex);
        if (m4 = afterMatch.match(/^\s*=/)) {
          response.ignoreMatch();
          return;
        }
        if (m4 = afterMatch.match(/^\s+extends\s+/)) {
          if (m4.index === 0) {
            response.ignoreMatch();
            return;
          }
        }
      }
    };
    const KEYWORDS$1 = {
      $pattern: IDENT_RE,
      keyword: KEYWORDS2,
      literal: LITERALS,
      built_in: BUILT_INS,
      "variable.language": BUILT_IN_VARIABLES
    };
    const decimalDigits = "[0-9](_?[0-9])*";
    const frac = `\\.(${decimalDigits})`;
    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\b` },
        { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
        { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS$1,
      contains: []
    };
    const HTML_TEMPLATE = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "xml"
      }
    };
    const CSS_TEMPLATE = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "css"
      }
    };
    const GRAPHQL_TEMPLATE = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "graphql"
      }
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const JSDOC_COMMENT = hljs.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
      relevance: 0,
      contains: [
        {
          begin: "(?=@[A-Za-z]+)",
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            },
            {
              className: "type",
              begin: "\\{",
              end: "\\}",
              excludeEnd: true,
              excludeBegin: true,
              relevance: 0
            },
            {
              className: "variable",
              begin: IDENT_RE$1 + "(?=\\s*(-)|$)",
              endsParent: true,
              relevance: 0
            },
            {
              begin: /(?=[^\n])\s/,
              relevance: 0
            }
          ]
        }
      ]
    });
    const COMMENT = {
      className: "comment",
      variants: [
        JSDOC_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const SUBST_INTERNALS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      GRAPHQL_TEMPLATE,
      TEMPLATE_STRING,
      { match: /\$\d+/ },
      NUMBER
    ];
    SUBST.contains = SUBST_INTERNALS.concat({
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS$1,
      contains: [
        "self"
      ].concat(SUBST_INTERNALS)
    });
    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS$1,
        contains: ["self"].concat(SUBST_AND_COMMENTS)
      }
    ]);
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS$1,
      contains: PARAMS_CONTAINS
    };
    const CLASS_OR_EXTENDS = {
      variants: [
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1,
            /\s+/,
            /extends/,
            /\s+/,
            regex6.concat(IDENT_RE$1, "(", regex6.concat(/\./, IDENT_RE$1), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: regex6.either(/\bJSON/, /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/, /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/, /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),
      className: "title.class",
      keywords: {
        _: [
          ...TYPES,
          ...ERROR_TYPES
        ]
      }
    };
    const USE_STRICT = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    };
    const FUNCTION_DEFINITION = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            IDENT_RE$1,
            /(?=\s*\()/
          ]
        },
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [PARAMS],
      illegal: /%/
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function noneOf(list3) {
      return regex6.concat("(?!", list3.join("|"), ")");
    }
    const FUNCTION_CALL = {
      match: regex6.concat(/\b/, noneOf([
        ...BUILT_IN_GLOBALS,
        "super",
        "import"
      ]), IDENT_RE$1, regex6.lookahead(/\(/)),
      className: "title.function",
      relevance: 0
    };
    const PROPERTY_ACCESS = {
      begin: regex6.concat(/\./, regex6.lookahead(regex6.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),
      end: IDENT_RE$1,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    };
    const GETTER_OR_SETTER = {
      match: [
        /get|set/,
        /\s+/,
        IDENT_RE$1,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          begin: /\(\)/
        },
        PARAMS
      ]
    };
    const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs.UNDERSCORE_IDENT_RE + ")\\s*=>";
    const FUNCTION_VARIABLE = {
      match: [
        /const|var|let/,
        /\s+/,
        IDENT_RE$1,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        regex6.lookahead(FUNC_LEAD_IN_RE)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: KEYWORDS$1,
      exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
      illegal: /#(?![$_A-z])/,
      contains: [
        hljs.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        USE_STRICT,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        GRAPHQL_TEMPLATE,
        TEMPLATE_STRING,
        COMMENT,
        { match: /\$\d+/ },
        NUMBER,
        CLASS_REFERENCE,
        {
          className: "attr",
          begin: IDENT_RE$1 + regex6.lookahead(":"),
          relevance: 0
        },
        FUNCTION_VARIABLE,
        {
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            COMMENT,
            hljs.REGEXP_MODE,
            {
              className: "function",
              begin: FUNC_LEAD_IN_RE,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: hljs.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS$1,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            },
            {
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              variants: [
                { begin: FRAGMENT.begin, end: FRAGMENT.end },
                { match: XML_SELF_CLOSING },
                {
                  begin: XML_TAG.begin,
                  "on:begin": XML_TAG.isTrulyOpeningTag,
                  end: XML_TAG.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: XML_TAG.begin,
                  end: XML_TAG.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        FUNCTION_DEFINITION,
        {
          beginKeywords: "while if switch catch for"
        },
        {
          begin: "\\b(?!function)" + hljs.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          returnBegin: true,
          label: "func.def",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
          ]
        },
        {
          match: /\.\.\./,
          relevance: 0
        },
        PROPERTY_ACCESS,
        {
          match: "\\$" + IDENT_RE$1,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [PARAMS]
        },
        FUNCTION_CALL,
        UPPER_CASE_CONSTANT,
        CLASS_OR_EXTENDS,
        GETTER_OR_SETTER,
        {
          match: /\$[(.]/
        }
      ]
    };
  };
  var typescript = function(hljs) {
    const tsLanguage = javascript(hljs);
    const IDENT_RE$1 = IDENT_RE;
    const TYPES2 = [
      "any",
      "void",
      "number",
      "boolean",
      "string",
      "object",
      "never",
      "symbol",
      "bigint",
      "unknown"
    ];
    const NAMESPACE = {
      beginKeywords: "namespace",
      end: /\{/,
      excludeEnd: true,
      contains: [tsLanguage.exports.CLASS_REFERENCE]
    };
    const INTERFACE = {
      beginKeywords: "interface",
      end: /\{/,
      excludeEnd: true,
      keywords: {
        keyword: "interface extends",
        built_in: TYPES2
      },
      contains: [tsLanguage.exports.CLASS_REFERENCE]
    };
    const USE_STRICT = {
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use strict['"]/
    };
    const TS_SPECIFIC_KEYWORDS = [
      "type",
      "namespace",
      "interface",
      "public",
      "private",
      "protected",
      "implements",
      "declare",
      "abstract",
      "readonly",
      "enum",
      "override"
    ];
    const KEYWORDS$1 = {
      $pattern: IDENT_RE,
      keyword: KEYWORDS2.concat(TS_SPECIFIC_KEYWORDS),
      literal: LITERALS,
      built_in: BUILT_INS.concat(TYPES2),
      "variable.language": BUILT_IN_VARIABLES
    };
    const DECORATOR = {
      className: "meta",
      begin: "@" + IDENT_RE$1
    };
    const swapMode = (mode, label, replacement) => {
      const indx = mode.contains.findIndex((m4) => m4.label === label);
      if (indx === -1) {
        throw new Error("can not find mode to replace");
      }
      mode.contains.splice(indx, 1, replacement);
    };
    Object.assign(tsLanguage.keywords, KEYWORDS$1);
    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
    tsLanguage.contains = tsLanguage.contains.concat([
      DECORATOR,
      NAMESPACE,
      INTERFACE
    ]);
    swapMode(tsLanguage, "shebang", hljs.SHEBANG());
    swapMode(tsLanguage, "use_strict", USE_STRICT);
    const functionDeclaration = tsLanguage.contains.find((m4) => m4.label === "func.def");
    functionDeclaration.relevance = 0;
    Object.assign(tsLanguage, {
      name: "TypeScript",
      aliases: [
        "ts",
        "tsx",
        "mts",
        "cts"
      ]
    });
    return tsLanguage;
  };
  var IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
  var KEYWORDS2 = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ];
  var LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  var TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
  ];
  var ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  var BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  var BUILT_IN_VARIABLES = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
  ];
  var BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
  module.exports = typescript;
});

// node_modules/highlight.js/lib/languages/vala.js
var require_vala = __commonJS((exports, module) => {
  var vala = function(hljs) {
    return {
      name: "Vala",
      keywords: {
        keyword: "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var",
        built_in: "DBus GLib CCode Gee Object Gtk Posix",
        literal: "false true null"
      },
      contains: [
        {
          className: "class",
          beginKeywords: "class interface namespace",
          end: /\{/,
          excludeEnd: true,
          illegal: "[^,:\\n\\s\\.]",
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""',
          relevance: 5
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "^#",
          end: "$"
        }
      ]
    };
  };
  module.exports = vala;
});

// node_modules/highlight.js/lib/languages/vbnet.js
var require_vbnet = __commonJS((exports, module) => {
  var vbnet = function(hljs) {
    const regex6 = hljs.regex;
    const CHARACTER = {
      className: "string",
      begin: /"(""|[^/n])"C\b/
    };
    const STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      illegal: /\n/,
      contains: [
        {
          begin: /""/
        }
      ]
    };
    const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
    const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
    const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
    const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
    const DATE = {
      className: "literal",
      variants: [
        {
          begin: regex6.concat(/# */, regex6.either(YYYY_MM_DD, MM_DD_YYYY), / *#/)
        },
        {
          begin: regex6.concat(/# */, TIME_24H, / *#/)
        },
        {
          begin: regex6.concat(/# */, TIME_12H, / *#/)
        },
        {
          begin: regex6.concat(/# */, regex6.either(YYYY_MM_DD, MM_DD_YYYY), / +/, regex6.either(TIME_12H, TIME_24H), / *#/)
        }
      ]
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        {
          begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
        },
        {
          begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
        },
        {
          begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
        },
        {
          begin: /&O[0-7_]+((U?[SIL])|[%&])?/
        },
        {
          begin: /&B[01_]+((U?[SIL])|[%&])?/
        }
      ]
    };
    const LABEL = {
      className: "label",
      begin: /^\w+:/
    };
    const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ] });
    const COMMENT = hljs.COMMENT(null, /$/, { variants: [
      { begin: /'/ },
      {
        begin: /([\t ]|^)REM(?=\s)/
      }
    ] });
    const DIRECTIVES = {
      className: "meta",
      begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
      end: /$/,
      keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
      contains: [COMMENT]
    };
    return {
      name: "Visual Basic .NET",
      aliases: ["vb"],
      case_insensitive: true,
      classNameAliases: { label: "symbol" },
      keywords: {
        keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
        built_in: "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort",
        type: "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort",
        literal: "true false nothing"
      },
      illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
      contains: [
        CHARACTER,
        STRING,
        DATE,
        NUMBER,
        LABEL,
        DOC_COMMENT,
        COMMENT,
        DIRECTIVES
      ]
    };
  };
  module.exports = vbnet;
});

// node_modules/highlight.js/lib/languages/vbscript.js
var require_vbscript = __commonJS((exports, module) => {
  var vbscript = function(hljs) {
    const regex6 = hljs.regex;
    const BUILT_IN_FUNCTIONS = [
      "lcase",
      "month",
      "vartype",
      "instrrev",
      "ubound",
      "setlocale",
      "getobject",
      "rgb",
      "getref",
      "string",
      "weekdayname",
      "rnd",
      "dateadd",
      "monthname",
      "now",
      "day",
      "minute",
      "isarray",
      "cbool",
      "round",
      "formatcurrency",
      "conversions",
      "csng",
      "timevalue",
      "second",
      "year",
      "space",
      "abs",
      "clng",
      "timeserial",
      "fixs",
      "len",
      "asc",
      "isempty",
      "maths",
      "dateserial",
      "atn",
      "timer",
      "isobject",
      "filter",
      "weekday",
      "datevalue",
      "ccur",
      "isdate",
      "instr",
      "datediff",
      "formatdatetime",
      "replace",
      "isnull",
      "right",
      "sgn",
      "array",
      "snumeric",
      "log",
      "cdbl",
      "hex",
      "chr",
      "lbound",
      "msgbox",
      "ucase",
      "getlocale",
      "cos",
      "cdate",
      "cbyte",
      "rtrim",
      "join",
      "hour",
      "oct",
      "typename",
      "trim",
      "strcomp",
      "int",
      "createobject",
      "loadpicture",
      "tan",
      "formatnumber",
      "mid",
      "split",
      "cint",
      "sin",
      "datepart",
      "ltrim",
      "sqr",
      "time",
      "derived",
      "eval",
      "date",
      "formatpercent",
      "exp",
      "inputbox",
      "left",
      "ascw",
      "chrw",
      "regexp",
      "cstr",
      "err"
    ];
    const BUILT_IN_OBJECTS = [
      "server",
      "response",
      "request",
      "scriptengine",
      "scriptenginebuildversion",
      "scriptengineminorversion",
      "scriptenginemajorversion"
    ];
    const BUILT_IN_CALL = {
      begin: regex6.concat(regex6.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
      relevance: 0,
      keywords: { built_in: BUILT_IN_FUNCTIONS }
    };
    const LITERALS = [
      "true",
      "false",
      "null",
      "nothing",
      "empty"
    ];
    const KEYWORDS2 = [
      "call",
      "class",
      "const",
      "dim",
      "do",
      "loop",
      "erase",
      "execute",
      "executeglobal",
      "exit",
      "for",
      "each",
      "next",
      "function",
      "if",
      "then",
      "else",
      "on",
      "error",
      "option",
      "explicit",
      "new",
      "private",
      "property",
      "let",
      "get",
      "public",
      "randomize",
      "redim",
      "rem",
      "select",
      "case",
      "set",
      "stop",
      "sub",
      "while",
      "wend",
      "with",
      "end",
      "to",
      "elseif",
      "is",
      "or",
      "xor",
      "and",
      "not",
      "class_initialize",
      "class_terminate",
      "default",
      "preserve",
      "in",
      "me",
      "byval",
      "byref",
      "step",
      "resume",
      "goto"
    ];
    return {
      name: "VBScript",
      aliases: ["vbs"],
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN_OBJECTS,
        literal: LITERALS
      },
      illegal: "//",
      contains: [
        BUILT_IN_CALL,
        hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
        hljs.COMMENT(/'/, /$/, { relevance: 0 }),
        hljs.C_NUMBER_MODE
      ]
    };
  };
  module.exports = vbscript;
});

// node_modules/highlight.js/lib/languages/vbscript-html.js
var require_vbscript_html = __commonJS((exports, module) => {
  var vbscriptHtml = function(hljs) {
    return {
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [
        {
          begin: "<%",
          end: "%>",
          subLanguage: "vbscript"
        }
      ]
    };
  };
  module.exports = vbscriptHtml;
});

// node_modules/highlight.js/lib/languages/verilog.js
var require_verilog = __commonJS((exports, module) => {
  var verilog = function(hljs) {
    const regex6 = hljs.regex;
    const KEYWORDS2 = {
      $pattern: /\$?[\w]+(\$[\w]+)*/,
      keyword: [
        "accept_on",
        "alias",
        "always",
        "always_comb",
        "always_ff",
        "always_latch",
        "and",
        "assert",
        "assign",
        "assume",
        "automatic",
        "before",
        "begin",
        "bind",
        "bins",
        "binsof",
        "bit",
        "break",
        "buf|0",
        "bufif0",
        "bufif1",
        "byte",
        "case",
        "casex",
        "casez",
        "cell",
        "chandle",
        "checker",
        "class",
        "clocking",
        "cmos",
        "config",
        "const",
        "constraint",
        "context",
        "continue",
        "cover",
        "covergroup",
        "coverpoint",
        "cross",
        "deassign",
        "default",
        "defparam",
        "design",
        "disable",
        "dist",
        "do",
        "edge",
        "else",
        "end",
        "endcase",
        "endchecker",
        "endclass",
        "endclocking",
        "endconfig",
        "endfunction",
        "endgenerate",
        "endgroup",
        "endinterface",
        "endmodule",
        "endpackage",
        "endprimitive",
        "endprogram",
        "endproperty",
        "endspecify",
        "endsequence",
        "endtable",
        "endtask",
        "enum",
        "event",
        "eventually",
        "expect",
        "export",
        "extends",
        "extern",
        "final",
        "first_match",
        "for",
        "force",
        "foreach",
        "forever",
        "fork",
        "forkjoin",
        "function",
        "generate|5",
        "genvar",
        "global",
        "highz0",
        "highz1",
        "if",
        "iff",
        "ifnone",
        "ignore_bins",
        "illegal_bins",
        "implements",
        "implies",
        "import",
        "incdir",
        "include",
        "initial",
        "inout",
        "input",
        "inside",
        "instance",
        "int",
        "integer",
        "interconnect",
        "interface",
        "intersect",
        "join",
        "join_any",
        "join_none",
        "large",
        "let",
        "liblist",
        "library",
        "local",
        "localparam",
        "logic",
        "longint",
        "macromodule",
        "matches",
        "medium",
        "modport",
        "module",
        "nand",
        "negedge",
        "nettype",
        "new",
        "nexttime",
        "nmos",
        "nor",
        "noshowcancelled",
        "not",
        "notif0",
        "notif1",
        "or",
        "output",
        "package",
        "packed",
        "parameter",
        "pmos",
        "posedge",
        "primitive",
        "priority",
        "program",
        "property",
        "protected",
        "pull0",
        "pull1",
        "pulldown",
        "pullup",
        "pulsestyle_ondetect",
        "pulsestyle_onevent",
        "pure",
        "rand",
        "randc",
        "randcase",
        "randsequence",
        "rcmos",
        "real",
        "realtime",
        "ref",
        "reg",
        "reject_on",
        "release",
        "repeat",
        "restrict",
        "return",
        "rnmos",
        "rpmos",
        "rtran",
        "rtranif0",
        "rtranif1",
        "s_always",
        "s_eventually",
        "s_nexttime",
        "s_until",
        "s_until_with",
        "scalared",
        "sequence",
        "shortint",
        "shortreal",
        "showcancelled",
        "signed",
        "small",
        "soft",
        "solve",
        "specify",
        "specparam",
        "static",
        "string",
        "strong",
        "strong0",
        "strong1",
        "struct",
        "super",
        "supply0",
        "supply1",
        "sync_accept_on",
        "sync_reject_on",
        "table",
        "tagged",
        "task",
        "this",
        "throughout",
        "time",
        "timeprecision",
        "timeunit",
        "tran",
        "tranif0",
        "tranif1",
        "tri",
        "tri0",
        "tri1",
        "triand",
        "trior",
        "trireg",
        "type",
        "typedef",
        "union",
        "unique",
        "unique0",
        "unsigned",
        "until",
        "until_with",
        "untyped",
        "use",
        "uwire",
        "var",
        "vectored",
        "virtual",
        "void",
        "wait",
        "wait_order",
        "wand",
        "weak",
        "weak0",
        "weak1",
        "while",
        "wildcard",
        "wire",
        "with",
        "within",
        "wor",
        "xnor",
        "xor"
      ],
      literal: ["null"],
      built_in: [
        "$finish",
        "$stop",
        "$exit",
        "$fatal",
        "$error",
        "$warning",
        "$info",
        "$realtime",
        "$time",
        "$printtimescale",
        "$bitstoreal",
        "$bitstoshortreal",
        "$itor",
        "$signed",
        "$cast",
        "$bits",
        "$stime",
        "$timeformat",
        "$realtobits",
        "$shortrealtobits",
        "$rtoi",
        "$unsigned",
        "$asserton",
        "$assertkill",
        "$assertpasson",
        "$assertfailon",
        "$assertnonvacuouson",
        "$assertoff",
        "$assertcontrol",
        "$assertpassoff",
        "$assertfailoff",
        "$assertvacuousoff",
        "$isunbounded",
        "$sampled",
        "$fell",
        "$changed",
        "$past_gclk",
        "$fell_gclk",
        "$changed_gclk",
        "$rising_gclk",
        "$steady_gclk",
        "$coverage_control",
        "$coverage_get",
        "$coverage_save",
        "$set_coverage_db_name",
        "$rose",
        "$stable",
        "$past",
        "$rose_gclk",
        "$stable_gclk",
        "$future_gclk",
        "$falling_gclk",
        "$changing_gclk",
        "$display",
        "$coverage_get_max",
        "$coverage_merge",
        "$get_coverage",
        "$load_coverage_db",
        "$typename",
        "$unpacked_dimensions",
        "$left",
        "$low",
        "$increment",
        "$clog2",
        "$ln",
        "$log10",
        "$exp",
        "$sqrt",
        "$pow",
        "$floor",
        "$ceil",
        "$sin",
        "$cos",
        "$tan",
        "$countbits",
        "$onehot",
        "$isunknown",
        "$fatal",
        "$warning",
        "$dimensions",
        "$right",
        "$high",
        "$size",
        "$asin",
        "$acos",
        "$atan",
        "$atan2",
        "$hypot",
        "$sinh",
        "$cosh",
        "$tanh",
        "$asinh",
        "$acosh",
        "$atanh",
        "$countones",
        "$onehot0",
        "$error",
        "$info",
        "$random",
        "$dist_chi_square",
        "$dist_erlang",
        "$dist_exponential",
        "$dist_normal",
        "$dist_poisson",
        "$dist_t",
        "$dist_uniform",
        "$q_initialize",
        "$q_remove",
        "$q_exam",
        "$async$and$array",
        "$async$nand$array",
        "$async$or$array",
        "$async$nor$array",
        "$sync$and$array",
        "$sync$nand$array",
        "$sync$or$array",
        "$sync$nor$array",
        "$q_add",
        "$q_full",
        "$psprintf",
        "$async$and$plane",
        "$async$nand$plane",
        "$async$or$plane",
        "$async$nor$plane",
        "$sync$and$plane",
        "$sync$nand$plane",
        "$sync$or$plane",
        "$sync$nor$plane",
        "$system",
        "$display",
        "$displayb",
        "$displayh",
        "$displayo",
        "$strobe",
        "$strobeb",
        "$strobeh",
        "$strobeo",
        "$write",
        "$readmemb",
        "$readmemh",
        "$writememh",
        "$value$plusargs",
        "$dumpvars",
        "$dumpon",
        "$dumplimit",
        "$dumpports",
        "$dumpportson",
        "$dumpportslimit",
        "$writeb",
        "$writeh",
        "$writeo",
        "$monitor",
        "$monitorb",
        "$monitorh",
        "$monitoro",
        "$writememb",
        "$dumpfile",
        "$dumpoff",
        "$dumpall",
        "$dumpflush",
        "$dumpportsoff",
        "$dumpportsall",
        "$dumpportsflush",
        "$fclose",
        "$fdisplay",
        "$fdisplayb",
        "$fdisplayh",
        "$fdisplayo",
        "$fstrobe",
        "$fstrobeb",
        "$fstrobeh",
        "$fstrobeo",
        "$swrite",
        "$swriteb",
        "$swriteh",
        "$swriteo",
        "$fscanf",
        "$fread",
        "$fseek",
        "$fflush",
        "$feof",
        "$fopen",
        "$fwrite",
        "$fwriteb",
        "$fwriteh",
        "$fwriteo",
        "$fmonitor",
        "$fmonitorb",
        "$fmonitorh",
        "$fmonitoro",
        "$sformat",
        "$sformatf",
        "$fgetc",
        "$ungetc",
        "$fgets",
        "$sscanf",
        "$rewind",
        "$ftell",
        "$ferror"
      ]
    };
    const BUILT_IN_CONSTANTS = [
      "__FILE__",
      "__LINE__"
    ];
    const DIRECTIVES = [
      "begin_keywords",
      "celldefine",
      "default_nettype",
      "default_decay_time",
      "default_trireg_strength",
      "define",
      "delay_mode_distributed",
      "delay_mode_path",
      "delay_mode_unit",
      "delay_mode_zero",
      "else",
      "elsif",
      "end_keywords",
      "endcelldefine",
      "endif",
      "ifdef",
      "ifndef",
      "include",
      "line",
      "nounconnected_drive",
      "pragma",
      "resetall",
      "timescale",
      "unconnected_drive",
      "undef",
      "undefineall"
    ];
    return {
      name: "Verilog",
      aliases: [
        "v",
        "sv",
        "svh"
      ],
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          scope: "number",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [
            { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            {
              begin: /\b[0-9][0-9_]*/,
              relevance: 0
            }
          ]
        },
        {
          scope: "variable",
          variants: [
            { begin: "#\\((?!parameter).+\\)" },
            {
              begin: "\\.\\w+",
              relevance: 0
            }
          ]
        },
        {
          scope: "variable.constant",
          match: regex6.concat(/`/, regex6.either(...BUILT_IN_CONSTANTS))
        },
        {
          scope: "meta",
          begin: regex6.concat(/`/, regex6.either(...DIRECTIVES)),
          end: /$|\/\/|\/\*/,
          returnEnd: true,
          keywords: DIRECTIVES
        }
      ]
    };
  };
  module.exports = verilog;
});

// node_modules/highlight.js/lib/languages/vhdl.js
var require_vhdl = __commonJS((exports, module) => {
  var vhdl = function(hljs) {
    const INTEGER_RE = "\\d(_|\\d)*";
    const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
    const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
    const BASED_INTEGER_RE = "\\w+";
    const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
    const NUMBER_RE = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
    const KEYWORDS2 = [
      "abs",
      "access",
      "after",
      "alias",
      "all",
      "and",
      "architecture",
      "array",
      "assert",
      "assume",
      "assume_guarantee",
      "attribute",
      "begin",
      "block",
      "body",
      "buffer",
      "bus",
      "case",
      "component",
      "configuration",
      "constant",
      "context",
      "cover",
      "disconnect",
      "downto",
      "default",
      "else",
      "elsif",
      "end",
      "entity",
      "exit",
      "fairness",
      "file",
      "for",
      "force",
      "function",
      "generate",
      "generic",
      "group",
      "guarded",
      "if",
      "impure",
      "in",
      "inertial",
      "inout",
      "is",
      "label",
      "library",
      "linkage",
      "literal",
      "loop",
      "map",
      "mod",
      "nand",
      "new",
      "next",
      "nor",
      "not",
      "null",
      "of",
      "on",
      "open",
      "or",
      "others",
      "out",
      "package",
      "parameter",
      "port",
      "postponed",
      "procedure",
      "process",
      "property",
      "protected",
      "pure",
      "range",
      "record",
      "register",
      "reject",
      "release",
      "rem",
      "report",
      "restrict",
      "restrict_guarantee",
      "return",
      "rol",
      "ror",
      "select",
      "sequence",
      "severity",
      "shared",
      "signal",
      "sla",
      "sll",
      "sra",
      "srl",
      "strong",
      "subtype",
      "then",
      "to",
      "transport",
      "type",
      "unaffected",
      "units",
      "until",
      "use",
      "variable",
      "view",
      "vmode",
      "vprop",
      "vunit",
      "wait",
      "when",
      "while",
      "with",
      "xnor",
      "xor"
    ];
    const BUILT_INS = [
      "boolean",
      "bit",
      "character",
      "integer",
      "time",
      "delay_length",
      "natural",
      "positive",
      "string",
      "bit_vector",
      "file_open_kind",
      "file_open_status",
      "std_logic",
      "std_logic_vector",
      "unsigned",
      "signed",
      "boolean_vector",
      "integer_vector",
      "std_ulogic",
      "std_ulogic_vector",
      "unresolved_unsigned",
      "u_unsigned",
      "unresolved_signed",
      "u_signed",
      "real_vector",
      "time_vector"
    ];
    const LITERALS = [
      "false",
      "true",
      "note",
      "warning",
      "error",
      "failure",
      "line",
      "text",
      "side",
      "width"
    ];
    return {
      name: "VHDL",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS,
        literal: LITERALS
      },
      illegal: /\{/,
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT("--", "$"),
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: NUMBER_RE,
          relevance: 0
        },
        {
          className: "string",
          begin: "\'(U|X|0|1|Z|W|L|H|-)\'",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          className: "symbol",
          begin: "\'[A-Za-z](_?[A-Za-z0-9])*",
          contains: [hljs.BACKSLASH_ESCAPE]
        }
      ]
    };
  };
  module.exports = vhdl;
});

// node_modules/highlight.js/lib/languages/vim.js
var require_vim = __commonJS((exports, module) => {
  var vim = function(hljs) {
    return {
      name: "Vim Script",
      keywords: {
        $pattern: /[!#@\w]+/,
        keyword: "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",
        built_in: "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
      },
      illegal: /;/,
      contains: [
        hljs.NUMBER_MODE,
        {
          className: "string",
          begin: "\'",
          end: "\'",
          illegal: "\\n"
        },
        {
          className: "string",
          begin: /"(\\"|\n\\|[^"\n])*"/
        },
        hljs.COMMENT('"', "$"),
        {
          className: "variable",
          begin: /[bwtglsav]:[\w\d_]+/
        },
        {
          begin: [
            /\b(?:function|function!)/,
            /\s+/,
            hljs.IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          end: "$",
          relevance: 0,
          contains: [
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          className: "symbol",
          begin: /<[\w-]+>/
        }
      ]
    };
  };
  module.exports = vim;
});

// node_modules/highlight.js/lib/languages/wasm.js
var require_wasm = __commonJS((exports, module) => {
  var wasm = function(hljs) {
    hljs.regex;
    const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
    BLOCK_COMMENT.contains.push("self");
    const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);
    const KWS = [
      "anyfunc",
      "block",
      "br",
      "br_if",
      "br_table",
      "call",
      "call_indirect",
      "data",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "func",
      "global.get",
      "global.set",
      "local.get",
      "local.set",
      "local.tee",
      "get_global",
      "get_local",
      "global",
      "if",
      "import",
      "local",
      "loop",
      "memory",
      "memory.grow",
      "memory.size",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "return",
      "select",
      "set_global",
      "set_local",
      "start",
      "table",
      "tee_local",
      "then",
      "type",
      "unreachable"
    ];
    const FUNCTION_REFERENCE = {
      begin: [
        /(?:func|call|call_indirect)/,
        /\s+/,
        /\$[^\s)]+/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      }
    };
    const ARGUMENT = {
      className: "variable",
      begin: /\$[\w_]+/
    };
    const PARENS = {
      match: /(\((?!;)|\))+/,
      className: "punctuation",
      relevance: 0
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
    };
    const TYPE = {
      match: /(i32|i64|f32|f64)(?!\.)/,
      className: "type"
    };
    const MATH_OPERATIONS = {
      className: "keyword",
      match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
    };
    const OFFSET_ALIGN = {
      match: [
        /(?:offset|align)/,
        /\s*/,
        /=/
      ],
      className: {
        1: "keyword",
        3: "operator"
      }
    };
    return {
      name: "WebAssembly",
      keywords: {
        $pattern: /[\w.]+/,
        keyword: KWS
      },
      contains: [
        LINE_COMMENT,
        BLOCK_COMMENT,
        OFFSET_ALIGN,
        ARGUMENT,
        PARENS,
        FUNCTION_REFERENCE,
        hljs.QUOTE_STRING_MODE,
        TYPE,
        MATH_OPERATIONS,
        NUMBER
      ]
    };
  };
  module.exports = wasm;
});

// node_modules/highlight.js/lib/languages/wren.js
var require_wren = __commonJS((exports, module) => {
  var wren = function(hljs) {
    const regex6 = hljs.regex;
    const IDENT_RE = /[a-zA-Z]\w*/;
    const KEYWORDS2 = [
      "as",
      "break",
      "class",
      "construct",
      "continue",
      "else",
      "for",
      "foreign",
      "if",
      "import",
      "in",
      "is",
      "return",
      "static",
      "var",
      "while"
    ];
    const LITERALS = [
      "true",
      "false",
      "null"
    ];
    const LANGUAGE_VARS = [
      "this",
      "super"
    ];
    const CORE_CLASSES = [
      "Bool",
      "Class",
      "Fiber",
      "Fn",
      "List",
      "Map",
      "Null",
      "Num",
      "Object",
      "Range",
      "Sequence",
      "String",
      "System"
    ];
    const OPERATORS2 = [
      "-",
      "~",
      /\*/,
      "%",
      /\.\.\./,
      /\.\./,
      /\+/,
      "<<",
      ">>",
      ">=",
      "<=",
      "<",
      ">",
      /\^/,
      /!=/,
      /!/,
      /\bis\b/,
      "==",
      "&&",
      "&",
      /\|\|/,
      /\|/,
      /\?:/,
      "="
    ];
    const FUNCTION = {
      relevance: 0,
      match: regex6.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE, /(?=\s*[({])/),
      className: "title.function"
    };
    const FUNCTION_DEFINITION = {
      match: regex6.concat(regex6.either(regex6.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE), regex6.either(...OPERATORS2)), /(?=\s*\([^)]+\)\s*\{)/),
      className: "title.function",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            {
              relevance: 0,
              scope: "params",
              match: IDENT_RE
            }
          ]
        }
      ] }
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          IDENT_RE,
          /\s+is\s+/,
          IDENT_RE
        ] },
        { match: [
          /class\s+/,
          IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS2
    };
    const OPERATOR = {
      relevance: 0,
      match: regex6.either(...OPERATORS2),
      className: "operator"
    };
    const TRIPLE_STRING = {
      className: "string",
      begin: /"""/,
      end: /"""/
    };
    const PROPERTY = {
      className: "property",
      begin: regex6.concat(/\./, regex6.lookahead(IDENT_RE)),
      end: IDENT_RE,
      excludeBegin: true,
      relevance: 0
    };
    const FIELD = {
      relevance: 0,
      match: regex6.concat(/\b_/, IDENT_RE),
      scope: "variable"
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
      scope: "title.class",
      keywords: { _: CORE_CLASSES }
    };
    const NUMBER = hljs.C_NUMBER_MODE;
    const SETTER = {
      match: [
        IDENT_RE,
        /\s*/,
        /=/,
        /\s*/,
        /\(/,
        IDENT_RE,
        /\)\s*\{/
      ],
      scope: {
        1: "title.function",
        3: "operator",
        6: "params"
      }
    };
    const COMMENT_DOCS = hljs.COMMENT(/\/\*\*/, /\*\//, { contains: [
      {
        match: /@[a-z]+/,
        scope: "doctag"
      },
      "self"
    ] });
    const SUBST = {
      scope: "subst",
      begin: /%\(/,
      end: /\)/,
      contains: [
        NUMBER,
        CLASS_REFERENCE,
        FUNCTION,
        FIELD,
        OPERATOR
      ]
    };
    const STRING = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        SUBST,
        {
          scope: "char.escape",
          variants: [
            { match: /\\\\|\\["0%abefnrtv]/ },
            { match: /\\x[0-9A-F]{2}/ },
            { match: /\\u[0-9A-F]{4}/ },
            { match: /\\U[0-9A-F]{8}/ }
          ]
        }
      ]
    };
    SUBST.contains.push(STRING);
    const ALL_KWS = [
      ...KEYWORDS2,
      ...LANGUAGE_VARS,
      ...LITERALS
    ];
    const VARIABLE = {
      relevance: 0,
      match: regex6.concat("\\b(?!", ALL_KWS.join("|"), "\\b)", /[a-zA-Z_]\w*(?:[?!]|\b)/),
      className: "variable"
    };
    const ATTRIBUTE = {
      scope: "comment",
      variants: [
        {
          begin: [
            /#!?/,
            /[A-Za-z_]+(?=\()/
          ],
          beginScope: {},
          keywords: { literal: LITERALS },
          contains: [],
          end: /\)/
        },
        {
          begin: [
            /#!?/,
            /[A-Za-z_]+/
          ],
          beginScope: {},
          end: /$/
        }
      ]
    };
    return {
      name: "Wren",
      keywords: {
        keyword: KEYWORDS2,
        "variable.language": LANGUAGE_VARS,
        literal: LITERALS
      },
      contains: [
        ATTRIBUTE,
        NUMBER,
        STRING,
        TRIPLE_STRING,
        COMMENT_DOCS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CLASS_REFERENCE,
        CLASS_DEFINITION,
        SETTER,
        FUNCTION_DEFINITION,
        FUNCTION,
        OPERATOR,
        FIELD,
        PROPERTY,
        VARIABLE
      ]
    };
  };
  module.exports = wren;
});

// node_modules/highlight.js/lib/languages/x86asm.js
var require_x86asm = __commonJS((exports, module) => {
  var x86asm = function(hljs) {
    return {
      name: "Intel x86 Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "[.%]?" + hljs.IDENT_RE,
        keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
        built_in: "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr",
        meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
      },
      contains: [
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "number",
          variants: [
            {
              begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
              relevance: 0
            },
            {
              begin: "\\$[0-9][0-9A-Fa-f]*",
              relevance: 0
            },
            { begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b" },
            { begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b" }
          ]
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: "\'",
              end: "[^\\\\]\'"
            },
            {
              begin: "`",
              end: "[^\\\\]`"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            { begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)" },
            { begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:" }
          ],
          relevance: 0
        },
        {
          className: "subst",
          begin: "%[0-9]+",
          relevance: 0
        },
        {
          className: "subst",
          begin: "%!S+",
          relevance: 0
        },
        {
          className: "meta",
          begin: /^\s*\.[\w_-]+/
        }
      ]
    };
  };
  module.exports = x86asm;
});

// node_modules/highlight.js/lib/languages/xl.js
var require_xl = __commonJS((exports, module) => {
  var xl = function(hljs) {
    const KWS = [
      "if",
      "then",
      "else",
      "do",
      "while",
      "until",
      "for",
      "loop",
      "import",
      "with",
      "is",
      "as",
      "where",
      "when",
      "by",
      "data",
      "constant",
      "integer",
      "real",
      "text",
      "name",
      "boolean",
      "symbol",
      "infix",
      "prefix",
      "postfix",
      "block",
      "tree"
    ];
    const BUILT_INS = [
      "in",
      "mod",
      "rem",
      "and",
      "or",
      "xor",
      "not",
      "abs",
      "sign",
      "floor",
      "ceil",
      "sqrt",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",
      "exp",
      "expm1",
      "log",
      "log2",
      "log10",
      "log1p",
      "pi",
      "at",
      "text_length",
      "text_range",
      "text_find",
      "text_replace",
      "contains",
      "page",
      "slide",
      "basic_slide",
      "title_slide",
      "title",
      "subtitle",
      "fade_in",
      "fade_out",
      "fade_at",
      "clear_color",
      "color",
      "line_color",
      "line_width",
      "texture_wrap",
      "texture_transform",
      "texture",
      "scale_?x",
      "scale_?y",
      "scale_?z?",
      "translate_?x",
      "translate_?y",
      "translate_?z?",
      "rotate_?x",
      "rotate_?y",
      "rotate_?z?",
      "rectangle",
      "circle",
      "ellipse",
      "sphere",
      "path",
      "line_to",
      "move_to",
      "quad_to",
      "curve_to",
      "theme",
      "background",
      "contents",
      "locally",
      "time",
      "mouse_?x",
      "mouse_?y",
      "mouse_buttons"
    ];
    const BUILTIN_MODULES = [
      "ObjectLoader",
      "Animate",
      "MovieCredits",
      "Slides",
      "Filters",
      "Shading",
      "Materials",
      "LensFlare",
      "Mapping",
      "VLCAudioVideo",
      "StereoDecoder",
      "PointCloud",
      "NetworkAccess",
      "RemoteControl",
      "RegExp",
      "ChromaKey",
      "Snowfall",
      "NodeJS",
      "Speech",
      "Charts"
    ];
    const LITERALS = [
      "true",
      "false",
      "nil"
    ];
    const KEYWORDS2 = {
      $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
      keyword: KWS,
      literal: LITERALS,
      built_in: BUILT_INS.concat(BUILTIN_MODULES)
    };
    const DOUBLE_QUOTE_TEXT = {
      className: "string",
      begin: '"',
      end: '"',
      illegal: "\\n"
    };
    const SINGLE_QUOTE_TEXT = {
      className: "string",
      begin: "\'",
      end: "\'",
      illegal: "\\n"
    };
    const LONG_TEXT = {
      className: "string",
      begin: "<<",
      end: ">>"
    };
    const BASED_NUMBER = {
      className: "number",
      begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
    };
    const IMPORT = {
      beginKeywords: "import",
      end: "$",
      keywords: KEYWORDS2,
      contains: [DOUBLE_QUOTE_TEXT]
    };
    const FUNCTION_DEFINITION = {
      className: "function",
      begin: /[a-z][^\n]*->/,
      returnBegin: true,
      end: /->/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, { starts: {
          endsWithParent: true,
          keywords: KEYWORDS2
        } })
      ]
    };
    return {
      name: "XL",
      aliases: ["tao"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        DOUBLE_QUOTE_TEXT,
        SINGLE_QUOTE_TEXT,
        LONG_TEXT,
        FUNCTION_DEFINITION,
        IMPORT,
        BASED_NUMBER,
        hljs.NUMBER_MODE
      ]
    };
  };
  module.exports = xl;
});

// node_modules/highlight.js/lib/languages/xquery.js
var require_xquery = __commonJS((exports, module) => {
  var xquery = function(_hljs) {
    const KEYWORDS2 = [
      "module",
      "schema",
      "namespace",
      "boundary-space",
      "preserve",
      "no-preserve",
      "strip",
      "default",
      "collation",
      "base-uri",
      "ordering",
      "context",
      "decimal-format",
      "decimal-separator",
      "copy-namespaces",
      "empty-sequence",
      "except",
      "exponent-separator",
      "external",
      "grouping-separator",
      "inherit",
      "no-inherit",
      "lax",
      "minus-sign",
      "per-mille",
      "percent",
      "schema-attribute",
      "schema-element",
      "strict",
      "unordered",
      "zero-digit",
      "declare",
      "import",
      "option",
      "function",
      "validate",
      "variable",
      "for",
      "at",
      "in",
      "let",
      "where",
      "order",
      "group",
      "by",
      "return",
      "if",
      "then",
      "else",
      "tumbling",
      "sliding",
      "window",
      "start",
      "when",
      "only",
      "end",
      "previous",
      "next",
      "stable",
      "ascending",
      "descending",
      "allowing",
      "empty",
      "greatest",
      "least",
      "some",
      "every",
      "satisfies",
      "switch",
      "case",
      "typeswitch",
      "try",
      "catch",
      "and",
      "or",
      "to",
      "union",
      "intersect",
      "instance",
      "of",
      "treat",
      "as",
      "castable",
      "cast",
      "map",
      "array",
      "delete",
      "insert",
      "into",
      "replace",
      "value",
      "rename",
      "copy",
      "modify",
      "update"
    ];
    const TYPES = [
      "item",
      "document-node",
      "node",
      "attribute",
      "document",
      "element",
      "comment",
      "namespace",
      "namespace-node",
      "processing-instruction",
      "text",
      "construction",
      "xs:anyAtomicType",
      "xs:untypedAtomic",
      "xs:duration",
      "xs:time",
      "xs:decimal",
      "xs:float",
      "xs:double",
      "xs:gYearMonth",
      "xs:gYear",
      "xs:gMonthDay",
      "xs:gMonth",
      "xs:gDay",
      "xs:boolean",
      "xs:base64Binary",
      "xs:hexBinary",
      "xs:anyURI",
      "xs:QName",
      "xs:NOTATION",
      "xs:dateTime",
      "xs:dateTimeStamp",
      "xs:date",
      "xs:string",
      "xs:normalizedString",
      "xs:token",
      "xs:language",
      "xs:NMTOKEN",
      "xs:Name",
      "xs:NCName",
      "xs:ID",
      "xs:IDREF",
      "xs:ENTITY",
      "xs:integer",
      "xs:nonPositiveInteger",
      "xs:negativeInteger",
      "xs:long",
      "xs:int",
      "xs:short",
      "xs:byte",
      "xs:nonNegativeInteger",
      "xs:unisignedLong",
      "xs:unsignedInt",
      "xs:unsignedShort",
      "xs:unsignedByte",
      "xs:positiveInteger",
      "xs:yearMonthDuration",
      "xs:dayTimeDuration"
    ];
    const LITERALS = [
      "eq",
      "ne",
      "lt",
      "le",
      "gt",
      "ge",
      "is",
      "self::",
      "child::",
      "descendant::",
      "descendant-or-self::",
      "attribute::",
      "following::",
      "following-sibling::",
      "parent::",
      "ancestor::",
      "ancestor-or-self::",
      "preceding::",
      "preceding-sibling::",
      "NaN"
    ];
    const BUILT_IN = {
      className: "built_in",
      variants: [
        {
          begin: /\barray:/,
          end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
        },
        {
          begin: /\bmap:/,
          end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
        },
        {
          begin: /\bmath:/,
          end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
        },
        {
          begin: /\bop:/,
          end: /\(/,
          excludeEnd: true
        },
        {
          begin: /\bfn:/,
          end: /\(/,
          excludeEnd: true
        },
        { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
        {
          begin: /\blocal:/,
          end: /\(/,
          excludeEnd: true
        },
        {
          begin: /\bzip:/,
          end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
        },
        {
          begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
          end: /\(/,
          excludeEnd: true
        }
      ]
    };
    const TITLE = {
      className: "title",
      begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
      end: /;/
    };
    const VAR = {
      className: "variable",
      begin: /[$][\w\-:]+/
    };
    const NUMBER = {
      className: "number",
      begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
      relevance: 0
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    };
    const ANNOTATION = {
      className: "meta",
      begin: /%[\w\-:]+/
    };
    const COMMENT = {
      className: "comment",
      begin: /\(:/,
      end: /:\)/,
      relevance: 10,
      contains: [
        {
          className: "doctag",
          begin: /@\w+/
        }
      ]
    };
    const COMPUTED = {
      beginKeywords: "element attribute comment document processing-instruction",
      end: /\{/,
      excludeEnd: true
    };
    const DIRECT = {
      begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
      end: /(\/[\w._:-]+>)/,
      subLanguage: "xml",
      contains: [
        {
          begin: /\{/,
          end: /\}/,
          subLanguage: "xquery"
        },
        "self"
      ]
    };
    const CONTAINS = [
      VAR,
      BUILT_IN,
      STRING,
      NUMBER,
      COMMENT,
      ANNOTATION,
      TITLE,
      COMPUTED,
      DIRECT
    ];
    return {
      name: "XQuery",
      aliases: [
        "xpath",
        "xq",
        "xqm"
      ],
      case_insensitive: false,
      illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
      keywords: {
        $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
        keyword: KEYWORDS2,
        type: TYPES,
        literal: LITERALS
      },
      contains: CONTAINS
    };
  };
  module.exports = xquery;
});

// node_modules/highlight.js/lib/languages/zephir.js
var require_zephir = __commonJS((exports, module) => {
  var zephir = function(hljs) {
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })
      ]
    };
    const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;
    const NUMBER = { variants: [
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ] };
    const KEYWORDS2 = "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined";
    return {
      name: "Zephir",
      aliases: ["zep"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(/\/\*/, /\*\//, { contains: [
          {
            className: "doctag",
            begin: /@[A-Za-z]+/
          }
        ] }),
        {
          className: "string",
          begin: /<<<['"]?\w+['"]?$/,
          end: /^\w+;/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
        },
        {
          className: "function",
          beginKeywords: "function fn",
          end: /[;{]/,
          excludeEnd: true,
          illegal: /\$|\[|%/,
          contains: [
            TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              contains: [
                "self",
                hljs.C_BLOCK_COMMENT_MODE,
                STRING,
                NUMBER
              ]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          illegal: /[:($"]/,
          contains: [
            { beginKeywords: "extends implements" },
            TITLE_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          end: /;/,
          illegal: /[.']/,
          contains: [TITLE_MODE]
        },
        {
          beginKeywords: "use",
          end: /;/,
          contains: [TITLE_MODE]
        },
        {
          begin: /=>/
        },
        STRING,
        NUMBER
      ]
    };
  };
  module.exports = zephir;
});

// node_modules/highlight.js/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var hljs = require_core();
  hljs.registerLanguage("1c", require_1c());
  hljs.registerLanguage("abnf", require_abnf());
  hljs.registerLanguage("accesslog", require_accesslog());
  hljs.registerLanguage("actionscript", require_actionscript());
  hljs.registerLanguage("ada", require_ada());
  hljs.registerLanguage("angelscript", require_angelscript());
  hljs.registerLanguage("apache", require_apache());
  hljs.registerLanguage("applescript", require_applescript());
  hljs.registerLanguage("arcade", require_arcade());
  hljs.registerLanguage("arduino", require_arduino());
  hljs.registerLanguage("armasm", require_armasm());
  hljs.registerLanguage("xml", require_xml());
  hljs.registerLanguage("asciidoc", require_asciidoc());
  hljs.registerLanguage("aspectj", require_aspectj());
  hljs.registerLanguage("autohotkey", require_autohotkey());
  hljs.registerLanguage("autoit", require_autoit());
  hljs.registerLanguage("avrasm", require_avrasm());
  hljs.registerLanguage("awk", require_awk());
  hljs.registerLanguage("axapta", require_axapta());
  hljs.registerLanguage("bash", require_bash());
  hljs.registerLanguage("basic", require_basic());
  hljs.registerLanguage("bnf", require_bnf());
  hljs.registerLanguage("brainfuck", require_brainfuck());
  hljs.registerLanguage("c", require_c());
  hljs.registerLanguage("cal", require_cal());
  hljs.registerLanguage("capnproto", require_capnproto());
  hljs.registerLanguage("ceylon", require_ceylon());
  hljs.registerLanguage("clean", require_clean2());
  hljs.registerLanguage("clojure", require_clojure());
  hljs.registerLanguage("clojure-repl", require_clojure_repl());
  hljs.registerLanguage("cmake", require_cmake());
  hljs.registerLanguage("coffeescript", require_coffeescript());
  hljs.registerLanguage("coq", require_coq());
  hljs.registerLanguage("cos", require_cos());
  hljs.registerLanguage("cpp", require_cpp());
  hljs.registerLanguage("crmsh", require_crmsh());
  hljs.registerLanguage("crystal", require_crystal());
  hljs.registerLanguage("csharp", require_csharp());
  hljs.registerLanguage("csp", require_csp());
  hljs.registerLanguage("css", require_css());
  hljs.registerLanguage("d", require_d());
  hljs.registerLanguage("markdown", require_markdown());
  hljs.registerLanguage("dart", require_dart());
  hljs.registerLanguage("delphi", require_delphi());
  hljs.registerLanguage("diff", require_diff());
  hljs.registerLanguage("django", require_django());
  hljs.registerLanguage("dns", require_dns());
  hljs.registerLanguage("dockerfile", require_dockerfile());
  hljs.registerLanguage("dos", require_dos());
  hljs.registerLanguage("dsconfig", require_dsconfig());
  hljs.registerLanguage("dts", require_dts());
  hljs.registerLanguage("dust", require_dust());
  hljs.registerLanguage("ebnf", require_ebnf());
  hljs.registerLanguage("elixir", require_elixir());
  hljs.registerLanguage("elm", require_elm());
  hljs.registerLanguage("ruby", require_ruby());
  hljs.registerLanguage("erb", require_erb());
  hljs.registerLanguage("erlang-repl", require_erlang_repl());
  hljs.registerLanguage("erlang", require_erlang());
  hljs.registerLanguage("excel", require_excel());
  hljs.registerLanguage("fix", require_fix());
  hljs.registerLanguage("flix", require_flix());
  hljs.registerLanguage("fortran", require_fortran());
  hljs.registerLanguage("fsharp", require_fsharp());
  hljs.registerLanguage("gams", require_gams());
  hljs.registerLanguage("gauss", require_gauss());
  hljs.registerLanguage("gcode", require_gcode());
  hljs.registerLanguage("gherkin", require_gherkin());
  hljs.registerLanguage("glsl", require_glsl());
  hljs.registerLanguage("gml", require_gml());
  hljs.registerLanguage("go", require_go());
  hljs.registerLanguage("golo", require_golo());
  hljs.registerLanguage("gradle", require_gradle());
  hljs.registerLanguage("graphql", require_graphql());
  hljs.registerLanguage("groovy", require_groovy());
  hljs.registerLanguage("haml", require_haml());
  hljs.registerLanguage("handlebars", require_handlebars());
  hljs.registerLanguage("haskell", require_haskell());
  hljs.registerLanguage("haxe", require_haxe());
  hljs.registerLanguage("hsp", require_hsp());
  hljs.registerLanguage("http", require_http());
  hljs.registerLanguage("hy", require_hy());
  hljs.registerLanguage("inform7", require_inform7());
  hljs.registerLanguage("ini", require_ini());
  hljs.registerLanguage("irpf90", require_irpf90());
  hljs.registerLanguage("isbl", require_isbl());
  hljs.registerLanguage("java", require_java());
  hljs.registerLanguage("javascript", require_javascript());
  hljs.registerLanguage("jboss-cli", require_jboss_cli());
  hljs.registerLanguage("json", require_json());
  hljs.registerLanguage("julia", require_julia());
  hljs.registerLanguage("julia-repl", require_julia_repl());
  hljs.registerLanguage("kotlin", require_kotlin());
  hljs.registerLanguage("lasso", require_lasso());
  hljs.registerLanguage("latex", require_latex());
  hljs.registerLanguage("ldif", require_ldif());
  hljs.registerLanguage("leaf", require_leaf());
  hljs.registerLanguage("less", require_less());
  hljs.registerLanguage("lisp", require_lisp());
  hljs.registerLanguage("livecodeserver", require_livecodeserver());
  hljs.registerLanguage("livescript", require_livescript());
  hljs.registerLanguage("llvm", require_llvm());
  hljs.registerLanguage("lsl", require_lsl());
  hljs.registerLanguage("lua", require_lua());
  hljs.registerLanguage("makefile", require_makefile());
  hljs.registerLanguage("mathematica", require_mathematica());
  hljs.registerLanguage("matlab", require_matlab());
  hljs.registerLanguage("maxima", require_maxima());
  hljs.registerLanguage("mel", require_mel());
  hljs.registerLanguage("mercury", require_mercury());
  hljs.registerLanguage("mipsasm", require_mipsasm());
  hljs.registerLanguage("mizar", require_mizar());
  hljs.registerLanguage("perl", require_perl());
  hljs.registerLanguage("mojolicious", require_mojolicious());
  hljs.registerLanguage("monkey", require_monkey());
  hljs.registerLanguage("moonscript", require_moonscript());
  hljs.registerLanguage("n1ql", require_n1ql());
  hljs.registerLanguage("nestedtext", require_nestedtext());
  hljs.registerLanguage("nginx", require_nginx());
  hljs.registerLanguage("nim", require_nim());
  hljs.registerLanguage("nix", require_nix());
  hljs.registerLanguage("node-repl", require_node_repl());
  hljs.registerLanguage("nsis", require_nsis());
  hljs.registerLanguage("objectivec", require_objectivec());
  hljs.registerLanguage("ocaml", require_ocaml());
  hljs.registerLanguage("openscad", require_openscad());
  hljs.registerLanguage("oxygene", require_oxygene());
  hljs.registerLanguage("parser3", require_parser3());
  hljs.registerLanguage("pf", require_pf());
  hljs.registerLanguage("pgsql", require_pgsql());
  hljs.registerLanguage("php", require_php());
  hljs.registerLanguage("php-template", require_php_template());
  hljs.registerLanguage("plaintext", require_plaintext());
  hljs.registerLanguage("pony", require_pony());
  hljs.registerLanguage("powershell", require_powershell());
  hljs.registerLanguage("processing", require_processing());
  hljs.registerLanguage("profile", require_profile());
  hljs.registerLanguage("prolog", require_prolog());
  hljs.registerLanguage("properties", require_properties());
  hljs.registerLanguage("protobuf", require_protobuf());
  hljs.registerLanguage("puppet", require_puppet());
  hljs.registerLanguage("purebasic", require_purebasic());
  hljs.registerLanguage("python", require_python());
  hljs.registerLanguage("python-repl", require_python_repl());
  hljs.registerLanguage("q", require_q());
  hljs.registerLanguage("qml", require_qml());
  hljs.registerLanguage("r", require_r());
  hljs.registerLanguage("reasonml", require_reasonml());
  hljs.registerLanguage("rib", require_rib());
  hljs.registerLanguage("roboconf", require_roboconf());
  hljs.registerLanguage("routeros", require_routeros());
  hljs.registerLanguage("rsl", require_rsl());
  hljs.registerLanguage("ruleslanguage", require_ruleslanguage());
  hljs.registerLanguage("rust", require_rust());
  hljs.registerLanguage("sas", require_sas());
  hljs.registerLanguage("scala", require_scala());
  hljs.registerLanguage("scheme", require_scheme());
  hljs.registerLanguage("scilab", require_scilab());
  hljs.registerLanguage("scss", require_scss());
  hljs.registerLanguage("shell", require_shell());
  hljs.registerLanguage("smali", require_smali());
  hljs.registerLanguage("smalltalk", require_smalltalk());
  hljs.registerLanguage("sml", require_sml());
  hljs.registerLanguage("sqf", require_sqf());
  hljs.registerLanguage("sql", require_sql());
  hljs.registerLanguage("stan", require_stan());
  hljs.registerLanguage("stata", require_stata());
  hljs.registerLanguage("step21", require_step21());
  hljs.registerLanguage("stylus", require_stylus());
  hljs.registerLanguage("subunit", require_subunit());
  hljs.registerLanguage("swift", require_swift());
  hljs.registerLanguage("taggerscript", require_taggerscript());
  hljs.registerLanguage("yaml", require_yaml());
  hljs.registerLanguage("tap", require_tap());
  hljs.registerLanguage("tcl", require_tcl());
  hljs.registerLanguage("thrift", require_thrift());
  hljs.registerLanguage("tp", require_tp());
  hljs.registerLanguage("twig", require_twig());
  hljs.registerLanguage("typescript", require_typescript());
  hljs.registerLanguage("vala", require_vala());
  hljs.registerLanguage("vbnet", require_vbnet());
  hljs.registerLanguage("vbscript", require_vbscript());
  hljs.registerLanguage("vbscript-html", require_vbscript_html());
  hljs.registerLanguage("verilog", require_verilog());
  hljs.registerLanguage("vhdl", require_vhdl());
  hljs.registerLanguage("vim", require_vim());
  hljs.registerLanguage("wasm", require_wasm());
  hljs.registerLanguage("wren", require_wren());
  hljs.registerLanguage("x86asm", require_x86asm());
  hljs.registerLanguage("xl", require_xl());
  hljs.registerLanguage("xquery", require_xquery());
  hljs.registerLanguage("zephir", require_zephir());
  hljs.HighlightJS = hljs;
  hljs.default = hljs;
  module.exports = hljs;
});

// index.ts
var {watch} = (()=>({}));

// src/utils.ts
var import_html_minifier = __toESM(require_htmlminifier(), 1);
var {readdir} = (()=>({}));
var throttle = (func, delay) => {
  let lastExecutionTime = 0;
  let pendingExecution = null;
  return async (...args) => {
    const now = Date.now();
    const elapsedTime = now - lastExecutionTime;
    if (elapsedTime >= delay) {
      lastExecutionTime = now;
      return func(...args);
    } else {
      if (!pendingExecution) {
        pendingExecution = new Promise((resolve) => {
          const waitTime = delay - elapsedTime;
          setTimeout(async () => {
            lastExecutionTime = Date.now();
            const result = await func(...args);
            resolve(result);
            pendingExecution = null;
          }, waitTime);
        });
      }
      return pendingExecution;
    }
  };
};
var removeRedundantScript = (htmlResult) => {
  const scriptTags = htmlResult.match(/<script>[\s\S]*?<\/script>/g);
  if (!scriptTags)
    return htmlResult;
  let result = htmlResult.replace(/<script>[\s\S]*?<\/script>/g, "");
  const uniqueScriptTags = [];
  scriptTags.forEach((tag) => {
    if (!uniqueScriptTags.includes(tag)) {
      uniqueScriptTags.push(tag);
    }
  });
  const lastIndex = result.lastIndexOf("</body>");
  result = result.slice(0, lastIndex) + uniqueScriptTags.join("\n") + result.slice(lastIndex);
  return result;
};
var simpleMinifier = (html) => {
  return import_html_minifier.default.minify(removeRedundantScript(html), {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
  });
};
var convertToSlug = (text) => {
  const symbolPattern = /[^a-zA-Z0-9-]/g;
  return text.replace(" ", "-").toLowerCase().replace(symbolPattern, "");
};
var generateRandomString = () => Math.random().toString(36).substring(2, 6).toUpperCase();
var getFilePaths = async (dirPath) => {
  const files = await readdir(dirPath, { recursive: true });
  return files.map((filename) => `${dirPath}/${filename}`);
};
var countPerformance = async (callback, title) => {
  const startTime = Bun.nanoseconds();
  await callback();
  const endTime = Bun.nanoseconds();
  const timeTaken = (endTime - startTime) / 1e9;
  console.log(`Rebuilding ${title} ... Done, ${timeTaken.toFixed(4)}s`);
};
var hasFileExtension = (url) => {
  const parts = url.split("/");
  const lastPart = parts[parts.length - 1];
  return lastPart.includes(".");
};
var getFormattedDate = (date) => {
  const day = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const year = date.getFullYear();
  return `${day}-${month}-${year}`;
};
// configuration.json
var configuration_default = {
  blog: "example",
  perPage: 3,
  theme: "cupcake"
};

// constants.ts
var { blog, perPage, theme } = configuration_default;
var PATH_ENTRY_DIR = `${import.meta.dir}/${blog}`;
var PATH_DIST_DIR = `${import.meta.dir}/dist`;
var PATH_CONTENT_DIR = `${PATH_ENTRY_DIR}/content`;
var PATH_UI_DIR = `${PATH_ENTRY_DIR}/ui`;
var PATH_ASSET_DIR = `${PATH_ENTRY_DIR}/asset`;
var PATH_ASSET_DIST_DIR = `${PATH_DIST_DIR}/asset`;
var PORT = 11072;
var TYPE_POST = "post";
var TYPE_PAGE = "page";
var RESERVED_SLUG = ["post", "page", "asset", "categories"];

// ui/partials/footer.ts
var footer = String.raw`
<footer class="footer footer-center p-4 bg-base-200 text-base-content">
  <aside class="py-5 mt-5">
    <p>HummingBun 2024 - by @andirkh</p>
  </aside>
</footer>
`;
var footer_default = footer;

// ui/partials/header.ts
var header = String.raw`
<div class="navbar bg-base-100">
  <div class="navbar-start">
    <div class="dropdown">
      <div tabindex="0" role="button" class="btn btn-ghost btn-circle">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" /></svg>
      </div>
      <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
        <li><a href="/">Home</a></li>
        <li><a href="/categories">Categories</a></li>
        <li><a href="/categories">about</a></li>
      </ul>
    </div>
  </div>
  <div class="navbar-center">
    <a class="btn btn-ghost text-xl" href="/">HummingBun</a>
  </div>
  <div class="navbar-end">
    <button class="btn btn-ghost btn-circle">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
    </button>
    <button class="btn btn-ghost btn-circle">
      <div class="indicator">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" /></svg>
        <span class="badge badge-xs badge-primary indicator-item"></span>
      </div>
    </button>
  </div>
</div>
`;
var header_default = header;

// ui/partials/meta.ts
var meta = String.raw`
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/asset/favicon/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/asset/css/out.css">
`;
var meta_default = meta;

// ui/HomeUI.ts
var HomeUI = (contents, prev, next) => String.raw`
  <!DOCTYPE html>
  <html lang="en" theme="${theme}">
  <head>
    ${meta_default}
    <title>Home</title>
  </head>
  <body>
    ${header_default}
    <div class="flex flex-start justify-center my-3 gap-3">
      ${contents.map((obj, index) => {
  return String.raw`
          <div class="card w-96 bg-base-100 shadow-xl" index="${index}">
            <figure><img src="${obj.image}" alt="Shoes" /></figure>
            <div class="card-body">
              <h2 class="card-title">${obj.title}</h2>
              <a href="/post/${obj.slug}" class="card-actions justify-end">
                <button class="btn btn-primary">Read More</button>
              </a>
            </div>
          </div>
        `;
}).join("")}
    </div>
    <div class="flex justify-between align-items-center p-3">
      <div>
        ${prev ? String.raw`<a href="${prev}"><button class="btn">Prev</button></a>` : ""}
      </div>
      <div>
        ${next ? String.raw`<a href="${next}"><button class="btn">Next</button></a>` : ""}
      </div>
    </div>
    <div class="mt-5">
      ${footer_default}
    </div>
  </body>
  </html>
`;
var HomeUI_default = HomeUI;

// ui/PageUI.ts
var PageUI = (content, title) => String.raw`
  <!DOCTYPE html>
  <html lang="en" theme="${theme}">
  <head>
    ${meta_default}
    <title>${title}</title>
  </head>
  <body>
    ${header_default}
    <div class="card bg-base-100">
      <h2>${title}</h2>
      ${content}
      ${footer_default}
    </div>
  </body>
  </html>
`;
var PageUI_default = PageUI;

// ui/PostUI.ts
var PostUI = (obj) => {
  return String.raw`
      <!DOCTYPE html>
      <html lang="en" theme="${theme}">
      <head>
        ${meta_default}
        <title>${obj.title}</title>
      </head>
      <body>
        ${header_default}
        <div class="flex justify-center items-center mt-3 mb-5">
          <div class="card bg-white">
            <div class="card-body prose prose-l">
              <h1>${obj.title}</h1>
              <div>${getFormattedDate(obj.date)} by ${obj.author}</div>
              <hr />
              ${obj.content}
              <div>categories: ${obj.categories.join(", ")}</div>
            </div>
          </div>
        </div>
        ${footer_default}
      </body>
      </html>
    `;
};
var PostUI_default = PostUI;

// node_modules/markdown-it/lib/common/utils.mjs
var exports_utils2 = {};
__export(exports_utils2, {
  unescapeMd: () => {
    {
      return unescapeMd;
    }
  },
  unescapeAll: () => {
    {
      return unescapeAll;
    }
  },
  normalizeReference: () => {
    {
      return normalizeReference;
    }
  },
  lib: () => {
    {
      return lib;
    }
  },
  isWhiteSpace: () => {
    {
      return isWhiteSpace;
    }
  },
  isValidEntityCode: () => {
    {
      return isValidEntityCode;
    }
  },
  isString: () => {
    {
      return isString;
    }
  },
  isSpace: () => {
    {
      return isSpace;
    }
  },
  isPunctChar: () => {
    {
      return isPunctChar;
    }
  },
  isMdAsciiPunct: () => {
    {
      return isMdAsciiPunct;
    }
  },
  has: () => {
    {
      return has;
    }
  },
  fromCodePoint: () => {
    {
      return fromCodePoint2;
    }
  },
  escapeRE: () => {
    {
      return escapeRE;
    }
  },
  escapeHtml: () => {
    {
      return escapeHtml;
    }
  },
  assign: () => {
    {
      return assign;
    }
  },
  arrayReplaceAt: () => {
    {
      return arrayReplaceAt;
    }
  }
});

// node_modules/mdurl/index.mjs
var exports_mdurl = {};
__export(exports_mdurl, {
  parse: () => {
    {
      return parse_default;
    }
  },
  format: () => {
    {
      return format;
    }
  },
  encode: () => {
    {
      return encode_default;
    }
  },
  decode: () => {
    {
      return decode_default;
    }
  }
});

// node_modules/mdurl/lib/decode.mjs
var getDecodeCache = function(exclude) {
  let cache = decodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = decodeCache[exclude] = [];
  for (let i = 0;i < 128; i++) {
    const ch = String.fromCharCode(i);
    cache.push(ch);
  }
  for (let i = 0;i < exclude.length; i++) {
    const ch = exclude.charCodeAt(i);
    cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
  }
  return cache;
};
var decode = function(string, exclude) {
  if (typeof exclude !== "string") {
    exclude = decode.defaultChars;
  }
  const cache = getDecodeCache(exclude);
  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
    let result = "";
    for (let i = 0, l2 = seq.length;i < l2; i += 3) {
      const b1 = parseInt(seq.slice(i + 1, i + 3), 16);
      if (b1 < 128) {
        result += cache[b1];
        continue;
      }
      if ((b1 & 224) === 192 && i + 3 < l2) {
        const b22 = parseInt(seq.slice(i + 4, i + 6), 16);
        if ((b22 & 192) === 128) {
          const chr = b1 << 6 & 1984 | b22 & 63;
          if (chr < 128) {
            result += "\uFFFD\uFFFD";
          } else {
            result += String.fromCharCode(chr);
          }
          i += 3;
          continue;
        }
      }
      if ((b1 & 240) === 224 && i + 6 < l2) {
        const b22 = parseInt(seq.slice(i + 4, i + 6), 16);
        const b32 = parseInt(seq.slice(i + 7, i + 9), 16);
        if ((b22 & 192) === 128 && (b32 & 192) === 128) {
          const chr = b1 << 12 & 61440 | b22 << 6 & 4032 | b32 & 63;
          if (chr < 2048 || chr >= 55296 && chr <= 57343) {
            result += "\uFFFD\uFFFD\uFFFD";
          } else {
            result += String.fromCharCode(chr);
          }
          i += 6;
          continue;
        }
      }
      if ((b1 & 248) === 240 && i + 9 < l2) {
        const b22 = parseInt(seq.slice(i + 4, i + 6), 16);
        const b32 = parseInt(seq.slice(i + 7, i + 9), 16);
        const b42 = parseInt(seq.slice(i + 10, i + 12), 16);
        if ((b22 & 192) === 128 && (b32 & 192) === 128 && (b42 & 192) === 128) {
          let chr = b1 << 18 & 1835008 | b22 << 12 & 258048 | b32 << 6 & 4032 | b42 & 63;
          if (chr < 65536 || chr > 1114111) {
            result += "\uFFFD\uFFFD\uFFFD\uFFFD";
          } else {
            chr -= 65536;
            result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
          }
          i += 9;
          continue;
        }
      }
      result += "\uFFFD";
    }
    return result;
  });
};
var decodeCache = {};
decode.defaultChars = ";/?:@&=+$,#";
decode.componentChars = "";
var decode_default = decode;

// node_modules/mdurl/lib/encode.mjs
var getEncodeCache = function(exclude) {
  let cache = encodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = encodeCache[exclude] = [];
  for (let i = 0;i < 128; i++) {
    const ch = String.fromCharCode(i);
    if (/^[0-9a-z]$/i.test(ch)) {
      cache.push(ch);
    } else {
      cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
    }
  }
  for (let i = 0;i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }
  return cache;
};
var encode = function(string, exclude, keepEscaped) {
  if (typeof exclude !== "string") {
    keepEscaped = exclude;
    exclude = encode.defaultChars;
  }
  if (typeof keepEscaped === "undefined") {
    keepEscaped = true;
  }
  const cache = getEncodeCache(exclude);
  let result = "";
  for (let i = 0, l2 = string.length;i < l2; i++) {
    const code = string.charCodeAt(i);
    if (keepEscaped && code === 37 && i + 2 < l2) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }
    if (code < 128) {
      result += cache[code];
      continue;
    }
    if (code >= 55296 && code <= 57343) {
      if (code >= 55296 && code <= 56319 && i + 1 < l2) {
        const nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 56320 && nextCode <= 57343) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result += "%EF%BF%BD";
      continue;
    }
    result += encodeURIComponent(string[i]);
  }
  return result;
};
var encodeCache = {};
encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";
var encode_default = encode;

// node_modules/mdurl/lib/format.mjs
function format(url) {
  let result = "";
  result += url.protocol || "";
  result += url.slashes ? "//" : "";
  result += url.auth ? url.auth + "@" : "";
  if (url.hostname && url.hostname.indexOf(":") !== -1) {
    result += "[" + url.hostname + "]";
  } else {
    result += url.hostname || "";
  }
  result += url.port ? ":" + url.port : "";
  result += url.pathname || "";
  result += url.search || "";
  result += url.hash || "";
  return result;
}

// node_modules/mdurl/lib/parse.mjs
var Url = function() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.pathname = null;
};
var urlParse = function(url, slashesDenoteHost) {
  if (url && url instanceof Url)
    return url;
  const u2 = new Url;
  u2.parse(url, slashesDenoteHost);
  return u2;
};
var protocolPattern = /^([a-z0-9.+-]+:)/i;
var portPattern = /:[0-9]*$/;
var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
var delims = ["<", ">", '"', "`", " ", "\r", "\n", "\t"];
var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
var autoEscape = ["\'"].concat(unwise);
var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
var hostEndingChars = ["/", "?", "#"];
var hostnameMaxLen = 255;
var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
var hostlessProtocol = {
  javascript: true,
  "javascript:": true
};
var slashedProtocol = {
  http: true,
  https: true,
  ftp: true,
  gopher: true,
  file: true,
  "http:": true,
  "https:": true,
  "ftp:": true,
  "gopher:": true,
  "file:": true
};
Url.prototype.parse = function(url, slashesDenoteHost) {
  let lowerProto, hec, slashes;
  let rest = url;
  rest = rest.trim();
  if (!slashesDenoteHost && url.split("#").length === 1) {
    const simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
      }
      return this;
    }
  }
  let proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    lowerProto = proto.toLowerCase();
    this.protocol = proto;
    rest = rest.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    let hostEnd = -1;
    for (let i = 0;i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    let auth, atSign;
    if (hostEnd === -1) {
      atSign = rest.lastIndexOf("@");
    } else {
      atSign = rest.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = auth;
    }
    hostEnd = -1;
    for (let i = 0;i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }
    if (rest[hostEnd - 1] === ":") {
      hostEnd--;
    }
    const host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);
    this.parseHost(host);
    this.hostname = this.hostname || "";
    const ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      const hostparts = this.hostname.split(/\./);
      for (let i = 0, l2 = hostparts.length;i < l2; i++) {
        const part = hostparts[i];
        if (!part) {
          continue;
        }
        if (!part.match(hostnamePartPattern)) {
          let newpart = "";
          for (let j2 = 0, k3 = part.length;j2 < k3; j2++) {
            if (part.charCodeAt(j2) > 127) {
              newpart += "x";
            } else {
              newpart += part[j2];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            const validParts = hostparts.slice(0, i);
            const notHost = hostparts.slice(i + 1);
            const bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = notHost.join(".") + rest;
            }
            this.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = "";
    }
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
  }
  const hash = rest.indexOf("#");
  if (hash !== -1) {
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  const qm = rest.indexOf("?");
  if (qm !== -1) {
    this.search = rest.substr(qm);
    rest = rest.slice(0, qm);
  }
  if (rest) {
    this.pathname = rest;
  }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = "";
  }
  return this;
};
Url.prototype.parseHost = function(host) {
  let port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) {
    this.hostname = host;
  }
};
var parse_default = urlParse;

// node_modules/uc.micro/index.mjs
var exports_uc = {};
__export(exports_uc, {
  Z: () => {
    {
      return regex_default5;
    }
  },
  P: () => {
    {
      return regex_default4;
    }
  },
  Cf: () => {
    {
      return regex_default3;
    }
  },
  Cc: () => {
    {
      return regex_default2;
    }
  },
  Any: () => {
    {
      return regex_default;
    }
  }
});

// node_modules/uc.micro/properties/Any/regex.mjs
var regex_default = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;

// node_modules/uc.micro/categories/Cc/regex.mjs
var regex_default2 = /[\0-\x1F\x7F-\x9F]/;

// node_modules/uc.micro/categories/Cf/regex.mjs
var regex_default3 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;

// node_modules/uc.micro/categories/P/regex.mjs
var regex_default4 = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;

// node_modules/uc.micro/categories/Z/regex.mjs
var regex_default5 = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array('\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\uD835\uDD04rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\uD835\uDD38plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\uD835\uDC9Cign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\uD835\uDD05pf;\uC000\uD835\uDD39eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\uD835\uDC9Ep\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\uD835\uDD07\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\uD835\uDD3B\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\uD835\uDC9Frok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\uD835\uDD08rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\uD835\uDD3Csilon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\uD835\uDD09lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\uD835\uDD3DAll;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\uD835\uDD0A;\u62D9pf;\uC000\uD835\uDD3Eeater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\uD835\uDCA2;\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\uD835\uDD40a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\uD835\uDD0Dpf;\uC000\uD835\uDD41\u01E3\u07C7\0\u07CCr;\uC000\uD835\uDCA5rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\uD835\uDD0Epf;\uC000\uD835\uDD42cr;\uC000\uD835\uDCA6\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\uD835\uDD0F\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\uD835\uDD43er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\uD835\uDD10nusPlus;\u6213pf;\uC000\uD835\uDD44c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\uD835\uDD11\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\uD835\uDCA9ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\uD835\uDD12rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\uD835\uDD46enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\uD835\uDCAAash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\uD835\uDD13i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\uD835\uDCAB;\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\uD835\uDD14pf;\u611Acr;\uC000\uD835\uDCAC\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\uD835\uDD16ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\uD835\uDD4A\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\uD835\uDCAEar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\uD835\uDD17\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\uD835\uDD4BipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\uD835\uDCAFrok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\uD835\uDD18rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\uD835\uDD4C\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\uD835\uDCB0ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\uD835\uDD19pf;\uC000\uD835\uDD4Dcr;\uC000\uD835\uDCB1dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\uD835\uDD1Apf;\uC000\uD835\uDD4Ecr;\uC000\uD835\uDCB2\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\uD835\uDD1B;\u439Epf;\uC000\uD835\uDD4Fcr;\uC000\uD835\uDCB3\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\uD835\uDD1Cpf;\uC000\uD835\uDD50cr;\uC000\uD835\uDCB4ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\uD835\uDCB5\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\uD835\uDD1Erave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\uD835\uDD52\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\uD835\uDCB6;\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\uD835\uDD1Fg\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\uD835\uDD53\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\uD835\uDCB7mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\uD835\uDD20\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\uD835\uDD54o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\uD835\uDCB8\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\uD835\uDD21ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\uD835\uDD55\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\uD835\uDCB9;\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\uD835\uDD22\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\uD835\uDD56\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\uD835\uDD23lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\uD835\uDD57\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\uD835\uDCBB\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\uD835\uDD24\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\uD835\uDD58\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\uD835\uDD25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\uD835\uDD59bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\uD835\uDCBDas\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\uD835\uDD26rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\uD835\uDD5Aa;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\uD835\uDCBEn\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\uD835\uDD27ath;\u4237pf;\uC000\uD835\uDD5B\u01E3\u23EC\0\u23F1r;\uC000\uD835\uDCBFrcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\uD835\uDD28reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\uD835\uDD5Ccr;\uC000\uD835\uDCC0\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\uD835\uDD29\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\uD835\uDD5Dus;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\uD835\uDCC1m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\uD835\uDD2Ao;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\uD835\uDD5E\u0100ct\u28F8\u28FDr;\uC000\uD835\uDCC2pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\uD835\uDD2B\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\uD835\uDD5F\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\uD835\uDCC3ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\uD835\uDD2C\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\uD835\uDD60\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\uD835\uDD2D\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\uD835\uDD61nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\uD835\uDCC5;\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\uD835\uDD2Epf;\uC000\uD835\uDD62rime;\u6057cr;\uC000\uD835\uDCC6\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\uD835\uDD2F\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\uD835\uDD63us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\uD835\uDCC7\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\uD835\uDD30\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\uD835\uDD64a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\uD835\uDCC8tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\uD835\uDD31\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\uD835\uDD65rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\uD835\uDCC9;\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\uD835\uDD32rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\uD835\uDD66\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\uD835\uDCCA\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\uD835\uDD33tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\uD835\uDD67ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\uD835\uDCCB\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\uD835\uDD34pf;\uC000\uD835\uDD68\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\uD835\uDCCC\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\uD835\uDD35\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\uD835\uDD69im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\uD835\uDCCD\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\uD835\uDD36cy;\u4457pf;\uC000\uD835\uDD6Acr;\uC000\uD835\uDCCE\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\uD835\uDD37cy;\u4436grarr;\u61DDpf;\uC000\uD835\uDD6Bcr;\uC000\uD835\uDCCF\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c2) => c2.charCodeAt(0)));

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array("\u0200aglq\t\x15\x18\x1B\u026D\x0F\0\0\x12p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c2) => c2.charCodeAt(0)));

// node_modules/entities/lib/esm/decode_codepoint.js
function replaceCodePoint(codePoint) {
  var _a;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a = decodeMap.get(codePoint)) !== null && _a !== undefined ? _a : codePoint;
}
var _a;
var decodeMap = new Map([
  [0, 65533],
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint = (_a = String.fromCodePoint) !== null && _a !== undefined ? _a : function(codePoint) {
  let output = "";
  if (codePoint > 65535) {
    codePoint -= 65536;
    output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
    codePoint = 56320 | codePoint & 1023;
  }
  output += String.fromCharCode(codePoint);
  return output;
};

// node_modules/entities/lib/esm/decode.js
var isNumber = function(code) {
  return code >= CharCodes.ZERO && code <= CharCodes.NINE;
};
var isHexadecimalCharacter = function(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
};
var isAsciiAlphaNumeric = function(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
};
var isEntityInAttributeInvalidEnd = function(code) {
  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
};
var getDecoder = function(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, (str) => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset = 0;
    while ((offset = str.indexOf("&", offset)) >= 0) {
      ret += str.slice(lastIndex, offset);
      decoder.startEntity(decodeMode);
      const len = decoder.write(str, offset + 1);
      if (len < 0) {
        lastIndex = offset + decoder.end();
        break;
      }
      lastIndex = offset + len;
      offset = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    ret = "";
    return result;
  };
};
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
  }
  let lo = nodeIdx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
function decodeHTML(str, mode = DecodingMode.Legacy) {
  return htmlDecoder(str, mode);
}
var CharCodes;
(function(CharCodes2) {
  CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
  CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
  CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
  CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
  CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
  CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
  CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
  CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
  CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
  CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
  CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags2) {
  BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
var EntityDecoderState;
(function(EntityDecoderState2) {
  EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode2) {
  DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
  DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
  DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));

class EntityDecoder {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode.Strict;
  }
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  write(str, offset) {
    switch (this.state) {
      case EntityDecoderState.EntityStart: {
        if (str.charCodeAt(offset) === CharCodes.NUM) {
          this.state = EntityDecoderState.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(str, offset + 1);
        }
        this.state = EntityDecoderState.NamedEntity;
        return this.stateNamedEntity(str, offset);
      }
      case EntityDecoderState.NumericStart: {
        return this.stateNumericStart(str, offset);
      }
      case EntityDecoderState.NumericDecimal: {
        return this.stateNumericDecimal(str, offset);
      }
      case EntityDecoderState.NumericHex: {
        return this.stateNumericHex(str, offset);
      }
      case EntityDecoderState.NamedEntity: {
        return this.stateNamedEntity(str, offset);
      }
    }
  }
  stateNumericStart(str, offset) {
    if (offset >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset);
  }
  addToNumericResult(str, start, end, base) {
    if (start !== end) {
      const digitCount = end - start;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  stateNumericHex(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char) || isHexadecimalCharacter(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 16);
    return -1;
  }
  stateNumericDecimal(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 10);
    return -1;
  }
  emitNumericEntity(lastCp, expectedLength) {
    var _a2;
    if (this.consumed <= expectedLength) {
      (_a2 = this.errors) === null || _a2 === undefined || _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  stateNamedEntity(str, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (;offset < str.length; offset++, this.excess++) {
      const char = str.charCodeAt(offset);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || this.decodeMode === DecodingMode.Attribute && (valueLength === 0 || isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  emitNotTerminatedNamedEntity() {
    var _a2;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a2 = this.errors) === null || _a2 === undefined || _a2.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  end() {
    var _a2;
    switch (this.state) {
      case EntityDecoderState.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState.NumericStart: {
        (_a2 = this.errors) === null || _a2 === undefined || _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState.EntityStart: {
        return 0;
      }
    }
  }
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function(EntityLevel2) {
  EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
  EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function(EncodingMode2) {
  EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
  EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
  EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
  EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
  EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));

// node_modules/markdown-it/lib/common/utils.mjs
var _class = function(obj) {
  return Object.prototype.toString.call(obj);
};
var isString = function(obj) {
  return _class(obj) === "[object String]";
};
var has = function(object, key) {
  return _hasOwnProperty.call(object, key);
};
var assign = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function(source) {
    if (!source) {
      return;
    }
    if (typeof source !== "object") {
      throw new TypeError(source + "must be object");
    }
    Object.keys(source).forEach(function(key) {
      obj[key] = source[key];
    });
  });
  return obj;
};
var arrayReplaceAt = function(src, pos, newElements) {
  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
};
var isValidEntityCode = function(c2) {
  if (c2 >= 55296 && c2 <= 57343) {
    return false;
  }
  if (c2 >= 64976 && c2 <= 65007) {
    return false;
  }
  if ((c2 & 65535) === 65535 || (c2 & 65535) === 65534) {
    return false;
  }
  if (c2 >= 0 && c2 <= 8) {
    return false;
  }
  if (c2 === 11) {
    return false;
  }
  if (c2 >= 14 && c2 <= 31) {
    return false;
  }
  if (c2 >= 127 && c2 <= 159) {
    return false;
  }
  if (c2 > 1114111) {
    return false;
  }
  return true;
};
var fromCodePoint2 = function(c2) {
  if (c2 > 65535) {
    c2 -= 65536;
    const surrogate1 = 55296 + (c2 >> 10);
    const surrogate2 = 56320 + (c2 & 1023);
    return String.fromCharCode(surrogate1, surrogate2);
  }
  return String.fromCharCode(c2);
};
var replaceEntityPattern = function(match, name) {
  if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
    const code = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
    if (isValidEntityCode(code)) {
      return fromCodePoint2(code);
    }
    return match;
  }
  const decoded = decodeHTML(match);
  if (decoded !== match) {
    return decoded;
  }
  return match;
};
var unescapeMd = function(str) {
  if (str.indexOf("\\") < 0) {
    return str;
  }
  return str.replace(UNESCAPE_MD_RE, "$1");
};
var unescapeAll = function(str) {
  if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
    return str;
  }
  return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {
    if (escaped) {
      return escaped;
    }
    return replaceEntityPattern(match, entity);
  });
};
var replaceUnsafeChar = function(ch) {
  return HTML_REPLACEMENTS[ch];
};
var escapeHtml = function(str) {
  if (HTML_ESCAPE_TEST_RE.test(str)) {
    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
  }
  return str;
};
var escapeRE = function(str) {
  return str.replace(REGEXP_ESCAPE_RE, "\\$&");
};
var isSpace = function(code) {
  switch (code) {
    case 9:
    case 32:
      return true;
  }
  return false;
};
var isWhiteSpace = function(code) {
  if (code >= 8192 && code <= 8202) {
    return true;
  }
  switch (code) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
    case 160:
    case 5760:
    case 8239:
    case 8287:
    case 12288:
      return true;
  }
  return false;
};
var isPunctChar = function(ch) {
  return regex_default4.test(ch);
};
var isMdAsciiPunct = function(ch) {
  switch (ch) {
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 124:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
};
var normalizeReference = function(str) {
  str = str.trim().replace(/\s+/g, " ");
  if ("\u1E9E".toLowerCase() === "\u1E7E") {
    str = str.replace(/ẞ/g, "\xDF");
  }
  return str.toLowerCase().toUpperCase();
};
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g;
var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
var HTML_ESCAPE_TEST_RE = /[&<>"]/;
var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
var HTML_REPLACEMENTS = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
var lib = { mdurl: exports_mdurl, ucmicro: exports_uc };

// node_modules/markdown-it/lib/helpers/index.mjs
var exports_helpers = {};
__export(exports_helpers, {
  parseLinkTitle: () => {
    {
      return parseLinkTitle;
    }
  },
  parseLinkLabel: () => {
    {
      return parseLinkLabel;
    }
  },
  parseLinkDestination: () => {
    {
      return parseLinkDestination;
    }
  }
});

// node_modules/markdown-it/lib/helpers/parse_link_label.mjs
function parseLinkLabel(state, start, disableNested) {
  let level, found, marker, prevPos;
  const max = state.posMax;
  const oldPos = state.pos;
  state.pos = start + 1;
  level = 1;
  while (state.pos < max) {
    marker = state.src.charCodeAt(state.pos);
    if (marker === 93) {
      level--;
      if (level === 0) {
        found = true;
        break;
      }
    }
    prevPos = state.pos;
    state.md.inline.skipToken(state);
    if (marker === 91) {
      if (prevPos === state.pos - 1) {
        level++;
      } else if (disableNested) {
        state.pos = oldPos;
        return -1;
      }
    }
  }
  let labelEnd = -1;
  if (found) {
    labelEnd = state.pos;
  }
  state.pos = oldPos;
  return labelEnd;
}

// node_modules/markdown-it/lib/helpers/parse_link_destination.mjs
function parseLinkDestination(str, start, max) {
  let code;
  let pos = start;
  const result = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (str.charCodeAt(pos) === 60) {
    pos++;
    while (pos < max) {
      code = str.charCodeAt(pos);
      if (code === 10) {
        return result;
      }
      if (code === 60) {
        return result;
      }
      if (code === 62) {
        result.pos = pos + 1;
        result.str = unescapeAll(str.slice(start + 1, pos));
        result.ok = true;
        return result;
      }
      if (code === 92 && pos + 1 < max) {
        pos += 2;
        continue;
      }
      pos++;
    }
    return result;
  }
  let level = 0;
  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === 32) {
      break;
    }
    if (code < 32 || code === 127) {
      break;
    }
    if (code === 92 && pos + 1 < max) {
      if (str.charCodeAt(pos + 1) === 32) {
        break;
      }
      pos += 2;
      continue;
    }
    if (code === 40) {
      level++;
      if (level > 32) {
        return result;
      }
    }
    if (code === 41) {
      if (level === 0) {
        break;
      }
      level--;
    }
    pos++;
  }
  if (start === pos) {
    return result;
  }
  if (level !== 0) {
    return result;
  }
  result.str = unescapeAll(str.slice(start, pos));
  result.pos = pos;
  result.ok = true;
  return result;
}

// node_modules/markdown-it/lib/helpers/parse_link_title.mjs
function parseLinkTitle(str, start, max) {
  let code, marker;
  let lines = 0;
  let pos = start;
  const result = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (pos >= max) {
    return result;
  }
  marker = str.charCodeAt(pos);
  if (marker !== 34 && marker !== 39 && marker !== 40) {
    return result;
  }
  pos++;
  if (marker === 40) {
    marker = 41;
  }
  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === marker) {
      result.pos = pos + 1;
      result.lines = lines;
      result.str = unescapeAll(str.slice(start + 1, pos));
      result.ok = true;
      return result;
    } else if (code === 40 && marker === 41) {
      return result;
    } else if (code === 10) {
      lines++;
    } else if (code === 92 && pos + 1 < max) {
      pos++;
      if (str.charCodeAt(pos) === 10) {
        lines++;
      }
    }
    pos++;
  }
  return result;
}

// node_modules/markdown-it/lib/renderer.mjs
var Renderer = function() {
  this.rules = assign({}, default_rules);
};
var default_rules = {};
default_rules.code_inline = function(tokens, idx, options, env, slf) {
  const token = tokens[idx];
  return "<code" + slf.renderAttrs(token) + ">" + escapeHtml(token.content) + "</code>";
};
default_rules.code_block = function(tokens, idx, options, env, slf) {
  const token = tokens[idx];
  return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml(tokens[idx].content) + "</code></pre>\n";
};
default_rules.fence = function(tokens, idx, options, env, slf) {
  const token = tokens[idx];
  const info = token.info ? unescapeAll(token.info).trim() : "";
  let langName = "";
  let langAttrs = "";
  if (info) {
    const arr = info.split(/(\s+)/g);
    langName = arr[0];
    langAttrs = arr.slice(2).join("");
  }
  let highlighted;
  if (options.highlight) {
    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
  } else {
    highlighted = escapeHtml(token.content);
  }
  if (highlighted.indexOf("<pre") === 0) {
    return highlighted + "\n";
  }
  if (info) {
    const i = token.attrIndex("class");
    const tmpAttrs = token.attrs ? token.attrs.slice() : [];
    if (i < 0) {
      tmpAttrs.push(["class", options.langPrefix + langName]);
    } else {
      tmpAttrs[i] = tmpAttrs[i].slice();
      tmpAttrs[i][1] += " " + options.langPrefix + langName;
    }
    const tmpToken = {
      attrs: tmpAttrs
    };
    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\n`;
  }
  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\n`;
};
default_rules.image = function(tokens, idx, options, env, slf) {
  const token = tokens[idx];
  token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
  return slf.renderToken(tokens, idx, options);
};
default_rules.hardbreak = function(tokens, idx, options) {
  return options.xhtmlOut ? "<br />\n" : "<br>\n";
};
default_rules.softbreak = function(tokens, idx, options) {
  return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
};
default_rules.text = function(tokens, idx) {
  return escapeHtml(tokens[idx].content);
};
default_rules.html_block = function(tokens, idx) {
  return tokens[idx].content;
};
default_rules.html_inline = function(tokens, idx) {
  return tokens[idx].content;
};
Renderer.prototype.renderAttrs = function renderAttrs(token) {
  let i, l2, result;
  if (!token.attrs) {
    return "";
  }
  result = "";
  for (i = 0, l2 = token.attrs.length;i < l2; i++) {
    result += " " + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
  }
  return result;
};
Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
  const token = tokens[idx];
  let result = "";
  if (token.hidden) {
    return "";
  }
  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result += "\n";
  }
  result += (token.nesting === -1 ? "</" : "<") + token.tag;
  result += this.renderAttrs(token);
  if (token.nesting === 0 && options.xhtmlOut) {
    result += " /";
  }
  let needLf = false;
  if (token.block) {
    needLf = true;
    if (token.nesting === 1) {
      if (idx + 1 < tokens.length) {
        const nextToken = tokens[idx + 1];
        if (nextToken.type === "inline" || nextToken.hidden) {
          needLf = false;
        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
          needLf = false;
        }
      }
    }
  }
  result += needLf ? ">\n" : ">";
  return result;
};
Renderer.prototype.renderInline = function(tokens, options, env) {
  let result = "";
  const rules = this.rules;
  for (let i = 0, len = tokens.length;i < len; i++) {
    const type = tokens[i].type;
    if (typeof rules[type] !== "undefined") {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options);
    }
  }
  return result;
};
Renderer.prototype.renderInlineAsText = function(tokens, options, env) {
  let result = "";
  for (let i = 0, len = tokens.length;i < len; i++) {
    switch (tokens[i].type) {
      case "text":
        result += tokens[i].content;
        break;
      case "image":
        result += this.renderInlineAsText(tokens[i].children, options, env);
        break;
      case "html_inline":
      case "html_block":
        result += tokens[i].content;
        break;
      case "softbreak":
      case "hardbreak":
        result += "\n";
        break;
      default:
    }
  }
  return result;
};
Renderer.prototype.render = function(tokens, options, env) {
  let result = "";
  const rules = this.rules;
  for (let i = 0, len = tokens.length;i < len; i++) {
    const type = tokens[i].type;
    if (type === "inline") {
      result += this.renderInline(tokens[i].children, options, env);
    } else if (typeof rules[type] !== "undefined") {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options, env);
    }
  }
  return result;
};
var renderer_default = Renderer;

// node_modules/markdown-it/lib/ruler.mjs
var Ruler = function() {
  this.__rules__ = [];
  this.__cache__ = null;
};
Ruler.prototype.__find__ = function(name) {
  for (let i = 0;i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i;
    }
  }
  return -1;
};
Ruler.prototype.__compile__ = function() {
  const self = this;
  const chains = [""];
  self.__rules__.forEach(function(rule) {
    if (!rule.enabled) {
      return;
    }
    rule.alt.forEach(function(altName) {
      if (chains.indexOf(altName) < 0) {
        chains.push(altName);
      }
    });
  });
  self.__cache__ = {};
  chains.forEach(function(chain) {
    self.__cache__[chain] = [];
    self.__rules__.forEach(function(rule) {
      if (!rule.enabled) {
        return;
      }
      if (chain && rule.alt.indexOf(chain) < 0) {
        return;
      }
      self.__cache__[chain].push(rule.fn);
    });
  });
};
Ruler.prototype.at = function(name, fn, options) {
  const index = this.__find__(name);
  const opt = options || {};
  if (index === -1) {
    throw new Error("Parser rule not found: " + name);
  }
  this.__rules__[index].fn = fn;
  this.__rules__[index].alt = opt.alt || [];
  this.__cache__ = null;
};
Ruler.prototype.before = function(beforeName, ruleName, fn, options) {
  const index = this.__find__(beforeName);
  const opt = options || {};
  if (index === -1) {
    throw new Error("Parser rule not found: " + beforeName);
  }
  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler.prototype.after = function(afterName, ruleName, fn, options) {
  const index = this.__find__(afterName);
  const opt = options || {};
  if (index === -1) {
    throw new Error("Parser rule not found: " + afterName);
  }
  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler.prototype.push = function(ruleName, fn, options) {
  const opt = options || {};
  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler.prototype.enable = function(list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  const result = [];
  list.forEach(function(name) {
    const idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error("Rules manager: invalid rule name " + name);
    }
    this.__rules__[idx].enabled = true;
    result.push(name);
  }, this);
  this.__cache__ = null;
  return result;
};
Ruler.prototype.enableOnly = function(list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  this.__rules__.forEach(function(rule) {
    rule.enabled = false;
  });
  this.enable(list, ignoreInvalid);
};
Ruler.prototype.disable = function(list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  const result = [];
  list.forEach(function(name) {
    const idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error("Rules manager: invalid rule name " + name);
    }
    this.__rules__[idx].enabled = false;
    result.push(name);
  }, this);
  this.__cache__ = null;
  return result;
};
Ruler.prototype.getRules = function(chainName) {
  if (this.__cache__ === null) {
    this.__compile__();
  }
  return this.__cache__[chainName] || [];
};
var ruler_default = Ruler;

// node_modules/markdown-it/lib/token.mjs
var Token = function(type, tag, nesting) {
  this.type = type;
  this.tag = tag;
  this.attrs = null;
  this.map = null;
  this.nesting = nesting;
  this.level = 0;
  this.children = null;
  this.content = "";
  this.markup = "";
  this.info = "";
  this.meta = null;
  this.block = false;
  this.hidden = false;
};
Token.prototype.attrIndex = function attrIndex(name) {
  if (!this.attrs) {
    return -1;
  }
  const attrs = this.attrs;
  for (let i = 0, len = attrs.length;i < len; i++) {
    if (attrs[i][0] === name) {
      return i;
    }
  }
  return -1;
};
Token.prototype.attrPush = function attrPush(attrData) {
  if (this.attrs) {
    this.attrs.push(attrData);
  } else {
    this.attrs = [attrData];
  }
};
Token.prototype.attrSet = function attrSet(name, value) {
  const idx = this.attrIndex(name);
  const attrData = [name, value];
  if (idx < 0) {
    this.attrPush(attrData);
  } else {
    this.attrs[idx] = attrData;
  }
};
Token.prototype.attrGet = function attrGet(name) {
  const idx = this.attrIndex(name);
  let value = null;
  if (idx >= 0) {
    value = this.attrs[idx][1];
  }
  return value;
};
Token.prototype.attrJoin = function attrJoin(name, value) {
  const idx = this.attrIndex(name);
  if (idx < 0) {
    this.attrPush([name, value]);
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
  }
};
var token_default = Token;

// node_modules/markdown-it/lib/rules_core/state_core.mjs
var StateCore = function(src, md, env) {
  this.src = src;
  this.env = env;
  this.tokens = [];
  this.inlineMode = false;
  this.md = md;
};
StateCore.prototype.Token = token_default;
var state_core_default = StateCore;

// node_modules/markdown-it/lib/rules_core/normalize.mjs
var NEWLINES_RE = /\r\n?|\n/g;
var NULL_RE = /\0/g;
function normalize(state) {
  let str;
  str = state.src.replace(NEWLINES_RE, "\n");
  str = str.replace(NULL_RE, "\uFFFD");
  state.src = str;
}

// node_modules/markdown-it/lib/rules_core/block.mjs
function block(state) {
  let token2;
  if (state.inlineMode) {
    token2 = new state.Token("inline", "", 0);
    token2.content = state.src;
    token2.map = [0, 1];
    token2.children = [];
    state.tokens.push(token2);
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens);
  }
}

// node_modules/markdown-it/lib/rules_core/inline.mjs
function inline(state) {
  const tokens = state.tokens;
  for (let i = 0, l2 = tokens.length;i < l2; i++) {
    const tok = tokens[i];
    if (tok.type === "inline") {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
  }
}

// node_modules/markdown-it/lib/rules_core/linkify.mjs
var isLinkOpen = function(str) {
  return /^<a[>\s]/i.test(str);
};
var isLinkClose = function(str) {
  return /^<\/a\s*>/i.test(str);
};
function linkify(state) {
  const blockTokens = state.tokens;
  if (!state.md.options.linkify) {
    return;
  }
  for (let j2 = 0, l2 = blockTokens.length;j2 < l2; j2++) {
    if (blockTokens[j2].type !== "inline" || !state.md.linkify.pretest(blockTokens[j2].content)) {
      continue;
    }
    let tokens = blockTokens[j2].children;
    let htmlLinkLevel = 0;
    for (let i = tokens.length - 1;i >= 0; i--) {
      const currentToken = tokens[i];
      if (currentToken.type === "link_close") {
        i--;
        while (tokens[i].level !== currentToken.level && tokens[i].type !== "link_open") {
          i--;
        }
        continue;
      }
      if (currentToken.type === "html_inline") {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--;
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++;
        }
      }
      if (htmlLinkLevel > 0) {
        continue;
      }
      if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
        const text = currentToken.content;
        let links = state.md.linkify.match(text);
        const nodes = [];
        let level = currentToken.level;
        let lastPos = 0;
        if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === "text_special") {
          links = links.slice(1);
        }
        for (let ln = 0;ln < links.length; ln++) {
          const url = links[ln].url;
          const fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) {
            continue;
          }
          let urlText = links[ln].text;
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
          } else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
          } else {
            urlText = state.md.normalizeLinkText(urlText);
          }
          const pos = links[ln].index;
          if (pos > lastPos) {
            const token2 = new state.Token("text", "", 0);
            token2.content = text.slice(lastPos, pos);
            token2.level = level;
            nodes.push(token2);
          }
          const token_o = new state.Token("link_open", "a", 1);
          token_o.attrs = [["href", fullUrl]];
          token_o.level = level++;
          token_o.markup = "linkify";
          token_o.info = "auto";
          nodes.push(token_o);
          const token_t = new state.Token("text", "", 0);
          token_t.content = urlText;
          token_t.level = level;
          nodes.push(token_t);
          const token_c = new state.Token("link_close", "a", -1);
          token_c.level = --level;
          token_c.markup = "linkify";
          token_c.info = "auto";
          nodes.push(token_c);
          lastPos = links[ln].lastIndex;
        }
        if (lastPos < text.length) {
          const token2 = new state.Token("text", "", 0);
          token2.content = text.slice(lastPos);
          token2.level = level;
          nodes.push(token2);
        }
        blockTokens[j2].children = tokens = arrayReplaceAt(tokens, i, nodes);
      }
    }
  }
}

// node_modules/markdown-it/lib/rules_core/replacements.mjs
var replaceFn = function(match, name) {
  return SCOPED_ABBR[name.toLowerCase()];
};
var replace_scoped = function(inlineTokens) {
  let inside_autolink = 0;
  for (let i = inlineTokens.length - 1;i >= 0; i--) {
    const token2 = inlineTokens[i];
    if (token2.type === "text" && !inside_autolink) {
      token2.content = token2.content.replace(SCOPED_ABBR_RE, replaceFn);
    }
    if (token2.type === "link_open" && token2.info === "auto") {
      inside_autolink--;
    }
    if (token2.type === "link_close" && token2.info === "auto") {
      inside_autolink++;
    }
  }
};
var replace_rare = function(inlineTokens) {
  let inside_autolink = 0;
  for (let i = inlineTokens.length - 1;i >= 0; i--) {
    const token2 = inlineTokens[i];
    if (token2.type === "text" && !inside_autolink) {
      if (RARE_RE.test(token2.content)) {
        token2.content = token2.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
      }
    }
    if (token2.type === "link_open" && token2.info === "auto") {
      inside_autolink--;
    }
    if (token2.type === "link_close" && token2.info === "auto") {
      inside_autolink++;
    }
  }
};
var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
var SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i;
var SCOPED_ABBR_RE = /\((c|tm|r)\)/ig;
var SCOPED_ABBR = {
  c: "\xA9",
  r: "\xAE",
  tm: "\u2122"
};
function replace(state) {
  let blkIdx;
  if (!state.md.options.typographer) {
    return;
  }
  for (blkIdx = state.tokens.length - 1;blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== "inline") {
      continue;
    }
    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children);
    }
    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children);
    }
  }
}

// node_modules/markdown-it/lib/rules_core/smartquotes.mjs
var replaceAt = function(str, index, ch) {
  return str.slice(0, index) + ch + str.slice(index + 1);
};
var process_inlines = function(tokens, state) {
  let j2;
  const stack = [];
  for (let i = 0;i < tokens.length; i++) {
    const token2 = tokens[i];
    const thisLevel = tokens[i].level;
    for (j2 = stack.length - 1;j2 >= 0; j2--) {
      if (stack[j2].level <= thisLevel) {
        break;
      }
    }
    stack.length = j2 + 1;
    if (token2.type !== "text") {
      continue;
    }
    let text = token2.content;
    let pos = 0;
    let max = text.length;
    OUTER:
      while (pos < max) {
        QUOTE_RE.lastIndex = pos;
        const t = QUOTE_RE.exec(text);
        if (!t) {
          break;
        }
        let canOpen = true;
        let canClose = true;
        pos = t.index + 1;
        const isSingle = t[0] === "'";
        let lastChar = 32;
        if (t.index - 1 >= 0) {
          lastChar = text.charCodeAt(t.index - 1);
        } else {
          for (j2 = i - 1;j2 >= 0; j2--) {
            if (tokens[j2].type === "softbreak" || tokens[j2].type === "hardbreak")
              break;
            if (!tokens[j2].content)
              continue;
            lastChar = tokens[j2].content.charCodeAt(tokens[j2].content.length - 1);
            break;
          }
        }
        let nextChar = 32;
        if (pos < max) {
          nextChar = text.charCodeAt(pos);
        } else {
          for (j2 = i + 1;j2 < tokens.length; j2++) {
            if (tokens[j2].type === "softbreak" || tokens[j2].type === "hardbreak")
              break;
            if (!tokens[j2].content)
              continue;
            nextChar = tokens[j2].content.charCodeAt(0);
            break;
          }
        }
        const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
        const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
        const isLastWhiteSpace = isWhiteSpace(lastChar);
        const isNextWhiteSpace = isWhiteSpace(nextChar);
        if (isNextWhiteSpace) {
          canOpen = false;
        } else if (isNextPunctChar) {
          if (!(isLastWhiteSpace || isLastPunctChar)) {
            canOpen = false;
          }
        }
        if (isLastWhiteSpace) {
          canClose = false;
        } else if (isLastPunctChar) {
          if (!(isNextWhiteSpace || isNextPunctChar)) {
            canClose = false;
          }
        }
        if (nextChar === 34 && t[0] === '"') {
          if (lastChar >= 48 && lastChar <= 57) {
            canClose = canOpen = false;
          }
        }
        if (canOpen && canClose) {
          canOpen = isLastPunctChar;
          canClose = isNextPunctChar;
        }
        if (!canOpen && !canClose) {
          if (isSingle) {
            token2.content = replaceAt(token2.content, t.index, APOSTROPHE);
          }
          continue;
        }
        if (canClose) {
          for (j2 = stack.length - 1;j2 >= 0; j2--) {
            let item = stack[j2];
            if (stack[j2].level < thisLevel) {
              break;
            }
            if (item.single === isSingle && stack[j2].level === thisLevel) {
              item = stack[j2];
              let openQuote;
              let closeQuote;
              if (isSingle) {
                openQuote = state.md.options.quotes[2];
                closeQuote = state.md.options.quotes[3];
              } else {
                openQuote = state.md.options.quotes[0];
                closeQuote = state.md.options.quotes[1];
              }
              token2.content = replaceAt(token2.content, t.index, closeQuote);
              tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);
              pos += closeQuote.length - 1;
              if (item.token === i) {
                pos += openQuote.length - 1;
              }
              text = token2.content;
              max = text.length;
              stack.length = j2;
              continue OUTER;
            }
          }
        }
        if (canOpen) {
          stack.push({
            token: i,
            pos: t.index,
            single: isSingle,
            level: thisLevel
          });
        } else if (canClose && isSingle) {
          token2.content = replaceAt(token2.content, t.index, APOSTROPHE);
        }
      }
  }
};
var QUOTE_TEST_RE = /['"]/;
var QUOTE_RE = /['"]/g;
var APOSTROPHE = "\u2019";
function smartquotes(state) {
  if (!state.md.options.typographer) {
    return;
  }
  for (let blkIdx = state.tokens.length - 1;blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue;
    }
    process_inlines(state.tokens[blkIdx].children, state);
  }
}

// node_modules/markdown-it/lib/rules_core/text_join.mjs
function text_join(state) {
  let curr, last;
  const blockTokens = state.tokens;
  const l2 = blockTokens.length;
  for (let j2 = 0;j2 < l2; j2++) {
    if (blockTokens[j2].type !== "inline")
      continue;
    const tokens = blockTokens[j2].children;
    const max = tokens.length;
    for (curr = 0;curr < max; curr++) {
      if (tokens[curr].type === "text_special") {
        tokens[curr].type = "text";
      }
    }
    for (curr = last = 0;curr < max; curr++) {
      if (tokens[curr].type === "text" && curr + 1 < max && tokens[curr + 1].type === "text") {
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
      } else {
        if (curr !== last) {
          tokens[last] = tokens[curr];
        }
        last++;
      }
    }
    if (curr !== last) {
      tokens.length = last;
    }
  }
}

// node_modules/markdown-it/lib/parser_core.mjs
var Core = function() {
  this.ruler = new ruler_default;
  for (let i = 0;i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }
};
var _rules = [
  ["normalize", normalize],
  ["block", block],
  ["inline", inline],
  ["linkify", linkify],
  ["replacements", replace],
  ["smartquotes", smartquotes],
  ["text_join", text_join]
];
Core.prototype.process = function(state) {
  const rules = this.ruler.getRules("");
  for (let i = 0, l2 = rules.length;i < l2; i++) {
    rules[i](state);
  }
};
Core.prototype.State = state_core_default;
var parser_core_default = Core;

// node_modules/markdown-it/lib/rules_block/state_block.mjs
var StateBlock = function(src, md, env, tokens) {
  this.src = src;
  this.md = md;
  this.env = env;
  this.tokens = tokens;
  this.bMarks = [];
  this.eMarks = [];
  this.tShift = [];
  this.sCount = [];
  this.bsCount = [];
  this.blkIndent = 0;
  this.line = 0;
  this.lineMax = 0;
  this.tight = false;
  this.ddIndent = -1;
  this.listIndent = -1;
  this.parentType = "root";
  this.level = 0;
  const s2 = this.src;
  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s2.length, indent_found = false;pos < len; pos++) {
    const ch = s2.charCodeAt(pos);
    if (!indent_found) {
      if (isSpace(ch)) {
        indent++;
        if (ch === 9) {
          offset += 4 - offset % 4;
        } else {
          offset++;
        }
        continue;
      } else {
        indent_found = true;
      }
    }
    if (ch === 10 || pos === len - 1) {
      if (ch !== 10) {
        pos++;
      }
      this.bMarks.push(start);
      this.eMarks.push(pos);
      this.tShift.push(indent);
      this.sCount.push(offset);
      this.bsCount.push(0);
      indent_found = false;
      indent = 0;
      offset = 0;
      start = pos + 1;
    }
  }
  this.bMarks.push(s2.length);
  this.eMarks.push(s2.length);
  this.tShift.push(0);
  this.sCount.push(0);
  this.bsCount.push(0);
  this.lineMax = this.bMarks.length - 1;
};
StateBlock.prototype.push = function(type, tag, nesting) {
  const token3 = new token_default(type, tag, nesting);
  token3.block = true;
  if (nesting < 0)
    this.level--;
  token3.level = this.level;
  if (nesting > 0)
    this.level++;
  this.tokens.push(token3);
  return token3;
};
StateBlock.prototype.isEmpty = function isEmpty(line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};
StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
  for (let max = this.lineMax;from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break;
    }
  }
  return from;
};
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
  for (let max = this.src.length;pos < max; pos++) {
    const ch = this.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      break;
    }
  }
  return pos;
};
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (!isSpace(this.src.charCodeAt(--pos))) {
      return pos + 1;
    }
  }
  return pos;
};
StateBlock.prototype.skipChars = function skipChars(pos, code) {
  for (let max = this.src.length;pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code) {
      break;
    }
  }
  return pos;
};
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (code !== this.src.charCodeAt(--pos)) {
      return pos + 1;
    }
  }
  return pos;
};
StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
  if (begin >= end) {
    return "";
  }
  const queue = new Array(end - begin);
  for (let i = 0, line = begin;line < end; line++, i++) {
    let lineIndent = 0;
    const lineStart = this.bMarks[line];
    let first = lineStart;
    let last;
    if (line + 1 < end || keepLastLF) {
      last = this.eMarks[line] + 1;
    } else {
      last = this.eMarks[line];
    }
    while (first < last && lineIndent < indent) {
      const ch = this.src.charCodeAt(first);
      if (isSpace(ch)) {
        if (ch === 9) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
        } else {
          lineIndent++;
        }
      } else if (first - lineStart < this.tShift[line]) {
        lineIndent++;
      } else {
        break;
      }
      first++;
    }
    if (lineIndent > indent) {
      queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
    } else {
      queue[i] = this.src.slice(first, last);
    }
  }
  return queue.join("");
};
StateBlock.prototype.Token = token_default;
var state_block_default = StateBlock;

// node_modules/markdown-it/lib/rules_block/table.mjs
var getLine = function(state, line) {
  const pos = state.bMarks[line] + state.tShift[line];
  const max = state.eMarks[line];
  return state.src.slice(pos, max);
};
var escapedSplit = function(str) {
  const result = [];
  const max = str.length;
  let pos = 0;
  let ch = str.charCodeAt(pos);
  let isEscaped = false;
  let lastPos = 0;
  let current = "";
  while (pos < max) {
    if (ch === 124) {
      if (!isEscaped) {
        result.push(current + str.substring(lastPos, pos));
        current = "";
        lastPos = pos + 1;
      } else {
        current += str.substring(lastPos, pos - 1);
        lastPos = pos;
      }
    }
    isEscaped = ch === 92;
    pos++;
    ch = str.charCodeAt(pos);
  }
  result.push(current + str.substring(lastPos));
  return result;
};
function table(state, startLine, endLine, silent) {
  if (startLine + 2 > endLine) {
    return false;
  }
  let nextLine = startLine + 1;
  if (state.sCount[nextLine] < state.blkIndent) {
    return false;
  }
  if (state.sCount[nextLine] - state.blkIndent >= 4) {
    return false;
  }
  let pos = state.bMarks[nextLine] + state.tShift[nextLine];
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  const firstCh = state.src.charCodeAt(pos++);
  if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
    return false;
  }
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  const secondCh = state.src.charCodeAt(pos++);
  if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
    return false;
  }
  if (firstCh === 45 && isSpace(secondCh)) {
    return false;
  }
  while (pos < state.eMarks[nextLine]) {
    const ch = state.src.charCodeAt(pos);
    if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {
      return false;
    }
    pos++;
  }
  let lineText = getLine(state, startLine + 1);
  let columns = lineText.split("|");
  const aligns = [];
  for (let i = 0;i < columns.length; i++) {
    const t = columns[i].trim();
    if (!t) {
      if (i === 0 || i === columns.length - 1) {
        continue;
      } else {
        return false;
      }
    }
    if (!/^:?-+:?$/.test(t)) {
      return false;
    }
    if (t.charCodeAt(t.length - 1) === 58) {
      aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
    } else if (t.charCodeAt(0) === 58) {
      aligns.push("left");
    } else {
      aligns.push("");
    }
  }
  lineText = getLine(state, startLine).trim();
  if (lineText.indexOf("|") === -1) {
    return false;
  }
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  columns = escapedSplit(lineText);
  if (columns.length && columns[0] === "")
    columns.shift();
  if (columns.length && columns[columns.length - 1] === "")
    columns.pop();
  const columnCount = columns.length;
  if (columnCount === 0 || columnCount !== aligns.length) {
    return false;
  }
  if (silent) {
    return true;
  }
  const oldParentType = state.parentType;
  state.parentType = "table";
  const terminatorRules = state.md.block.ruler.getRules("blockquote");
  const token_to = state.push("table_open", "table", 1);
  const tableLines = [startLine, 0];
  token_to.map = tableLines;
  const token_tho = state.push("thead_open", "thead", 1);
  token_tho.map = [startLine, startLine + 1];
  const token_htro = state.push("tr_open", "tr", 1);
  token_htro.map = [startLine, startLine + 1];
  for (let i = 0;i < columns.length; i++) {
    const token_ho = state.push("th_open", "th", 1);
    if (aligns[i]) {
      token_ho.attrs = [["style", "text-align:" + aligns[i]]];
    }
    const token_il = state.push("inline", "", 0);
    token_il.content = columns[i].trim();
    token_il.children = [];
    state.push("th_close", "th", -1);
  }
  state.push("tr_close", "tr", -1);
  state.push("thead_close", "thead", -1);
  let tbodyLines;
  for (nextLine = startLine + 2;nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
    lineText = getLine(state, nextLine).trim();
    if (!lineText) {
      break;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      break;
    }
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === "")
      columns.shift();
    if (columns.length && columns[columns.length - 1] === "")
      columns.pop();
    if (nextLine === startLine + 2) {
      const token_tbo = state.push("tbody_open", "tbody", 1);
      token_tbo.map = tbodyLines = [startLine + 2, 0];
    }
    const token_tro = state.push("tr_open", "tr", 1);
    token_tro.map = [nextLine, nextLine + 1];
    for (let i = 0;i < columnCount; i++) {
      const token_tdo = state.push("td_open", "td", 1);
      if (aligns[i]) {
        token_tdo.attrs = [["style", "text-align:" + aligns[i]]];
      }
      const token_il = state.push("inline", "", 0);
      token_il.content = columns[i] ? columns[i].trim() : "";
      token_il.children = [];
      state.push("td_close", "td", -1);
    }
    state.push("tr_close", "tr", -1);
  }
  if (tbodyLines) {
    state.push("tbody_close", "tbody", -1);
    tbodyLines[1] = nextLine;
  }
  state.push("table_close", "table", -1);
  tableLines[1] = nextLine;
  state.parentType = oldParentType;
  state.line = nextLine;
  return true;
}

// node_modules/markdown-it/lib/rules_block/code.mjs
function code(state, startLine, endLine) {
  if (state.sCount[startLine] - state.blkIndent < 4) {
    return false;
  }
  let nextLine = startLine + 1;
  let last = nextLine;
  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++;
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++;
      last = nextLine;
      continue;
    }
    break;
  }
  state.line = last;
  const token3 = state.push("code_block", "code", 0);
  token3.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
  token3.map = [startLine, state.line];
  return true;
}

// node_modules/markdown-it/lib/rules_block/fence.mjs
function fence(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (pos + 3 > max) {
    return false;
  }
  const marker = state.src.charCodeAt(pos);
  if (marker !== 126 && marker !== 96) {
    return false;
  }
  let mem = pos;
  pos = state.skipChars(pos, marker);
  let len = pos - mem;
  if (len < 3) {
    return false;
  }
  const markup = state.src.slice(mem, pos);
  const params = state.src.slice(pos, max);
  if (marker === 96) {
    if (params.indexOf(String.fromCharCode(marker)) >= 0) {
      return false;
    }
  }
  if (silent) {
    return true;
  }
  let nextLine = startLine;
  let haveEndMarker = false;
  for (;; ) {
    nextLine++;
    if (nextLine >= endLine) {
      break;
    }
    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    if (state.src.charCodeAt(pos) !== marker) {
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      continue;
    }
    pos = state.skipChars(pos, marker);
    if (pos - mem < len) {
      continue;
    }
    pos = state.skipSpaces(pos);
    if (pos < max) {
      continue;
    }
    haveEndMarker = true;
    break;
  }
  len = state.sCount[startLine];
  state.line = nextLine + (haveEndMarker ? 1 : 0);
  const token3 = state.push("fence", "code", 0);
  token3.info = params;
  token3.content = state.getLines(startLine + 1, nextLine, len, true);
  token3.markup = markup;
  token3.map = [startLine, state.line];
  return true;
}

// node_modules/markdown-it/lib/rules_block/blockquote.mjs
function blockquote(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  const oldLineMax = state.lineMax;
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 62) {
    return false;
  }
  if (silent) {
    return true;
  }
  const oldBMarks = [];
  const oldBSCount = [];
  const oldSCount = [];
  const oldTShift = [];
  const terminatorRules = state.md.block.ruler.getRules("blockquote");
  const oldParentType = state.parentType;
  state.parentType = "blockquote";
  let lastLineEmpty = false;
  let nextLine;
  for (nextLine = startLine;nextLine < endLine; nextLine++) {
    const isOutdented = state.sCount[nextLine] < state.blkIndent;
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos >= max) {
      break;
    }
    if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
      let initial = state.sCount[nextLine] + 1;
      let spaceAfterMarker;
      let adjustTab;
      if (state.src.charCodeAt(pos) === 32) {
        pos++;
        initial++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 9) {
        spaceAfterMarker = true;
        if ((state.bsCount[nextLine] + initial) % 4 === 3) {
          pos++;
          initial++;
          adjustTab = false;
        } else {
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
      let offset = initial;
      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;
      while (pos < max) {
        const ch = state.src.charCodeAt(pos);
        if (isSpace(ch)) {
          if (ch === 9) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }
        pos++;
      }
      lastLineEmpty = pos >= max;
      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial;
      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }
    if (lastLineEmpty) {
      break;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      state.lineMax = nextLine;
      if (state.blkIndent !== 0) {
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }
      break;
    }
    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);
    state.sCount[nextLine] = -1;
  }
  const oldIndent = state.blkIndent;
  state.blkIndent = 0;
  const token_o = state.push("blockquote_open", "blockquote", 1);
  token_o.markup = ">";
  const lines = [startLine, 0];
  token_o.map = lines;
  state.md.block.tokenize(state, startLine, nextLine);
  const token_c = state.push("blockquote_close", "blockquote", -1);
  token_c.markup = ">";
  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;
  for (let i = 0;i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;
  return true;
}

// node_modules/markdown-it/lib/rules_block/hr.mjs
function hr3(state, startLine, endLine, silent) {
  const max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  const marker = state.src.charCodeAt(pos++);
  if (marker !== 42 && marker !== 45 && marker !== 95) {
    return false;
  }
  let cnt = 1;
  while (pos < max) {
    const ch = state.src.charCodeAt(pos++);
    if (ch !== marker && !isSpace(ch)) {
      return false;
    }
    if (ch === marker) {
      cnt++;
    }
  }
  if (cnt < 3) {
    return false;
  }
  if (silent) {
    return true;
  }
  state.line = startLine + 1;
  const token3 = state.push("hr", "hr", 0);
  token3.map = [startLine, state.line];
  token3.markup = Array(cnt + 1).join(String.fromCharCode(marker));
  return true;
}

// node_modules/markdown-it/lib/rules_block/list.mjs
var skipBulletListMarker = function(state, startLine) {
  const max = state.eMarks[startLine];
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  const marker = state.src.charCodeAt(pos++);
  if (marker !== 42 && marker !== 45 && marker !== 43) {
    return -1;
  }
  if (pos < max) {
    const ch = state.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      return -1;
    }
  }
  return pos;
};
var skipOrderedListMarker = function(state, startLine) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  const max = state.eMarks[startLine];
  let pos = start;
  if (pos + 1 >= max) {
    return -1;
  }
  let ch = state.src.charCodeAt(pos++);
  if (ch < 48 || ch > 57) {
    return -1;
  }
  for (;; ) {
    if (pos >= max) {
      return -1;
    }
    ch = state.src.charCodeAt(pos++);
    if (ch >= 48 && ch <= 57) {
      if (pos - start >= 10) {
        return -1;
      }
      continue;
    }
    if (ch === 41 || ch === 46) {
      break;
    }
    return -1;
  }
  if (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      return -1;
    }
  }
  return pos;
};
var markTightParagraphs = function(state, idx) {
  const level = state.level + 2;
  for (let i = idx + 2, l2 = state.tokens.length - 2;i < l2; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
};
function list(state, startLine, endLine, silent) {
  let max, pos, start, token3;
  let nextLine = startLine;
  let tight = true;
  if (state.sCount[nextLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {
    return false;
  }
  let isTerminatingParagraph = false;
  if (silent && state.parentType === "paragraph") {
    if (state.sCount[nextLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }
  let isOrdered;
  let markerValue;
  let posAfterMarker;
  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[nextLine] + state.tShift[nextLine];
    markerValue = Number(state.src.slice(start, posAfterMarker - 1));
    if (isTerminatingParagraph && markerValue !== 1)
      return false;
  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {
    isOrdered = false;
  } else {
    return false;
  }
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine])
      return false;
  }
  if (silent) {
    return true;
  }
  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
  const listTokIdx = state.tokens.length;
  if (isOrdered) {
    token3 = state.push("ordered_list_open", "ol", 1);
    if (markerValue !== 1) {
      token3.attrs = [["start", markerValue]];
    }
  } else {
    token3 = state.push("bullet_list_open", "ul", 1);
  }
  const listLines = [nextLine, 0];
  token3.map = listLines;
  token3.markup = String.fromCharCode(markerCharCode);
  let prevEmptyEnd = false;
  const terminatorRules = state.md.block.ruler.getRules("list");
  const oldParentType = state.parentType;
  state.parentType = "list";
  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];
    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);
    let offset = initial;
    while (pos < max) {
      const ch = state.src.charCodeAt(pos);
      if (ch === 9) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 32) {
        offset++;
      } else {
        break;
      }
      pos++;
    }
    const contentStart = pos;
    let indentAfterMarker;
    if (contentStart >= max) {
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial;
    }
    if (indentAfterMarker > 4) {
      indentAfterMarker = 1;
    }
    const indent = initial + indentAfterMarker;
    token3 = state.push("list_item_open", "li", 1);
    token3.markup = String.fromCharCode(markerCharCode);
    const itemLines = [nextLine, 0];
    token3.map = itemLines;
    if (isOrdered) {
      token3.info = state.src.slice(start, posAfterMarker - 1);
    }
    const oldTight = state.tight;
    const oldTShift = state.tShift[nextLine];
    const oldSCount = state.sCount[nextLine];
    const oldListIndent = state.listIndent;
    state.listIndent = state.blkIndent;
    state.blkIndent = indent;
    state.tight = true;
    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];
    state.sCount[nextLine] = offset;
    if (contentStart >= max && state.isEmpty(nextLine + 1)) {
      state.line = Math.min(state.line + 2, endLine);
    } else {
      state.md.block.tokenize(state, nextLine, endLine, true);
    }
    if (!state.tight || prevEmptyEnd) {
      tight = false;
    }
    prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);
    state.blkIndent = state.listIndent;
    state.listIndent = oldListIndent;
    state.tShift[nextLine] = oldTShift;
    state.sCount[nextLine] = oldSCount;
    state.tight = oldTight;
    token3 = state.push("list_item_close", "li", -1);
    token3.markup = String.fromCharCode(markerCharCode);
    nextLine = state.line;
    itemLines[1] = nextLine;
    if (nextLine >= endLine) {
      break;
    }
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      break;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
      start = state.bMarks[nextLine] + state.tShift[nextLine];
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
    }
    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
      break;
    }
  }
  if (isOrdered) {
    token3 = state.push("ordered_list_close", "ol", -1);
  } else {
    token3 = state.push("bullet_list_close", "ul", -1);
  }
  token3.markup = String.fromCharCode(markerCharCode);
  listLines[1] = nextLine;
  state.line = nextLine;
  state.parentType = oldParentType;
  if (tight) {
    markTightParagraphs(state, listTokIdx);
  }
  return true;
}

// node_modules/markdown-it/lib/rules_block/reference.mjs
function reference(state, startLine, _endLine, silent) {
  let lines = 0;
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  let nextLine = startLine + 1;
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 91) {
    return false;
  }
  while (++pos < max) {
    if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
      if (pos + 1 === max) {
        return false;
      }
      if (state.src.charCodeAt(pos + 1) !== 58) {
        return false;
      }
      break;
    }
  }
  const endLine = state.lineMax;
  const terminatorRules = state.md.block.ruler.getRules("reference");
  const oldParentType = state.parentType;
  state.parentType = "reference";
  for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  const str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  max = str.length;
  let labelEnd = -1;
  for (pos = 1;pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 91) {
      return false;
    } else if (ch === 93) {
      labelEnd = pos;
      break;
    } else if (ch === 10) {
      lines++;
    } else if (ch === 92) {
      pos++;
      if (pos < max && str.charCodeAt(pos) === 10) {
        lines++;
      }
    }
  }
  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
    return false;
  }
  for (pos = labelEnd + 2;pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 10) {
      lines++;
    } else if (isSpace(ch)) {
    } else {
      break;
    }
  }
  const destRes = state.md.helpers.parseLinkDestination(str, pos, max);
  if (!destRes.ok) {
    return false;
  }
  const href = state.md.normalizeLink(destRes.str);
  if (!state.md.validateLink(href)) {
    return false;
  }
  pos = destRes.pos;
  lines += destRes.lines;
  const destEndPos = pos;
  const destEndLineNo = lines;
  const start = pos;
  for (;pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 10) {
      lines++;
    } else if (isSpace(ch)) {
    } else {
      break;
    }
  }
  const titleRes = state.md.helpers.parseLinkTitle(str, pos, max);
  let title;
  if (pos < max && start !== pos && titleRes.ok) {
    title = titleRes.str;
    pos = titleRes.pos;
    lines += titleRes.lines;
  } else {
    title = "";
    pos = destEndPos;
    lines = destEndLineNo;
  }
  while (pos < max) {
    const ch = str.charCodeAt(pos);
    if (!isSpace(ch)) {
      break;
    }
    pos++;
  }
  if (pos < max && str.charCodeAt(pos) !== 10) {
    if (title) {
      title = "";
      pos = destEndPos;
      lines = destEndLineNo;
      while (pos < max) {
        const ch = str.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
        pos++;
      }
    }
  }
  if (pos < max && str.charCodeAt(pos) !== 10) {
    return false;
  }
  const label = normalizeReference(str.slice(1, labelEnd));
  if (!label) {
    return false;
  }
  if (silent) {
    return true;
  }
  if (typeof state.env.references === "undefined") {
    state.env.references = {};
  }
  if (typeof state.env.references[label] === "undefined") {
    state.env.references[label] = { title, href };
  }
  state.parentType = oldParentType;
  state.line = startLine + lines + 1;
  return true;
}

// node_modules/markdown-it/lib/common/html_blocks.mjs
var html_blocks_default = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];

// node_modules/markdown-it/lib/common/html_re.mjs
var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
var unquoted = '[^"\'=<>`\\x00-\\x20]+';
var single_quoted = "'[^']*'";
var double_quoted = '"[^"]*"';
var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
var comment = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
var processing = "<[?][\\s\\S]*?[?]>";
var declaration = "<![A-Z]+\\s+[^>]*>";
var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment + "|" + processing + "|" + declaration + "|" + cdata + ")");
var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");

// node_modules/markdown-it/lib/rules_block/html_block.mjs
var HTML_SEQUENCES = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
  [/^<!--/, /-->/, true],
  [/^<\?/, /\?>/, true],
  [/^<![A-Z]/, />/, true],
  [/^<!\[CDATA\[/, /\]\]>/, true],
  [new RegExp("^</?(" + html_blocks_default.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
];
function html_block(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (!state.md.options.html) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 60) {
    return false;
  }
  let lineText = state.src.slice(pos, max);
  let i = 0;
  for (;i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) {
      break;
    }
  }
  if (i === HTML_SEQUENCES.length) {
    return false;
  }
  if (silent) {
    return HTML_SEQUENCES[i][2];
  }
  let nextLine = startLine + 1;
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (;nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) {
        break;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      lineText = state.src.slice(pos, max);
      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) {
          nextLine++;
        }
        break;
      }
    }
  }
  state.line = nextLine;
  const token3 = state.push("html_block", "", 0);
  token3.map = [startLine, nextLine];
  token3.content = state.getLines(startLine, nextLine, state.blkIndent, true);
  return true;
}

// node_modules/markdown-it/lib/rules_block/heading.mjs
function heading(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  let ch = state.src.charCodeAt(pos);
  if (ch !== 35 || pos >= max) {
    return false;
  }
  let level = 1;
  ch = state.src.charCodeAt(++pos);
  while (ch === 35 && pos < max && level <= 6) {
    level++;
    ch = state.src.charCodeAt(++pos);
  }
  if (level > 6 || pos < max && !isSpace(ch)) {
    return false;
  }
  if (silent) {
    return true;
  }
  max = state.skipSpacesBack(max, pos);
  const tmp = state.skipCharsBack(max, 35, pos);
  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
    max = tmp;
  }
  state.line = startLine + 1;
  const token_o = state.push("heading_open", "h" + String(level), 1);
  token_o.markup = "########".slice(0, level);
  token_o.map = [startLine, state.line];
  const token_i = state.push("inline", "", 0);
  token_i.content = state.src.slice(pos, max).trim();
  token_i.map = [startLine, state.line];
  token_i.children = [];
  const token_c = state.push("heading_close", "h" + String(level), -1);
  token_c.markup = "########".slice(0, level);
  return true;
}

// node_modules/markdown-it/lib/rules_block/lheading.mjs
function lheading(state, startLine, endLine) {
  const terminatorRules = state.md.block.ruler.getRules("paragraph");
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  const oldParentType = state.parentType;
  state.parentType = "paragraph";
  let level = 0;
  let marker;
  let nextLine = startLine + 1;
  for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] >= state.blkIndent) {
      let pos = state.bMarks[nextLine] + state.tShift[nextLine];
      const max = state.eMarks[nextLine];
      if (pos < max) {
        marker = state.src.charCodeAt(pos);
        if (marker === 45 || marker === 61) {
          pos = state.skipChars(pos, marker);
          pos = state.skipSpaces(pos);
          if (pos >= max) {
            level = marker === 61 ? 1 : 2;
            break;
          }
        }
      }
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  if (!level) {
    return false;
  }
  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine + 1;
  const token_o = state.push("heading_open", "h" + String(level), 1);
  token_o.markup = String.fromCharCode(marker);
  token_o.map = [startLine, state.line];
  const token_i = state.push("inline", "", 0);
  token_i.content = content;
  token_i.map = [startLine, state.line - 1];
  token_i.children = [];
  const token_c = state.push("heading_close", "h" + String(level), -1);
  token_c.markup = String.fromCharCode(marker);
  state.parentType = oldParentType;
  return true;
}

// node_modules/markdown-it/lib/rules_block/paragraph.mjs
function paragraph(state, startLine, endLine) {
  const terminatorRules = state.md.block.ruler.getRules("paragraph");
  const oldParentType = state.parentType;
  let nextLine = startLine + 1;
  state.parentType = "paragraph";
  for (;nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    let terminate = false;
    for (let i = 0, l2 = terminatorRules.length;i < l2; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine;
  const token_o = state.push("paragraph_open", "p", 1);
  token_o.map = [startLine, state.line];
  const token_i = state.push("inline", "", 0);
  token_i.content = content;
  token_i.map = [startLine, state.line];
  token_i.children = [];
  state.push("paragraph_close", "p", -1);
  state.parentType = oldParentType;
  return true;
}

// node_modules/markdown-it/lib/parser_block.mjs
var ParserBlock = function() {
  this.ruler = new ruler_default;
  for (let i = 0;i < _rules2.length; i++) {
    this.ruler.push(_rules2[i][0], _rules2[i][1], { alt: (_rules2[i][2] || []).slice() });
  }
};
var _rules2 = [
  ["table", table, ["paragraph", "reference"]],
  ["code", code],
  ["fence", fence, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", blockquote, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", hr3, ["paragraph", "reference", "blockquote", "list"]],
  ["list", list, ["paragraph", "reference", "blockquote"]],
  ["reference", reference],
  ["html_block", html_block, ["paragraph", "reference", "blockquote"]],
  ["heading", heading, ["paragraph", "reference", "blockquote"]],
  ["lheading", lheading],
  ["paragraph", paragraph]
];
ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
  const rules = this.ruler.getRules("");
  const len = rules.length;
  const maxNesting = state.md.options.maxNesting;
  let line = startLine;
  let hasEmptyLines = false;
  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line);
    if (line >= endLine) {
      break;
    }
    if (state.sCount[line] < state.blkIndent) {
      break;
    }
    if (state.level >= maxNesting) {
      state.line = endLine;
      break;
    }
    const prevLine = state.line;
    let ok = false;
    for (let i = 0;i < len; i++) {
      ok = rules[i](state, line, endLine, false);
      if (ok) {
        if (prevLine >= state.line) {
          throw new Error("block rule didn't increment state.line");
        }
        break;
      }
    }
    if (!ok)
      throw new Error("none of the block rules matched");
    state.tight = !hasEmptyLines;
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true;
    }
    line = state.line;
    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true;
      line++;
      state.line = line;
    }
  }
};
ParserBlock.prototype.parse = function(src, md, env, outTokens) {
  if (!src) {
    return;
  }
  const state = new this.State(src, md, env, outTokens);
  this.tokenize(state, state.line, state.lineMax);
};
ParserBlock.prototype.State = state_block_default;
var parser_block_default = ParserBlock;

// node_modules/markdown-it/lib/rules_inline/state_inline.mjs
var StateInline = function(src, md, env, outTokens) {
  this.src = src;
  this.env = env;
  this.md = md;
  this.tokens = outTokens;
  this.tokens_meta = Array(outTokens.length);
  this.pos = 0;
  this.posMax = this.src.length;
  this.level = 0;
  this.pending = "";
  this.pendingLevel = 0;
  this.cache = {};
  this.delimiters = [];
  this._prev_delimiters = [];
  this.backticks = {};
  this.backticksScanned = false;
  this.linkLevel = 0;
};
StateInline.prototype.pushPending = function() {
  const token4 = new token_default("text", "", 0);
  token4.content = this.pending;
  token4.level = this.pendingLevel;
  this.tokens.push(token4);
  this.pending = "";
  return token4;
};
StateInline.prototype.push = function(type, tag, nesting) {
  if (this.pending) {
    this.pushPending();
  }
  const token4 = new token_default(type, tag, nesting);
  let token_meta = null;
  if (nesting < 0) {
    this.level--;
    this.delimiters = this._prev_delimiters.pop();
  }
  token4.level = this.level;
  if (nesting > 0) {
    this.level++;
    this._prev_delimiters.push(this.delimiters);
    this.delimiters = [];
    token_meta = { delimiters: this.delimiters };
  }
  this.pendingLevel = this.level;
  this.tokens.push(token4);
  this.tokens_meta.push(token_meta);
  return token4;
};
StateInline.prototype.scanDelims = function(start, canSplitWord) {
  let can_open, can_close;
  let left_flanking = true;
  let right_flanking = true;
  const max = this.posMax;
  const marker = this.src.charCodeAt(start);
  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;
  let pos = start;
  while (pos < max && this.src.charCodeAt(pos) === marker) {
    pos++;
  }
  const count = pos - start;
  const nextChar = pos < max ? this.src.charCodeAt(pos) : 32;
  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
  const isLastWhiteSpace = isWhiteSpace(lastChar);
  const isNextWhiteSpace = isWhiteSpace(nextChar);
  if (isNextWhiteSpace) {
    left_flanking = false;
  } else if (isNextPunctChar) {
    if (!(isLastWhiteSpace || isLastPunctChar)) {
      left_flanking = false;
    }
  }
  if (isLastWhiteSpace) {
    right_flanking = false;
  } else if (isLastPunctChar) {
    if (!(isNextWhiteSpace || isNextPunctChar)) {
      right_flanking = false;
    }
  }
  if (!canSplitWord) {
    can_open = left_flanking && (!right_flanking || isLastPunctChar);
    can_close = right_flanking && (!left_flanking || isNextPunctChar);
  } else {
    can_open = left_flanking;
    can_close = right_flanking;
  }
  return { can_open, can_close, length: count };
};
StateInline.prototype.Token = token_default;
var state_inline_default = StateInline;

// node_modules/markdown-it/lib/rules_inline/text.mjs
var isTerminatorChar = function(ch) {
  switch (ch) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
};
function text(state, silent) {
  let pos = state.pos;
  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++;
  }
  if (pos === state.pos) {
    return false;
  }
  if (!silent) {
    state.pending += state.src.slice(state.pos, pos);
  }
  state.pos = pos;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/linkify.mjs
var SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function linkify3(state, silent) {
  if (!state.md.options.linkify)
    return false;
  if (state.linkLevel > 0)
    return false;
  const pos = state.pos;
  const max = state.posMax;
  if (pos + 3 > max)
    return false;
  if (state.src.charCodeAt(pos) !== 58)
    return false;
  if (state.src.charCodeAt(pos + 1) !== 47)
    return false;
  if (state.src.charCodeAt(pos + 2) !== 47)
    return false;
  const match = state.pending.match(SCHEME_RE);
  if (!match)
    return false;
  const proto = match[1];
  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));
  if (!link)
    return false;
  let url = link.url;
  if (url.length <= proto.length)
    return false;
  url = url.replace(/\*+$/, "");
  const fullUrl = state.md.normalizeLink(url);
  if (!state.md.validateLink(fullUrl))
    return false;
  if (!silent) {
    state.pending = state.pending.slice(0, -proto.length);
    const token_o = state.push("link_open", "a", 1);
    token_o.attrs = [["href", fullUrl]];
    token_o.markup = "linkify";
    token_o.info = "auto";
    const token_t = state.push("text", "", 0);
    token_t.content = state.md.normalizeLinkText(url);
    const token_c = state.push("link_close", "a", -1);
    token_c.markup = "linkify";
    token_c.info = "auto";
  }
  state.pos += url.length - proto.length;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/newline.mjs
function newline(state, silent) {
  let pos = state.pos;
  if (state.src.charCodeAt(pos) !== 10) {
    return false;
  }
  const pmax = state.pending.length - 1;
  const max = state.posMax;
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
        let ws = pmax - 1;
        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)
          ws--;
        state.pending = state.pending.slice(0, ws);
        state.push("hardbreak", "br", 0);
      } else {
        state.pending = state.pending.slice(0, -1);
        state.push("softbreak", "br", 0);
      }
    } else {
      state.push("softbreak", "br", 0);
    }
  }
  pos++;
  while (pos < max && isSpace(state.src.charCodeAt(pos))) {
    pos++;
  }
  state.pos = pos;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/escape.mjs
var ESCAPED = [];
for (let i = 0;i < 256; i++) {
  ESCAPED.push(0);
}
'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'.split("").forEach(function(ch) {
  ESCAPED[ch.charCodeAt(0)] = 1;
});
function escape2(state, silent) {
  let pos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(pos) !== 92)
    return false;
  pos++;
  if (pos >= max)
    return false;
  let ch1 = state.src.charCodeAt(pos);
  if (ch1 === 10) {
    if (!silent) {
      state.push("hardbreak", "br", 0);
    }
    pos++;
    while (pos < max) {
      ch1 = state.src.charCodeAt(pos);
      if (!isSpace(ch1))
        break;
      pos++;
    }
    state.pos = pos;
    return true;
  }
  let escapedStr = state.src[pos];
  if (ch1 >= 55296 && ch1 <= 56319 && pos + 1 < max) {
    const ch2 = state.src.charCodeAt(pos + 1);
    if (ch2 >= 56320 && ch2 <= 57343) {
      escapedStr += state.src[pos + 1];
      pos++;
    }
  }
  const origStr = "\\" + escapedStr;
  if (!silent) {
    const token4 = state.push("text_special", "", 0);
    if (ch1 < 256 && ESCAPED[ch1] !== 0) {
      token4.content = escapedStr;
    } else {
      token4.content = origStr;
    }
    token4.markup = origStr;
    token4.info = "escape";
  }
  state.pos = pos + 1;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/backticks.mjs
function backtick(state, silent) {
  let pos = state.pos;
  const ch = state.src.charCodeAt(pos);
  if (ch !== 96) {
    return false;
  }
  const start = pos;
  pos++;
  const max = state.posMax;
  while (pos < max && state.src.charCodeAt(pos) === 96) {
    pos++;
  }
  const marker = state.src.slice(start, pos);
  const openerLength = marker.length;
  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
    if (!silent)
      state.pending += marker;
    state.pos += openerLength;
    return true;
  }
  let matchEnd = pos;
  let matchStart;
  while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
    matchEnd = matchStart + 1;
    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 96) {
      matchEnd++;
    }
    const closerLength = matchEnd - matchStart;
    if (closerLength === openerLength) {
      if (!silent) {
        const token4 = state.push("code_inline", "code", 0);
        token4.markup = marker;
        token4.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      state.pos = matchEnd;
      return true;
    }
    state.backticks[closerLength] = matchStart;
  }
  state.backticksScanned = true;
  if (!silent)
    state.pending += marker;
  state.pos += openerLength;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/strikethrough.mjs
var strikethrough_tokenize = function(state, silent) {
  const start = state.pos;
  const marker = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker !== 126) {
    return false;
  }
  const scanned = state.scanDelims(state.pos, true);
  let len = scanned.length;
  const ch = String.fromCharCode(marker);
  if (len < 2) {
    return false;
  }
  let token4;
  if (len % 2) {
    token4 = state.push("text", "", 0);
    token4.content = ch;
    len--;
  }
  for (let i = 0;i < len; i += 2) {
    token4 = state.push("text", "", 0);
    token4.content = ch + ch;
    state.delimiters.push({
      marker,
      length: 0,
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
};
var postProcess = function(state, delimiters) {
  let token4;
  const loneMarkers = [];
  const max = delimiters.length;
  for (let i = 0;i < max; i++) {
    const startDelim = delimiters[i];
    if (startDelim.marker !== 126) {
      continue;
    }
    if (startDelim.end === -1) {
      continue;
    }
    const endDelim = delimiters[startDelim.end];
    token4 = state.tokens[startDelim.token];
    token4.type = "s_open";
    token4.tag = "s";
    token4.nesting = 1;
    token4.markup = "~~";
    token4.content = "";
    token4 = state.tokens[endDelim.token];
    token4.type = "s_close";
    token4.tag = "s";
    token4.nesting = -1;
    token4.markup = "~~";
    token4.content = "";
    if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
      loneMarkers.push(endDelim.token - 1);
    }
  }
  while (loneMarkers.length) {
    const i = loneMarkers.pop();
    let j2 = i + 1;
    while (j2 < state.tokens.length && state.tokens[j2].type === "s_close") {
      j2++;
    }
    j2--;
    if (i !== j2) {
      token4 = state.tokens[j2];
      state.tokens[j2] = state.tokens[i];
      state.tokens[i] = token4;
    }
  }
};
var strikethrough_postProcess = function(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  postProcess(state, state.delimiters);
  for (let curr = 0;curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters);
    }
  }
};
var strikethrough_default = {
  tokenize: strikethrough_tokenize,
  postProcess: strikethrough_postProcess
};

// node_modules/markdown-it/lib/rules_inline/emphasis.mjs
var emphasis_tokenize = function(state, silent) {
  const start = state.pos;
  const marker = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker !== 95 && marker !== 42) {
    return false;
  }
  const scanned = state.scanDelims(state.pos, marker === 42);
  for (let i = 0;i < scanned.length; i++) {
    const token4 = state.push("text", "", 0);
    token4.content = String.fromCharCode(marker);
    state.delimiters.push({
      marker,
      length: scanned.length,
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
};
var postProcess2 = function(state, delimiters) {
  const max = delimiters.length;
  for (let i = max - 1;i >= 0; i--) {
    const startDelim = delimiters[i];
    if (startDelim.marker !== 95 && startDelim.marker !== 42) {
      continue;
    }
    if (startDelim.end === -1) {
      continue;
    }
    const endDelim = delimiters[startDelim.end];
    const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
    const ch = String.fromCharCode(startDelim.marker);
    const token_o = state.tokens[startDelim.token];
    token_o.type = isStrong ? "strong_open" : "em_open";
    token_o.tag = isStrong ? "strong" : "em";
    token_o.nesting = 1;
    token_o.markup = isStrong ? ch + ch : ch;
    token_o.content = "";
    const token_c = state.tokens[endDelim.token];
    token_c.type = isStrong ? "strong_close" : "em_close";
    token_c.tag = isStrong ? "strong" : "em";
    token_c.nesting = -1;
    token_c.markup = isStrong ? ch + ch : ch;
    token_c.content = "";
    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = "";
      state.tokens[delimiters[startDelim.end + 1].token].content = "";
      i--;
    }
  }
};
var emphasis_post_process = function(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  postProcess2(state, state.delimiters);
  for (let curr = 0;curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess2(state, tokens_meta[curr].delimiters);
    }
  }
};
var emphasis_default = {
  tokenize: emphasis_tokenize,
  postProcess: emphasis_post_process
};

// node_modules/markdown-it/lib/rules_inline/link.mjs
function link(state, silent) {
  let code3, label, res, ref;
  let href = "";
  let title = "";
  let start = state.pos;
  let parseReference = true;
  if (state.src.charCodeAt(state.pos) !== 91) {
    return false;
  }
  const oldPos = state.pos;
  const max = state.posMax;
  const labelStart = state.pos + 1;
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
  if (labelEnd < 0) {
    return false;
  }
  let pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 40) {
    parseReference = false;
    pos++;
    for (;pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace(code3) && code3 !== 10) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = "";
      }
      start = pos;
      for (;pos < max; pos++) {
        code3 = state.src.charCodeAt(pos);
        if (!isSpace(code3) && code3 !== 10) {
          break;
        }
      }
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        for (;pos < max; pos++) {
          code3 = state.src.charCodeAt(pos);
          if (!isSpace(code3) && code3 !== 10) {
            break;
          }
        }
      }
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 41) {
      parseReference = true;
    }
    pos++;
  }
  if (parseReference) {
    if (typeof state.env.references === "undefined") {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 91) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }
    if (!label) {
      label = state.src.slice(labelStart, labelEnd);
    }
    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }
  if (!silent) {
    state.pos = labelStart;
    state.posMax = labelEnd;
    const token_o = state.push("link_open", "a", 1);
    const attrs = [["href", href]];
    token_o.attrs = attrs;
    if (title) {
      attrs.push(["title", title]);
    }
    state.linkLevel++;
    state.md.inline.tokenize(state);
    state.linkLevel--;
    state.push("link_close", "a", -1);
  }
  state.pos = pos;
  state.posMax = max;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/image.mjs
function image(state, silent) {
  let code3, content, label, pos, ref, res, title, start;
  let href = "";
  const oldPos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(state.pos) !== 33) {
    return false;
  }
  if (state.src.charCodeAt(state.pos + 1) !== 91) {
    return false;
  }
  const labelStart = state.pos + 2;
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
  if (labelEnd < 0) {
    return false;
  }
  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 40) {
    pos++;
    for (;pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace(code3) && code3 !== 10) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = "";
      }
    }
    start = pos;
    for (;pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace(code3) && code3 !== 10) {
        break;
      }
    }
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;
      for (;pos < max; pos++) {
        code3 = state.src.charCodeAt(pos);
        if (!isSpace(code3) && code3 !== 10) {
          break;
        }
      }
    } else {
      title = "";
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 41) {
      state.pos = oldPos;
      return false;
    }
    pos++;
  } else {
    if (typeof state.env.references === "undefined") {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 91) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }
    if (!label) {
      label = state.src.slice(labelStart, labelEnd);
    }
    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }
  if (!silent) {
    content = state.src.slice(labelStart, labelEnd);
    const tokens = [];
    state.md.inline.parse(content, state.md, state.env, tokens);
    const token4 = state.push("image", "img", 0);
    const attrs = [["src", href], ["alt", ""]];
    token4.attrs = attrs;
    token4.children = tokens;
    token4.content = content;
    if (title) {
      attrs.push(["title", title]);
    }
  }
  state.pos = pos;
  state.posMax = max;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/autolink.mjs
var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function autolink(state, silent) {
  let pos = state.pos;
  if (state.src.charCodeAt(pos) !== 60) {
    return false;
  }
  const start = state.pos;
  const max = state.posMax;
  for (;; ) {
    if (++pos >= max)
      return false;
    const ch = state.src.charCodeAt(pos);
    if (ch === 60)
      return false;
    if (ch === 62)
      break;
  }
  const url = state.src.slice(start + 1, pos);
  if (AUTOLINK_RE.test(url)) {
    const fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      const token_o = state.push("link_open", "a", 1);
      token_o.attrs = [["href", fullUrl]];
      token_o.markup = "autolink";
      token_o.info = "auto";
      const token_t = state.push("text", "", 0);
      token_t.content = state.md.normalizeLinkText(url);
      const token_c = state.push("link_close", "a", -1);
      token_c.markup = "autolink";
      token_c.info = "auto";
    }
    state.pos += url.length + 2;
    return true;
  }
  if (EMAIL_RE.test(url)) {
    const fullUrl = state.md.normalizeLink("mailto:" + url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      const token_o = state.push("link_open", "a", 1);
      token_o.attrs = [["href", fullUrl]];
      token_o.markup = "autolink";
      token_o.info = "auto";
      const token_t = state.push("text", "", 0);
      token_t.content = state.md.normalizeLinkText(url);
      const token_c = state.push("link_close", "a", -1);
      token_c.markup = "autolink";
      token_c.info = "auto";
    }
    state.pos += url.length + 2;
    return true;
  }
  return false;
}

// node_modules/markdown-it/lib/rules_inline/html_inline.mjs
var isLinkOpen2 = function(str) {
  return /^<a[>\s]/i.test(str);
};
var isLinkClose2 = function(str) {
  return /^<\/a\s*>/i.test(str);
};
var isLetter = function(ch) {
  const lc = ch | 32;
  return lc >= 97 && lc <= 122;
};
function html_inline(state, silent) {
  if (!state.md.options.html) {
    return false;
  }
  const max = state.posMax;
  const pos = state.pos;
  if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max) {
    return false;
  }
  const ch = state.src.charCodeAt(pos + 1);
  if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
    return false;
  }
  const match = state.src.slice(pos).match(HTML_TAG_RE);
  if (!match) {
    return false;
  }
  if (!silent) {
    const token4 = state.push("html_inline", "", 0);
    token4.content = match[0];
    if (isLinkOpen2(token4.content))
      state.linkLevel++;
    if (isLinkClose2(token4.content))
      state.linkLevel--;
  }
  state.pos += match[0].length;
  return true;
}

// node_modules/markdown-it/lib/rules_inline/entity.mjs
var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
function entity(state, silent) {
  const pos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(pos) !== 38)
    return false;
  if (pos + 1 >= max)
    return false;
  const ch = state.src.charCodeAt(pos + 1);
  if (ch === 35) {
    const match = state.src.slice(pos).match(DIGITAL_RE);
    if (match) {
      if (!silent) {
        const code3 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
        const token4 = state.push("text_special", "", 0);
        token4.content = isValidEntityCode(code3) ? fromCodePoint2(code3) : fromCodePoint2(65533);
        token4.markup = match[0];
        token4.info = "entity";
      }
      state.pos += match[0].length;
      return true;
    }
  } else {
    const match = state.src.slice(pos).match(NAMED_RE);
    if (match) {
      const decoded = decodeHTML(match[0]);
      if (decoded !== match[0]) {
        if (!silent) {
          const token4 = state.push("text_special", "", 0);
          token4.content = decoded;
          token4.markup = match[0];
          token4.info = "entity";
        }
        state.pos += match[0].length;
        return true;
      }
    }
  }
  return false;
}

// node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs
var processDelimiters = function(delimiters) {
  const openersBottom = {};
  const max = delimiters.length;
  if (!max)
    return;
  let headerIdx = 0;
  let lastTokenIdx = -2;
  const jumps = [];
  for (let closerIdx = 0;closerIdx < max; closerIdx++) {
    const closer = delimiters[closerIdx];
    jumps.push(0);
    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
      headerIdx = closerIdx;
    }
    lastTokenIdx = closer.token;
    closer.length = closer.length || 0;
    if (!closer.close)
      continue;
    if (!openersBottom.hasOwnProperty(closer.marker)) {
      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
    }
    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
    let openerIdx = headerIdx - jumps[headerIdx] - 1;
    let newMinOpenerIdx = openerIdx;
    for (;openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
      const opener = delimiters[openerIdx];
      if (opener.marker !== closer.marker)
        continue;
      if (opener.open && opener.end < 0) {
        let isOddMatch = false;
        if (opener.close || closer.open) {
          if ((opener.length + closer.length) % 3 === 0) {
            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
              isOddMatch = true;
            }
          }
        }
        if (!isOddMatch) {
          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
          jumps[closerIdx] = closerIdx - openerIdx + lastJump;
          jumps[openerIdx] = lastJump;
          closer.open = false;
          opener.end = closerIdx;
          opener.close = false;
          newMinOpenerIdx = -1;
          lastTokenIdx = -2;
          break;
        }
      }
    }
    if (newMinOpenerIdx !== -1) {
      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
    }
  }
};
function link_pairs(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  processDelimiters(state.delimiters);
  for (let curr = 0;curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      processDelimiters(tokens_meta[curr].delimiters);
    }
  }
}

// node_modules/markdown-it/lib/rules_inline/fragments_join.mjs
function fragments_join(state) {
  let curr, last;
  let level = 0;
  const tokens = state.tokens;
  const max = state.tokens.length;
  for (curr = last = 0;curr < max; curr++) {
    if (tokens[curr].nesting < 0)
      level--;
    tokens[curr].level = level;
    if (tokens[curr].nesting > 0)
      level++;
    if (tokens[curr].type === "text" && curr + 1 < max && tokens[curr + 1].type === "text") {
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
    } else {
      if (curr !== last) {
        tokens[last] = tokens[curr];
      }
      last++;
    }
  }
  if (curr !== last) {
    tokens.length = last;
  }
}

// node_modules/markdown-it/lib/parser_inline.mjs
var ParserInline = function() {
  this.ruler = new ruler_default;
  for (let i = 0;i < _rules3.length; i++) {
    this.ruler.push(_rules3[i][0], _rules3[i][1]);
  }
  this.ruler2 = new ruler_default;
  for (let i = 0;i < _rules22.length; i++) {
    this.ruler2.push(_rules22[i][0], _rules22[i][1]);
  }
};
var _rules3 = [
  ["text", text],
  ["linkify", linkify3],
  ["newline", newline],
  ["escape", escape2],
  ["backticks", backtick],
  ["strikethrough", strikethrough_default.tokenize],
  ["emphasis", emphasis_default.tokenize],
  ["link", link],
  ["image", image],
  ["autolink", autolink],
  ["html_inline", html_inline],
  ["entity", entity]
];
var _rules22 = [
  ["balance_pairs", link_pairs],
  ["strikethrough", strikethrough_default.postProcess],
  ["emphasis", emphasis_default.postProcess],
  ["fragments_join", fragments_join]
];
ParserInline.prototype.skipToken = function(state) {
  const pos = state.pos;
  const rules = this.ruler.getRules("");
  const len = rules.length;
  const maxNesting = state.md.options.maxNesting;
  const cache = state.cache;
  if (typeof cache[pos] !== "undefined") {
    state.pos = cache[pos];
    return;
  }
  let ok = false;
  if (state.level < maxNesting) {
    for (let i = 0;i < len; i++) {
      state.level++;
      ok = rules[i](state, true);
      state.level--;
      if (ok) {
        if (pos >= state.pos) {
          throw new Error("inline rule didn't increment state.pos");
        }
        break;
      }
    }
  } else {
    state.pos = state.posMax;
  }
  if (!ok) {
    state.pos++;
  }
  cache[pos] = state.pos;
};
ParserInline.prototype.tokenize = function(state) {
  const rules = this.ruler.getRules("");
  const len = rules.length;
  const end = state.posMax;
  const maxNesting = state.md.options.maxNesting;
  while (state.pos < end) {
    const prevPos = state.pos;
    let ok = false;
    if (state.level < maxNesting) {
      for (let i = 0;i < len; i++) {
        ok = rules[i](state, false);
        if (ok) {
          if (prevPos >= state.pos) {
            throw new Error("inline rule didn't increment state.pos");
          }
          break;
        }
      }
    }
    if (ok) {
      if (state.pos >= end) {
        break;
      }
      continue;
    }
    state.pending += state.src[state.pos++];
  }
  if (state.pending) {
    state.pushPending();
  }
};
ParserInline.prototype.parse = function(str, md, env, outTokens) {
  const state = new this.State(str, md, env, outTokens);
  this.tokenize(state);
  const rules = this.ruler2.getRules("");
  const len = rules.length;
  for (let i = 0;i < len; i++) {
    rules[i](state);
  }
};
ParserInline.prototype.State = state_inline_default;
var parser_inline_default = ParserInline;

// node_modules/linkify-it/lib/re.mjs
function re_default(opts) {
  const re = {};
  opts = opts || {};
  re.src_Any = regex_default.source;
  re.src_Cc = regex_default2.source;
  re.src_Z = regex_default5.source;
  re.src_P = regex_default4.source;
  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
  re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
  const text_separators = "[><\uFF5C]";
  re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
  re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
  re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
  re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
  re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!" + (opts["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
  re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|\\[(?:(?!' + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]|$)|" + (opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re.src_ZCc + "|$)|;(?!" + re.src_ZCc + "|$)|\\!+(?!" + re.src_ZCc + "|[!]|$)|\\?(?!" + re.src_ZCc + "|[?]|$))+|\\/)?";
  re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
  re.src_xn = "xn--[a-z0-9\\-]{1,59}";
  re.src_domain_root = "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
  re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
  re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
  re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
  re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
  re.src_host_strict = re.src_host + re.src_host_terminator;
  re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
  re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
  re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
  re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
  re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
  re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
  re.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))" + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
  re.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))" + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
  return re;
}

// node_modules/linkify-it/index.mjs
var assign2 = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function(source) {
    if (!source) {
      return;
    }
    Object.keys(source).forEach(function(key) {
      obj[key] = source[key];
    });
  });
  return obj;
};
var _class2 = function(obj) {
  return Object.prototype.toString.call(obj);
};
var isString2 = function(obj) {
  return _class2(obj) === "[object String]";
};
var isObject = function(obj) {
  return _class2(obj) === "[object Object]";
};
var isRegExp = function(obj) {
  return _class2(obj) === "[object RegExp]";
};
var isFunction = function(obj) {
  return _class2(obj) === "[object Function]";
};
var escapeRE2 = function(str) {
  return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
};
var isOptionsObj = function(obj) {
  return Object.keys(obj || {}).reduce(function(acc, k3) {
    return acc || defaultOptions.hasOwnProperty(k3);
  }, false);
};
var resetScanCache = function(self) {
  self.__index__ = -1;
  self.__text_cache__ = "";
};
var createValidator = function(re2) {
  return function(text3, pos) {
    const tail = text3.slice(pos);
    if (re2.test(tail)) {
      return tail.match(re2)[0].length;
    }
    return 0;
  };
};
var createNormalizer = function() {
  return function(match, self) {
    self.normalize(match);
  };
};
var compile = function(self) {
  const re2 = self.re = re_default(self.__opts__);
  const tlds = self.__tlds__.slice();
  self.onCompile();
  if (!self.__tlds_replaced__) {
    tlds.push(tlds_2ch_src_re);
  }
  tlds.push(re2.src_xn);
  re2.src_tlds = tlds.join("|");
  function untpl(tpl) {
    return tpl.replace("%TLDS%", re2.src_tlds);
  }
  re2.email_fuzzy = RegExp(untpl(re2.tpl_email_fuzzy), "i");
  re2.link_fuzzy = RegExp(untpl(re2.tpl_link_fuzzy), "i");
  re2.link_no_ip_fuzzy = RegExp(untpl(re2.tpl_link_no_ip_fuzzy), "i");
  re2.host_fuzzy_test = RegExp(untpl(re2.tpl_host_fuzzy_test), "i");
  const aliases = [];
  self.__compiled__ = {};
  function schemaError(name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
  }
  Object.keys(self.__schemas__).forEach(function(name) {
    const val = self.__schemas__[name];
    if (val === null) {
      return;
    }
    const compiled = { validate: null, link: null };
    self.__compiled__[name] = compiled;
    if (isObject(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate);
      } else if (isFunction(val.validate)) {
        compiled.validate = val.validate;
      } else {
        schemaError(name, val);
      }
      if (isFunction(val.normalize)) {
        compiled.normalize = val.normalize;
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer();
      } else {
        schemaError(name, val);
      }
      return;
    }
    if (isString2(val)) {
      aliases.push(name);
      return;
    }
    schemaError(name, val);
  });
  aliases.forEach(function(alias) {
    if (!self.__compiled__[self.__schemas__[alias]]) {
      return;
    }
    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
  });
  self.__compiled__[""] = { validate: null, normalize: createNormalizer() };
  const slist = Object.keys(self.__compiled__).filter(function(name) {
    return name.length > 0 && self.__compiled__[name];
  }).map(escapeRE2).join("|");
  self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re2.src_ZPCc + "))(" + slist + ")", "i");
  self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re2.src_ZPCc + "))(" + slist + ")", "ig");
  self.re.schema_at_start = RegExp("^" + self.re.schema_search.source, "i");
  self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
  resetScanCache(self);
};
var Match = function(self, shift) {
  const start = self.__index__;
  const end = self.__last_index__;
  const text3 = self.__text_cache__.slice(start, end);
  this.schema = self.__schema__.toLowerCase();
  this.index = start + shift;
  this.lastIndex = end + shift;
  this.raw = text3;
  this.text = text3;
  this.url = text3;
};
var createMatch = function(self, shift) {
  const match = new Match(self, shift);
  self.__compiled__[match.schema].normalize(match, self);
  return match;
};
var LinkifyIt = function(schemas, options) {
  if (!(this instanceof LinkifyIt)) {
    return new LinkifyIt(schemas, options);
  }
  if (!options) {
    if (isOptionsObj(schemas)) {
      options = schemas;
      schemas = {};
    }
  }
  this.__opts__ = assign2({}, defaultOptions, options);
  this.__index__ = -1;
  this.__last_index__ = -1;
  this.__schema__ = "";
  this.__text_cache__ = "";
  this.__schemas__ = assign2({}, defaultSchemas, schemas);
  this.__compiled__ = {};
  this.__tlds__ = tlds_default;
  this.__tlds_replaced__ = false;
  this.re = {};
  compile(this);
};
var defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};
var defaultSchemas = {
  "http:": {
    validate: function(text3, pos, self) {
      const tail = text3.slice(pos);
      if (!self.re.http) {
        self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
      }
      if (self.re.http.test(tail)) {
        return tail.match(self.re.http)[0].length;
      }
      return 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(text3, pos, self) {
      const tail = text3.slice(pos);
      if (!self.re.no_http) {
        self.re.no_http = new RegExp("^" + self.re.src_auth + "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
      }
      if (self.re.no_http.test(tail)) {
        if (pos >= 3 && text3[pos - 3] === ":") {
          return 0;
        }
        if (pos >= 3 && text3[pos - 3] === "/") {
          return 0;
        }
        return tail.match(self.re.no_http)[0].length;
      }
      return 0;
    }
  },
  "mailto:": {
    validate: function(text3, pos, self) {
      const tail = text3.slice(pos);
      if (!self.re.mailto) {
        self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
      }
      if (self.re.mailto.test(tail)) {
        return tail.match(self.re.mailto)[0].length;
      }
      return 0;
    }
  }
};
var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
LinkifyIt.prototype.add = function add(schema, definition) {
  this.__schemas__[schema] = definition;
  compile(this);
  return this;
};
LinkifyIt.prototype.set = function set(options) {
  this.__opts__ = assign2(this.__opts__, options);
  return this;
};
LinkifyIt.prototype.test = function test(text3) {
  this.__text_cache__ = text3;
  this.__index__ = -1;
  if (!text3.length) {
    return false;
  }
  let m4, ml, me, len, shift, next, re2, tld_pos, at_pos;
  if (this.re.schema_test.test(text3)) {
    re2 = this.re.schema_search;
    re2.lastIndex = 0;
    while ((m4 = re2.exec(text3)) !== null) {
      len = this.testSchemaAt(text3, m4[2], re2.lastIndex);
      if (len) {
        this.__schema__ = m4[2];
        this.__index__ = m4.index + m4[1].length;
        this.__last_index__ = m4.index + m4[0].length + len;
        break;
      }
    }
  }
  if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
    tld_pos = text3.search(this.re.host_fuzzy_test);
    if (tld_pos >= 0) {
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text3.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
          shift = ml.index + ml[1].length;
          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__ = "";
            this.__index__ = shift;
            this.__last_index__ = ml.index + ml[0].length;
          }
        }
      }
    }
  }
  if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
    at_pos = text3.indexOf("@");
    if (at_pos >= 0) {
      if ((me = text3.match(this.re.email_fuzzy)) !== null) {
        shift = me.index + me[1].length;
        next = me.index + me[0].length;
        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
          this.__schema__ = "mailto:";
          this.__index__ = shift;
          this.__last_index__ = next;
        }
      }
    }
  }
  return this.__index__ >= 0;
};
LinkifyIt.prototype.pretest = function pretest(text3) {
  return this.re.pretest.test(text3);
};
LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text3, schema, pos) {
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0;
  }
  return this.__compiled__[schema.toLowerCase()].validate(text3, pos, this);
};
LinkifyIt.prototype.match = function match(text3) {
  const result = [];
  let shift = 0;
  if (this.__index__ >= 0 && this.__text_cache__ === text3) {
    result.push(createMatch(this, shift));
    shift = this.__last_index__;
  }
  let tail = shift ? text3.slice(shift) : text3;
  while (this.test(tail)) {
    result.push(createMatch(this, shift));
    tail = tail.slice(this.__last_index__);
    shift += this.__last_index__;
  }
  if (result.length) {
    return result;
  }
  return null;
};
LinkifyIt.prototype.matchAtStart = function matchAtStart(text3) {
  this.__text_cache__ = text3;
  this.__index__ = -1;
  if (!text3.length)
    return null;
  const m4 = this.re.schema_at_start.exec(text3);
  if (!m4)
    return null;
  const len = this.testSchemaAt(text3, m4[2], m4[0].length);
  if (!len)
    return null;
  this.__schema__ = m4[2];
  this.__index__ = m4.index + m4[1].length;
  this.__last_index__ = m4.index + m4[0].length + len;
  return createMatch(this, 0);
};
LinkifyIt.prototype.tlds = function tlds(list3, keepOld) {
  list3 = Array.isArray(list3) ? list3 : [list3];
  if (!keepOld) {
    this.__tlds__ = list3.slice();
    this.__tlds_replaced__ = true;
    compile(this);
    return this;
  }
  this.__tlds__ = this.__tlds__.concat(list3).sort().filter(function(el, idx, arr) {
    return el !== arr[idx - 1];
  }).reverse();
  compile(this);
  return this;
};
LinkifyIt.prototype.normalize = function normalize3(match2) {
  if (!match2.schema) {
    match2.url = "http://" + match2.url;
  }
  if (match2.schema === "mailto:" && !/^mailto:/i.test(match2.url)) {
    match2.url = "mailto:" + match2.url;
  }
};
LinkifyIt.prototype.onCompile = function onCompile() {
};
var linkify_it_default = LinkifyIt;

// node_modules/punycode.js/punycode.es6.js
var error = function(type) {
  throw new RangeError(errors[type]);
};
var map = function(array, callback) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = callback(array[length]);
  }
  return result;
};
var mapDomain = function(domain, callback) {
  const parts = domain.split("@");
  let result = "";
  if (parts.length > 1) {
    result = parts[0] + "@";
    domain = parts[1];
  }
  domain = domain.replace(regexSeparators, ".");
  const labels = domain.split(".");
  const encoded = map(labels, callback).join(".");
  return result + encoded;
};
var ucs2decode = function(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      const extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};
var maxInt = 2147483647;
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128;
var delimiter = "-";
var regexPunycode = /^xn--/;
var regexNonASCII = /[^\0-\x7F]/;
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
var errors = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
};
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;
var ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
var basicToDigit = function(codePoint) {
  if (codePoint >= 48 && codePoint < 58) {
    return 26 + (codePoint - 48);
  }
  if (codePoint >= 65 && codePoint < 91) {
    return codePoint - 65;
  }
  if (codePoint >= 97 && codePoint < 123) {
    return codePoint - 97;
  }
  return base;
};
var digitToBasic = function(digit, flag) {
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
var adapt = function(delta, numPoints, firstTime) {
  let k3 = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (;delta > baseMinusTMin * tMax >> 1; k3 += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k3 + (baseMinusTMin + 1) * delta / (delta + skew));
};
var decode3 = function(input) {
  const output = [];
  const inputLength = input.length;
  let i = 0;
  let n = initialN;
  let bias = initialBias;
  let basic = input.lastIndexOf(delimiter);
  if (basic < 0) {
    basic = 0;
  }
  for (let j2 = 0;j2 < basic; ++j2) {
    if (input.charCodeAt(j2) >= 128) {
      error("not-basic");
    }
    output.push(input.charCodeAt(j2));
  }
  for (let index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {
    const oldi = i;
    for (let w = 1, k3 = base;; k3 += base) {
      if (index >= inputLength) {
        error("invalid-input");
      }
      const digit = basicToDigit(input.charCodeAt(index++));
      if (digit >= base) {
        error("invalid-input");
      }
      if (digit > floor((maxInt - i) / w)) {
        error("overflow");
      }
      i += digit * w;
      const t = k3 <= bias ? tMin : k3 >= bias + tMax ? tMax : k3 - bias;
      if (digit < t) {
        break;
      }
      const baseMinusT = base - t;
      if (w > floor(maxInt / baseMinusT)) {
        error("overflow");
      }
      w *= baseMinusT;
    }
    const out = output.length + 1;
    bias = adapt(i - oldi, out, oldi == 0);
    if (floor(i / out) > maxInt - n) {
      error("overflow");
    }
    n += floor(i / out);
    i %= out;
    output.splice(i++, 0, n);
  }
  return String.fromCodePoint(...output);
};
var encode3 = function(input) {
  const output = [];
  input = ucs2decode(input);
  const inputLength = input.length;
  let n = initialN;
  let delta = 0;
  let bias = initialBias;
  for (const currentValue of input) {
    if (currentValue < 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  const basicLength = output.length;
  let handledCPCount = basicLength;
  if (basicLength) {
    output.push(delimiter);
  }
  while (handledCPCount < inputLength) {
    let m4 = maxInt;
    for (const currentValue of input) {
      if (currentValue >= n && currentValue < m4) {
        m4 = currentValue;
      }
    }
    const handledCPCountPlusOne = handledCPCount + 1;
    if (m4 - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta += (m4 - n) * handledCPCountPlusOne;
    n = m4;
    for (const currentValue of input) {
      if (currentValue < n && ++delta > maxInt) {
        error("overflow");
      }
      if (currentValue === n) {
        let q2 = delta;
        for (let k3 = base;; k3 += base) {
          const t = k3 <= bias ? tMin : k3 >= bias + tMax ? tMax : k3 - bias;
          if (q2 < t) {
            break;
          }
          const qMinusT = q2 - t;
          const baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q2 = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q2, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n;
  }
  return output.join("");
};
var toUnicode = function(input) {
  return mapDomain(input, function(string) {
    return regexPunycode.test(string) ? decode3(string.slice(4).toLowerCase()) : string;
  });
};
var toASCII = function(input) {
  return mapDomain(input, function(string) {
    return regexNonASCII.test(string) ? "xn--" + encode3(string) : string;
  });
};
var punycode = {
  version: "2.3.1",
  ucs2: {
    decode: ucs2decode,
    encode: ucs2encode
  },
  decode: decode3,
  encode: encode3,
  toASCII,
  toUnicode
};
var punycode_es6_default = punycode;

// node_modules/markdown-it/lib/presets/default.mjs
var default_default = {
  options: {
    html: false,
    xhtmlOut: false,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
};

// node_modules/markdown-it/lib/presets/zero.mjs
var zero_default = {
  options: {
    html: false,
    xhtmlOut: false,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
};

// node_modules/markdown-it/lib/presets/commonmark.mjs
var commonmark_default = {
  options: {
    html: true,
    xhtmlOut: true,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
};

// node_modules/markdown-it/lib/index.mjs
var validateLink = function(url) {
  const str = url.trim().toLowerCase();
  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;
};
var normalizeLink = function(url) {
  const parsed = parse_default(url, true);
  if (parsed.hostname) {
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6_default.toASCII(parsed.hostname);
      } catch (er2) {
      }
    }
  }
  return encode_default(format(parsed));
};
var normalizeLinkText = function(url) {
  const parsed = parse_default(url, true);
  if (parsed.hostname) {
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6_default.toUnicode(parsed.hostname);
      } catch (er2) {
      }
    }
  }
  return decode_default(format(parsed), decode_default.defaultChars + "%");
};
var MarkdownIt = function(presetName, options) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options);
  }
  if (!options) {
    if (!isString(presetName)) {
      options = presetName || {};
      presetName = "default";
    }
  }
  this.inline = new parser_inline_default;
  this.block = new parser_block_default;
  this.core = new parser_core_default;
  this.renderer = new renderer_default;
  this.linkify = new linkify_it_default;
  this.validateLink = validateLink;
  this.normalizeLink = normalizeLink;
  this.normalizeLinkText = normalizeLinkText;
  this.utils = exports_utils2;
  this.helpers = assign({}, exports_helpers);
  this.options = {};
  this.configure(presetName);
  if (options) {
    this.set(options);
  }
};
var config = {
  default: default_default,
  zero: zero_default,
  commonmark: commonmark_default
};
var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
MarkdownIt.prototype.set = function(options) {
  assign(this.options, options);
  return this;
};
MarkdownIt.prototype.configure = function(presets) {
  const self = this;
  if (isString(presets)) {
    const presetName = presets;
    presets = config[presetName];
    if (!presets) {
      throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
    }
  }
  if (!presets) {
    throw new Error("Wrong `markdown-it` preset, can\'t be empty");
  }
  if (presets.options) {
    self.set(presets.options);
  }
  if (presets.components) {
    Object.keys(presets.components).forEach(function(name) {
      if (presets.components[name].rules) {
        self[name].ruler.enableOnly(presets.components[name].rules);
      }
      if (presets.components[name].rules2) {
        self[name].ruler2.enableOnly(presets.components[name].rules2);
      }
    });
  }
  return this;
};
MarkdownIt.prototype.enable = function(list3, ignoreInvalid) {
  let result = [];
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  ["core", "block", "inline"].forEach(function(chain) {
    result = result.concat(this[chain].ruler.enable(list3, true));
  }, this);
  result = result.concat(this.inline.ruler2.enable(list3, true));
  const missed = list3.filter(function(name) {
    return result.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
  }
  return this;
};
MarkdownIt.prototype.disable = function(list3, ignoreInvalid) {
  let result = [];
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  ["core", "block", "inline"].forEach(function(chain) {
    result = result.concat(this[chain].ruler.disable(list3, true));
  }, this);
  result = result.concat(this.inline.ruler2.disable(list3, true));
  const missed = list3.filter(function(name) {
    return result.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
  }
  return this;
};
MarkdownIt.prototype.use = function(plugin) {
  const args = [this].concat(Array.prototype.slice.call(arguments, 1));
  plugin.apply(plugin, args);
  return this;
};
MarkdownIt.prototype.parse = function(src, env) {
  if (typeof src !== "string") {
    throw new Error("Input data should be a String");
  }
  const state = new this.core.State(src, this, env);
  this.core.process(state);
  return state.tokens;
};
MarkdownIt.prototype.render = function(src, env) {
  env = env || {};
  return this.renderer.render(this.parse(src, env), this.options, env);
};
MarkdownIt.prototype.parseInline = function(src, env) {
  const state = new this.core.State(src, this, env);
  state.inlineMode = true;
  this.core.process(state);
  return state.tokens;
};
MarkdownIt.prototype.renderInline = function(src, env) {
  env = env || {};
  return this.renderer.render(this.parseInline(src, env), this.options, env);
};
var lib_default = MarkdownIt;
// node_modules/highlight.js/es/index.js
var lib2 = __toESM(require_lib2(), 1);
var es_default = lib2.default;

// src/converter.ts
var convertUsingMarkdownIt = (mdString) => {
  const markdown = lib_default({
    html: true,
    highlight: function(str, lang) {
      if (lang && es_default.getLanguage(lang)) {
        try {
          return es_default.highlight(str, { language: lang }).value;
        } catch (__) {
        }
      }
      return "";
    }
  });
  return markdown.render(mdString);
};

// src/mappers.ts
var extractContents = async (markdownPaths) => {
  const mdFileRegex = /\.md$/i;
  const parsedFiles = markdownPaths.filter((filepath) => mdFileRegex.test(filepath)).map(async (mdpath) => {
    const file = Bun.file(mdpath);
    const fileText = await file.text();
    return extractFrontmatter(fileText);
  });
  return Promise.all(parsedFiles);
};
var extractFrontmatter = (markdown) => {
  const delimiter2 = "---";
  const parts = markdown.split(delimiter2);
  const markdownString = parts.slice(2).concat().join();
  const yamlData = {
    content: convertUsingMarkdownIt(markdownString),
    title: "",
    date: new Date("1994-01-31T00:00:00Z"),
    author: "",
    categories: [],
    slug: "",
    image: "",
    draft: false,
    type: TYPE_POST
  };
  if (parts.length > 2) {
    const yamlString = parts[1].trim();
    yamlString.split("\n").forEach((line) => {
      const [key, value] = line.split(":").map((item) => item.trim());
      if (key === "categories") {
        const categoriesData = Array.isArray(JSON.parse(value)) ? JSON.parse(value) : [];
        yamlData["categories"] = categoriesData;
      }
      if (key === "date") {
        yamlData["date"] = new Date(value);
      }
      if (key === "draft") {
        if (value === "true") {
          yamlData["draft"] = true;
        } else if (value === "false") {
          yamlData["draft"] = false;
        }
      }
      if (key === "type" && (value === TYPE_POST || value === TYPE_PAGE)) {
        yamlData["type"] = value;
      }
      if (key === "slug") {
        const slugString = convertToSlug(value);
        yamlData["slug"] = RESERVED_SLUG.includes(slugString) ? convertToSlug(`${yamlData.title} ${generateRandomString()}`) : slugString;
      }
      if (key === "title" || key === "author" || key === "image") {
        yamlData[key] = String(value).replace(/['"`]/g, "");
      }
    });
  }
  return yamlData;
};
var mapContentPerPage = (sortedContents) => {
  const contentLength = sortedContents.length;
  const contentPerPage = [];
  for (let i = 0;i < contentLength; i += perPage) {
    contentPerPage.push(sortedContents.slice(i, i + perPage));
  }
  return contentPerPage;
};
var mapHomeLinks = (distDir, page, maxPage) => {
  const htmlHomePath = `${distDir}/index.html`;
  const htmlPagePath = `${distDir}/page/${page}/index.html`;
  const nextPage = `/page/${page + 1}`;
  const prevPage = `/page/${page - 1}`;
  if (page === 1) {
    return {
      target: htmlHomePath,
      prev: "",
      next: nextPage
    };
  }
  return {
    target: htmlPagePath,
    prev: page === 2 ? `/` : prevPage,
    next: page === maxPage ? "" : nextPage
  };
};
var mapLocalRoute = (paths) => {
  const routes = paths.map((route) => {
    const keyString = route.split(`/dist`)[1];
    const key = keyString === "/index.html" ? "/" : keyString.replace(/\/index\.html$/, "");
    const value = route;
    return { [key]: value };
  });
  return Object.assign({}, ...routes);
};
var mapCategories = (contents) => {
  let categoriesMap = {};
  contents.forEach((post) => {
    post.categories.forEach((category) => {
      const formattedCategory = convertToSlug(category);
      if (categoriesMap[formattedCategory]) {
        categoriesMap[formattedCategory] = [
          ...categoriesMap[formattedCategory],
          post
        ];
      } else {
        categoriesMap[formattedCategory] = [post];
      }
    });
  });
  return categoriesMap;
};

// src/writer.ts
var writePostHtmls = async (contents) => {
  contents.forEach(async (obj) => {
    const html = PostUI_default(obj);
    const htmlFilePath = `${PATH_DIST_DIR}/post/${obj.slug}/index.html`;
    await Bun.write(htmlFilePath, simpleMinifier(html));
  });
};
var writeHomeHtmls = async (sortedContents) => {
  const contentPerPage = mapContentPerPage(sortedContents);
  for (let page = 1;page < contentPerPage.length + 1; page += 1) {
    const index = page - 1;
    const { target, prev, next } = mapHomeLinks(PATH_DIST_DIR, page, contentPerPage.length);
    const html = HomeUI_default(contentPerPage[index], prev, next);
    await Bun.write(target, simpleMinifier(html));
  }
};
var writeCategoriesHtml = async (contents) => {
  const categoriesMap = mapCategories(contents);
  await writeMainCategoriesPage(categoriesMap);
  await writeEachCategoriesPage(categoriesMap);
};
var writeMainCategoriesPage = async (categoriesMap) => {
  const path = `${PATH_DIST_DIR}/categories/index.html`;
  const categories = Object.keys(categoriesMap);
  const categoriesLink = categories.map((category) => {
    return String.raw`
      <a href="/categories/${category}">${category}</a>
      <br />
    `;
  }).join("");
  const html = PageUI_default(categoriesLink, "Categories");
  await Bun.write(path, simpleMinifier(html));
};
var writeEachCategoriesPage = async (categoriesMap) => {
  const categories = Object.keys(categoriesMap);
  categories.forEach(async (category) => {
    const categoryData = categoriesMap[category];
    const postByCategoryLink = categoryData.map((post) => {
      return String.raw`
        <a href="/post/${post.slug}">${post.title}</a>
        <br />
        `;
    }).join("");
    const path = `${PATH_DIST_DIR}/categories/${category}/index.html`;
    const html = PageUI_default(postByCategoryLink, `Category: ${category}`);
    await Bun.write(path, simpleMinifier(html));
  });
};
var writeSinglePages = async (contents) => {
  contents.forEach(async (obj) => {
    const html = PageUI_default(obj.content, obj.title);
    const htmlFilePath = `${PATH_DIST_DIR}/${obj.slug}/index.html`;
    await Bun.write(htmlFilePath, simpleMinifier(html));
  });
};
var writeAssets = async (paths) => {
  paths.forEach(async (path) => {
    const file = Bun.file(path);
    const filename = path.replace(`${PATH_ASSET_DIR}/`, "");
    if (hasFileExtension(filename)) {
      await Bun.write(`${PATH_ASSET_DIST_DIR}/${filename}`, file);
    }
  });
};

// src/build.ts
var ROUTES = {};
var buildDistribution = async () => {
  const markdownPaths = await getFilePaths(PATH_CONTENT_DIR);
  const parsedFiles = await extractContents(markdownPaths);
  const contents = parsedFiles.filter((content) => content.draft === false).sort((contentA, contentB) => {
    return contentB.date.getTime() - contentA.date.getTime();
  });
  const postContents = contents.filter((content) => content.type === TYPE_POST);
  const pageContents = contents.filter((content) => content.type === TYPE_PAGE);
  await writeHomeHtmls(postContents);
  await writePostHtmls(postContents);
  await writeCategoriesHtml(postContents);
  await writeSinglePages(pageContents);
};
var buildLocalRoutes = async () => {
  const distPaths = await getFilePaths(PATH_DIST_DIR);
  ROUTES = mapLocalRoute(distPaths);
};
var buildAssets = async () => {
  const assetPaths = await getFilePaths(PATH_ASSET_DIR);
  await writeAssets(assetPaths);
};
var buildCss = async () => {
  Bun.spawn(["bun", "run", "tailwind"]);
};
var compileAll = async () => {
  await countPerformance(buildDistribution, "distribution");
  await buildCss();
  await countPerformance(buildAssets, "assets");
  await buildLocalRoutes();
};

// index.ts
await compileAll();
var isLocalServer = Bun.argv.includes("--local-server");
if (isLocalServer) {
  const throttledCompileAll = throttle(compileAll, 1e4);
  const watcher = watch(PATH_ENTRY_DIR, { recursive: true }, (_event, filename) => {
    if (typeof filename === "string") {
      throttledCompileAll();
    }
  });
  console.log(`Server is listening at PORT: ${PORT}`);
  Bun.serve({
    port: PORT,
    fetch: function(request) {
      const { pathname } = new URL(request.url);
      if (request.method === "GET" && ROUTES[pathname]) {
        return new Response(Bun.file(ROUTES[pathname]));
      }
      return new Response(Bun.file(ROUTES["/404"]));
    },
    error: function() {
      return new Response(Bun.file(ROUTES["/404"]));
    }
  });
  process.on("SIGINT", () => {
    console.log("Closing watcher...");
    watcher.close();
    process.exit(0);
  });
}
